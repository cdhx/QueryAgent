[
    {
        "qid": "WebQTest-0",
        "question": "what does jamaican people speak",
        "answer": [
            "m.04ygk0",
            "m.01428y"
        ],
        "different_answer": [
            [
                "m.04ygk0",
                "m.01428y"
            ],
            [
                "m.01428y"
            ]
        ],
        "entity_linking": {
            "Jamaica": "m.03_r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_r3')\na.add_fact('m.03_r3', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1",
        "question": "what did james k polk do before he was president",
        "answer": [
            "m.0cgqx",
            "m.02_bcst",
            "m.04x_n9q"
        ],
        "different_answer": [
            [
                "m.0cgqx",
                "m.02_bcst",
                "m.04x_n9q"
            ]
        ],
        "entity_linking": {
            "James K. Polk": "m.042f1"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  {\n    SELECT ?pFrom \n    WHERE {\n      ns:m.042f1 ns:government.politician.government_positions_held ?y . # James K. Polk\n      ?y ns:government.government_position_held.office_position_or_title ?x ; \n         ns:government.government_position_held.basic_title ns:m.060c4 ; # President\n         ns:government.government_position_held.from ?pFrom .\n    }\n  }\n  ns:m.042f1 ns:government.politician.government_positions_held ?y . # James K. Polk\n  ?y ns:government.government_position_held.office_position_or_title ?x ; \n     ns:government.government_position_held.from ?from .\n  \n  FILTER(xsd:dateTime(?pFrom) - xsd:dateTime(?from) > 0)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-3",
        "question": "who plays ken barlow in coronation street",
        "answer": [
            "m.01j_gs"
        ],
        "different_answer": [
            [
                "m.01j_gs"
            ]
        ],
        "entity_linking": {
            "Coronation Street": "m.01_2n",
            "Ken Barlow": "m.015lwh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_2n ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.015lwh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015lwh')\na.add_filter('x0', '!=', 'm.01_2n')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.015lwh')\na.add_fact('m.01_2n', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-6",
        "question": "where is jamarcus russell from",
        "answer": [
            "m.058cm"
        ],
        "different_answer": [
            [
                "m.058cm"
            ]
        ],
        "entity_linking": {
            "JaMarcus Russell": "m.0cjcdj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cjcdj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cjcdj ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cjcdj')\na.add_fact('m.0cjcdj', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-7",
        "question": "where was george washington carver from",
        "answer": [
            "m.0xhsh"
        ],
        "different_answer": [
            [
                "m.0xhsh"
            ]
        ],
        "entity_linking": {
            "George Washington Carver": "m.03djm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03djm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03djm ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03djm')\na.add_fact('m.03djm', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-8",
        "question": "what else did ben franklin invent",
        "answer": [
            "m.013cqs",
            "m.01zh8g",
            "m.0135nr",
            "m.029mmz"
        ],
        "different_answer": [
            [
                "m.013cqs",
                "m.01zh8g",
                "m.0135nr",
                "m.029mmz"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-9",
        "question": "who was richard nixon married to",
        "answer": [
            "m.023v03"
        ],
        "different_answer": [
            [
                "m.023v03"
            ]
        ],
        "entity_linking": {
            "Richard Nixon": "m.06c97",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.06c97')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.06c97', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-12",
        "question": "who is governor of ohio 2011",
        "answer": [
            "m.02zzm_",
            "m.039rqy",
            "m.0340r0"
        ],
        "different_answer": [
            [
                "m.02zzm_",
                "m.039rqy",
                "m.0340r0"
            ]
        ],
        "entity_linking": {
            "Ohio": "m.05kkh",
            "Governor": "m.0fkvn",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kkh ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.05kkh')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.05kkh', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-13",
        "question": "who was vice president after kennedy died",
        "answer": [
            "m.0f7fy"
        ],
        "different_answer": [
            [
                "m.0f7fy"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('m.0d3k14', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-14",
        "question": "where is the fukushima daiichi nuclear plant located",
        "answer": [
            "m.03_3d",
            "m.03k_g5"
        ],
        "different_answer": [
            [
                "m.03_3d",
                "m.03k_g5"
            ]
        ],
        "entity_linking": {
            "Fukushima Daiichi Nuclear Power Plant": "m.02vkzy2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vkzy2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vkzy2 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vkzy2')\na.add_fact('m.02vkzy2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-16",
        "question": "what countries are part of the uk",
        "answer": [
            "m.02jx1",
            "m.05bcl",
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc",
            "UK constituent country": "m.0hzjlmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:m.0hzjlmp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzjlmp')\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('x0', 'base.aareas.schema.administrative_area.administrative_area_type', 'm.0hzjlmp')\na.add_fact('m.07ssc', 'base.aareas.schema.administrative_area.administrative_children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-19",
        "question": "what is my timezone in louisiana",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Louisiana": "m.04ly1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ly1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ly1 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ly1')\na.add_fact('m.04ly1', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-20",
        "question": "what did st augustine do",
        "answer": [
            "m.02h6fbs",
            "m.0cbd2",
            "m.05t4q"
        ],
        "different_answer": [
            [
                "m.02h6fbs",
                "m.0cbd2",
                "m.05t4q"
            ]
        ],
        "entity_linking": {
            "Augustine of Hippo": "m.0w6w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0w6w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0w6w ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0w6w')\na.add_fact('m.0w6w', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-21",
        "question": "who is keyshia cole dad",
        "answer": [
            "m.0n9hj_f",
            "m.0wq93rk",
            "m.0n9hk0h"
        ],
        "different_answer": [
            [
                "m.0n9hj_f",
                "m.0wq93rk",
                "m.0n9hk0h"
            ]
        ],
        "entity_linking": {
            "Keyshia Cole": "m.01pkxs9",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pkxs9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pkxs9 ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.01pkxs9')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.01pkxs9', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-22",
        "question": "what kind government does egypt have",
        "answer": [
            "m.02tz3y",
            "m.01dw03"
        ],
        "different_answer": [
            [
                "m.02tz3y",
                "m.01dw03"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-23",
        "question": "what town was martin luther king assassinated in",
        "answer": [
            "m.0c_m3"
        ],
        "different_answer": [
            [
                "m.0c_m3"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-24",
        "question": "where did edgar allan poe died",
        "answer": [
            "m.094jv"
        ],
        "different_answer": [
            [
                "m.094jv"
            ]
        ],
        "entity_linking": {
            "Edgar Allan Poe": "m.02lt8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lt8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lt8 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lt8')\na.add_fact('m.02lt8', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-26",
        "question": "what to do today in atlanta with kids",
        "answer": [
            "m.039xmp",
            "m.03xrf5",
            "m.04d135",
            "m.03l1zc",
            "m.04htb5",
            "m.033h7k",
            "m.02wl1b",
            "m.03wm34",
            "m.03spbl",
            "m.0j28sdt",
            "m.027r6hr",
            "m.050n0y",
            "m.03cspcp",
            "m.020fp1",
            "m.050mtz",
            "m.0130ft",
            "m.0b5g4p",
            "m.05c25f2",
            "m.03sm22",
            "m.050m_5",
            "m.02xmrp",
            "m.04qrhq",
            "m.02jnft",
            "m.027t71h",
            "m.06bxs4",
            "m.03q1hw",
            "m.038gvs",
            "m.04jny9",
            "m.050my1",
            "m.038bv6",
            "m.0gln9p",
            "m.04_mbv",
            "m.0fpmfg",
            "m.029fnx",
            "m.030pkm",
            "m.0c3cp2"
        ],
        "different_answer": [
            [
                "m.039xmp",
                "m.03xrf5",
                "m.04d135",
                "m.03l1zc",
                "m.04htb5",
                "m.033h7k",
                "m.02wl1b",
                "m.03wm34",
                "m.03spbl",
                "m.0j28sdt",
                "m.027r6hr",
                "m.050n0y",
                "m.03cspcp",
                "m.020fp1",
                "m.050mtz",
                "m.0130ft",
                "m.0b5g4p",
                "m.05c25f2",
                "m.03sm22",
                "m.050m_5",
                "m.02xmrp",
                "m.04qrhq",
                "m.02jnft",
                "m.027t71h",
                "m.06bxs4",
                "m.03q1hw",
                "m.038gvs",
                "m.04jny9",
                "m.050my1",
                "m.038bv6",
                "m.0gln9p",
                "m.04_mbv",
                "m.0fpmfg",
                "m.029fnx",
                "m.030pkm",
                "m.0c3cp2"
            ]
        ],
        "entity_linking": {
            "Atlanta": "m.013yq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013yq ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013yq')\na.add_fact('m.013yq', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-28",
        "question": "what electorate does anna bligh represent",
        "answer": [
            "m.026q11g"
        ],
        "different_answer": [
            [
                "m.026q11g"
            ]
        ],
        "entity_linking": {
            "Anna Bligh": "m.072_m3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.072_m3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.072_m3 ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.district_represented ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.072_m3')\na.add_fact('m.072_m3', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.district_represented', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-31",
        "question": "where did andy murray started playing tennis",
        "answer": [
            "2005-08:00"
        ],
        "different_answer": [
            [
                "2005-08:00"
            ]
        ],
        "entity_linking": {
            "Andy Murray": "m.03wc52"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wc52)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wc52 ns:tennis.tennis_player.year_turned_pro ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03wc52')\na.add_fact('m.03wc52', 'tennis.tennis_player.year_turned_pro', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-32",
        "question": "what is the australian dollar called",
        "answer": [
            "AUD"
        ],
        "different_answer": [
            [
                "AUD"
            ]
        ],
        "entity_linking": {
            "Australian dollar": "m.0kz1h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0kz1h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0kz1h ns:finance.currency.currency_code ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kz1h')\na.add_fact('m.0kz1h', 'finance.currency.currency_code', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-33",
        "question": "what timezone is sweden",
        "answer": [
            "m.02llzg"
        ],
        "different_answer": [
            [
                "m.02llzg"
            ]
        ],
        "entity_linking": {
            "Sweden": "m.0d0vqn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d0vqn')\na.add_fact('m.0d0vqn', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-34",
        "question": "who did cam newton sign with",
        "answer": [
            "m.01y3c"
        ],
        "different_answer": [
            [
                "m.01y3c"
            ],
            [
                "m.01y3c"
            ]
        ],
        "entity_linking": {
            "Cam Newton": "m.02phnp7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02phnp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02phnp7 ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02phnp7')\na.add_fact('m.02phnp7', 'base.schemastaging.athlete_extra.salary', 'x1')\na.add_fact('x1', 'base.schemastaging.athlete_salary.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-35",
        "question": "what county is frederick md in",
        "answer": [
            "m.0cc07"
        ],
        "different_answer": [
            [
                "m.0cc07"
            ],
            [
                "m.0cc07"
            ]
        ],
        "entity_linking": {
            "Frederick": "m.0dhml"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dhml)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dhml ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dhml')\na.add_fact('m.0dhml', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-36",
        "question": "what highschool did harper lee go to",
        "answer": [
            "m.0crdc8g"
        ],
        "different_answer": [
            [
                "m.0crdc8g"
            ]
        ],
        "entity_linking": {
            "Harper Lee": "m.01bq7x",
            "High school": "m.0bpgx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq7x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:m.0bpgx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bpgx')\na.add_filter('x0', '!=', 'm.01bq7x')\na.add_fact('x0', 'education.educational_institution.school_type', 'm.0bpgx')\na.add_fact('m.01bq7x', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-37",
        "question": "what timezone is utah in",
        "answer": [
            "m.02hczc"
        ],
        "different_answer": [
            [
                "m.02hczc"
            ]
        ],
        "entity_linking": {
            "Utah": "m.07srw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07srw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07srw ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07srw')\na.add_fact('m.07srw', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-38",
        "question": "who did george w. bush run against for the second term",
        "answer": [
            "m.0d3qd0",
            "m.06dnh",
            "m.033tf9",
            "m.03vyyd"
        ],
        "different_answer": [
            [
                "m.0d3qd0",
                "m.06dnh",
                "m.033tf9",
                "m.03vyyd"
            ]
        ],
        "entity_linking": {
            "George W. Bush": "m.09b6zr"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.04qwhs ns:government.election.campaigns ?y .\n\t?y ns:government.election_campaign.candidate ?x .\nFILTER (?x != ns:m.09b6zr)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-39",
        "question": "who is niall ferguson 's wife",
        "answer": [
            "m.03k5sq"
        ],
        "different_answer": [
            [
                "m.03k5sq"
            ]
        ],
        "entity_linking": {
            "Niall Ferguson": "m.033mkn",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033mkn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033mkn ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.033mkn')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.033mkn', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-41",
        "question": "where is the galapagos islands located on a world map",
        "answer": [
            "m.02k1b",
            "m.03660b",
            "m.05rgl"
        ],
        "different_answer": [
            [
                "m.02k1b",
                "m.03660b",
                "m.05rgl"
            ]
        ],
        "entity_linking": {
            "Gal\u00e1pagos Islands": "m.016zjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016zjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016zjj ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016zjj')\na.add_fact('m.016zjj', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-42",
        "question": "what are the songs that justin bieber wrote",
        "answer": [
            "m.0qfpkqq",
            "m.0bmc2ql",
            "m.0fqlv5l",
            "m.0y6b7k5",
            "m.0yt3zg2",
            "m.0g5q9ky",
            "m.0bbz4p9",
            "m.0k0l2vf",
            "m.0zbv_v0",
            "m.0zmzvrc",
            "m.0j4453t",
            "m.0c3vvnk",
            "m.0z6sgcx",
            "m.0zgb5ny",
            "m.0yt1lb9",
            "m.0ynrkyl",
            "m.0g5b0p2",
            "m.012k_48s",
            "m.0rytzvz",
            "m.0jxk_hq",
            "m.0zg6nnd",
            "m.0jwqwyx",
            "m.0bbvzq2",
            "m.09v3gb4",
            "m.0jxk_kq",
            "m.0j64n8c",
            "m.0jwx2_w",
            "m.0zdkrym",
            "m.0116pj4q",
            "m.0jxkzb9",
            "m.0yt3yyw"
        ],
        "different_answer": [
            [
                "m.0qfpkqq",
                "m.0bmc2ql",
                "m.0fqlv5l",
                "m.0y6b7k5",
                "m.0yt3zg2",
                "m.0g5q9ky",
                "m.0bbz4p9",
                "m.0k0l2vf",
                "m.0zbv_v0",
                "m.0zmzvrc",
                "m.0j4453t",
                "m.0c3vvnk",
                "m.0z6sgcx",
                "m.0zgb5ny",
                "m.0yt1lb9",
                "m.0ynrkyl",
                "m.0g5b0p2",
                "m.012k_48s",
                "m.0rytzvz",
                "m.0jxk_hq",
                "m.0zg6nnd",
                "m.0jwqwyx",
                "m.0bbvzq2",
                "m.09v3gb4",
                "m.0jxk_kq",
                "m.0j64n8c",
                "m.0jwx2_w",
                "m.0zdkrym",
                "m.0116pj4q",
                "m.0jxkzb9",
                "m.0yt3yyw"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:music.composer.compositions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w2sn5')\na.add_fact('m.06w2sn5', 'music.composer.compositions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-43",
        "question": "what did george clemenceau do",
        "answer": [
            "m.0d8qb",
            "m.02h668d",
            "m.016fc2",
            "m.0cbd2",
            "m.05t4q"
        ],
        "different_answer": [
            [
                "m.0d8qb",
                "m.02h668d",
                "m.016fc2",
                "m.0cbd2",
                "m.05t4q"
            ]
        ],
        "entity_linking": {
            "Georges Cl\u00e9menceau": "m.0hff8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hff8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hff8 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hff8')\na.add_fact('m.0hff8', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-44",
        "question": "what is the state flower of arizona",
        "answer": [
            "m.0m5w_"
        ],
        "different_answer": [
            [
                "m.0m5w_"
            ]
        ],
        "entity_linking": {
            "Arizona": "m.0vmt",
            "State flower": "m.04627gn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627gn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04627gn')\na.add_filter('x0', '!=', 'm.0vmt')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.04627gn')\na.add_fact('m.0vmt', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-45",
        "question": "where was rihanna born and raised",
        "answer": [
            "m.02p5kp"
        ],
        "different_answer": [
            [
                "m.02p5kp"
            ]
        ],
        "entity_linking": {
            "Rihanna": "m.06mt91"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mt91')\na.add_fact('m.06mt91', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-46",
        "question": "what year did president william henry harrison take office",
        "answer": [
            "1841-03-04-08:00"
        ],
        "different_answer": [
            [
                "1841-03-04-08:00"
            ]
        ],
        "entity_linking": {
            "William Henry Harrison": "m.0835q",
            "President of the United States": "m.060d2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0835q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0835q ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.060d2 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060d2')\na.add_filter('x0', '!=', 'm.0835q')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.060d2')\na.add_fact('m.0835q', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-47",
        "question": "where george lopez was born",
        "answer": [
            "m.01kfz0"
        ],
        "different_answer": [
            [
                "m.01kfz0"
            ]
        ],
        "entity_linking": {
            "George Lopez": "m.02xfj0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xfj0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xfj0 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xfj0')\na.add_fact('m.02xfj0', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-48",
        "question": "where are samsung based",
        "answer": [
            "m.02j2b1"
        ],
        "different_answer": [
            [
                "m.02j2b1"
            ]
        ],
        "entity_linking": {
            "Samsung Group": "m.07gv72"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07gv72)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07gv72 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07gv72')\na.add_fact('m.07gv72', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-49",
        "question": "what did the islamic people believe in",
        "answer": [
            "m.01bbmp",
            "m.07r6vw",
            "m.024b22",
            "m.074hw",
            "m.0hr6vbp",
            "m.06rvp0",
            "m.019vqj",
            "m.07bfrc",
            "m.0698fs",
            "m.025w817",
            "m.04xy3",
            "m.02wvcg4",
            "m.09kb_2"
        ],
        "different_answer": [
            [
                "m.01bbmp",
                "m.07r6vw",
                "m.024b22",
                "m.074hw",
                "m.0hr6vbp",
                "m.06rvp0",
                "m.019vqj",
                "m.07bfrc",
                "m.0698fs",
                "m.025w817",
                "m.04xy3",
                "m.02wvcg4",
                "m.09kb_2"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.beliefs ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.beliefs', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-51",
        "question": "who will play mr gray in the film",
        "answer": [
            "m.0fs4kv"
        ],
        "different_answer": [
            [
                "m.0fs4kv"
            ]
        ],
        "entity_linking": {
            "Christian Grey": "m.0nfjvrm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nfjvrm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nfjvrm ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0nfjvrm')\na.add_fact('m.0nfjvrm', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-52",
        "question": "what did george orwell died of",
        "answer": [
            "m.07jwr"
        ],
        "different_answer": [
            [
                "m.07jwr"
            ]
        ],
        "entity_linking": {
            "George Orwell": "m.034bs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034bs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034bs ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034bs')\na.add_fact('m.034bs', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-54",
        "question": "what country did adolf hitler control",
        "answer": [
            "m.059z0"
        ],
        "different_answer": [
            [
                "m.059z0"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.jurisdiction_of_office', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-55",
        "question": "who is michael buble",
        "answer": [
            "m.0nbcg",
            "m.02hrh1q",
            "m.09l65"
        ],
        "different_answer": [
            [
                "m.0nbcg",
                "m.02hrh1q",
                "m.09l65"
            ]
        ],
        "entity_linking": {
            "Michael Bubl\u00e9": "m.02xkkq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xkkq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xkkq ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xkkq')\na.add_fact('m.02xkkq', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-56",
        "question": "what county is kansas city kansas",
        "answer": [
            "m.0nnyr"
        ],
        "different_answer": [
            [
                "m.0nnyr"
            ],
            [
                "m.0nnyr"
            ],
            [
                "m.0nnyr"
            ]
        ],
        "entity_linking": {
            "Kansas City": "m.0tcj6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tcj6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tcj6 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0tcj6')\na.add_fact('m.0tcj6', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-58",
        "question": "who did jackie robinson first play for",
        "answer": [
            "m.0fbtm7"
        ],
        "different_answer": [
            [
                "m.0fbtm7"
            ]
        ],
        "entity_linking": {
            "Jackie Robinson": "m.0443c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0443c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0443c ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y ns:sports.sports_team_roster.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0443c')\na.add_fact('m.0443c', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-59",
        "question": "when did annie open",
        "answer": [
            "1976-08-10-08:00"
        ],
        "different_answer": [
            [
                "1976-08-10-08:00"
            ]
        ],
        "entity_linking": {
            "Annie": "m.01_1m4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_1m4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_1m4 ns:theater.play.date_of_first_performance ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01_1m4')\na.add_fact('m.01_1m4', 'theater.play.date_of_first_performance', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-60",
        "question": "where did eleanor roosevelt die",
        "answer": [
            "m.0cc56"
        ],
        "different_answer": [
            [
                "m.0cc56"
            ]
        ],
        "entity_linking": {
            "Eleanor Roosevelt": "m.02n9k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02n9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02n9k ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02n9k')\na.add_fact('m.02n9k', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-61",
        "question": "what are the religions practiced in indonesia",
        "answer": [
            "m.0flw86",
            "m.05sfs",
            "m.0c8wxp",
            "m.03j6c"
        ],
        "different_answer": [
            [
                "m.0flw86",
                "m.05sfs",
                "m.0c8wxp",
                "m.03j6c"
            ]
        ],
        "entity_linking": {
            "Indonesia": "m.03ryn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ryn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ryn ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ryn')\na.add_fact('m.03ryn', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-62",
        "question": "what was jesse james killed with",
        "answer": [
            "m.034qg"
        ],
        "different_answer": [
            [
                "m.034qg"
            ]
        ],
        "entity_linking": {
            "Jesse James": "m.02khkd",
            "\"Firearms\"": "\"Firearms\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02khkd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02khkd ns:people.deceased_person.cause_of_death ?x .\n?x ns:freebase.linguistic_hint.subject_form ?sk0 .\nFILTER (str(?sk0) = \"Firearms\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02khkd')\na.add_fact('x0', 'freebase.linguistic_hint.subject_form', '\"Firearms\"^^xsd:string')\na.add_fact('m.02khkd', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-63",
        "question": "who was vp for lincoln",
        "answer": [
            "m.0rmg",
            "m.03mpk"
        ],
        "different_answer": [
            [
                "m.0rmg",
                "m.03mpk"
            ]
        ],
        "entity_linking": {
            "Abraham Lincoln": "m.0gzh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gzh')\na.add_fact('m.0gzh', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-64",
        "question": "what other books did charles dickens write",
        "answer": [
            "m.059ck0z",
            "m.04yqb2y",
            "m.04v018m",
            "m.04v0wy1",
            "m.04t_ddb",
            "m.04v5vcc",
            "m.059ck2r",
            "m.04v0v5p",
            "m.04yqb0l",
            "m.04yqbcn",
            "m.04v00pl",
            "m.059ckdn",
            "m.059cjq4",
            "m.04yqb44",
            "m.04yqbsz",
            "m.059ck23",
            "m.04yqbt8",
            "m.04v00q2",
            "m.04v00xn",
            "m.04yqbcz",
            "m.04yqb5n",
            "m.059ck17",
            "m.04v0wzg",
            "m.04tzxfk",
            "m.059cjq_",
            "m.04yqbl6",
            "m.059ckcr",
            "m.04yqb1f",
            "m.04t_dfr",
            "m.04v07ly",
            "m.04yqbs1",
            "m.04yqb51",
            "m.04yqbx2",
            "m.04v00vg",
            "m.04yqbd8",
            "m.04yqbhj",
            "m.059cjv6",
            "m.059cjwd",
            "m.04v07mp",
            "m.04yqb3k",
            "m.059cjmv",
            "m.04v00r8",
            "m.04v01df",
            "m.04v00st",
            "m.059cjmj",
            "m.04v0v8h",
            "m.04v0v72",
            "m.04v4zbs",
            "m.04v2xs6",
            "m.04yqb1q",
            "m.04yqb8r",
            "m.059ck82",
            "m.059cj_j",
            "m.04t_kpq",
            "m.04yqb6v",
            "m.04yqbfs",
            "m.04yqbny",
            "m.04v01gv",
            "m.04yqbdl",
            "m.04v_cp5",
            "m.04yqb4g",
            "m.04v02z9",
            "m.059cjsq",
            "m.04yqbh7",
            "m.04v0v7k",
            "m.04yqb6k",
            "m.059ck61",
            "m.04yqb81",
            "m.059cjqf",
            "m.04yqbjz",
            "m.04v0rm8",
            "m.059ck3y",
            "m.04yqbgz",
            "m.04v017p",
            "m.04yqbr3",
            "m.051jjhl",
            "m.059ck5r",
            "m.059cjlp",
            "m.04v5p3v",
            "m.059cjxl",
            "m.04yqbdw",
            "m.04v03d5",
            "m.04v0176",
            "m.051jjk7",
            "m.059ck2f",
            "m.04yqbfg",
            "m.059cjvj",
            "m.04v01h9",
            "m.059ck8p",
            "m.04yqblj",
            "m.04v0rnd",
            "m.04yqby0",
            "m.059ck8_",
            "m.04yqbvj",
            "m.04tztjz",
            "m.059ck02",
            "m.04v07nn",
            "m.059ck8d",
            "m.04yqbht",
            "m.04yqb74",
            "m.059cjpw",
            "m.059ck9k",
            "m.04v0v8z",
            "m.04yqbxd",
            "m.04v07q1",
            "m.04v_ggt",
            "m.04v301v",
            "m.059cjnd",
            "m.04t_kp7",
            "m.059cj_7",
            "m.04yqbm3",
            "m.051jjjh",
            "m.04v0ws9",
            "m.04v01fd",
            "m.04t_dcd",
            "m.04v5p3f",
            "m.059ckc3",
            "m.04v07k8",
            "m.059ck0p",
            "m.028y4jr",
            "m.04v00s0",
            "m.059cjs3",
            "m.059cjw3",
            "m.04v05lp",
            "m.04v03wk",
            "m.04t_hj1",
            "m.04tztj0",
            "m.04v0rnw",
            "m.04yqb2m",
            "m.04t_hjf",
            "m.04yqbtx",
            "m.04v2xv2",
            "m.04v07pl",
            "m.04tzqjs",
            "m.04v5y5v",
            "m.04v2xtm",
            "m.04v00yl",
            "m.04yqb67",
            "m.04yqbbg",
            "m.04yqbm_",
            "m.04v01dx",
            "m.04v0rlt",
            "m.059cjx9",
            "m.059ckcf",
            "m.059cjld",
            "m.04v0wwg",
            "m.04v0wt5",
            "m.059ck3m",
            "m.059ck98",
            "m.04yqbbr",
            "m.04yqb91",
            "m.051jjk_",
            "m.04yqb14",
            "m.04v504r",
            "m.04v5vbn",
            "m.04yqbcb",
            "m.04yqbrr",
            "m.04yqb00",
            "m.059cjsd",
            "m.04yqbg1",
            "m.04t_dhl",
            "m.04v5vb4",
            "m.04yqbwg",
            "m.04v302s",
            "m.04yqb5c",
            "m.059ckd1",
            "m.059ck9w",
            "m.04yqb5z",
            "m.059ck1v",
            "m.04v0rjz",
            "m.04t_dcw",
            "m.059ck0d",
            "m.04yqb3w",
            "m.04v0wtn",
            "m.04v01gc",
            "m.04yqblv",
            "m.04tzqhs",
            "m.059ck5g",
            "m.059ck6x",
            "m.04v015x",
            "m.059cjxw",
            "m.04yqb0w",
            "m.04yqbqv",
            "m.059ck4t",
            "m.028x_z3",
            "m.04yqb1_",
            "m.059cjy5",
            "m.04v5p47",
            "m.04v5vcv",
            "m.04v2xt4",
            "m.04v_cqc",
            "m.04yqbvx",
            "m.059cjn3",
            "m.04v0v9z",
            "m.04tzxf2",
            "m.04yqbws",
            "m.04yqbgn",
            "m.04v0v6m",
            "m.04v0v45",
            "m.04t_df8",
            "m.04t_ddt",
            "m.04v0184",
            "m.059cjqq",
            "m.059cjt9",
            "m.04v_kqz",
            "m.059ck75",
            "m.059ckdy",
            "m.04v03vv",
            "m.059ck1j",
            "m.04v07l4",
            "m.04yqb37",
            "m.04t_dql",
            "m.04v5p4q",
            "m.04yqbw5",
            "m.04yqbjp",
            "m.04v0rn2",
            "m.04yqb9m",
            "m.059ck7h",
            "m.04yqbgb",
            "m.059cjtm",
            "m.04yqb9b",
            "m.059ckb5",
            "m.04v01b8",
            "m.04t_kqs",
            "m.04yqb09",
            "m.04v01j0",
            "m.04yqbxq",
            "m.059cjp8",
            "m.04tzw25",
            "m.059cjpl",
            "m.051jjj0",
            "m.059cjm7",
            "m.04yqbtl",
            "m.04yqbb5",
            "m.04yqbmf",
            "m.04yqbq6",
            "m.04v0rml",
            "m.059cjty",
            "m.04yqb29",
            "m.059cjyh",
            "m.059ck6b",
            "m.04v5vd4",
            "m.04v07kr",
            "m.04yqb9x",
            "m.04yqbpl",
            "m.04v00tr",
            "m.04yqbpx",
            "m.04tztjh",
            "m.059ckbt",
            "m.04yqbv6",
            "m.059ck6m",
            "m.059cjzn",
            "m.059cjyt",
            "m.04t_fzb",
            "m.04v4zb0",
            "m.059cjzc",
            "m.059ckdc",
            "m.04v00w7",
            "m.059cjzy",
            "m.04yqbf5",
            "m.04yqb7r",
            "m.059cjnq",
            "m.04v0v64",
            "m.059cjvv",
            "m.04v5q3s",
            "m.04v030g",
            "m.04t_dgn",
            "m.059ck39",
            "m.04yqbj3",
            "m.04v00t8",
            "m.04yqbkk",
            "m.04v03c7",
            "m.04v5x3d",
            "m.04v5p2p",
            "m.04v01cz",
            "m.04yqbp6",
            "m.059cjlz",
            "m.059ck47",
            "m.04yqbc0",
            "m.04v00vy",
            "m.04v00zw",
            "m.04v00x5",
            "m.04v0vbq",
            "m.059cjw_",
            "m.04v5p1n",
            "m.04v0rkx",
            "m.059ck7t",
            "m.04v0x0w",
            "m.04v03bs",
            "m.04v00wq",
            "m.04v0rqd",
            "m.059cjs_",
            "m.04v_cpx",
            "m.059cjrv",
            "m.04v2xsp",
            "m.04yqbjd",
            "m.04yqbn9",
            "m.059cjz2",
            "m.04v3014",
            "m.059ck55",
            "m.04v00qk",
            "m.04t_dg5",
            "m.059cjwp",
            "m.051jjjs",
            "m.059ck30",
            "m.04yqbnm",
            "m.059ckf7",
            "m.04v00y3",
            "m.04v0wv3",
            "m.059cj_t",
            "m.04v0rkf",
            "m.04t_kr7",
            "m.059ckfj",
            "m.04yqb4s",
            "m.059cjrk",
            "m.04yqbrf",
            "m.04v01fw",
            "m.04v0192",
            "m.04yqbkv",
            "m.04v303_",
            "m.04yqbk8",
            "m.04v03tx",
            "m.04t_dqx",
            "m.04yqbsc",
            "m.051jjkj",
            "m.04yqbmq",
            "m.059cjr8",
            "m.04v5x2r",
            "m.04v5p5d",
            "m.04v0v80",
            "m.04v00sh",
            "m.059cjn_",
            "m.04yqbqj",
            "m.04t_djh",
            "m.04v07p3",
            "m.04t_dh3",
            "m.04yqb7g",
            "m.04v019k",
            "m.04tzxdm",
            "m.04v02_r",
            "m.04v02zk"
        ],
        "different_answer": [
            [
                "m.059ck0z",
                "m.04yqb2y",
                "m.04v018m",
                "m.04v0wy1",
                "m.04t_ddb",
                "m.04v5vcc",
                "m.059ck2r",
                "m.04v0v5p",
                "m.04yqb0l",
                "m.04yqbcn",
                "m.04v00pl",
                "m.059ckdn",
                "m.059cjq4",
                "m.04yqb44",
                "m.04yqbsz",
                "m.059ck23",
                "m.04yqbt8",
                "m.04v00q2",
                "m.04v00xn",
                "m.04yqbcz",
                "m.04yqb5n",
                "m.059ck17",
                "m.04v0wzg",
                "m.04tzxfk",
                "m.059cjq_",
                "m.04yqbl6",
                "m.059ckcr",
                "m.04yqb1f",
                "m.04t_dfr",
                "m.04v07ly",
                "m.04yqbs1",
                "m.04yqb51",
                "m.04yqbx2",
                "m.04v00vg",
                "m.04yqbd8",
                "m.04yqbhj",
                "m.059cjv6",
                "m.059cjwd",
                "m.04v07mp",
                "m.04yqb3k",
                "m.059cjmv",
                "m.04v00r8",
                "m.04v01df",
                "m.04v00st",
                "m.059cjmj",
                "m.04v0v8h",
                "m.04v0v72",
                "m.04v4zbs",
                "m.04v2xs6",
                "m.04yqb1q",
                "m.04yqb8r",
                "m.059ck82",
                "m.059cj_j",
                "m.04t_kpq",
                "m.04yqb6v",
                "m.04yqbfs",
                "m.04yqbny",
                "m.04v01gv",
                "m.04yqbdl",
                "m.04v_cp5",
                "m.04yqb4g",
                "m.04v02z9",
                "m.059cjsq",
                "m.04yqbh7",
                "m.04v0v7k",
                "m.04yqb6k",
                "m.059ck61",
                "m.04yqb81",
                "m.059cjqf",
                "m.04yqbjz",
                "m.04v0rm8",
                "m.059ck3y",
                "m.04yqbgz",
                "m.04v017p",
                "m.04yqbr3",
                "m.051jjhl",
                "m.059ck5r",
                "m.059cjlp",
                "m.04v5p3v",
                "m.059cjxl",
                "m.04yqbdw",
                "m.04v03d5",
                "m.04v0176",
                "m.051jjk7",
                "m.059ck2f",
                "m.04yqbfg",
                "m.059cjvj",
                "m.04v01h9",
                "m.059ck8p",
                "m.04yqblj",
                "m.04v0rnd",
                "m.04yqby0",
                "m.059ck8_",
                "m.04yqbvj",
                "m.04tztjz",
                "m.059ck02",
                "m.04v07nn",
                "m.059ck8d",
                "m.04yqbht",
                "m.04yqb74",
                "m.059cjpw",
                "m.059ck9k",
                "m.04v0v8z",
                "m.04yqbxd",
                "m.04v07q1",
                "m.04v_ggt",
                "m.04v301v",
                "m.059cjnd",
                "m.04t_kp7",
                "m.059cj_7",
                "m.04yqbm3",
                "m.051jjjh",
                "m.04v0ws9",
                "m.04v01fd",
                "m.04t_dcd",
                "m.04v5p3f",
                "m.059ckc3",
                "m.04v07k8",
                "m.059ck0p",
                "m.028y4jr",
                "m.04v00s0",
                "m.059cjs3",
                "m.059cjw3",
                "m.04v05lp",
                "m.04v03wk",
                "m.04t_hj1",
                "m.04tztj0",
                "m.04v0rnw",
                "m.04yqb2m",
                "m.04t_hjf",
                "m.04yqbtx",
                "m.04v2xv2",
                "m.04v07pl",
                "m.04tzqjs",
                "m.04v5y5v",
                "m.04v2xtm",
                "m.04v00yl",
                "m.04yqb67",
                "m.04yqbbg",
                "m.04yqbm_",
                "m.04v01dx",
                "m.04v0rlt",
                "m.059cjx9",
                "m.059ckcf",
                "m.059cjld",
                "m.04v0wwg",
                "m.04v0wt5",
                "m.059ck3m",
                "m.059ck98",
                "m.04yqbbr",
                "m.04yqb91",
                "m.051jjk_",
                "m.04yqb14",
                "m.04v504r",
                "m.04v5vbn",
                "m.04yqbcb",
                "m.04yqbrr",
                "m.04yqb00",
                "m.059cjsd",
                "m.04yqbg1",
                "m.04t_dhl",
                "m.04v5vb4",
                "m.04yqbwg",
                "m.04v302s",
                "m.04yqb5c",
                "m.059ckd1",
                "m.059ck9w",
                "m.04yqb5z",
                "m.059ck1v",
                "m.04v0rjz",
                "m.04t_dcw",
                "m.059ck0d",
                "m.04yqb3w",
                "m.04v0wtn",
                "m.04v01gc",
                "m.04yqblv",
                "m.04tzqhs",
                "m.059ck5g",
                "m.059ck6x",
                "m.04v015x",
                "m.059cjxw",
                "m.04yqb0w",
                "m.04yqbqv",
                "m.059ck4t",
                "m.028x_z3",
                "m.04yqb1_",
                "m.059cjy5",
                "m.04v5p47",
                "m.04v5vcv",
                "m.04v2xt4",
                "m.04v_cqc",
                "m.04yqbvx",
                "m.059cjn3",
                "m.04v0v9z",
                "m.04tzxf2",
                "m.04yqbws",
                "m.04yqbgn",
                "m.04v0v6m",
                "m.04v0v45",
                "m.04t_df8",
                "m.04t_ddt",
                "m.04v0184",
                "m.059cjqq",
                "m.059cjt9",
                "m.04v_kqz",
                "m.059ck75",
                "m.059ckdy",
                "m.04v03vv",
                "m.059ck1j",
                "m.04v07l4",
                "m.04yqb37",
                "m.04t_dql",
                "m.04v5p4q",
                "m.04yqbw5",
                "m.04yqbjp",
                "m.04v0rn2",
                "m.04yqb9m",
                "m.059ck7h",
                "m.04yqbgb",
                "m.059cjtm",
                "m.04yqb9b",
                "m.059ckb5",
                "m.04v01b8",
                "m.04t_kqs",
                "m.04yqb09",
                "m.04v01j0",
                "m.04yqbxq",
                "m.059cjp8",
                "m.04tzw25",
                "m.059cjpl",
                "m.051jjj0",
                "m.059cjm7",
                "m.04yqbtl",
                "m.04yqbb5",
                "m.04yqbmf",
                "m.04yqbq6",
                "m.04v0rml",
                "m.059cjty",
                "m.04yqb29",
                "m.059cjyh",
                "m.059ck6b",
                "m.04v5vd4",
                "m.04v07kr",
                "m.04yqb9x",
                "m.04yqbpl",
                "m.04v00tr",
                "m.04yqbpx",
                "m.04tztjh",
                "m.059ckbt",
                "m.04yqbv6",
                "m.059ck6m",
                "m.059cjzn",
                "m.059cjyt",
                "m.04t_fzb",
                "m.04v4zb0",
                "m.059cjzc",
                "m.059ckdc",
                "m.04v00w7",
                "m.059cjzy",
                "m.04yqbf5",
                "m.04yqb7r",
                "m.059cjnq",
                "m.04v0v64",
                "m.059cjvv",
                "m.04v5q3s",
                "m.04v030g",
                "m.04t_dgn",
                "m.059ck39",
                "m.04yqbj3",
                "m.04v00t8",
                "m.04yqbkk",
                "m.04v03c7",
                "m.04v5x3d",
                "m.04v5p2p",
                "m.04v01cz",
                "m.04yqbp6",
                "m.059cjlz",
                "m.059ck47",
                "m.04yqbc0",
                "m.04v00vy",
                "m.04v00zw",
                "m.04v00x5",
                "m.04v0vbq",
                "m.059cjw_",
                "m.04v5p1n",
                "m.04v0rkx",
                "m.059ck7t",
                "m.04v0x0w",
                "m.04v03bs",
                "m.04v00wq",
                "m.04v0rqd",
                "m.059cjs_",
                "m.04v_cpx",
                "m.059cjrv",
                "m.04v2xsp",
                "m.04yqbjd",
                "m.04yqbn9",
                "m.059cjz2",
                "m.04v3014",
                "m.059ck55",
                "m.04v00qk",
                "m.04t_dg5",
                "m.059cjwp",
                "m.051jjjs",
                "m.059ck30",
                "m.04yqbnm",
                "m.059ckf7",
                "m.04v00y3",
                "m.04v0wv3",
                "m.059cj_t",
                "m.04v0rkf",
                "m.04t_kr7",
                "m.059ckfj",
                "m.04yqb4s",
                "m.059cjrk",
                "m.04yqbrf",
                "m.04v01fw",
                "m.04v0192",
                "m.04yqbkv",
                "m.04v303_",
                "m.04yqbk8",
                "m.04v03tx",
                "m.04t_dqx",
                "m.04yqbsc",
                "m.051jjkj",
                "m.04yqbmq",
                "m.059cjr8",
                "m.04v5x2r",
                "m.04v5p5d",
                "m.04v0v80",
                "m.04v00sh",
                "m.059cjn_",
                "m.04yqbqj",
                "m.04t_djh",
                "m.04v07p3",
                "m.04t_dh3",
                "m.04yqb7g",
                "m.04v019k",
                "m.04tzxdm",
                "m.04v02_r",
                "m.04v02zk"
            ]
        ],
        "entity_linking": {
            "Charles Dickens": "m.01v9724"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01v9724)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01v9724 ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01v9724')\na.add_fact('m.01v9724', 'book.author.book_editions_published', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-65",
        "question": "who was the first dictator of the soviet union",
        "answer": [
            "m.05wh0sh"
        ],
        "different_answer": [
            [
                "m.05wh0sh"
            ]
        ],
        "entity_linking": {
            "Soviet Union": "m.05vz3zq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vz3zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vz3zq ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05vz3zq')\na.add_fact('m.05vz3zq', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-66",
        "question": "what is the currency of puerto rico called",
        "answer": [
            "m.09nqf"
        ],
        "different_answer": [
            [
                "m.09nqf"
            ]
        ],
        "entity_linking": {
            "Puerto Rico": "m.05r7t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r7t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r7t ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05r7t')\na.add_fact('m.05r7t', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-67",
        "question": "what kind of cancer did carl wilson have",
        "answer": [
            "m.04p3w",
            "m.09969"
        ],
        "different_answer": [
            [
                "m.04p3w",
                "m.09969"
            ]
        ],
        "entity_linking": {
            "Carl Wilson": "m.01n9vwg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n9vwg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n9vwg ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01n9vwg')\na.add_fact('m.01n9vwg', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-68",
        "question": "who plays the voice of kitt in knight rider",
        "answer": [
            "m.0309r1"
        ],
        "different_answer": [
            [
                "m.0309r1"
            ]
        ],
        "entity_linking": {
            "Knight Rider": "m.0bvxv",
            "Voice": "m.02nsjvf",
            "KITT": "m.05_bhx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bvxv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bvxv ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n?y ns:tv.regular_tv_appearance.character ns:m.05_bhx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05_bhx')\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0bvxv')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.05_bhx')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0bvxv', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-69",
        "question": "what county is brentwood tennessee in",
        "answer": [
            "m.0msrq"
        ],
        "different_answer": [
            [
                "m.0msrq"
            ],
            [
                "m.0msrq"
            ]
        ],
        "entity_linking": {
            "Brentwood": "m.0_xcq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_xcq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_xcq ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0_xcq')\na.add_fact('m.0_xcq', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-71",
        "question": "who did michael j fox marry",
        "answer": [
            "m.03gpck"
        ],
        "different_answer": [
            [
                "m.03gpck"
            ]
        ],
        "entity_linking": {
            "Michael J. Fox": "m.0hz_1",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz_1 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0hz_1')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0hz_1', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-72",
        "question": "what battles did stonewall jackson fight in",
        "answer": [
            "m.04vz0r",
            "m.04vyf2",
            "m.02p037",
            "m.04vt8k",
            "m.04v_qr",
            "m.04v_xx",
            "m.0d0mw",
            "m.0kbq",
            "m.04vqvv",
            "m.04vyw1",
            "m.0f777",
            "m.02q5_1r",
            "m.01_nvh",
            "m.02bckn",
            "m.021h20",
            "m.01xvgq",
            "m.04v_mz",
            "m.04vyvq",
            "m.04vyxv"
        ],
        "different_answer": [
            [
                "m.04vz0r",
                "m.04vyf2",
                "m.02p037",
                "m.04vt8k",
                "m.04v_qr",
                "m.04v_xx",
                "m.0d0mw",
                "m.0kbq",
                "m.04vqvv",
                "m.04vyw1",
                "m.0f777",
                "m.02q5_1r",
                "m.01_nvh",
                "m.02bckn",
                "m.021h20",
                "m.01xvgq",
                "m.04v_mz",
                "m.04vyvq",
                "m.04vyxv"
            ]
        ],
        "entity_linking": {
            "Stonewall Jackson": "m.07r8h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07r8h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07r8h ns:military.military_commander.military_commands ?y .\n?y ns:military.military_command.military_conflict ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07r8h')\na.add_fact('m.07r8h', 'military.military_commander.military_commands', 'x1')\na.add_fact('x1', 'military.military_command.military_conflict', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-73",
        "question": "what language do the maasai tribe speak",
        "answer": [
            "m.064kl7"
        ],
        "different_answer": [
            [
                "m.064kl7"
            ]
        ],
        "entity_linking": {
            "Maasai people": "m.054vv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054vv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054vv ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.054vv')\na.add_fact('m.054vv', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-74",
        "question": "who did benjamin franklin get married to",
        "answer": [
            "m.0b15_0"
        ],
        "different_answer": [
            [
                "m.0b15_0"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz",
            "Common-law marriage": "m.01bl8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.01bl8s .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bl8s')\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.01bl8s')\na.add_fact('m.019fz', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-75",
        "question": "what disease did patrick swayze died from",
        "answer": [
            "m.01_qc_"
        ],
        "different_answer": [
            [
                "m.01_qc_"
            ]
        ],
        "entity_linking": {
            "Patrick Swayze": "m.02h3tp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h3tp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h3tp ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h3tp')\na.add_fact('m.02h3tp', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-76",
        "question": "what works of art did leonardo da vinci produce",
        "answer": [
            "m.060bxw",
            "g.121yh91r",
            "g.1213jb_b",
            "g.12314dm1",
            "g.1219sb0g",
            "m.05k3fq",
            "m.0jbg2",
            "m.03djdc",
            "m.01222klx",
            "m.0dk3hj",
            "m.03d3d1n",
            "m.05wk8l",
            "m.09kjrxf",
            "m.0h53304",
            "m.0_l9d86",
            "m.07dkzk",
            "g.1215vxrd",
            "g.120p4__x",
            "m.07ljj3",
            "m.0drwnr7",
            "m.0298d9",
            "m.04tyvk",
            "m.0bh7s8p",
            "g.1s05nsvbj",
            "m.07_jvg",
            "m.08s4wm",
            "g.120vt1gz",
            "m.05m4n7",
            "m.079x2_",
            "g.1239jd9p",
            "m.03d34_0",
            "g.12215rxg",
            "m.0ch45ty",
            "g.1224tf0c",
            "m.05v184",
            "m.05zqfwq",
            "m.04ls11",
            "m.08060s",
            "m.026qg59",
            "m.05m4tw",
            "m.0hgmf7n",
            "g.121wt37c",
            "m.0j42qsf",
            "m.02815wd",
            "m.0jnz3",
            "m.0806t_w"
        ],
        "different_answer": [
            [
                "m.060bxw",
                "g.121yh91r",
                "g.1213jb_b",
                "g.12314dm1",
                "g.1219sb0g",
                "m.05k3fq",
                "m.0jbg2",
                "m.03djdc",
                "m.01222klx",
                "m.0dk3hj",
                "m.03d3d1n",
                "m.05wk8l",
                "m.09kjrxf",
                "m.0h53304",
                "m.0_l9d86",
                "m.07dkzk",
                "g.1215vxrd",
                "g.120p4__x",
                "m.07ljj3",
                "m.0drwnr7",
                "m.0298d9",
                "m.04tyvk",
                "m.0bh7s8p",
                "g.1s05nsvbj",
                "m.07_jvg",
                "m.08s4wm",
                "g.120vt1gz",
                "m.05m4n7",
                "m.079x2_",
                "g.1239jd9p",
                "m.03d34_0",
                "g.12215rxg",
                "m.0ch45ty",
                "g.1224tf0c",
                "m.05v184",
                "m.05zqfwq",
                "m.04ls11",
                "m.08060s",
                "m.026qg59",
                "m.05m4tw",
                "m.0hgmf7n",
                "g.121wt37c",
                "m.0j42qsf",
                "m.02815wd",
                "m.0jnz3",
                "m.0806t_w"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:visual_art.visual_artist.artworks ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'visual_art.visual_artist.artworks', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-77",
        "question": "what capital of austria",
        "answer": [
            "m.0fhp9"
        ],
        "different_answer": [
            [
                "m.0fhp9"
            ]
        ],
        "entity_linking": {
            "Austria": "m.0h7x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7x ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7x')\na.add_fact('m.0h7x', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-78",
        "question": "what type of cancer did eva peron have",
        "answer": [
            "m.0d_bk"
        ],
        "different_answer": [
            [
                "m.0d_bk"
            ]
        ],
        "entity_linking": {
            "Eva Per\u00f3n": "m.0dltj",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dltj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dltj ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.0dltj')\na.add_fact('x0', 'people.cause_of_death.parent_cause_of_death', 'm.0qcr0')\na.add_fact('m.0dltj', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-79",
        "question": "what country did buddha come from",
        "answer": [
            "m.016zwt"
        ],
        "different_answer": [
            [
                "m.016zwt"
            ]
        ],
        "entity_linking": {
            "Gautama Buddha": "m.015k7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015k7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015k7 ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015k7')\na.add_fact('m.015k7', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-80",
        "question": "what county is greeley colorado in",
        "answer": [
            "m.0n_ps"
        ],
        "different_answer": [
            [
                "m.0n_ps"
            ],
            [
                "m.0n_ps"
            ]
        ],
        "entity_linking": {
            "Greeley": "m.0rczx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rczx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rczx ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0rczx')\na.add_fact('m.0rczx', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-82",
        "question": "what did peter tchaikovsky do",
        "answer": [
            "m.02h6nhv",
            "m.09jwl",
            "m.01c72t"
        ],
        "different_answer": [
            [
                "m.02h6nhv",
                "m.09jwl",
                "m.01c72t"
            ]
        ],
        "entity_linking": {
            "Pyotr Ilyich Tchaikovsky": "m.063tn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.063tn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.063tn ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.063tn')\na.add_fact('m.063tn', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-83",
        "question": "which countries speak german officially",
        "answer": [
            "m.03f2w",
            "m.0345h",
            "m.0h7x",
            "m.04j53",
            "m.06mzp",
            "m.04g61",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.03f2w",
                "m.0345h",
                "m.0h7x",
                "m.04j53",
                "m.06mzp",
                "m.04g61",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "German Language": "m.04306rv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.04306rv .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04306rv')\na.add_filter('x0', '!=', 'm.04306rv')\na.add_fact('x0', 'location.country.official_language', 'm.04306rv')\na.add_fact('m.04306rv', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-84",
        "question": "what type of music did john lennon sing",
        "answer": [
            "m.02k_kn",
            "m.02yv6b",
            "m.0cx7f",
            "m.05bt6j",
            "m.05w3f",
            "m.064t9",
            "m.06by7",
            "m.08jyyk",
            "m.03ckfl9"
        ],
        "different_answer": [
            [
                "m.02k_kn",
                "m.02yv6b",
                "m.0cx7f",
                "m.05bt6j",
                "m.05w3f",
                "m.064t9",
                "m.06by7",
                "m.08jyyk",
                "m.03ckfl9"
            ]
        ],
        "entity_linking": {
            "John Lennon": "m.01vsl3_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vsl3_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vsl3_ ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vsl3_')\na.add_fact('m.01vsl3_', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-85",
        "question": "who are the colorado representatives",
        "answer": [
            "m.024zbx",
            "m.05b60qf"
        ],
        "different_answer": [
            [
                "m.024zbx",
                "m.05b60qf"
            ]
        ],
        "entity_linking": {
            "Colorado": "m.01n4w",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n4w ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01n4w')\na.add_fact('m.01n4w', 'government.political_district.representatives', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-86",
        "question": "which country does greenland belong to",
        "answer": [
            "m.0k6nt"
        ],
        "different_answer": [
            [
                "m.0k6nt"
            ]
        ],
        "entity_linking": {
            "Greenland": "m.035v3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035v3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035v3 ns:location.administrative_division.country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035v3')\na.add_fact('m.035v3', 'location.administrative_division.country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-87",
        "question": "what the zip code for seattle washington",
        "answer": [
            "m.021hbk1",
            "m.021hbty",
            "m.021j58x",
            "m.07npx2n",
            "m.021gykc",
            "m.07npx32",
            "m.07npx3j",
            "m.07npwzy",
            "m.07npx0p",
            "m.021g5dm",
            "m.021hqp9",
            "m.07npx1k",
            "m.03dyr4r",
            "m.03dyr54",
            "m.021hcn7",
            "m.07npwzq",
            "m.021hd2k",
            "m.05bdr2t",
            "m.07npx1s",
            "m.09sm_9r",
            "m.021hfsp",
            "m.021jtyl",
            "m.07npx26",
            "m.021j82v",
            "m.021hmgb",
            "m.020r3kv",
            "m.021hc9v",
            "m.021ghmz",
            "m.07npx1_",
            "m.021hfvn",
            "m.07npx2w",
            "m.021jq79",
            "m.021hcw9",
            "m.021hcx9",
            "m.07npx2f",
            "m.07npw_l",
            "m.021j5jr",
            "m.07npx0x",
            "m.07npw_4",
            "m.07npx1b",
            "m.021hkxk",
            "m.07npx0g",
            "m.021hcpd",
            "m.021hgpc",
            "m.021hnt8",
            "m.021hcmf",
            "m.021hh6h",
            "m.021hjjq",
            "m.07npw_t",
            "m.021jn8d",
            "m.07npx07",
            "m.021hc2t",
            "m.020b572",
            "m.021ghs6",
            "m.021hc0f",
            "m.03dyr6h",
            "m.021hdy8",
            "m.021hbzb",
            "m.02wrtkc",
            "m.021gkmr",
            "m.07npx00",
            "m.07npx13",
            "m.021hc4m"
        ],
        "different_answer": [
            [
                "m.021hbk1",
                "m.021hbty",
                "m.021j58x",
                "m.07npx2n",
                "m.021gykc",
                "m.07npx32",
                "m.07npx3j",
                "m.07npwzy",
                "m.07npx0p",
                "m.021g5dm",
                "m.021hqp9",
                "m.07npx1k",
                "m.03dyr4r",
                "m.03dyr54",
                "m.021hcn7",
                "m.07npwzq",
                "m.021hd2k",
                "m.05bdr2t",
                "m.07npx1s",
                "m.09sm_9r",
                "m.021hfsp",
                "m.021jtyl",
                "m.07npx26",
                "m.021j82v",
                "m.021hmgb",
                "m.020r3kv",
                "m.021hc9v",
                "m.021ghmz",
                "m.07npx1_",
                "m.021hfvn",
                "m.07npx2w",
                "m.021jq79",
                "m.021hcw9",
                "m.021hcx9",
                "m.07npx2f",
                "m.07npw_l",
                "m.021j5jr",
                "m.07npx0x",
                "m.07npw_4",
                "m.07npx1b",
                "m.021hkxk",
                "m.07npx0g",
                "m.021hcpd",
                "m.021hgpc",
                "m.021hnt8",
                "m.021hcmf",
                "m.021hh6h",
                "m.021hjjq",
                "m.07npw_t",
                "m.021jn8d",
                "m.07npx07",
                "m.021hc2t",
                "m.020b572",
                "m.021ghs6",
                "m.021hc0f",
                "m.03dyr6h",
                "m.021hdy8",
                "m.021hbzb",
                "m.02wrtkc",
                "m.021gkmr",
                "m.07npx00",
                "m.07npx13",
                "m.021hc4m"
            ]
        ],
        "entity_linking": {
            "Seattle": "m.0d9jr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9jr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9jr ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d9jr')\na.add_fact('m.0d9jr', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-88",
        "question": "who is willow smith mom name",
        "answer": [
            "m.01j7z7"
        ],
        "different_answer": [
            [
                "m.01j7z7"
            ]
        ],
        "entity_linking": {
            "Willow Smith": "m.03gq433",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gq433)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gq433 ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.03gq433')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.03gq433', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-89",
        "question": "what do you call the chinese writing system",
        "answer": [
            "m.0mmzb",
            "m.01mw7r",
            "m.050fyz",
            "m.01nf5z",
            "m.014lbg"
        ],
        "different_answer": [
            [
                "m.0mmzb",
                "m.01mw7r",
                "m.050fyz",
                "m.01nf5z",
                "m.014lbg"
            ]
        ],
        "entity_linking": {
            "Chinese language": "m.01r2l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r2l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r2l ns:language.human_language.writing_system ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r2l')\na.add_fact('m.01r2l', 'language.human_language.writing_system', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-90",
        "question": "who played on the jeffersons",
        "answer": [
            "m.0279gxy",
            "m.0279gyz",
            "m.03k25c",
            "m.02_yyp",
            "m.06b_nc",
            "m.03h436",
            "m.03zwg4",
            "m.0c6b4y",
            "m.0gydmc",
            "m.0clm34",
            "m.02_z06"
        ],
        "different_answer": [
            [
                "m.0279gxy",
                "m.0279gyz",
                "m.03k25c",
                "m.02_yyp",
                "m.06b_nc",
                "m.03h436",
                "m.03zwg4",
                "m.0c6b4y",
                "m.0gydmc",
                "m.0clm34",
                "m.02_z06"
            ]
        ],
        "entity_linking": {
            "The Jeffersons": "m.02f8jf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02f8jf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02f8jf ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02f8jf')\na.add_fact('m.02f8jf', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-91",
        "question": "what is the name of the san francisco newspaper",
        "answer": [
            "m.0b44w3m",
            "m.0bsjtf",
            "m.03g_4mj",
            "m.01yrn5",
            "m.09573v",
            "m.0271stb",
            "m.09jj5c",
            "m.04tk4gw",
            "m.085z3r",
            "m.04j38b3",
            "m.02rnd80",
            "m.0hqgb4v",
            "m.04zg67",
            "m.03x7zl",
            "m.0f83cz",
            "m.01v9vx",
            "m.0d3zvq",
            "m.03l2ys",
            "m.0_l9flk",
            "m.06_gr"
        ],
        "different_answer": [
            [
                "m.0b44w3m",
                "m.0bsjtf",
                "m.03g_4mj",
                "m.01yrn5",
                "m.09573v",
                "m.0271stb",
                "m.09jj5c",
                "m.04tk4gw",
                "m.085z3r",
                "m.04j38b3",
                "m.02rnd80",
                "m.0hqgb4v",
                "m.04zg67",
                "m.03x7zl",
                "m.0f83cz",
                "m.01v9vx",
                "m.0d3zvq",
                "m.03l2ys",
                "m.0_l9flk",
                "m.06_gr"
            ]
        ],
        "entity_linking": {
            "San Francisco": "m.0d6lp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d6lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d6lp ns:periodicals.newspaper_circulation_area.newspapers ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d6lp')\na.add_fact('m.0d6lp', 'periodicals.newspaper_circulation_area.newspapers', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-93",
        "question": "what continent does armenia belong to",
        "answer": [
            "m.02j9z"
        ],
        "different_answer": [
            [
                "m.02j9z"
            ]
        ],
        "entity_linking": {
            "Armenia": "m.0jgx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgx ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgx')\na.add_fact('m.0jgx', 'base.locations.countries.continent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-94",
        "question": "what did randy savage died of",
        "answer": [
            "m.0gk4g"
        ],
        "different_answer": [
            [
                "m.0gk4g"
            ]
        ],
        "entity_linking": {
            "Randy Savage": "m.02p7_z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p7_z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p7_z ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02p7_z')\na.add_fact('m.02p7_z', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-95",
        "question": "what was the title of the book charles darwin wrote",
        "answer": [
            "m.067q6ks",
            "m.0hhv3fy",
            "m.04t39qh",
            "m.06tz8bh",
            "m.07kbf6f",
            "m.0f0c7c3",
            "m.06mx6qb",
            "m.0f0gnbh",
            "m.05bpwfw",
            "m.0682dh_",
            "m.06fkngp",
            "m.06l7w7c",
            "m.0y4rzcc",
            "m.0c1t1lr",
            "m.0bhjdmn",
            "m.0c1t1n1",
            "m.02pzzmw",
            "m.06n65g8",
            "m.0y4rxbs",
            "m.0698p22",
            "m.05f3_5v",
            "m.06bk806",
            "m.06ggf11",
            "m.06rg6nf",
            "m.0c1t1mh",
            "m.069gx8t",
            "m.06fdzsg",
            "m.062rrx",
            "m.06m68vy",
            "m.06gx9nb",
            "m.06qs0k_",
            "m.06n8gzr",
            "m.06jw00r",
            "m.04t39rr",
            "m.069j1zn",
            "m.06syjt2",
            "m.06dp_0n",
            "m.05bpwrk",
            "m.0bhjdm2",
            "m.05bpx28",
            "m.06fz4ys",
            "m.0bhjdmk",
            "m.06n8zlx",
            "m.06n4jwv",
            "m.06cbh6d",
            "m.06f6v8g",
            "m.0f0hdk1",
            "m.06ndlh7",
            "m.05f3187",
            "m.06mmypb",
            "m.06r9mwf",
            "m.06cvnt5",
            "m.0y4rydg",
            "m.0f0c2xv",
            "m.068kgmb",
            "m.06qr9xq",
            "m.06c6q4x",
            "m.05nhwt",
            "m.06jc2s7",
            "m.0f0dvyt",
            "m.06nhv9s",
            "m.05kdgx0",
            "m.0c1t1m3",
            "m.05bpx3p",
            "m.06jj8zx",
            "m.0kfsvj7",
            "m.07kd9wf",
            "m.0f0g5py",
            "m.04t39r_",
            "m.06msmgd",
            "m.0f0cnxy",
            "m.0f0fhpx",
            "m.06g77fm",
            "m.0c1t1ms",
            "m.067jgzq",
            "m.06k4hmf",
            "m.02l2z6",
            "m.068zv2w",
            "m.06hggft",
            "m.0c1t1m6",
            "m.0y4ryn4",
            "m.06tjzfj",
            "m.06hv624",
            "m.0c1t1nb",
            "m.0f0jl1d",
            "m.06qxf6m",
            "m.01qq45",
            "m.0f0ccfx",
            "m.03d86kx",
            "m.06r08pz",
            "m.0bqqyp6",
            "m.06hz4px",
            "m.06fp6__",
            "m.0f0c_dr",
            "m.010rjsvs",
            "m.06hks6x",
            "m.0c1t1ly",
            "m.0f0fsbb",
            "m.06jygl6",
            "m.0bhjdm8",
            "m.06j8lmr",
            "m.0bqqynz",
            "m.06sh5th",
            "m.06c9lwy",
            "m.0cc54s",
            "m.06dv5j2",
            "m.04t39s7",
            "m.0y4ryvd",
            "m.06nxw56",
            "m.06q9dnn",
            "m.06cjxqf",
            "m.0d_3d1b",
            "m.05kdgws",
            "m.010sfr1g",
            "m.0kfq8k8",
            "m.06jcl9b",
            "m.06j18wj",
            "m.06pw5vt",
            "m.069mjtn",
            "m.06mwj8z",
            "m.06h96f4",
            "m.06dhg29",
            "m.06hxnc2",
            "m.06dgzf9",
            "m.04t39p_",
            "m.0f0dh7c",
            "m.0d_472q",
            "m.0f0jl1z",
            "m.06dhg2k",
            "m.0c1t1ml",
            "m.06cnkd2",
            "m.05pskf",
            "m.06kmynd",
            "m.0685fg8",
            "m.06c2mtr",
            "m.05bpwqc",
            "m.0c1t1mz",
            "m.06gxb0v",
            "m.06lcpyv",
            "m.06km_gd",
            "m.06mc3j5",
            "m.06p4t1s",
            "m.06h4s28",
            "m.05bktj1",
            "m.04t39qr",
            "m.06czk9t",
            "m.06jbq8m",
            "m.0f0jl1p",
            "m.0f0bz0f",
            "m.06k7t44",
            "m.06dplrp",
            "m.06by4cp",
            "m.06px17_"
        ],
        "different_answer": [
            [
                "m.067q6ks",
                "m.0hhv3fy",
                "m.04t39qh",
                "m.06tz8bh",
                "m.07kbf6f",
                "m.0f0c7c3",
                "m.06mx6qb",
                "m.0f0gnbh",
                "m.05bpwfw",
                "m.0682dh_",
                "m.06fkngp",
                "m.06l7w7c",
                "m.0y4rzcc",
                "m.0c1t1lr",
                "m.0bhjdmn",
                "m.0c1t1n1",
                "m.02pzzmw",
                "m.06n65g8",
                "m.0y4rxbs",
                "m.0698p22",
                "m.05f3_5v",
                "m.06bk806",
                "m.06ggf11",
                "m.06rg6nf",
                "m.0c1t1mh",
                "m.069gx8t",
                "m.06fdzsg",
                "m.062rrx",
                "m.06m68vy",
                "m.06gx9nb",
                "m.06qs0k_",
                "m.06n8gzr",
                "m.06jw00r",
                "m.04t39rr",
                "m.069j1zn",
                "m.06syjt2",
                "m.06dp_0n",
                "m.05bpwrk",
                "m.0bhjdm2",
                "m.05bpx28",
                "m.06fz4ys",
                "m.0bhjdmk",
                "m.06n8zlx",
                "m.06n4jwv",
                "m.06cbh6d",
                "m.06f6v8g",
                "m.0f0hdk1",
                "m.06ndlh7",
                "m.05f3187",
                "m.06mmypb",
                "m.06r9mwf",
                "m.06cvnt5",
                "m.0y4rydg",
                "m.0f0c2xv",
                "m.068kgmb",
                "m.06qr9xq",
                "m.06c6q4x",
                "m.05nhwt",
                "m.06jc2s7",
                "m.0f0dvyt",
                "m.06nhv9s",
                "m.05kdgx0",
                "m.0c1t1m3",
                "m.05bpx3p",
                "m.06jj8zx",
                "m.0kfsvj7",
                "m.07kd9wf",
                "m.0f0g5py",
                "m.04t39r_",
                "m.06msmgd",
                "m.0f0cnxy",
                "m.0f0fhpx",
                "m.06g77fm",
                "m.0c1t1ms",
                "m.067jgzq",
                "m.06k4hmf",
                "m.02l2z6",
                "m.068zv2w",
                "m.06hggft",
                "m.0c1t1m6",
                "m.0y4ryn4",
                "m.06tjzfj",
                "m.06hv624",
                "m.0c1t1nb",
                "m.0f0jl1d",
                "m.06qxf6m",
                "m.01qq45",
                "m.0f0ccfx",
                "m.03d86kx",
                "m.06r08pz",
                "m.0bqqyp6",
                "m.06hz4px",
                "m.06fp6__",
                "m.0f0c_dr",
                "m.010rjsvs",
                "m.06hks6x",
                "m.0c1t1ly",
                "m.0f0fsbb",
                "m.06jygl6",
                "m.0bhjdm8",
                "m.06j8lmr",
                "m.0bqqynz",
                "m.06sh5th",
                "m.06c9lwy",
                "m.0cc54s",
                "m.06dv5j2",
                "m.04t39s7",
                "m.0y4ryvd",
                "m.06nxw56",
                "m.06q9dnn",
                "m.06cjxqf",
                "m.0d_3d1b",
                "m.05kdgws",
                "m.010sfr1g",
                "m.0kfq8k8",
                "m.06jcl9b",
                "m.06j18wj",
                "m.06pw5vt",
                "m.069mjtn",
                "m.06mwj8z",
                "m.06h96f4",
                "m.06dhg29",
                "m.06hxnc2",
                "m.06dgzf9",
                "m.04t39p_",
                "m.0f0dh7c",
                "m.0d_472q",
                "m.0f0jl1z",
                "m.06dhg2k",
                "m.0c1t1ml",
                "m.06cnkd2",
                "m.05pskf",
                "m.06kmynd",
                "m.0685fg8",
                "m.06c2mtr",
                "m.05bpwqc",
                "m.0c1t1mz",
                "m.06gxb0v",
                "m.06lcpyv",
                "m.06km_gd",
                "m.06mc3j5",
                "m.06p4t1s",
                "m.06h4s28",
                "m.05bktj1",
                "m.04t39qr",
                "m.06czk9t",
                "m.06jbq8m",
                "m.0f0jl1p",
                "m.0f0bz0f",
                "m.06k7t44",
                "m.06dplrp",
                "m.06by4cp",
                "m.06px17_"
            ]
        ],
        "entity_linking": {
            "Charles Darwin": "m.01lwx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:book.author.works_written ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lwx')\na.add_fact('m.01lwx', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-96",
        "question": "where did richard nixon die",
        "answer": [
            "m.02_286"
        ],
        "different_answer": [
            [
                "m.02_286"
            ]
        ],
        "entity_linking": {
            "Richard Nixon": "m.06c97"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06c97')\na.add_fact('m.06c97', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-97",
        "question": "what songs does smokey robinson sing",
        "answer": [
            "m.018yjsw",
            "m.012y12b0",
            "m.0sm8fxv",
            "m.0_zmw3",
            "m.0ydy24",
            "g.11b80bs1tn",
            "m.0rvzf9",
            "m.01dkvvs",
            "m.0drh8lb",
            "m.01dkvpj",
            "m.0dzhwd7",
            "m.0fr21tl",
            "m.0m60cp",
            "m.01dkvpr",
            "m.0dp72f8",
            "m.0sj2crn",
            "m.0np0py4",
            "m.0ljv15",
            "m.0g5zyhz",
            "m.0zjfjj",
            "m.0168mw1",
            "m.0nmzntz",
            "m.0dr7lg7",
            "m.0m9xs8",
            "m.018r09_",
            "m.01bw4s2",
            "m.018r0b6",
            "m.0xy0b_",
            "m.01dkvx2",
            "m.011pkgnv",
            "m.0f3pjf6",
            "m.012cjk6",
            "m.0dw5_xq",
            "m.012_9f12",
            "m.0dqbw6_",
            "m.0dxnyq5",
            "m.018r0bw",
            "m.012cjjk",
            "m.01b2g_b",
            "m.011myxz",
            "m.012cjlj",
            "m.011pdb9p",
            "m.0_0_fx",
            "m.0m60ff",
            "m.0dvtn_c",
            "m.01dkvq5",
            "m.012_svv2",
            "m.0fst9y8",
            "m.0125fjy",
            "m.017h_5s",
            "g.11b80ddnd_",
            "m.0lljdp",
            "m.0g144h_",
            "m.013r0nb",
            "m.0sjxs37",
            "m.0196fp5",
            "m.0fr2f7n",
            "m.0f3nxhj",
            "m.0fr25mq",
            "m.0x7x8jf",
            "m.0gdtw1d",
            "m.01dkvqv",
            "m.010s_5t8",
            "m.0fd1zg2",
            "m.0dyfkvx",
            "m.0nlm_x0",
            "m.0fydglj",
            "m.01d8txf",
            "m.0dtvg8s",
            "m.0nmz8sn",
            "m.0_0_hn",
            "m.0dn3npv",
            "m.0dzpmp2",
            "m.01cznwt",
            "m.0frh_11",
            "m.0dzm8p0",
            "m.0fvygv8",
            "m.0ykc0x",
            "m.0ft2qph",
            "m.0dtrp8c",
            "m.0fst9xt",
            "m.018r0c2",
            "m.0fw999p",
            "m.0_cwwy",
            "m.0snrjwr",
            "m.0f2rq2t",
            "m.0ftf3g6",
            "m.0nk__k5",
            "m.0f_q7d7",
            "m.0fg1wf6",
            "m.0g13kj3",
            "m.01cznxx",
            "m.0fc7f26",
            "m.012cjlr",
            "m.0dtvg6t",
            "m.0ftrm64",
            "m.015dwjc",
            "m.0g1gzly",
            "m.01dr42x",
            "m.012tqfc9",
            "m.0fz751m",
            "m.0_0_gb",
            "m.01dsvm6",
            "m.0rvzfj",
            "m.01dkvr1",
            "m.0fw31g7",
            "m.012cjj_",
            "m.0sngt3w",
            "m.0qhqdx",
            "m.0dtljvv",
            "m.0fxkdhk",
            "m.0rvzf2",
            "m.0nl9qxd",
            "m.0m60c7",
            "m.0gdtw29",
            "m.0196fq1",
            "m.0gdtw0_",
            "m.01dkvqm",
            "m.0f_mq0m",
            "m.0ydxzn",
            "m.0dyfktv",
            "m.0skth34",
            "m.0fxkw0z",
            "m.0fxcgvy",
            "m.01cznk9",
            "m.0sllgc1",
            "m.0zh9t_",
            "m.0fy8n3m",
            "m.0d_ks0h",
            "m.012xhrxz",
            "m.0dqb4nd",
            "m.0np0f3h",
            "m.0fqvm4j",
            "m.0fr0js8",
            "m.0r3gf_",
            "m.01dkvvb",
            "m.0fry_50",
            "m.012cjmd",
            "m.0dq88ng",
            "m.01cznx7",
            "m.0125fgz",
            "m.012cjhg",
            "m.01cvyp_",
            "m.0fw_wmc",
            "m.0dtvg7y",
            "m.0_0_g3",
            "m.01088__4",
            "m.012cjjb",
            "m.0lp413",
            "m.0rvzh1",
            "m.0dtvg7m",
            "m.0fvxy86",
            "m.0dqv41v",
            "m.0nlmrvm",
            "m.0m60d3",
            "m.0ydd80",
            "m.0dw61kc",
            "m.0fwz2tv",
            "m.015nbfn",
            "m.0_0_hf",
            "m.011p54r5",
            "m.0fst9y2",
            "m.012cjkn",
            "m.0sn2h12",
            "m.0dpts1p",
            "m.0gdtw1k",
            "m.0f2n56y",
            "m.0fwrblf",
            "m.0m60f6",
            "m.0fy6905",
            "m.0ftm3d7",
            "m.01dkvvk",
            "m.0shjmm7",
            "m.0frj7rg",
            "m.0125fkc",
            "m.016dgnp",
            "m.011myym",
            "m.0f79mpy",
            "m.012cjh7",
            "m.0rvzgm",
            "m.01cznxp",
            "m.0d_s2tn",
            "m.011plnkt",
            "m.0fstrnj",
            "m.0f13pk_",
            "m.011pfg6v",
            "m.0_pcwk",
            "m.0dvxm0d",
            "m.0dtvg7g",
            "m.0nmk9gx",
            "m.01cznys",
            "m.011myz1",
            "m.0f1jd9_",
            "m.0nylqs",
            "m.0yljyn",
            "m.0vy2vlk",
            "m.010mw35t",
            "m.012cjl9",
            "m.0g7z2x_",
            "m.016btlz",
            "m.0sp3sk1",
            "m.0dzx9c9",
            "m.016zk_k",
            "m.012cjmm",
            "m.0y4bhd",
            "m.0fst9x_",
            "m.0dyfkvm",
            "m.0fw31jw",
            "m.0_y8l2",
            "m.01dkvv_",
            "m.0_0_g_",
            "m.01dkvwn",
            "m.012phz_2",
            "m.012bp7r",
            "m.01637sk",
            "m.0fv7h0z",
            "m.01cznwc",
            "m.01dkvxj",
            "m.0g0scqg",
            "m.0shqv6r",
            "m.0fyrz0m",
            "m.0rgwcn5",
            "m.01dkvv3",
            "m.01099c7",
            "m.0dqk3sz",
            "m.0g1gzm5",
            "m.0rvzfr",
            "m.01dkvqd",
            "m.0fffj25",
            "m.01bxmxs",
            "m.0rjqdgz",
            "m.0125fjq",
            "m.01cznyk",
            "m.0qc0hc",
            "m.0fx3k4h",
            "m.0m60db",
            "m.0dpv96f",
            "m.012cjhx",
            "m.01dkvww",
            "m.0f9v2x6",
            "m.011myyd",
            "m.0196fpm",
            "m.0f66p_p",
            "m.0dqdkk8",
            "m.0fzt1kc",
            "m.0dtvg89",
            "m.0rjqd_v",
            "m.0fst9y5",
            "m.0_0_fp",
            "m.0ft2vlr",
            "m.0_0_h6",
            "m.011pnbdj",
            "m.0fqv6z1",
            "m.0g0w8br",
            "m.0m60cx",
            "m.0yljw0",
            "m.0fzs3j4",
            "m.011pbky3",
            "m.0nl37kz",
            "m.0fmj7mj",
            "m.0yn3m0",
            "m.0nnjjzn",
            "m.0g73wtl",
            "m.0m60g2",
            "m.0f_0lph",
            "m.011myyv",
            "m.011ppwbj",
            "m.0rvzh8",
            "m.0n2_44",
            "m.0f4bv1j",
            "m.0shh9bn",
            "m.01dkvpz",
            "m.01cznw4",
            "m.0nsfzn",
            "m.017b29q",
            "m.0fsl88r",
            "m.0dyfktm",
            "m.0gdtw18",
            "m.011p9b18",
            "m.0fw0vkw",
            "m.0fst9xg",
            "m.0fst9yc",
            "m.0125fgj",
            "m.013m5h3",
            "m.012jf744",
            "m.0fkwjrq",
            "m.0fc_1mk",
            "m.0rfp86w",
            "m.0gdtw2j",
            "m.01czny3",
            "g.11b67gkcy5",
            "m.011myxj",
            "m.01dkvtx",
            "m.0f142kc",
            "m.0f8g82q",
            "m.0162zr4",
            "m.0gdtw1r",
            "m.0125fds",
            "m.0rvzgv",
            "m.0zptsbd",
            "m.0qvtc8",
            "m.0xy2lj",
            "m.0nsg0d",
            "m.0dz3nl6",
            "m.0fm00h3",
            "m.0lqxkn",
            "m.0vhw1s",
            "m.0dmw_br",
            "m.0196fq8",
            "m.010smc87",
            "m.0m60bl",
            "m.01dkvp2",
            "m.0fqk53w",
            "m.0f6m0jv",
            "m.0nn463g",
            "m.0rjqk7x",
            "m.0dtvg77",
            "m.0fr0l0c",
            "m.01b6lrw",
            "m.0rvzgd",
            "m.018cjqb",
            "m.010ykpkc",
            "m.011pgv42",
            "m.0fw08bn",
            "m.0_0_gk",
            "m.0152zwl",
            "m.010_7k2c",
            "m.011myxr",
            "m.0fqp888",
            "m.0dyfkv0",
            "m.0fr_v80",
            "m.0gdtw0x",
            "m.0ydy1y",
            "m.017b2c7",
            "m.0z2vns",
            "m.0fz0w5v",
            "m.012_xzxw",
            "m.0fbh7b2",
            "m.0r6k3s",
            "m.01cznyb",
            "m.0f6qz3d",
            "m.0fz7511",
            "m.011hdnkf",
            "m.0dxk222",
            "m.01c8nnz",
            "m.0x9mvw7",
            "m.01dkvw6",
            "m.01cznwl",
            "m.0shvq8s",
            "m.0175qlb",
            "m.0qj3c6",
            "m.0f9c4tl",
            "m.01dkvx9",
            "m.0dyfkvc",
            "m.012cjlz",
            "m.0fbmzfs",
            "m.012jdfhw",
            "m.0gdtw2f",
            "m.0f6z2t0",
            "m.018r0bf",
            "m.0dtvg83",
            "m.0fw31fh",
            "m.0x1pvv",
            "m.0dtb8qg",
            "m.0dtvg8l",
            "m.01cznx0",
            "m.01dkvwf",
            "m.010yqn_",
            "m.0f6014r",
            "m.019dtbb",
            "m.012_k0r7",
            "m.0175ch2",
            "m.0qc9hmx",
            "m.017b2bl",
            "m.0fst9x7",
            "m.0108_6m",
            "m.0fw31gt",
            "m.0yjgdk",
            "m.01cznxg",
            "m.0fst9xc",
            "m.0fst9xq",
            "m.0fxqfb5",
            "m.0fwr9p9",
            "m.011myy5",
            "m.0f2cfdp",
            "m.0196fpd",
            "m.017b2c0",
            "m.0f5v2g1",
            "m.0dqlff0",
            "m.0ft2lht",
            "m.0dwr468",
            "m.010084gr",
            "m.010k49_",
            "m.0xlrlq9",
            "m.0m60ds",
            "m.0fzthgc",
            "m.012_skx_",
            "m.01b2h4l",
            "m.011pjtn6",
            "m.016q8s2",
            "m.011p67qp",
            "m.012cjl2",
            "m.012cjkw",
            "m.0130550r",
            "m.0t6xs8",
            "m.0sjczzn",
            "m.0g14njr",
            "m.0rvzfz",
            "m.0f8z3nm",
            "m.012cjjs",
            "m.0fw5wyq",
            "m.0fym10n",
            "m.0fy8n46",
            "m.0fw31h_",
            "m.0ltmxy",
            "m.0wznrc",
            "m.015w1lh",
            "m.0shv48x",
            "m.0rj455v",
            "m.013m5h_",
            "m.0smdbk7",
            "m.0drkp6z",
            "m.0f_83bq",
            "m.01dsvvw",
            "m.0fsrks1",
            "m.012k66rv",
            "m.0sjwhfz",
            "m.012cjm5",
            "m.012xsn1",
            "m.011kmr8y",
            "m.01dkvp9",
            "m.0vlj8h",
            "m.0fr17cw",
            "m.0f43fkv",
            "m.0f3j2c2",
            "m.012_q4bx",
            "m.0fsfc64",
            "m.0dt_ptv",
            "m.0fzqxxf",
            "m.0rhhgpp",
            "m.0f36_30"
        ],
        "different_answer": [
            [
                "m.018yjsw",
                "m.012y12b0",
                "m.0sm8fxv",
                "m.0_zmw3",
                "m.0ydy24",
                "g.11b80bs1tn",
                "m.0rvzf9",
                "m.01dkvvs",
                "m.0drh8lb",
                "m.01dkvpj",
                "m.0dzhwd7",
                "m.0fr21tl",
                "m.0m60cp",
                "m.01dkvpr",
                "m.0dp72f8",
                "m.0sj2crn",
                "m.0np0py4",
                "m.0ljv15",
                "m.0g5zyhz",
                "m.0zjfjj",
                "m.0168mw1",
                "m.0nmzntz",
                "m.0dr7lg7",
                "m.0m9xs8",
                "m.018r09_",
                "m.01bw4s2",
                "m.018r0b6",
                "m.0xy0b_",
                "m.01dkvx2",
                "m.011pkgnv",
                "m.0f3pjf6",
                "m.012cjk6",
                "m.0dw5_xq",
                "m.012_9f12",
                "m.0dqbw6_",
                "m.0dxnyq5",
                "m.018r0bw",
                "m.012cjjk",
                "m.01b2g_b",
                "m.011myxz",
                "m.012cjlj",
                "m.011pdb9p",
                "m.0_0_fx",
                "m.0m60ff",
                "m.0dvtn_c",
                "m.01dkvq5",
                "m.012_svv2",
                "m.0fst9y8",
                "m.0125fjy",
                "m.017h_5s",
                "g.11b80ddnd_",
                "m.0lljdp",
                "m.0g144h_",
                "m.013r0nb",
                "m.0sjxs37",
                "m.0196fp5",
                "m.0fr2f7n",
                "m.0f3nxhj",
                "m.0fr25mq",
                "m.0x7x8jf",
                "m.0gdtw1d",
                "m.01dkvqv",
                "m.010s_5t8",
                "m.0fd1zg2",
                "m.0dyfkvx",
                "m.0nlm_x0",
                "m.0fydglj",
                "m.01d8txf",
                "m.0dtvg8s",
                "m.0nmz8sn",
                "m.0_0_hn",
                "m.0dn3npv",
                "m.0dzpmp2",
                "m.01cznwt",
                "m.0frh_11",
                "m.0dzm8p0",
                "m.0fvygv8",
                "m.0ykc0x",
                "m.0ft2qph",
                "m.0dtrp8c",
                "m.0fst9xt",
                "m.018r0c2",
                "m.0fw999p",
                "m.0_cwwy",
                "m.0snrjwr",
                "m.0f2rq2t",
                "m.0ftf3g6",
                "m.0nk__k5",
                "m.0f_q7d7",
                "m.0fg1wf6",
                "m.0g13kj3",
                "m.01cznxx",
                "m.0fc7f26",
                "m.012cjlr",
                "m.0dtvg6t",
                "m.0ftrm64",
                "m.015dwjc",
                "m.0g1gzly",
                "m.01dr42x",
                "m.012tqfc9",
                "m.0fz751m",
                "m.0_0_gb",
                "m.01dsvm6",
                "m.0rvzfj",
                "m.01dkvr1",
                "m.0fw31g7",
                "m.012cjj_",
                "m.0sngt3w",
                "m.0qhqdx",
                "m.0dtljvv",
                "m.0fxkdhk",
                "m.0rvzf2",
                "m.0nl9qxd",
                "m.0m60c7",
                "m.0gdtw29",
                "m.0196fq1",
                "m.0gdtw0_",
                "m.01dkvqm",
                "m.0f_mq0m",
                "m.0ydxzn",
                "m.0dyfktv",
                "m.0skth34",
                "m.0fxkw0z",
                "m.0fxcgvy",
                "m.01cznk9",
                "m.0sllgc1",
                "m.0zh9t_",
                "m.0fy8n3m",
                "m.0d_ks0h",
                "m.012xhrxz",
                "m.0dqb4nd",
                "m.0np0f3h",
                "m.0fqvm4j",
                "m.0fr0js8",
                "m.0r3gf_",
                "m.01dkvvb",
                "m.0fry_50",
                "m.012cjmd",
                "m.0dq88ng",
                "m.01cznx7",
                "m.0125fgz",
                "m.012cjhg",
                "m.01cvyp_",
                "m.0fw_wmc",
                "m.0dtvg7y",
                "m.0_0_g3",
                "m.01088__4",
                "m.012cjjb",
                "m.0lp413",
                "m.0rvzh1",
                "m.0dtvg7m",
                "m.0fvxy86",
                "m.0dqv41v",
                "m.0nlmrvm",
                "m.0m60d3",
                "m.0ydd80",
                "m.0dw61kc",
                "m.0fwz2tv",
                "m.015nbfn",
                "m.0_0_hf",
                "m.011p54r5",
                "m.0fst9y2",
                "m.012cjkn",
                "m.0sn2h12",
                "m.0dpts1p",
                "m.0gdtw1k",
                "m.0f2n56y",
                "m.0fwrblf",
                "m.0m60f6",
                "m.0fy6905",
                "m.0ftm3d7",
                "m.01dkvvk",
                "m.0shjmm7",
                "m.0frj7rg",
                "m.0125fkc",
                "m.016dgnp",
                "m.011myym",
                "m.0f79mpy",
                "m.012cjh7",
                "m.0rvzgm",
                "m.01cznxp",
                "m.0d_s2tn",
                "m.011plnkt",
                "m.0fstrnj",
                "m.0f13pk_",
                "m.011pfg6v",
                "m.0_pcwk",
                "m.0dvxm0d",
                "m.0dtvg7g",
                "m.0nmk9gx",
                "m.01cznys",
                "m.011myz1",
                "m.0f1jd9_",
                "m.0nylqs",
                "m.0yljyn",
                "m.0vy2vlk",
                "m.010mw35t",
                "m.012cjl9",
                "m.0g7z2x_",
                "m.016btlz",
                "m.0sp3sk1",
                "m.0dzx9c9",
                "m.016zk_k",
                "m.012cjmm",
                "m.0y4bhd",
                "m.0fst9x_",
                "m.0dyfkvm",
                "m.0fw31jw",
                "m.0_y8l2",
                "m.01dkvv_",
                "m.0_0_g_",
                "m.01dkvwn",
                "m.012phz_2",
                "m.012bp7r",
                "m.01637sk",
                "m.0fv7h0z",
                "m.01cznwc",
                "m.01dkvxj",
                "m.0g0scqg",
                "m.0shqv6r",
                "m.0fyrz0m",
                "m.0rgwcn5",
                "m.01dkvv3",
                "m.01099c7",
                "m.0dqk3sz",
                "m.0g1gzm5",
                "m.0rvzfr",
                "m.01dkvqd",
                "m.0fffj25",
                "m.01bxmxs",
                "m.0rjqdgz",
                "m.0125fjq",
                "m.01cznyk",
                "m.0qc0hc",
                "m.0fx3k4h",
                "m.0m60db",
                "m.0dpv96f",
                "m.012cjhx",
                "m.01dkvww",
                "m.0f9v2x6",
                "m.011myyd",
                "m.0196fpm",
                "m.0f66p_p",
                "m.0dqdkk8",
                "m.0fzt1kc",
                "m.0dtvg89",
                "m.0rjqd_v",
                "m.0fst9y5",
                "m.0_0_fp",
                "m.0ft2vlr",
                "m.0_0_h6",
                "m.011pnbdj",
                "m.0fqv6z1",
                "m.0g0w8br",
                "m.0m60cx",
                "m.0yljw0",
                "m.0fzs3j4",
                "m.011pbky3",
                "m.0nl37kz",
                "m.0fmj7mj",
                "m.0yn3m0",
                "m.0nnjjzn",
                "m.0g73wtl",
                "m.0m60g2",
                "m.0f_0lph",
                "m.011myyv",
                "m.011ppwbj",
                "m.0rvzh8",
                "m.0n2_44",
                "m.0f4bv1j",
                "m.0shh9bn",
                "m.01dkvpz",
                "m.01cznw4",
                "m.0nsfzn",
                "m.017b29q",
                "m.0fsl88r",
                "m.0dyfktm",
                "m.0gdtw18",
                "m.011p9b18",
                "m.0fw0vkw",
                "m.0fst9xg",
                "m.0fst9yc",
                "m.0125fgj",
                "m.013m5h3",
                "m.012jf744",
                "m.0fkwjrq",
                "m.0fc_1mk",
                "m.0rfp86w",
                "m.0gdtw2j",
                "m.01czny3",
                "g.11b67gkcy5",
                "m.011myxj",
                "m.01dkvtx",
                "m.0f142kc",
                "m.0f8g82q",
                "m.0162zr4",
                "m.0gdtw1r",
                "m.0125fds",
                "m.0rvzgv",
                "m.0zptsbd",
                "m.0qvtc8",
                "m.0xy2lj",
                "m.0nsg0d",
                "m.0dz3nl6",
                "m.0fm00h3",
                "m.0lqxkn",
                "m.0vhw1s",
                "m.0dmw_br",
                "m.0196fq8",
                "m.010smc87",
                "m.0m60bl",
                "m.01dkvp2",
                "m.0fqk53w",
                "m.0f6m0jv",
                "m.0nn463g",
                "m.0rjqk7x",
                "m.0dtvg77",
                "m.0fr0l0c",
                "m.01b6lrw",
                "m.0rvzgd",
                "m.018cjqb",
                "m.010ykpkc",
                "m.011pgv42",
                "m.0fw08bn",
                "m.0_0_gk",
                "m.0152zwl",
                "m.010_7k2c",
                "m.011myxr",
                "m.0fqp888",
                "m.0dyfkv0",
                "m.0fr_v80",
                "m.0gdtw0x",
                "m.0ydy1y",
                "m.017b2c7",
                "m.0z2vns",
                "m.0fz0w5v",
                "m.012_xzxw",
                "m.0fbh7b2",
                "m.0r6k3s",
                "m.01cznyb",
                "m.0f6qz3d",
                "m.0fz7511",
                "m.011hdnkf",
                "m.0dxk222",
                "m.01c8nnz",
                "m.0x9mvw7",
                "m.01dkvw6",
                "m.01cznwl",
                "m.0shvq8s",
                "m.0175qlb",
                "m.0qj3c6",
                "m.0f9c4tl",
                "m.01dkvx9",
                "m.0dyfkvc",
                "m.012cjlz",
                "m.0fbmzfs",
                "m.012jdfhw",
                "m.0gdtw2f",
                "m.0f6z2t0",
                "m.018r0bf",
                "m.0dtvg83",
                "m.0fw31fh",
                "m.0x1pvv",
                "m.0dtb8qg",
                "m.0dtvg8l",
                "m.01cznx0",
                "m.01dkvwf",
                "m.010yqn_",
                "m.0f6014r",
                "m.019dtbb",
                "m.012_k0r7",
                "m.0175ch2",
                "m.0qc9hmx",
                "m.017b2bl",
                "m.0fst9x7",
                "m.0108_6m",
                "m.0fw31gt",
                "m.0yjgdk",
                "m.01cznxg",
                "m.0fst9xc",
                "m.0fst9xq",
                "m.0fxqfb5",
                "m.0fwr9p9",
                "m.011myy5",
                "m.0f2cfdp",
                "m.0196fpd",
                "m.017b2c0",
                "m.0f5v2g1",
                "m.0dqlff0",
                "m.0ft2lht",
                "m.0dwr468",
                "m.010084gr",
                "m.010k49_",
                "m.0xlrlq9",
                "m.0m60ds",
                "m.0fzthgc",
                "m.012_skx_",
                "m.01b2h4l",
                "m.011pjtn6",
                "m.016q8s2",
                "m.011p67qp",
                "m.012cjl2",
                "m.012cjkw",
                "m.0130550r",
                "m.0t6xs8",
                "m.0sjczzn",
                "m.0g14njr",
                "m.0rvzfz",
                "m.0f8z3nm",
                "m.012cjjs",
                "m.0fw5wyq",
                "m.0fym10n",
                "m.0fy8n46",
                "m.0fw31h_",
                "m.0ltmxy",
                "m.0wznrc",
                "m.015w1lh",
                "m.0shv48x",
                "m.0rj455v",
                "m.013m5h_",
                "m.0smdbk7",
                "m.0drkp6z",
                "m.0f_83bq",
                "m.01dsvvw",
                "m.0fsrks1",
                "m.012k66rv",
                "m.0sjwhfz",
                "m.012cjm5",
                "m.012xsn1",
                "m.011kmr8y",
                "m.01dkvp9",
                "m.0vlj8h",
                "m.0fr17cw",
                "m.0f43fkv",
                "m.0f3j2c2",
                "m.012_q4bx",
                "m.0fsfc64",
                "m.0dt_ptv",
                "m.0fzqxxf",
                "m.0rhhgpp",
                "m.0f36_30"
            ]
        ],
        "entity_linking": {
            "Smokey Robinson": "m.012_6c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012_6c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012_6c ns:music.artist.track ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012_6c')\na.add_fact('m.012_6c', 'music.artist.track', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-98",
        "question": "who was vice president when jfk was president",
        "answer": [
            "m.0f7fy"
        ],
        "different_answer": [
            [
                "m.0f7fy"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('m.0d3k14', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-99",
        "question": "what is serbian language called",
        "answer": [
            "m.0k0sb"
        ],
        "different_answer": [
            [
                "m.0k0sb"
            ]
        ],
        "entity_linking": {
            "Serbia": "m.077qn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.077qn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.077qn ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.077qn')\na.add_fact('m.077qn', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-100",
        "question": "what language is spoken in haiti today",
        "answer": [
            "m.02dhwl",
            "m.064_8sq"
        ],
        "different_answer": [
            [
                "m.02dhwl",
                "m.064_8sq"
            ],
            [
                "m.02dhwl",
                "m.064_8sq"
            ]
        ],
        "entity_linking": {
            "Haiti": "m.03gyl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gyl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gyl ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03gyl')\na.add_fact('m.03gyl', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-102",
        "question": "who played barbara gordon batgirl",
        "answer": [
            "m.041w0w1",
            "m.0y54_x6",
            "m.0443_w"
        ],
        "different_answer": [
            [
                "m.041w0w1",
                "m.0y54_x6",
                "m.0443_w"
            ]
        ],
        "entity_linking": {
            "Barbara Gordon": "m.03hvfx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hvfx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hvfx ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03hvfx')\na.add_fact('m.03hvfx', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-103",
        "question": "what basketball teams has shaq played for",
        "answer": [
            "m.0jml5",
            "m.0jmk7",
            "m.0bwjj",
            "m.0jm7n",
            "m.026dqjm",
            "m.0jm2v",
            "m.0jm4b"
        ],
        "different_answer": [
            [
                "m.0jml5",
                "m.0jmk7",
                "m.0bwjj",
                "m.0jm7n",
                "m.026dqjm",
                "m.0jm2v",
                "m.0jm4b"
            ]
        ],
        "entity_linking": {
            "Shaquille O'Neal": "m.012xdf",
            "Basketball": "m.018w8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012xdf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012xdf ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.sport ns:m.018w8 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018w8')\na.add_filter('x0', '!=', 'm.012xdf')\na.add_fact('x0', 'sports.sports_team.sport', 'm.018w8')\na.add_fact('m.012xdf', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-104",
        "question": "where is jay leno from",
        "answer": [
            "m.0yc84"
        ],
        "different_answer": [
            [
                "m.0yc84"
            ]
        ],
        "entity_linking": {
            "Jay Leno": "m.046lt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.046lt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.046lt ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.046lt')\na.add_fact('m.046lt', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-105",
        "question": "what language do people from thailand speak",
        "answer": [
            "m.04lx1w",
            "m.052px1",
            "m.0c_v2",
            "m.08h4f2",
            "m.02hwgbx",
            "m.08h4l8",
            "m.011ln5",
            "m.01lqm",
            "m.0bxn4",
            "m.072f4m",
            "m.07zrf",
            "m.0bskhb",
            "m.02hx03r"
        ],
        "different_answer": [
            [
                "m.04lx1w",
                "m.052px1",
                "m.0c_v2",
                "m.08h4f2",
                "m.02hwgbx",
                "m.08h4l8",
                "m.011ln5",
                "m.01lqm",
                "m.0bxn4",
                "m.072f4m",
                "m.07zrf",
                "m.0bskhb",
                "m.02hx03r"
            ],
            [
                "m.0c_v2"
            ]
        ],
        "entity_linking": {
            "Thailand": "m.07f1x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07f1x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07f1x ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07f1x')\na.add_fact('m.07f1x', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-106",
        "question": "who did armie hammer play in the social network",
        "answer": [
            "m.09tbj8d",
            "m.09tb_f3"
        ],
        "different_answer": [
            [
                "m.09tbj8d",
                "m.09tb_f3"
            ]
        ],
        "entity_linking": {
            "The Social Network": "m.07s846j",
            "Armie Hammer": "m.03y9941"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s846j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s846j ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.03y9941 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03y9941')\na.add_filter('x0', '!=', 'm.07s846j')\na.add_fact('x1', 'film.performance.actor', 'm.03y9941')\na.add_fact('m.07s846j', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-107",
        "question": "what was thomas jefferson role in the declaration of independence",
        "answer": [
            "m.01d30f",
            "m.02h6pd1",
            "m.03sbb",
            "m.04gc2",
            "m.02h6fbs",
            "m.0kyk",
            "m.0g0vx",
            "m.0cbd2",
            "m.0mn6",
            "m.016fc2"
        ],
        "different_answer": [
            [
                "m.01d30f",
                "m.02h6pd1",
                "m.03sbb",
                "m.04gc2",
                "m.02h6fbs",
                "m.0kyk",
                "m.0g0vx",
                "m.0cbd2",
                "m.0mn6",
                "m.016fc2"
            ]
        ],
        "entity_linking": {
            "Thomas Jefferson": "m.07cbs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07cbs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07cbs ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07cbs')\na.add_fact('m.07cbs', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-108",
        "question": "what was the book written by charles darwin",
        "answer": [
            "m.04vd9fr",
            "m.04vrtzh",
            "m.04vgd8k",
            "m.04vk_tf",
            "m.04vrrf1",
            "m.04v0s8r",
            "m.04tvk_s",
            "m.04vrx_h",
            "m.04vgb6t",
            "m.04tvkwq",
            "m.04vk_sd",
            "m.05bpx1m",
            "m.04vd9gj",
            "m.04v0tbx",
            "m.04vrsm9",
            "m.04v0wg1",
            "m.04vrrv3",
            "m.04v0xyp",
            "m.04vrrr7",
            "m.04vrrsp",
            "m.04tvkx4",
            "m.04vrv0y",
            "m.04vgd8v",
            "m.04vgcjz",
            "m.04v136y",
            "m.04v11tx",
            "m.04vrrt7",
            "m.04vd9jr",
            "m.04v0t8c",
            "m.04v0s5_",
            "m.04tvkxl",
            "m.04tvkw8",
            "m.04vrrqq",
            "m.04vrrqz",
            "m.04vrrsd",
            "m.04vrrtj",
            "m.04v0xz6",
            "m.04vk_vy",
            "m.04vrtzs",
            "m.04v0zkt",
            "m.04tvkzl",
            "m.04vrrvz",
            "m.04v0t8w",
            "m.04v0t7v",
            "m.04vrsmk",
            "m.04vrrq6",
            "m.04v0x_r",
            "m.04tvl0q",
            "m.04v0xy8",
            "m.04vrt_v",
            "m.04vl150",
            "m.04v0t9c",
            "m.04vrv0d",
            "m.04vd9k6",
            "m.04vdbgy",
            "m.04tvkyg",
            "m.04vl15v",
            "m.04v0tb2",
            "m.04vl16d",
            "m.04vd9hx",
            "m.04vrv0p",
            "m.04v0tc5",
            "m.04v0wf1",
            "m.04vdbgc",
            "m.04vd9kx",
            "m.04vd9hb",
            "m.04vl14r",
            "m.04vrryj",
            "m.04vrry5",
            "m.04tvl36",
            "m.04vgb6b",
            "m.04tvk_0",
            "m.04vgb60",
            "m.04v0wfk",
            "m.04v0s7q",
            "m.05bpx0q",
            "m.04vd9f_",
            "m.04v0s6q",
            "m.04v0s7z",
            "m.04v0tbc",
            "m.04v138q",
            "m.04v10qf",
            "m.04vrrw8",
            "m.04vrrwl",
            "m.04tvl01",
            "m.04vd9hm",
            "m.04vd9h2",
            "m.04vrs2v",
            "m.04vrryw",
            "m.04vk_wr",
            "m.04vl14g",
            "m.04tvk_h",
            "m.04v0tbm",
            "m.04v137n",
            "m.04vrrsz",
            "m.04vk_tx",
            "m.04v0t93",
            "m.04vrs1h",
            "m.04v0t8m",
            "m.04vd9lx",
            "m.04vrt_l",
            "m.04vrs3k",
            "m.04v0s6g",
            "m.04vk_s2",
            "m.04vrvkv",
            "m.04v14tk",
            "m.04v0s86",
            "m.04v0s76",
            "m.04tvkz4",
            "m.04vd9lm",
            "m.04v1385",
            "m.04vl15k",
            "m.04v0s8h",
            "m.04vgch9",
            "m.04vrrqg",
            "m.04v0s5j",
            "m.04tvky0",
            "m.04vrt_9",
            "m.04vrrtt",
            "m.04vk_vn",
            "m.04vgb78",
            "m.04vrt_0",
            "m.04v11qz",
            "m.04v0x_6",
            "m.04v0s51",
            "m.04vgcjf",
            "m.04tvkyq",
            "m.04v0s6z",
            "m.04vrv03",
            "m.04v0xzg",
            "m.04vk_w6",
            "m.04v0s7g",
            "m.04vrrvd"
        ],
        "different_answer": [
            [
                "m.04vd9fr",
                "m.04vrtzh",
                "m.04vgd8k",
                "m.04vk_tf",
                "m.04vrrf1",
                "m.04v0s8r",
                "m.04tvk_s",
                "m.04vrx_h",
                "m.04vgb6t",
                "m.04tvkwq",
                "m.04vk_sd",
                "m.05bpx1m",
                "m.04vd9gj",
                "m.04v0tbx",
                "m.04vrsm9",
                "m.04v0wg1",
                "m.04vrrv3",
                "m.04v0xyp",
                "m.04vrrr7",
                "m.04vrrsp",
                "m.04tvkx4",
                "m.04vrv0y",
                "m.04vgd8v",
                "m.04vgcjz",
                "m.04v136y",
                "m.04v11tx",
                "m.04vrrt7",
                "m.04vd9jr",
                "m.04v0t8c",
                "m.04v0s5_",
                "m.04tvkxl",
                "m.04tvkw8",
                "m.04vrrqq",
                "m.04vrrqz",
                "m.04vrrsd",
                "m.04vrrtj",
                "m.04v0xz6",
                "m.04vk_vy",
                "m.04vrtzs",
                "m.04v0zkt",
                "m.04tvkzl",
                "m.04vrrvz",
                "m.04v0t8w",
                "m.04v0t7v",
                "m.04vrsmk",
                "m.04vrrq6",
                "m.04v0x_r",
                "m.04tvl0q",
                "m.04v0xy8",
                "m.04vrt_v",
                "m.04vl150",
                "m.04v0t9c",
                "m.04vrv0d",
                "m.04vd9k6",
                "m.04vdbgy",
                "m.04tvkyg",
                "m.04vl15v",
                "m.04v0tb2",
                "m.04vl16d",
                "m.04vd9hx",
                "m.04vrv0p",
                "m.04v0tc5",
                "m.04v0wf1",
                "m.04vdbgc",
                "m.04vd9kx",
                "m.04vd9hb",
                "m.04vl14r",
                "m.04vrryj",
                "m.04vrry5",
                "m.04tvl36",
                "m.04vgb6b",
                "m.04tvk_0",
                "m.04vgb60",
                "m.04v0wfk",
                "m.04v0s7q",
                "m.05bpx0q",
                "m.04vd9f_",
                "m.04v0s6q",
                "m.04v0s7z",
                "m.04v0tbc",
                "m.04v138q",
                "m.04v10qf",
                "m.04vrrw8",
                "m.04vrrwl",
                "m.04tvl01",
                "m.04vd9hm",
                "m.04vd9h2",
                "m.04vrs2v",
                "m.04vrryw",
                "m.04vk_wr",
                "m.04vl14g",
                "m.04tvk_h",
                "m.04v0tbm",
                "m.04v137n",
                "m.04vrrsz",
                "m.04vk_tx",
                "m.04v0t93",
                "m.04vrs1h",
                "m.04v0t8m",
                "m.04vd9lx",
                "m.04vrt_l",
                "m.04vrs3k",
                "m.04v0s6g",
                "m.04vk_s2",
                "m.04vrvkv",
                "m.04v14tk",
                "m.04v0s86",
                "m.04v0s76",
                "m.04tvkz4",
                "m.04vd9lm",
                "m.04v1385",
                "m.04vl15k",
                "m.04v0s8h",
                "m.04vgch9",
                "m.04vrrqg",
                "m.04v0s5j",
                "m.04tvky0",
                "m.04vrt_9",
                "m.04vrrtt",
                "m.04vk_vn",
                "m.04vgb78",
                "m.04vrt_0",
                "m.04v11qz",
                "m.04v0x_6",
                "m.04v0s51",
                "m.04vgcjf",
                "m.04tvkyq",
                "m.04v0s6z",
                "m.04vrv03",
                "m.04v0xzg",
                "m.04vk_w6",
                "m.04v0s7g",
                "m.04vrrvd"
            ],
            [
                "m.067q6ks",
                "m.0hhv3fy",
                "m.04t39qh",
                "m.06tz8bh",
                "m.07kbf6f",
                "m.0f0c7c3",
                "m.06mx6qb",
                "m.0f0gnbh",
                "m.0682dh_",
                "m.06fkngp",
                "m.06l7w7c",
                "m.0c1t1lr",
                "m.0bhjdmn",
                "m.0c1t1n1",
                "m.02pzzmw",
                "m.06n65g8",
                "m.0698p22",
                "m.05f3_5v",
                "m.06bk806",
                "m.06ggf11",
                "m.06rg6nf",
                "m.0c1t1mh",
                "m.069gx8t",
                "m.06fdzsg",
                "m.06m68vy",
                "m.06gx9nb",
                "m.06qs0k_",
                "m.06n8gzr",
                "m.06jw00r",
                "m.04t39rr",
                "m.069j1zn",
                "m.06syjt2",
                "m.06dp_0n",
                "m.0bhjdm2",
                "m.05bpx28",
                "m.06fz4ys",
                "m.0bhjdmk",
                "m.06n8zlx",
                "m.06n4jwv",
                "m.06cbh6d",
                "m.06f6v8g",
                "m.0f0hdk1",
                "m.06ndlh7",
                "m.05f3187",
                "m.06mmypb",
                "m.06r9mwf",
                "m.06cvnt5",
                "m.0f0c2xv",
                "m.068kgmb",
                "m.06qr9xq",
                "m.06c6q4x",
                "m.05nhwt",
                "m.06jc2s7",
                "m.0f0dvyt",
                "m.06nhv9s",
                "m.05kdgx0",
                "m.0c1t1m3",
                "m.06jj8zx",
                "m.0kfsvj7",
                "m.07kd9wf",
                "m.0f0g5py",
                "m.04t39r_",
                "m.06msmgd",
                "m.0f0cnxy",
                "m.0f0fhpx",
                "m.06g77fm",
                "m.0c1t1ms",
                "m.067jgzq",
                "m.06k4hmf",
                "m.02l2z6",
                "m.068zv2w",
                "m.06hggft",
                "m.0c1t1m6",
                "m.06tjzfj",
                "m.06hv624",
                "m.0c1t1nb",
                "m.0f0jl1d",
                "m.06qxf6m",
                "m.01qq45",
                "m.0f0ccfx",
                "m.03d86kx",
                "m.06r08pz",
                "m.0bqqyp6",
                "m.06hz4px",
                "m.06fp6__",
                "m.0f0c_dr",
                "m.010rjsvs",
                "m.06hks6x",
                "m.0c1t1ly",
                "m.0f0fsbb",
                "m.06jygl6",
                "m.0bhjdm8",
                "m.06j8lmr",
                "m.0bqqynz",
                "m.06sh5th",
                "m.06c9lwy",
                "m.0cc54s",
                "m.06dv5j2",
                "m.04t39s7",
                "m.06nxw56",
                "m.06q9dnn",
                "m.06cjxqf",
                "m.0d_3d1b",
                "m.05kdgws",
                "m.010sfr1g",
                "m.06jcl9b",
                "m.06j18wj",
                "m.06pw5vt",
                "m.069mjtn",
                "m.06mwj8z",
                "m.06h96f4",
                "m.06dhg29",
                "m.06hxnc2",
                "m.06dgzf9",
                "m.04t39p_",
                "m.0f0dh7c",
                "m.0d_472q",
                "m.0f0jl1z",
                "m.06dhg2k",
                "m.0c1t1ml",
                "m.06cnkd2",
                "m.05pskf",
                "m.06kmynd",
                "m.0685fg8",
                "m.06c2mtr",
                "m.0c1t1mz",
                "m.06gxb0v",
                "m.06lcpyv",
                "m.06km_gd",
                "m.06mc3j5",
                "m.06p4t1s",
                "m.06h4s28",
                "m.05bktj1",
                "m.04t39qr",
                "m.06czk9t",
                "m.06jbq8m",
                "m.0f0jl1p",
                "m.0f0bz0f",
                "m.06k7t44",
                "m.06dplrp",
                "m.06by4cp",
                "m.06px17_"
            ]
        ],
        "entity_linking": {
            "Charles Darwin": "m.01lwx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lwx')\na.add_fact('m.01lwx', 'book.author.book_editions_published', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-109",
        "question": "who did tim tebow play college football for",
        "answer": [
            "m.0ftf0f"
        ],
        "different_answer": [
            [
                "m.0ftf0f"
            ]
        ],
        "entity_linking": {
            "Tim Tebow": "m.0g7km1",
            "University of Florida": "m.0j_sncb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g7km1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g7km1 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.school_sports_team.school ns:m.0j_sncb .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j_sncb')\na.add_filter('x0', '!=', 'm.0g7km1')\na.add_fact('x0', 'sports.school_sports_team.school', 'm.0j_sncb')\na.add_fact('m.0g7km1', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-110",
        "question": "who does peyton manning play football for",
        "answer": [
            "m.0289q"
        ],
        "different_answer": [
            [
                "m.0289q"
            ]
        ],
        "entity_linking": {
            "Peyton Manning": "m.027jv8",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027jv8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027jv8 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027jv8')\na.add_fact('m.027jv8', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-111",
        "question": "where is the carpathian mountain range located",
        "answer": [
            "m.02j9z"
        ],
        "different_answer": [
            [
                "m.02j9z"
            ]
        ],
        "entity_linking": {
            "Carpathian Mountains": "m.0cdsk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cdsk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cdsk ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cdsk')\na.add_fact('m.0cdsk', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-112",
        "question": "what was robert burns",
        "answer": [
            "m.0kyk",
            "m.0cbd2",
            "m.0knj1",
            "m.05z96"
        ],
        "different_answer": [
            [
                "m.0kyk",
                "m.0cbd2",
                "m.0knj1",
                "m.05z96"
            ]
        ],
        "entity_linking": {
            "Robert Burns": "m.09482"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09482)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09482 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09482')\na.add_fact('m.09482', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-114",
        "question": "who did the voice of darth vader in episode 3",
        "answer": [
            "m.0f276"
        ],
        "different_answer": [
            [
                "m.0f276"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Star Wars Episode III: Revenge of the Sith": "m.0fdv3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0fdv3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fdv3')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.film', 'm.0fdv3')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-115",
        "question": "what super bowl did peyton manning win",
        "answer": [
            "m.04k5qm"
        ],
        "different_answer": [
            [
                "m.04k5qm"
            ]
        ],
        "entity_linking": {
            "Peyton Manning": "m.027jv8"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?z\nWHERE {\n  ns:m.027jv8 ns:sports.pro_athlete.teams ?y .\n  ?y ns:sports.sports_team_roster.team ?x . #team\n  ?x ns:sports.sports_team.championships ?z . # super bowls\n  ?z ns:common.topic.notable_types ns:m.01xljv1 . #super bowl\n  ?z ns:sports.sports_championship_event.champion ?c .\n  ?z ns:time.event.start_date ?a .\n  \n  # Check the time overlap\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \n             EXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \n             FILTER(xsd:datetime(?sk1) - xsd:datetime(?a) <= 0) })\n\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \n             EXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \n             FILTER(xsd:datetime(?sk3) - xsd:datetime(?a) >= 0 ) }) \n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-116",
        "question": "which country was justin bieber born in",
        "answer": [
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.06w2sn5 ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-118",
        "question": "who fought in the gulf war 1991",
        "answer": [
            "m.0d05q4",
            "m.01z215",
            "m.0jgd",
            "m.09c7w0",
            "m.0f8l9c",
            "m.07ssc",
            "m.0chghy"
        ],
        "different_answer": [
            [
                "m.0d05q4",
                "m.01z215",
                "m.0jgd",
                "m.09c7w0",
                "m.0f8l9c",
                "m.07ssc",
                "m.0chghy"
            ]
        ],
        "entity_linking": {
            "Gulf War": "m.018w0j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018w0j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018w0j ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018w0j')\na.add_fact('m.018w0j', 'military.military_conflict.combatants', 'x1')\na.add_fact('x1', 'military.military_combatant_group.combatants', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-119",
        "question": "who plays london tipton in suite life on deck",
        "answer": [
            "m.05pmzb"
        ],
        "different_answer": [
            [
                "m.05pmzb"
            ]
        ],
        "entity_linking": {
            "The Suite Life on Deck": "m.03mj4jm",
            "London Tipton": "m.07g8r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03mj4jm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03mj4jm ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.07g8r3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07g8r3')\na.add_filter('x0', '!=', 'm.03mj4jm')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.07g8r3')\na.add_fact('m.03mj4jm', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-121",
        "question": "what team did david beckham play for in 2011",
        "answer": [
            "m.01k2yr"
        ],
        "different_answer": [
            [
                "m.01k2yr"
            ]
        ],
        "entity_linking": {
            "David Beckham": "m.02d9k",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02d9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02d9k ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02d9k')\na.add_fact('m.02d9k', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-122",
        "question": "where did francisco coronado come from",
        "answer": [
            "m.0b283h"
        ],
        "different_answer": [
            [
                "m.0b283h"
            ]
        ],
        "entity_linking": {
            "Francisco V\u00e1zquez de Coronado": "m.0jgb2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgb2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgb2 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgb2')\na.add_fact('m.0jgb2', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-123",
        "question": "what all does google now do",
        "answer": [
            "m.0wf0rgl",
            "m.0pb8gtr",
            "m.0nb7n8f",
            "m.0dm258",
            "m.010pkp62",
            "m.0j7m2zm",
            "m.03w9g0f",
            "m.064qgt0",
            "m.06ny5h",
            "m.0fpj3tb",
            "m.0b6g2kz",
            "m.0k2998k",
            "m.0k0p036"
        ],
        "different_answer": [
            [
                "m.0wf0rgl",
                "m.0pb8gtr",
                "m.0nb7n8f",
                "m.0dm258",
                "m.010pkp62",
                "m.0j7m2zm",
                "m.03w9g0f",
                "m.064qgt0",
                "m.06ny5h",
                "m.0fpj3tb",
                "m.0b6g2kz",
                "m.0k2998k",
                "m.0k0p036"
            ]
        ],
        "entity_linking": {
            "Google": "m.045c7b",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:business.consumer_company.products ?y .\n?y ns:business.company_product_relationship.consumer_product ?x .\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.from_date ?sk0} || \nEXISTS {?y ns:business.company_product_relationship.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.to_date ?sk2} || \nEXISTS {?y ns:business.company_product_relationship.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045c7b')\na.add_fact('m.045c7b', 'business.consumer_company.products', 'x1')\na.add_time_constrain('x1', 'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'business.company_product_relationship.consumer_product', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-124",
        "question": "what language does egyptian people speak",
        "answer": [
            "m.025rvv7"
        ],
        "different_answer": [
            [
                "m.025rvv7"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-125",
        "question": "what are abraham sons names",
        "answer": [
            "m.02w6dpm",
            "m.02pv75j",
            "m.0ch5jk5",
            "m.03xqw",
            "m.08flgy",
            "m.0b__3p",
            "m.0c05cp",
            "m.01ghr4"
        ],
        "different_answer": [
            [
                "m.02w6dpm",
                "m.02pv75j",
                "m.0ch5jk5",
                "m.03xqw",
                "m.08flgy",
                "m.0b__3p",
                "m.0c05cp",
                "m.01ghr4"
            ]
        ],
        "entity_linking": {
            "Abraham": "m.0pwb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pwb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pwb ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0pwb')\na.add_fact('m.0pwb', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-126",
        "question": "who wrote the jana gana mana",
        "answer": [
            "m.0d0mbj",
            "m.02vx721"
        ],
        "different_answer": [
            [
                "m.0d0mbj",
                "m.02vx721"
            ]
        ],
        "entity_linking": {
            "Jana Gana Mana": "m.0fl44"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fl44)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fl44 ns:music.composition.composer ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fl44')\na.add_fact('m.0fl44', 'music.composition.composer', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-127",
        "question": "what type of cancer did gilda radner die of",
        "answer": [
            "m.025hl8"
        ],
        "different_answer": [
            [
                "m.025hl8"
            ]
        ],
        "entity_linking": {
            "Gilda Radner": "m.0mj4n",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mj4n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mj4n ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.0mj4n')\na.add_fact('x0', 'people.cause_of_death.parent_cause_of_death', 'm.0qcr0')\na.add_fact('m.0mj4n', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-128",
        "question": "who plays juni cortez",
        "answer": [
            "m.042ldz"
        ],
        "different_answer": [
            [
                "m.042ldz"
            ]
        ],
        "entity_linking": {
            "Juni Cortez": "m.02ql73"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ql73)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ql73 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ql73')\na.add_fact('m.02ql73', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-129",
        "question": "what was lucille ball",
        "answer": [
            "m.02hrh1q",
            "m.0d1pc",
            "m.03gjzk",
            "m.09l65",
            "m.018gz8"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.0d1pc",
                "m.03gjzk",
                "m.09l65",
                "m.018gz8"
            ]
        ],
        "entity_linking": {
            "Lucille Ball": "m.04nw9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04nw9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04nw9 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04nw9')\na.add_fact('m.04nw9', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-131",
        "question": "who inspired obama",
        "answer": [
            "m.01d1nj",
            "m.04ct6p",
            "m.018q7p"
        ],
        "different_answer": [
            [
                "m.01d1nj",
                "m.04ct6p",
                "m.018q7p"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-132",
        "question": "who is michael j fox wife",
        "answer": [
            "m.03gpck"
        ],
        "different_answer": [
            [
                "m.03gpck"
            ]
        ],
        "entity_linking": {
            "Michael J. Fox": "m.0hz_1",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz_1 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0hz_1')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0hz_1', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-133",
        "question": "where did dolly parton grow up",
        "answer": [
            "m.0_wrs"
        ],
        "different_answer": [
            [
                "m.0_wrs"
            ]
        ],
        "entity_linking": {
            "Dolly Parton": "m.02f1c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02f1c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02f1c ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02f1c')\na.add_fact('m.02f1c', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-134",
        "question": "what type of books did agatha christie wrote",
        "answer": [
            "m.0dxtg",
            "m.02hv44_",
            "m.05z96",
            "m.0cbd2",
            "m.02xhgwq"
        ],
        "different_answer": [
            [
                "m.0dxtg",
                "m.02hv44_",
                "m.05z96",
                "m.0cbd2",
                "m.02xhgwq"
            ]
        ],
        "entity_linking": {
            "Agatha Christie": "m.0ldd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ldd')\na.add_fact('m.0ldd', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-138",
        "question": "what are the four main languages spoken in spain",
        "answer": [
            "m.01q5d9",
            "m.05l0r",
            "m.017k6",
            "m.06nm1",
            "m.01m69"
        ],
        "different_answer": [
            [
                "m.01q5d9",
                "m.05l0r",
                "m.017k6",
                "m.06nm1",
                "m.01m69"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-139",
        "question": "where is the nra headquarters located",
        "answer": [
            "m.0mnzd"
        ],
        "different_answer": [
            [
                "m.0mnzd"
            ]
        ],
        "entity_linking": {
            "National Rifle Association": "m.0j6f9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j6f9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j6f9 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j6f9')\na.add_fact('m.0j6f9', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-141",
        "question": "who is gimli 's father in the hobbit",
        "answer": [
            "m.0gwn5p0"
        ],
        "different_answer": [
            [
                "m.0gwn5p0"
            ]
        ],
        "entity_linking": {
            "Gimli": "m.0h34n",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h34n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h34n ns:fictional_universe.fictional_character.parents ?x .\n?x ns:fictional_universe.fictional_character.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0h34n')\na.add_fact('x0', 'fictional_universe.fictional_character.gender', 'm.05zppz')\na.add_fact('m.0h34n', 'fictional_universe.fictional_character.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-142",
        "question": "who developed the tcp ip reference model",
        "answer": [
            "m.01_z5v",
            "m.07z23"
        ],
        "different_answer": [
            [
                "m.01_z5v",
                "m.07z23"
            ],
            [
                "m.01_z5v",
                "m.07z23"
            ]
        ],
        "entity_linking": {
            "Transmission Control Protocol": "m.07hzk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hzk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hzk ns:base.argumentmaps.original_idea.innovator ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07hzk')\na.add_fact('m.07hzk', 'law.invention.inventor', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-145",
        "question": "what college did albert einstein go to",
        "answer": [
            "m.01tpvt",
            "m.01dyk8"
        ],
        "different_answer": [
            [
                "m.01tpvt",
                "m.01dyk8"
            ]
        ],
        "entity_linking": {
            "Albert Einstein": "m.0jcx",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jcx ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0jcx')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0jcx', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-146",
        "question": "what team does jordan own",
        "answer": [
            "m.08htl1",
            "m.0452m3"
        ],
        "different_answer": [
            [
                "m.08htl1",
                "m.0452m3"
            ]
        ],
        "entity_linking": {
            "Jordan": "m.03__y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03__y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03__y ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03__y')\na.add_fact('m.03__y', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-147",
        "question": "who is the state governor of tennessee",
        "answer": [
            "m.04mp6v"
        ],
        "different_answer": [
            [
                "m.04mp6v"
            ]
        ],
        "entity_linking": {
            "Tennessee": "m.07h34",
            "Governor": "m.0fkvn",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h34)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h34 ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.07h34')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.07h34', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-149",
        "question": "what do portuguese people speak",
        "answer": [
            "m.05zjd"
        ],
        "different_answer": [
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Portugal": "m.05r4w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r4w ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05r4w')\na.add_fact('m.05r4w', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-150",
        "question": "what language does cuba speak",
        "answer": [
            "m.02dhwl",
            "m.06nm1",
            "m.02hwhd2"
        ],
        "different_answer": [
            [
                "m.02dhwl",
                "m.06nm1",
                "m.02hwhd2"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Cuba": "m.0d04z6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d04z6')\na.add_fact('m.0d04z6', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-153",
        "question": "what are the sights to see in madrid",
        "answer": [
            "m.0fphvtq",
            "m.053llq",
            "m.0h3tjjc",
            "m.04m3yk",
            "m.06j2nj",
            "m.07mpc7",
            "m.01jcyh",
            "m.06cgmf",
            "m.09s07b",
            "m.0cd2rc",
            "m.0h3lmf1",
            "m.01bc9m",
            "m.06nd2f",
            "m.07f__f",
            "m.0bwg9f0",
            "m.06_l58",
            "m.03rmzx",
            "m.05bvn8g",
            "m.02r9yg7",
            "m.073z19",
            "m.03chy63",
            "m.01hlq3"
        ],
        "different_answer": [
            [
                "m.0fphvtq",
                "m.053llq",
                "m.0h3tjjc",
                "m.04m3yk",
                "m.06j2nj",
                "m.07mpc7",
                "m.01jcyh",
                "m.06cgmf",
                "m.09s07b",
                "m.0cd2rc",
                "m.0h3lmf1",
                "m.01bc9m",
                "m.06nd2f",
                "m.07f__f",
                "m.0bwg9f0",
                "m.06_l58",
                "m.03rmzx",
                "m.05bvn8g",
                "m.02r9yg7",
                "m.073z19",
                "m.03chy63",
                "m.01hlq3"
            ]
        ],
        "entity_linking": {
            "Madrid": "m.056_y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.056_y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.056_y ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.056_y')\na.add_fact('m.056_y', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-154",
        "question": "what instruments did louis armstrong play",
        "answer": [
            "m.020w2",
            "m.07gql"
        ],
        "different_answer": [
            [
                "m.020w2",
                "m.07gql"
            ]
        ],
        "entity_linking": {
            "Louis Armstrong": "m.04n32"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n32)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n32 ns:music.group_member.instruments_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04n32')\na.add_fact('m.04n32', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-155",
        "question": "what year was george w bush elected",
        "answer": [
            "2000-11-07-08:00",
            "2004-11-02-08:00"
        ],
        "different_answer": [
            [
                "2000-11-07-08:00",
                "2004-11-02-08:00"
            ]
        ],
        "entity_linking": {
            "George W. Bush": "m.09b6zr",
            "President of the United States": "m.060d2"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?dt\nWHERE {\n  ?e ns:government.election.winner  ns:m.09b6zr ; # George W. Bush\n     ns:government.election.office  ns:m.060d2 ; # President of the United States\n     ns:government.election.election_year ?dt  .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-156",
        "question": "what time zone am i in california",
        "answer": [
            "m.02lcqs"
        ],
        "different_answer": [
            [
                "m.02lcqs"
            ]
        ],
        "entity_linking": {
            "California": "m.01n7q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n7q ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01n7q')\na.add_fact('m.01n7q', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-157",
        "question": "where is mission san buenaventura located",
        "answer": [
            "m.01zs2h_",
            "m.0l38x"
        ],
        "different_answer": [
            [
                "m.01zs2h_",
                "m.0l38x"
            ]
        ],
        "entity_linking": {
            "Mission San Buenaventura": "m.0gbsb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gbsb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gbsb ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gbsb')\na.add_fact('m.0gbsb', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-159",
        "question": "what time in hilo hawaii",
        "answer": [
            "m.02lctm"
        ],
        "different_answer": [
            [
                "m.02lctm"
            ]
        ],
        "entity_linking": {
            "Hilo": "m.0r_ch"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r_ch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r_ch ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0r_ch')\na.add_fact('m.0r_ch', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-160",
        "question": "where did rudolf virchow conduct his research",
        "answer": [
            "m.03563j",
            "m.01stzp"
        ],
        "different_answer": [
            [
                "m.03563j",
                "m.01stzp"
            ]
        ],
        "entity_linking": {
            "Rudolf Virchow": "m.011kz4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011kz4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011kz4 ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011kz4')\na.add_fact('m.011kz4', 'people.person.employment_history', 'x1')\na.add_fact('x1', 'business.employment_tenure.company', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-161",
        "question": "what university did gordon brown attend",
        "answer": [
            "m.0h6rm"
        ],
        "different_answer": [
            [
                "m.0h6rm"
            ]
        ],
        "entity_linking": {
            "Gordon Brown": "m.03f77",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03f77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03f77 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03f77')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03f77', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-162",
        "question": "what countries does greece share borders with",
        "answer": [
            "m.01znc_",
            "m.0jdx",
            "m.015qh",
            "m.0bjv6"
        ],
        "different_answer": [
            [
                "m.01znc_",
                "m.0jdx",
                "m.015qh",
                "m.0bjv6"
            ]
        ],
        "entity_linking": {
            "Greece": "m.035qy",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.035qy')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.035qy', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-163",
        "question": "what year did the seahawks win the superbowl",
        "answer": [
            "m.09k4qg3"
        ],
        "different_answer": [
            [
                "m.09k4qg3"
            ]
        ],
        "entity_linking": {
            "Seattle Seahawks": "m.070xg",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.070xg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.070xg ns:sports.sports_team.championships ?x .\n?x ns:time.event.instance_of_recurring_event ns:m.06x5s .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.070xg')\na.add_fact('x0', 'time.event.instance_of_recurring_event', 'm.06x5s')\na.add_fact('m.070xg', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-164",
        "question": "what did stephen hawking become famous for",
        "answer": [
            "m.03qsdk0",
            "m.02h65p0",
            "m.05snw",
            "m.0h9c",
            "m.06q2q",
            "m.02h666v",
            "m.016fly",
            "m.0kyk",
            "m.04s2z",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.03qsdk0",
                "m.02h65p0",
                "m.05snw",
                "m.0h9c",
                "m.06q2q",
                "m.02h666v",
                "m.016fly",
                "m.0kyk",
                "m.04s2z",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Stephen Hawking": "m.01tdnyh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tdnyh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tdnyh ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01tdnyh')\na.add_fact('m.01tdnyh', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-165",
        "question": "who plays donna noble",
        "answer": [
            "m.05l0j5"
        ],
        "different_answer": [
            [
                "m.05l0j5"
            ],
            [
                "m.05l0j5"
            ]
        ],
        "entity_linking": {
            "Donna Noble": "m.02pcf8b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pcf8b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pcf8b ns:tv.tv_character.appeared_in_tv_episodes ?y .\n?y ns:tv.tv_guest_role.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02pcf8b')\na.add_fact('m.02pcf8b', 'tv.tv_character.appeared_in_tv_episodes', 'x1')\na.add_fact('x1', 'tv.tv_guest_role.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-166",
        "question": "what was dr seuss education",
        "answer": [
            "m.02bqy",
            "m.07tgn",
            "m.0ym1n"
        ],
        "different_answer": [
            [
                "m.02bqy",
                "m.07tgn",
                "m.0ym1n"
            ]
        ],
        "entity_linking": {
            "Theodore Lesieg": "m.02g3w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02g3w')\na.add_fact('m.02g3w', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-167",
        "question": "where did queensland get its name from",
        "answer": [
            "m.0cw10"
        ],
        "different_answer": [
            [
                "m.0cw10"
            ]
        ],
        "entity_linking": {
            "Queensland": "m.0g39h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g39h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g39h ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g39h')\na.add_fact('m.0g39h', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-168",
        "question": "what document did james madison write",
        "answer": [
            "m.0y5g3kr",
            "m.07vmjz",
            "m.0c1t4vr",
            "m.07vmgx",
            "m.0bqqzw8",
            "m.07vg5t",
            "m.0y5jtdl",
            "m.07vg3d",
            "m.06dzpv4",
            "m.07vmpg",
            "m.0y5jtc4",
            "m.0bqqzxb",
            "m.0y5g39x",
            "m.07vmns",
            "m.07vmqj",
            "m.06dp2p9",
            "m.068vl9d",
            "m.0y5g3dq",
            "m.07vmmr",
            "m.07vmkp",
            "m.07vmtz",
            "m.0y5jt9f",
            "m.0bqqzww",
            "m.0bbhbct",
            "m.0bqqzw3",
            "m.06cxcmz",
            "m.0c1t4vv",
            "m.0bqqzw_",
            "m.0y5jt9r",
            "m.0y5g3h9",
            "m.06rh5rn",
            "m.07vmf4",
            "m.07trmk",
            "m.07vmrk",
            "m.0bqqzwn",
            "m.07vmj8",
            "m.0bqqzws",
            "m.07dvb2",
            "m.0c1t4w0",
            "m.07vmnf",
            "m.0bqqzwk",
            "m.067vb8j",
            "m.0y5jsmt",
            "m.07vmjm",
            "m.0c1t4vy",
            "m.0y5g38x",
            "m.0y5js_7",
            "m.07vmhy",
            "m.0bqqzvs",
            "m.0y5g3j8",
            "m.07ty1r",
            "m.0y5g3gq",
            "m.07vmp3",
            "m.07vml0",
            "m.0bqqzx4",
            "m.0y5jt8w",
            "m.0y5jtfx",
            "m.0dz4phw",
            "m.07vmfv",
            "m.06crwm8",
            "m.06czk99",
            "m.0y5jt66",
            "m.0bqqzvy",
            "m.0cmsl",
            "m.07vg64",
            "m.07vmgk",
            "m.07vmn2",
            "m.0bqqzwg",
            "m.07vgpr",
            "m.07vg6h",
            "m.0fpq85q",
            "m.07vms7",
            "m.07vgpd"
        ],
        "different_answer": [
            [
                "m.0y5g3kr",
                "m.07vmjz",
                "m.0c1t4vr",
                "m.07vmgx",
                "m.0bqqzw8",
                "m.07vg5t",
                "m.0y5jtdl",
                "m.07vg3d",
                "m.06dzpv4",
                "m.07vmpg",
                "m.0y5jtc4",
                "m.0bqqzxb",
                "m.0y5g39x",
                "m.07vmns",
                "m.07vmqj",
                "m.06dp2p9",
                "m.068vl9d",
                "m.0y5g3dq",
                "m.07vmmr",
                "m.07vmkp",
                "m.07vmtz",
                "m.0y5jt9f",
                "m.0bqqzww",
                "m.0bbhbct",
                "m.0bqqzw3",
                "m.06cxcmz",
                "m.0c1t4vv",
                "m.0bqqzw_",
                "m.0y5jt9r",
                "m.0y5g3h9",
                "m.06rh5rn",
                "m.07vmf4",
                "m.07trmk",
                "m.07vmrk",
                "m.0bqqzwn",
                "m.07vmj8",
                "m.0bqqzws",
                "m.07dvb2",
                "m.0c1t4w0",
                "m.07vmnf",
                "m.0bqqzwk",
                "m.067vb8j",
                "m.0y5jsmt",
                "m.07vmjm",
                "m.0c1t4vy",
                "m.0y5g38x",
                "m.0y5js_7",
                "m.07vmhy",
                "m.0bqqzvs",
                "m.0y5g3j8",
                "m.07ty1r",
                "m.0y5g3gq",
                "m.07vmp3",
                "m.07vml0",
                "m.0bqqzx4",
                "m.0y5jt8w",
                "m.0y5jtfx",
                "m.0dz4phw",
                "m.07vmfv",
                "m.06crwm8",
                "m.06czk99",
                "m.0y5jt66",
                "m.0bqqzvy",
                "m.0cmsl",
                "m.07vg64",
                "m.07vmgk",
                "m.07vmn2",
                "m.0bqqzwg",
                "m.07vgpr",
                "m.07vg6h",
                "m.0fpq85q",
                "m.07vms7",
                "m.07vgpd"
            ]
        ],
        "entity_linking": {
            "James Madison": "m.0424m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0424m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0424m ns:book.author.works_written ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0424m')\na.add_fact('m.0424m', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-169",
        "question": "what are the three official languages of belgium",
        "answer": [
            "m.02bv9",
            "m.064_8sq",
            "m.04306rv"
        ],
        "different_answer": [
            [
                "m.02bv9",
                "m.064_8sq",
                "m.04306rv"
            ]
        ],
        "entity_linking": {
            "Belgium": "m.0154j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0154j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0154j ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0154j')\na.add_fact('m.0154j', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-170",
        "question": "who played bilbo in lord of the rings",
        "answer": [
            "m.0f_wwf"
        ],
        "different_answer": [
            [
                "m.0f_wwf"
            ]
        ],
        "entity_linking": {
            "Old Bilbo": "m.0g6z1",
            "The Lord of the Rings": "m.023cjg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g6z1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g6z1 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.023cjg .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.023cjg')\na.add_filter('x0', '!=', 'm.0g6z1')\na.add_fact('x1', 'film.performance.film', 'm.023cjg')\na.add_fact('m.0g6z1', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-171",
        "question": "what airport do you fly into to get to destin fl",
        "answer": [
            "m.02qzm7_",
            "m.01q6d0"
        ],
        "different_answer": [
            [
                "m.02qzm7_",
                "m.01q6d0"
            ]
        ],
        "entity_linking": {
            "Destin": "m.0rp8x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rp8x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rp8x ns:location.location.nearby_airports ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0rp8x')\na.add_fact('m.0rp8x', 'location.location.nearby_airports', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-172",
        "question": "what do you call members of the senate",
        "answer": [
            "m.025whr1",
            "m.01t7n9",
            "m.02p31rg",
            "m.048zv9l",
            "m.05k99t",
            "m.01hvfh"
        ],
        "different_answer": [
            [
                "m.025whr1",
                "m.01t7n9",
                "m.02p31rg",
                "m.048zv9l",
                "m.05k99t",
                "m.01hvfh"
            ]
        ],
        "entity_linking": {
            "United States Senate": "m.07t58"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t58)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t58 ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t58')\na.add_fact('m.07t58', 'government.governmental_body.members', 'x1')\na.add_fact('x1', 'government.government_position_held.basic_title', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-173",
        "question": "what countries are part of the baltic",
        "answer": [
            "m.02kmm",
            "m.04g5k",
            "m.04gzd"
        ],
        "different_answer": [
            [
                "m.02kmm",
                "m.04g5k",
                "m.04gzd"
            ]
        ],
        "entity_linking": {
            "Baltic states": "m.019tjm",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019tjm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019tjm ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.019tjm')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.019tjm', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-174",
        "question": "what team does colin kaepernick play for",
        "answer": [
            "m.06rny"
        ],
        "different_answer": [
            [
                "m.06rny"
            ]
        ],
        "entity_linking": {
            "Colin Kaepernick": "m.03cm6b3",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03cm6b3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03cm6b3 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03cm6b3')\na.add_fact('m.03cm6b3', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-175",
        "question": "where did joe flacco attend college",
        "answer": [
            "m.01swxv"
        ],
        "different_answer": [
            [
                "m.01swxv"
            ]
        ],
        "entity_linking": {
            "Joe Flacco": "m.03d4lw7",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d4lw7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d4lw7 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03d4lw7')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03d4lw7', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-176",
        "question": "who is emma stone father",
        "answer": [
            "m.0gx3qys"
        ],
        "different_answer": [
            [
                "m.0gx3qys"
            ]
        ],
        "entity_linking": {
            "Emma Stone": "m.09yhzs",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09yhzs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09yhzs ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.09yhzs')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.09yhzs', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-177",
        "question": "where was theodore roosevelt buried",
        "answer": [
            "m.05230qz"
        ],
        "different_answer": [
            [
                "m.05230qz"
            ]
        ],
        "entity_linking": {
            "Theodore Roosevelt": "m.07hyk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hyk ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07hyk')\na.add_fact('m.07hyk', 'people.deceased_person.place_of_burial', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-178",
        "question": "who was the leader of the us during wwii",
        "answer": [
            "m.02yy8",
            "m.09bg4l"
        ],
        "different_answer": [
            [
                "m.02yy8",
                "m.09bg4l"
            ]
        ],
        "entity_linking": {
            "World War II": "m.081pw"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.081pw ns:time.event.start_date ?start ;\n             ns:time.event.end_date ?end .\n  ?x ns:government.politician.government_positions_held  ?y .\n  ?y ns:government.government_position_held.office_position_or_title ns:m.060d2 ; # President of the United States\n     ns:government.government_position_held.from  ?from ;\n     ns:government.government_position_held.to  ?to .\n  FILTER (?from < ?end)\n  FILTER (?to > ?start)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-179",
        "question": "what artistic movement did henri matisse belong to",
        "answer": [
            "m.049xrv",
            "m.03xj1",
            "m.04lx1",
            "m.015r61",
            "m.04y41"
        ],
        "different_answer": [
            [
                "m.049xrv",
                "m.03xj1",
                "m.04lx1",
                "m.015r61",
                "m.04y41"
            ]
        ],
        "entity_linking": {
            "Henri Matisse": "m.0gct_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gct_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gct_ ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gct_')\na.add_fact('m.0gct_', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-180",
        "question": "where the missouri river ends",
        "answer": [
            "m.04yf_"
        ],
        "different_answer": [
            [
                "m.04yf_"
            ]
        ],
        "entity_linking": {
            "Missouri River": "m.04ykz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ykz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ykz ns:geography.river.mouth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ykz')\na.add_fact('m.04ykz', 'geography.river.mouth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-181",
        "question": "what type of currency do they use in thailand",
        "answer": [
            "m.0mcb5"
        ],
        "different_answer": [
            [
                "m.0mcb5"
            ]
        ],
        "entity_linking": {
            "Thailand": "m.07f1x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07f1x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07f1x ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07f1x')\na.add_fact('m.07f1x', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-182",
        "question": "who is khloe kardashian 's husband",
        "answer": [
            "m.02_nkp"
        ],
        "different_answer": [
            [
                "m.02_nkp"
            ]
        ],
        "entity_linking": {
            "Khlo\u00e9 Kardashian": "m.043p2f2",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043p2f2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043p2f2 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.043p2f2')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.043p2f2', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-184",
        "question": "what state does romney live in",
        "answer": [
            "m.05k7sb"
        ],
        "different_answer": [
            [
                "m.05k7sb"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.0271_s', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-185",
        "question": "what type of government does france use",
        "answer": [
            "m.01fpfn",
            "m.01dw03",
            "m.0c9rw5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01dw03",
                "m.0c9rw5"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-186",
        "question": "who rules denmark right now",
        "answer": [
            "m.05rn5r",
            "m.05ysvw",
            "m.0g2kv"
        ],
        "different_answer": [
            [
                "m.05rn5r",
                "m.05ysvw",
                "m.0g2kv"
            ],
            [
                "m.0g2kv"
            ]
        ],
        "entity_linking": {
            "Denmark": "m.0k6nt",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k6nt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k6nt ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k6nt')\na.add_fact('m.0k6nt', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-187",
        "question": "what did stephen hawking study",
        "answer": [
            "m.05qjt"
        ],
        "different_answer": [
            [
                "m.05qjt"
            ]
        ],
        "entity_linking": {
            "Stephen Hawking": "m.01tdnyh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tdnyh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tdnyh ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01tdnyh')\na.add_fact('m.01tdnyh', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.major_field_of_study', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-188",
        "question": "where did bristol palin go to school",
        "answer": [
            "m.04jdv0r",
            "m.02fqd7",
            "m.08r1_d"
        ],
        "different_answer": [
            [
                "m.04jdv0r",
                "m.02fqd7",
                "m.08r1_d"
            ]
        ],
        "entity_linking": {
            "Bristol Palin": "m.04jg1kh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jg1kh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jg1kh ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04jg1kh')\na.add_fact('m.04jg1kh', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-189",
        "question": "what region of the world is egypt associated with",
        "answer": [
            "m.04wsz"
        ],
        "different_answer": [
            [
                "m.04wsz"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.02k54', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-190",
        "question": "what did dr. seuss do",
        "answer": [
            "m.0196pc",
            "m.03hz6vv",
            "m.0n1h",
            "m.0dxtg",
            "m.01d_h8",
            "m.0nbcg",
            "m.03gjzk",
            "m.020xn5",
            "m.05z96",
            "m.015h31",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.0196pc",
                "m.03hz6vv",
                "m.0n1h",
                "m.0dxtg",
                "m.01d_h8",
                "m.0nbcg",
                "m.03gjzk",
                "m.020xn5",
                "m.05z96",
                "m.015h31",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Theodore Lesieg": "m.02g3w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02g3w')\na.add_fact('m.02g3w', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-191",
        "question": "where did drew brees go to college wikianswers",
        "answer": [
            "m.02bb47",
            "m.05x_5"
        ],
        "different_answer": [
            [
                "m.02bb47",
                "m.05x_5"
            ]
        ],
        "entity_linking": {
            "Drew Brees": "m.030bdd",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030bdd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030bdd ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.030bdd')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.030bdd', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-193",
        "question": "what school did ben roethlisberger go to",
        "answer": [
            "m.01r3y2"
        ],
        "different_answer": [
            [
                "m.01r3y2"
            ]
        ],
        "entity_linking": {
            "Ben Roethlisberger": "m.033t8w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033t8w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033t8w ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.033t8w')\na.add_fact('m.033t8w', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-194",
        "question": "where did the iroquois indians come from",
        "answer": [
            "m.05kr_",
            "m.0694j"
        ],
        "different_answer": [
            [
                "m.05kr_",
                "m.0694j"
            ]
        ],
        "entity_linking": {
            "Iroquois": "m.03x1x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03x1x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03x1x ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03x1x')\na.add_fact('m.03x1x', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-195",
        "question": "what kind of guitar did george harrison use",
        "answer": [
            "m.02pqjvz",
            "m.02m873"
        ],
        "different_answer": [
            [
                "m.02pqjvz",
                "m.02m873"
            ]
        ],
        "entity_linking": {
            "George Harrison": "m.03bnv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03bnv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03bnv ns:music.guitarist.guitars_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03bnv')\na.add_fact('m.03bnv', 'music.guitarist.guitars_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-196",
        "question": "what language do navajo people speak",
        "answer": [
            "m.06nm1",
            "m.017yph",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.06nm1",
                "m.017yph",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Navajo people": "m.08k5jg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08k5jg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08k5jg ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08k5jg')\na.add_fact('m.08k5jg', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-197",
        "question": "what places make up new england",
        "answer": [
            "m.050ks",
            "m.059f4",
            "m.01x73",
            "m.06btq",
            "m.05k7sb",
            "m.07_f2"
        ],
        "different_answer": [
            [
                "m.050ks",
                "m.059f4",
                "m.01x73",
                "m.06btq",
                "m.05k7sb",
                "m.07_f2"
            ]
        ],
        "entity_linking": {
            "New England": "m.029jpy",
            "\"State\"": "\"State\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029jpy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029jpy ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.029jpy')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"State\"^^xsd:string')\na.add_fact('m.029jpy', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-199",
        "question": "what type of government does iraq have now",
        "answer": [
            "m.018wl5",
            "m.06cx9",
            "m.0glnsx",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.018wl5",
                "m.06cx9",
                "m.0glnsx",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Iraq": "m.0d05q4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05q4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05q4 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05q4')\na.add_fact('m.0d05q4', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-200",
        "question": "where was the vietnam war location",
        "answer": [
            "m.01crd5",
            "m.073q1",
            "m.0g8bw",
            "m.04hhv",
            "m.01xbgx",
            "m.0g970"
        ],
        "different_answer": [
            [
                "m.01crd5",
                "m.073q1",
                "m.0g8bw",
                "m.04hhv",
                "m.01xbgx",
                "m.0g970"
            ]
        ],
        "entity_linking": {
            "Vietnam War": "m.07_nf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_nf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_nf ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_nf')\na.add_fact('m.07_nf', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-201",
        "question": "who did gerald ford select as his vice president when he became president",
        "answer": [
            "m.05jd_"
        ],
        "different_answer": [
            [
                "m.05jd_"
            ]
        ],
        "entity_linking": {
            "Gerald Ford": "m.0c_md_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_md_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_md_ ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c_md_')\na.add_fact('m.0c_md_', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-202",
        "question": "what is the currency used in italy",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-204",
        "question": "what is the capital of modern egypt",
        "answer": [
            "m.01w2v"
        ],
        "different_answer": [
            [
                "m.01w2v"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-205",
        "question": "what school did sir ernest rutherford go to",
        "answer": [
            "m.07xpm",
            "m.07tg4",
            "m.07tk7",
            "m.013tch",
            "m.02722n"
        ],
        "different_answer": [
            [
                "m.07xpm",
                "m.07tg4",
                "m.07tk7",
                "m.013tch",
                "m.02722n"
            ]
        ],
        "entity_linking": {
            "Ernest Rutherford": "m.02m7r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02m7r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02m7r ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02m7r')\na.add_fact('m.02m7r', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-206",
        "question": "what position does brandon roy play",
        "answer": [
            "m.0355dz",
            "m.03558l",
            "m.02sf_r"
        ],
        "different_answer": [
            [
                "m.0355dz",
                "m.03558l",
                "m.02sf_r"
            ]
        ],
        "entity_linking": {
            "Brandon Roy": "m.0cf_p_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cf_p_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cf_p_ ns:basketball.basketball_player.position_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cf_p_')\na.add_fact('m.0cf_p_', 'basketball.basketball_player.position_s', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-207",
        "question": "where is harvard university",
        "answer": [
            "m.05k7sb",
            "m.01qh7",
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.05k7sb",
                "m.01qh7",
                "m.09c7w0"
            ],
            [
                "m.05k7sb"
            ]
        ],
        "entity_linking": {
            "Harvard University": "m.03ksy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ksy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ksy ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ksy')\na.add_fact('m.03ksy', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-209",
        "question": "where is laos in world map",
        "answer": [
            "m.073q1"
        ],
        "different_answer": [
            [
                "m.073q1"
            ]
        ],
        "entity_linking": {
            "Laos": "m.04hhv",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hhv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hhv ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.04hhv')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.04hhv', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-210",
        "question": "where is tyrese gibson from",
        "answer": [
            "m.027sp2"
        ],
        "different_answer": [
            [
                "m.027sp2"
            ]
        ],
        "entity_linking": {
            "Tyrese Gibson": "m.01l1b90"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01l1b90)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01l1b90 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01l1b90')\na.add_fact('m.01l1b90', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-211",
        "question": "what countries are near italy",
        "answer": [
            "m.0h7x",
            "m.06mzp",
            "m.06t8v",
            "m.0f8l9c"
        ],
        "different_answer": [
            [
                "m.0h7x",
                "m.06mzp",
                "m.06t8v",
                "m.0f8l9c"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.03rjj', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-212",
        "question": "which states does the colorado river run through",
        "answer": [
            "m.01n4w",
            "m.0vmt",
            "m.01n7q",
            "m.059_c"
        ],
        "different_answer": [
            [
                "m.01n4w",
                "m.0vmt",
                "m.01n7q",
                "m.059_c"
            ]
        ],
        "entity_linking": {
            "Colorado River": "m.018qjq",
            "\"State\"": "\"State\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018qjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018qjq ns:location.location.partially_containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018qjq')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"State\"^^xsd:string')\na.add_fact('m.018qjq', 'location.location.partially_containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-213",
        "question": "who did scarlett johansson date",
        "answer": [
            "m.036hf4",
            "m.02fybl",
            "m.055zkh",
            "m.01g0jn",
            "m.0j1yf",
            "m.01kgv4",
            "m.028r4y"
        ],
        "different_answer": [
            [
                "m.036hf4",
                "m.02fybl",
                "m.055zkh",
                "m.01g0jn",
                "m.0j1yf",
                "m.01kgv4",
                "m.028r4y"
            ],
            [
                "m.02fybl",
                "m.01g0jn",
                "m.0wz5p2s",
                "m.0j1yf",
                "m.01kgv4",
                "m.01qscs"
            ]
        ],
        "entity_linking": {
            "Scarlett Johansson": "m.02114t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02114t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02114t ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02114t')\na.add_fact('m.02114t', 'base.popstra.celebrity.dated', 'x1')\na.add_fact('x1', 'base.popstra.dated.participant', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-214",
        "question": "which continents were part of the roman empire",
        "answer": [
            "m.02j9z",
            "m.04wsz",
            "m.05g2v"
        ],
        "different_answer": [
            [
                "m.02j9z",
                "m.04wsz",
                "m.05g2v"
            ]
        ],
        "entity_linking": {
            "Roman Empire": "m.06cmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06cmp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06cmp ns:location.location.partially_contained_by ?y .\n?y ns:location.partial_containment_relationship.partially_contained_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06cmp')\na.add_fact('m.06cmp', 'location.location.partially_contained_by', 'x1')\na.add_fact('x1', 'location.partial_containment_relationship.partially_contained_by', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-215",
        "question": "where was elvis costello born",
        "answer": [
            "m.0nbrp"
        ],
        "different_answer": [
            [
                "m.0nbrp"
            ]
        ],
        "entity_linking": {
            "Elvis Costello": "m.02vr7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vr7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vr7 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vr7')\na.add_fact('m.02vr7', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-216",
        "question": "where are the gobi desert located on a map",
        "answer": [
            "m.04w8f"
        ],
        "different_answer": [
            [
                "m.04w8f"
            ]
        ],
        "entity_linking": {
            "Gobi Desert": "m.0ff0d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ff0d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ff0d ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ff0d')\na.add_fact('m.0ff0d', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-217",
        "question": "what type of government does the us follow",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-218",
        "question": "in which continent is germany",
        "answer": [
            "m.02j9z"
        ],
        "different_answer": [
            [
                "m.02j9z"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'base.locations.countries.continent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-220",
        "question": "what language turkey people speak",
        "answer": [
            "m.033xvz",
            "m.0jzc",
            "m.02hwyss",
            "m.04p7x",
            "m.0b1g2"
        ],
        "different_answer": [
            [
                "m.033xvz",
                "m.0jzc",
                "m.02hwyss",
                "m.04p7x",
                "m.0b1g2"
            ],
            [
                "m.02hwyss"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-221",
        "question": "who does jeremy lin play for",
        "answer": [
            "m.0jmk7"
        ],
        "different_answer": [
            [
                "m.0jmk7"
            ]
        ],
        "entity_linking": {
            "Jeremy Lin": "m.09k72lh",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k72lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k72lh ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09k72lh')\na.add_fact('m.09k72lh', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-222",
        "question": "where is the seychelles on world map",
        "answer": [
            "m.0dg3n1"
        ],
        "different_answer": [
            [
                "m.0dg3n1"
            ],
            [
                "m.02rm8kw",
                "m.0dg3n1"
            ]
        ],
        "entity_linking": {
            "Seychelles": "m.06sw9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06sw9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06sw9 ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06sw9')\na.add_fact('m.06sw9', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-224",
        "question": "where did william morris go to college",
        "answer": [
            "m.0ylvj",
            "m.07tgn"
        ],
        "different_answer": [
            [
                "m.0ylvj",
                "m.07tgn"
            ]
        ],
        "entity_linking": {
            "William Morris": "m.08304",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08304)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08304 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.08304')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.08304', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-225",
        "question": "what state is mount st. helens in",
        "answer": [
            "m.081yw"
        ],
        "different_answer": [
            [
                "m.081yw"
            ]
        ],
        "entity_linking": {
            "Mount St. Helens": "m.094xz",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094xz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094xz ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.094xz')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.094xz', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-226",
        "question": "who is jimmy savile",
        "answer": [
            "m.08z956",
            "m.015cjr",
            "m.02dsz"
        ],
        "different_answer": [
            [
                "m.08z956",
                "m.015cjr",
                "m.02dsz"
            ]
        ],
        "entity_linking": {
            "Jimmy Savile": "m.01wg0w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wg0w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wg0w ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wg0w')\na.add_fact('m.01wg0w', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-227",
        "question": "where were the seneca indians located",
        "answer": [
            "m.05kr_",
            "m.059rby"
        ],
        "different_answer": [
            [
                "m.05kr_",
                "m.059rby"
            ]
        ],
        "entity_linking": {
            "Seneca people": "m.028yj0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.028yj0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.028yj0 ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.028yj0')\na.add_fact('m.028yj0', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-231",
        "question": "when did florida marlins join mlb",
        "answer": [
            "m.02h7s8p"
        ],
        "different_answer": [
            [
                "m.02h7s8p"
            ]
        ],
        "entity_linking": {
            "Miami Marlins": "m.02__x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02__x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02__x ns:baseball.baseball_team.team_stats ?y .\n?y ns:baseball.baseball_team_stats.season ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02__x')\na.add_fact('m.02__x', 'baseball.baseball_team.team_stats', 'x1')\na.add_fact('x1', 'baseball.baseball_team_stats.season', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x2')\na.add_min('x2')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-232",
        "question": "what countries have spanish as the national language",
        "answer": [
            "m.0345_",
            "m.07ylj",
            "m.05v10",
            "m.016wzw",
            "m.07ytt",
            "m.01p8s",
            "m.0jgd",
            "m.034m8",
            "m.05qx1",
            "m.05r7t",
            "m.02k8k",
            "m.06mkj",
            "m.02k1b",
            "m.0d060g",
            "m.05cnr",
            "m.01ls2",
            "m.0162v",
            "m.09c7w0",
            "m.082qk",
            "m.0164b",
            "m.0hg5",
            "m.06s0l",
            "m.01p1v",
            "m.0d04z6",
            "m.03h2c",
            "m.035hm",
            "m.027rn",
            "m.0165v",
            "m.02kcz",
            "m.0hbgh",
            "m.0b90_r",
            "m.05c74",
            "m.07twz",
            "m.02srrt"
        ],
        "different_answer": [
            [
                "m.0345_",
                "m.07ylj",
                "m.05v10",
                "m.016wzw",
                "m.07ytt",
                "m.01p8s",
                "m.0jgd",
                "m.034m8",
                "m.05qx1",
                "m.05r7t",
                "m.02k8k",
                "m.06mkj",
                "m.02k1b",
                "m.0d060g",
                "m.05cnr",
                "m.01ls2",
                "m.0162v",
                "m.09c7w0",
                "m.082qk",
                "m.0164b",
                "m.0hg5",
                "m.06s0l",
                "m.01p1v",
                "m.0d04z6",
                "m.03h2c",
                "m.035hm",
                "m.027rn",
                "m.0165v",
                "m.02kcz",
                "m.0hbgh",
                "m.0b90_r",
                "m.05c74",
                "m.07twz",
                "m.02srrt"
            ]
        ],
        "entity_linking": {
            "Spanish Language": "m.06nm1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06nm1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06nm1 ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06nm1')\na.add_fact('m.06nm1', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-233",
        "question": "what to see in phoenix arizona",
        "answer": [
            "m.0d3hj6",
            "m.06_2xlx",
            "m.0cns5",
            "m.056wfy",
            "m.08d2pc",
            "m.0cggr1",
            "m.03qmw7r",
            "m.02qwv58",
            "m.0_ftvfh",
            "m.0k2myn3",
            "m.05pmpd"
        ],
        "different_answer": [
            [
                "m.0d3hj6",
                "m.06_2xlx",
                "m.0cns5",
                "m.056wfy",
                "m.08d2pc",
                "m.0cggr1",
                "m.03qmw7r",
                "m.02qwv58",
                "m.0_ftvfh",
                "m.0k2myn3",
                "m.05pmpd"
            ]
        ],
        "entity_linking": {
            "Phoenix": "m.0d35y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d35y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d35y ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d35y')\na.add_fact('m.0d35y', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-234",
        "question": "what countries does the panama canal go through",
        "answer": [
            "m.05qx1"
        ],
        "different_answer": [
            [
                "m.05qx1"
            ]
        ],
        "entity_linking": {
            "Panama Canal": "m.066rl",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.066rl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.066rl ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.066rl')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.066rl', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-235",
        "question": "what is charlie chaplin famous for",
        "answer": [
            "m.01c72t",
            "m.02hrh1q",
            "m.0dxtg",
            "m.02jknp",
            "m.04l1gwb",
            "m.01d_h8",
            "m.05hj__k",
            "m.018gz8"
        ],
        "different_answer": [
            [
                "m.01c72t",
                "m.02hrh1q",
                "m.0dxtg",
                "m.02jknp",
                "m.04l1gwb",
                "m.01d_h8",
                "m.05hj__k",
                "m.018gz8"
            ]
        ],
        "entity_linking": {
            "Charlie Chaplin": "m.01lc5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lc5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lc5 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lc5')\na.add_fact('m.01lc5', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-237",
        "question": "what did fred durst do",
        "answer": [
            "m.02hrh1q",
            "m.09jwl",
            "m.02jknp",
            "m.0hpcdn2",
            "m.0nbcg",
            "m.012t_z",
            "m.09l65",
            "m.039v1"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.09jwl",
                "m.02jknp",
                "m.0hpcdn2",
                "m.0nbcg",
                "m.012t_z",
                "m.09l65",
                "m.039v1"
            ]
        ],
        "entity_linking": {
            "Fred Durst": "m.01q7cb_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01q7cb_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01q7cb_ ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01q7cb_')\na.add_fact('m.01q7cb_', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-238",
        "question": "who did the chargers draft in 2011",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "San Diego Chargers": "m.06rpd",
            "2011 NFL draft": "m.05sys3j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rpd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rpd ns:sports.professional_sports_team.draft_picks ?y .\n?y ns:sports.sports_league_draft_pick.player ?x .\n?y ns:sports.sports_league_draft_pick.draft ns:m.05sys3j .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05sys3j')\na.add_filter('x0', '!=', 'm.06rpd')\na.add_fact('x1', 'sports.sports_league_draft_pick.draft', 'm.05sys3j')\na.add_fact('m.06rpd', 'sports.professional_sports_team.draft_picks', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.player', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-239",
        "question": "where do american bulldogs originate from",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "American Bulldog": "m.02z_05"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z_05)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z_05 ns:biology.animal_breed.place_of_origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02z_05')\na.add_fact('m.02z_05', 'biology.animal_breed.place_of_origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-240",
        "question": "what colleges did albert einstein teach at",
        "answer": [
            "m.09hgk",
            "m.0lvng",
            "m.01dyk8",
            "m.0194_r",
            "m.01tpvt"
        ],
        "different_answer": [
            [
                "m.09hgk",
                "m.0lvng",
                "m.01dyk8",
                "m.0194_r",
                "m.01tpvt"
            ]
        ],
        "entity_linking": {
            "Albert Einstein": "m.0jcx",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jcx ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0jcx')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0jcx', 'people.person.employment_history', 'x1')\na.add_fact('x1', 'business.employment_tenure.company', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-241",
        "question": "who plays the voice of brian on family guy",
        "answer": [
            "m.021yw7"
        ],
        "different_answer": [
            [
                "m.021yw7"
            ]
        ],
        "entity_linking": {
            "Family Guy": "m.019nnl",
            "Brian Griffin": "m.03pcvr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019nnl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019nnl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.03pcvr .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03pcvr')\na.add_filter('x0', '!=', 'm.019nnl')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.03pcvr')\na.add_fact('m.019nnl', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-243",
        "question": "where did george w bush live as a child",
        "answer": [
            "m.0f2nf"
        ],
        "different_answer": [
            [
                "m.0f2nf"
            ]
        ],
        "entity_linking": {
            "George W. Bush": "m.09b6zr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09b6zr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09b6zr ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09b6zr')\na.add_fact('m.09b6zr', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-245",
        "question": "what year was the first miss america pageant held",
        "answer": [
            "1921-09-08:00"
        ],
        "different_answer": [
            [
                "1921-09-08:00"
            ]
        ],
        "entity_linking": {
            "Miss America": "m.01bk3n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bk3n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bk3n ns:time.recurring_event.date_of_first_occurance ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bk3n')\na.add_fact('m.01bk3n', 'time.recurring_event.date_of_first_occurance', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-246",
        "question": "what was nikola tesla inventions",
        "answer": [
            "m.0bt33",
            "m.08262",
            "m.09pf_",
            "m.01s499",
            "m.0qjjc",
            "m.02p196m",
            "m.09rh1"
        ],
        "different_answer": [
            [
                "m.0bt33",
                "m.08262",
                "m.09pf_",
                "m.01s499",
                "m.0qjjc",
                "m.02p196m",
                "m.09rh1"
            ]
        ],
        "entity_linking": {
            "Nikola Tesla": "m.05d1y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d1y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d1y ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05d1y')\na.add_fact('m.05d1y', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-247",
        "question": "where did flemish people come from",
        "answer": [
            "m.0d060g",
            "m.09c7w0",
            "m.0f8l9c",
            "m.0hzlz",
            "m.0chghy",
            "m.015fr",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.0d060g",
                "m.09c7w0",
                "m.0f8l9c",
                "m.0hzlz",
                "m.0chghy",
                "m.015fr",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "Flemish people": "m.018hlv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018hlv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018hlv ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018hlv')\na.add_fact('m.018hlv', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-248",
        "question": "what state new york city belong to",
        "answer": [
            "m.059rby"
        ],
        "different_answer": [
            [
                "m.059rby"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:base.biblioness.bibs_location.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('m.02_286', 'base.biblioness.bibs_location.state', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-249",
        "question": "what was the cause of death for bruce lee",
        "answer": [
            "m.0219bz"
        ],
        "different_answer": [
            [
                "m.0219bz"
            ]
        ],
        "entity_linking": {
            "Bruce Lee": "m.099d4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.099d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.099d4 ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.099d4')\na.add_fact('m.099d4', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-250",
        "question": "what type of government does usa follow",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-251",
        "question": "what type of currency do they use in england",
        "answer": [
            "m.01nv4h"
        ],
        "different_answer": [
            [
                "m.01nv4h"
            ]
        ],
        "entity_linking": {
            "England": "m.02jx1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02jx1')\na.add_fact('m.02jx1', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-252",
        "question": "where was benjamin franklin educated",
        "answer": [
            "m.02kj7g"
        ],
        "different_answer": [
            [
                "m.02kj7g"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-253",
        "question": "what countries included in the uk",
        "answer": [
            "m.02jx1",
            "m.05bcl",
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc",
            "UK constituent country": "m.0hzjlmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:m.0hzjlmp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzjlmp')\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('x0', 'base.aareas.schema.administrative_area.administrative_area_type', 'm.0hzjlmp')\na.add_fact('m.07ssc', 'base.aareas.schema.administrative_area.administrative_children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-254",
        "question": "what countries in the world speak chinese",
        "answer": [
            "m.0pb4_wn",
            "m.01crd5",
            "m.0167v",
            "m.0d060g",
            "m.06t2t",
            "m.0d05w3",
            "m.09pmkv"
        ],
        "different_answer": [
            [
                "m.0pb4_wn",
                "m.01crd5",
                "m.0167v",
                "m.0d060g",
                "m.06t2t",
                "m.0d05w3",
                "m.09pmkv"
            ]
        ],
        "entity_linking": {
            "Chinese language": "m.01r2l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r2l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r2l ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r2l')\na.add_fact('m.01r2l', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-255",
        "question": "where obama went to school",
        "answer": [
            "m.0280qps",
            "m.01w5m",
            "m.0nbyhz3",
            "m.0265r_n",
            "m.05q2c",
            "m.02d9nr",
            "m.014zws"
        ],
        "different_answer": [
            [
                "m.0280qps",
                "m.01w5m",
                "m.0nbyhz3",
                "m.0265r_n",
                "m.05q2c",
                "m.02d9nr",
                "m.014zws"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-256",
        "question": "what is the primary language of china",
        "answer": [
            "m.0653m"
        ],
        "different_answer": [
            [
                "m.0653m"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-257",
        "question": "who was the soviet leader during world war ii",
        "answer": [
            "m.0d8xy",
            "m.0bphp"
        ],
        "different_answer": [
            [
                "m.0d8xy",
                "m.0bphp"
            ]
        ],
        "entity_linking": {
            "Soviet Union": "m.05vz3zq",
            "World War II": "m.081pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vz3zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vz3zq ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?x ns:military.military_person.participated_in_conflicts ns:m.081pw .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081pw')\na.add_filter('x0', '!=', 'm.05vz3zq')\na.add_fact('x0', 'military.military_person.participated_in_conflicts', 'm.081pw')\na.add_fact('m.05vz3zq', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-258",
        "question": "which of the following does australia export the most",
        "answer": [
            "m.02h66y8",
            "m.0hkf"
        ],
        "different_answer": [
            [
                "m.02h66y8",
                "m.0hkf"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.statistical_region.major_exports ?y .\n?y ns:location.imports_exports_by_industry.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.statistical_region.major_exports', 'x1')\na.add_fact('x1', 'location.imports_exports_by_industry.industry', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-260",
        "question": "where was the city of david",
        "answer": [
            "m.0430_"
        ],
        "different_answer": [
            [
                "m.0430_"
            ]
        ],
        "entity_linking": {
            "City of David": "m.0j3w2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j3w2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j3w2 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j3w2')\na.add_fact('m.0j3w2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-261",
        "question": "what is cindy sherman known for",
        "answer": [
            "m.0lgw7",
            "m.02jknp",
            "m.03hz6vv",
            "m.0n1h"
        ],
        "different_answer": [
            [
                "m.0lgw7",
                "m.02jknp",
                "m.03hz6vv",
                "m.0n1h"
            ]
        ],
        "entity_linking": {
            "Cindy Sherman": "m.074g02"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.074g02)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.074g02 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.074g02')\na.add_fact('m.074g02', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-262",
        "question": "what tv shows did shawnee smith play in",
        "answer": [
            "m.04yc_fw",
            "m.0j635r0",
            "m.051yg69",
            "m.0gvvdpf",
            "m.09fc83",
            "m.07cdxwj",
            "m.012kcrc2",
            "m.033d80",
            "m.07chqg3"
        ],
        "different_answer": [
            [
                "m.04yc_fw",
                "m.0j635r0",
                "m.051yg69",
                "m.0gvvdpf",
                "m.09fc83",
                "m.07cdxwj",
                "m.012kcrc2",
                "m.033d80",
                "m.07chqg3"
            ]
        ],
        "entity_linking": {
            "Shawnee Smith": "m.06t3nj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06t3nj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06t3nj ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06t3nj')\na.add_fact('m.06t3nj', 'tv.tv_actor.starring_roles', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-264",
        "question": "what does australia use for currency",
        "answer": [
            "m.0kz1h"
        ],
        "different_answer": [
            [
                "m.0kz1h"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-265",
        "question": "which airport to fly into rome",
        "answer": [
            "m.01ky5r",
            "m.033_52"
        ],
        "different_answer": [
            [
                "m.01ky5r",
                "m.033_52"
            ]
        ],
        "entity_linking": {
            "Rome": "m.06c62",
            "Airport": "m.01xpjyz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c62 ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?x ns:common.topic.notable_types ns:m.01xpjyz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xpjyz')\na.add_filter('x0', '!=', 'm.06c62')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xpjyz')\na.add_fact('m.06c62', 'travel.travel_destination.how_to_get_here', 'x1')\na.add_fact('x1', 'travel.transportation.transport_terminus', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-266",
        "question": "what is there to do for fun in kansas city",
        "answer": [
            "m.02rccg",
            "m.0724nn",
            "m.08c_14",
            "m.02665lb",
            "m.06rchd",
            "m.075m4m",
            "m.03p0kv",
            "m.0jyw372",
            "m.0cnyls8",
            "m.03n2sf",
            "m.0gfgk80",
            "m.0321ly",
            "m.04wglg",
            "m.026g4b1",
            "m.065tqj"
        ],
        "different_answer": [
            [
                "m.02rccg",
                "m.0724nn",
                "m.08c_14",
                "m.02665lb",
                "m.06rchd",
                "m.075m4m",
                "m.03p0kv",
                "m.0jyw372",
                "m.0cnyls8",
                "m.03n2sf",
                "m.0gfgk80",
                "m.0321ly",
                "m.04wglg",
                "m.026g4b1",
                "m.065tqj"
            ]
        ],
        "entity_linking": {
            "Kansas City": "m.04f_d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04f_d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04f_d ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04f_d')\na.add_fact('m.04f_d', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-267",
        "question": "where was martin luther king jr raised",
        "answer": [
            "m.013yq"
        ],
        "different_answer": [
            [
                "m.013yq"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-268",
        "question": "what year was lebron james rookie season",
        "answer": [
            "m.07_x8s"
        ],
        "different_answer": [
            [
                "m.07_x8s"
            ]
        ],
        "entity_linking": {
            "LeBron James": "m.01jz6d",
            "NBA Rookie of the Year Award": "m.02yqnh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.02yqnh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02yqnh')\na.add_filter('x0', '!=', 'm.01jz6d')\na.add_fact('x1', 'sports.sports_award.award', 'm.02yqnh')\na.add_fact('m.01jz6d', 'sports.sports_award_winner.awards', 'x1')\na.add_fact('x1', 'sports.sports_award.season', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-269",
        "question": "where does delaware river start",
        "answer": [
            "m.036r_7",
            "m.032h51"
        ],
        "different_answer": [
            [
                "m.036r_7",
                "m.032h51"
            ]
        ],
        "entity_linking": {
            "Delaware River": "m.0dtzd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dtzd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dtzd ns:geography.river.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dtzd')\na.add_fact('m.0dtzd', 'geography.river.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-270",
        "question": "what kind of monarchy does japan have",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-271",
        "question": "where did mitt romney 's parents come from",
        "answer": [
            "m.02dtg"
        ],
        "different_answer": [
            [
                "m.02dtg"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('m.0271_s', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-273",
        "question": "when did michael jordan return to the nba",
        "answer": [
            "1984-08:00"
        ],
        "different_answer": [
            [
                "1984-08:00"
            ]
        ],
        "entity_linking": {
            "Michael Jordan": "m.054c1",
            "Basketball": "m.018w8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054c1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054c1 ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.career_start ?x .\n?y ns:sports.pro_sports_played.sport ns:m.018w8 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018w8')\na.add_filter('x0', '!=', 'm.054c1')\na.add_fact('x1', 'sports.pro_sports_played.sport', 'm.018w8')\na.add_fact('m.054c1', 'sports.pro_athlete.sports_played_professionally', 'x1')\na.add_fact('x1', 'sports.pro_sports_played.career_start', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-276",
        "question": "where was mission san rafael located",
        "answer": [
            "m.0l2hf",
            "m.01zmfk0"
        ],
        "different_answer": [
            [
                "m.0l2hf",
                "m.01zmfk0"
            ]
        ],
        "entity_linking": {
            "Mission San Rafael Arc\u00e1ngel": "m.0gbyx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gbyx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gbyx ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gbyx')\na.add_fact('m.0gbyx', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-277",
        "question": "who was esther 's husband",
        "answer": [
            "m.0cjm1",
            "m.0hy00"
        ],
        "different_answer": [
            [
                "m.0cjm1",
                "m.0hy00"
            ]
        ],
        "entity_linking": {
            "Esther": "m.02pn7",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pn7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pn7 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.02pn7')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.02pn7', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-278",
        "question": "who 's dating claire danes",
        "answer": [
            "m.02tc5y"
        ],
        "different_answer": [
            [
                "m.02tc5y"
            ]
        ],
        "entity_linking": {
            "Claire Danes": "m.01gq0b",
            "Dated": "m.02_7k44",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gq0b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gq0b ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n?y ns:celebrities.romantic_relationship.relationship_type ns:m.02_7k44 .\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk0} || \nEXISTS {?y ns:celebrities.romantic_relationship.start_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk2} || \nEXISTS {?y ns:celebrities.romantic_relationship.end_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7k44')\na.add_filter('x0', '!=', 'm.01gq0b')\na.add_fact('x1', 'celebrities.romantic_relationship.relationship_type', 'm.02_7k44')\na.add_fact('m.01gq0b', 'celebrities.celebrity.sexual_relationships', 'x1')\na.add_time_constrain('x1', 'celebrities.romantic_relationship.start_date', 'celebrities.romantic_relationship.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'celebrities.romantic_relationship.celebrity', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-279",
        "question": "what county is st paul va in",
        "answer": [
            "m.0mn3x",
            "m.0mmy6"
        ],
        "different_answer": [
            [
                "m.0mn3x",
                "m.0mmy6"
            ]
        ],
        "entity_linking": {
            "St. Paul": "m.013nm2",
            "US County": "m.0kpym_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013nm2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013nm2 ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpym_')\na.add_filter('x0', '!=', 'm.013nm2')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpym_')\na.add_fact('m.013nm2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-281",
        "question": "what type of sports do japanese play",
        "answer": [
            "m.02rkd3c",
            "m.02ppd68",
            "m.09gqcv",
            "m.03xh50",
            "m.0qfps15",
            "m.0f9d97",
            "m.05p71j1",
            "m.0t_dl1j"
        ],
        "different_answer": [
            [
                "m.02rkd3c",
                "m.02ppd68",
                "m.09gqcv",
                "m.03xh50",
                "m.0qfps15",
                "m.0f9d97",
                "m.05p71j1",
                "m.0t_dl1j"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-282",
        "question": "which countries share a border with russia",
        "answer": [
            "m.04w8f",
            "m.05qhw",
            "m.05b4w",
            "m.02vzc",
            "m.04gzd",
            "m.02kmm",
            "m.0163v",
            "m.0jhd",
            "m.07t21",
            "m.0d05w3",
            "m.04g5k",
            "m.05b7q",
            "m.047lj",
            "m.0d0kn"
        ],
        "different_answer": [
            [
                "m.04w8f",
                "m.05qhw",
                "m.05b4w",
                "m.02vzc",
                "m.04gzd",
                "m.02kmm",
                "m.0163v",
                "m.0jhd",
                "m.07t21",
                "m.0d05w3",
                "m.04g5k",
                "m.05b7q",
                "m.047lj",
                "m.0d0kn"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.06bnz', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-284",
        "question": "where did the latin language originate from",
        "answer": [
            "m.03t28",
            "m.03v09"
        ],
        "different_answer": [
            [
                "m.03t28",
                "m.03v09"
            ]
        ],
        "entity_linking": {
            "Latin Language": "m.04h9h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04h9h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04h9h ns:language.human_language.language_family ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04h9h')\na.add_fact('m.04h9h', 'language.human_language.language_family', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-286",
        "question": "what school did karl benz go to",
        "answer": [
            "m.0fhr05"
        ],
        "different_answer": [
            [
                "m.0fhr05"
            ]
        ],
        "entity_linking": {
            "Karl Benz": "m.049xg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.049xg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.049xg ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.049xg')\na.add_fact('m.049xg', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-287",
        "question": "what movies has carmen electra been in",
        "answer": [
            "m.07h9gp",
            "m.08pqpg",
            "m.01hjwf",
            "m.04j08hn",
            "m.02q674n",
            "m.02qdrjx",
            "m.04j1hm9",
            "m.01265cw2",
            "m.0b64qt1",
            "m.0h944f1",
            "m.0c02882",
            "m.0tl8nwg",
            "m.0479qny",
            "m.01pj_5",
            "m.0d042l",
            "m.066b_n",
            "m.0tl8ql6",
            "m.0crvchf",
            "m.07zm5t",
            "m.03ywfs",
            "m.0tl8srv",
            "m.0b5mw7",
            "m.072txz",
            "m.0d9z_7",
            "m.0110g35j",
            "m.02pjfgv",
            "m.03ck20l",
            "m.05nd09x",
            "m.04j0wxq",
            "m.0gxsyb5",
            "m.04j2m_x",
            "m.0crv9zg",
            "m.03qhxn_",
            "m.0f0sjn",
            "m.0crrvj7",
            "m.0d2l2_",
            "m.080kmxp",
            "m.056p3k",
            "m.0bh8xz2",
            "m.09t10b",
            "m.040_ypz",
            "m.02ntb8",
            "m.0h3w444",
            "m.04rk7s",
            "m.02q5hqz",
            "m.026hxwx",
            "m.0cr_bqp",
            "m.03cn85q",
            "m.0crw06",
            "m.0tl8vtw",
            "m.04gbj8"
        ],
        "different_answer": [
            [
                "m.07h9gp",
                "m.08pqpg",
                "m.01hjwf",
                "m.04j08hn",
                "m.02q674n",
                "m.02qdrjx",
                "m.04j1hm9",
                "m.01265cw2",
                "m.0b64qt1",
                "m.0h944f1",
                "m.0c02882",
                "m.0tl8nwg",
                "m.0479qny",
                "m.01pj_5",
                "m.0d042l",
                "m.066b_n",
                "m.0tl8ql6",
                "m.0crvchf",
                "m.07zm5t",
                "m.03ywfs",
                "m.0tl8srv",
                "m.0b5mw7",
                "m.072txz",
                "m.0d9z_7",
                "m.0110g35j",
                "m.02pjfgv",
                "m.03ck20l",
                "m.05nd09x",
                "m.04j0wxq",
                "m.0gxsyb5",
                "m.04j2m_x",
                "m.0crv9zg",
                "m.03qhxn_",
                "m.0f0sjn",
                "m.0crrvj7",
                "m.0d2l2_",
                "m.080kmxp",
                "m.056p3k",
                "m.0bh8xz2",
                "m.09t10b",
                "m.040_ypz",
                "m.02ntb8",
                "m.0h3w444",
                "m.04rk7s",
                "m.02q5hqz",
                "m.026hxwx",
                "m.0cr_bqp",
                "m.03cn85q",
                "m.0crw06",
                "m.0tl8vtw",
                "m.04gbj8"
            ]
        ],
        "entity_linking": {
            "Carmen Electra": "m.01lbp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lbp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lbp ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lbp')\na.add_fact('m.01lbp', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-289",
        "question": "when do world war ii end",
        "answer": [
            "1945-09-02-08:00"
        ],
        "different_answer": [
            [
                "1945-09-02-08:00"
            ]
        ],
        "entity_linking": {
            "World War II": "m.081pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081pw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081pw ns:time.event.end_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081pw')\na.add_fact('m.081pw', 'time.event.end_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-291",
        "question": "where did morgan freeman graduate",
        "answer": [
            "m.0zw3n07",
            "m.06kknt"
        ],
        "different_answer": [
            [
                "m.0zw3n07",
                "m.06kknt"
            ]
        ],
        "entity_linking": {
            "Morgan Freeman": "m.055c8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.055c8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.055c8 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.055c8')\na.add_fact('m.055c8', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-294",
        "question": "who was carolus linnaeus",
        "answer": [
            "m.06q2q",
            "m.07lqg0",
            "m.02h6p1f",
            "m.05t4q"
        ],
        "different_answer": [
            [
                "m.06q2q",
                "m.07lqg0",
                "m.02h6p1f",
                "m.05t4q"
            ]
        ],
        "entity_linking": {
            "Carl Linnaeus": "m.01lwd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwd ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lwd')\na.add_fact('m.01lwd', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-295",
        "question": "what type of government does germany have now",
        "answer": [
            "m.0drnm",
            "m.0c9rw5",
            "m.0glnsx",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.0drnm",
                "m.0c9rw5",
                "m.0glnsx",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-296",
        "question": "what kind of government does libya have today",
        "answer": [
            "m.02tz3y",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.02tz3y",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Libya": "m.04gqr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04gqr')\na.add_fact('m.04gqr', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-297",
        "question": "what time zone is anaheim california",
        "answer": [
            "m.02lcqs"
        ],
        "different_answer": [
            [
                "m.02lcqs"
            ]
        ],
        "entity_linking": {
            "Anaheim": "m.0k9p4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k9p4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k9p4 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k9p4')\na.add_fact('m.0k9p4', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-298",
        "question": "what year did the orioles go to the world series",
        "answer": [
            "m.046_p6",
            "m.04jg7y",
            "m.04td_d"
        ],
        "different_answer": [
            [
                "m.046_p6",
                "m.04jg7y",
                "m.04td_d"
            ]
        ],
        "entity_linking": {
            "Baltimore Orioles": "m.01d6g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d6g ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01d6g')\na.add_fact('m.01d6g', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-300",
        "question": "who is sir francis bacon",
        "answer": [
            "m.06q2q",
            "m.02h6fbs",
            "m.0kyk",
            "m.016fc2",
            "g.125_hzb47"
        ],
        "different_answer": [
            [
                "m.06q2q",
                "m.02h6fbs",
                "m.0kyk",
                "m.016fc2",
                "g.125_hzb47"
            ]
        ],
        "entity_linking": {
            "Francis Bacon": "m.030dr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030dr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030dr ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.030dr')\na.add_fact('m.030dr', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-301",
        "question": "what were amelia earhart 's achievements",
        "answer": [
            "m.0cbd2",
            "m.0hltv"
        ],
        "different_answer": [
            [
                "m.0cbd2",
                "m.0hltv"
            ]
        ],
        "entity_linking": {
            "Amelia Earhart": "m.0lngf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lngf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lngf ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lngf')\na.add_fact('m.0lngf', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-302",
        "question": "what are the official colors of the dallas cowboys",
        "answer": [
            "m.02rnmb",
            "m.083jv",
            "m.03vtbc",
            "m.01g5v",
            "m.06kqt3"
        ],
        "different_answer": [
            [
                "m.02rnmb",
                "m.083jv",
                "m.03vtbc",
                "m.01g5v",
                "m.06kqt3"
            ]
        ],
        "entity_linking": {
            "Dallas Cowboys": "m.02896"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02896)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02896 ns:sports.sports_team.colors ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02896')\na.add_fact('m.02896', 'sports.sports_team.colors', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-303",
        "question": "where did margaret hoover go to college",
        "answer": [
            "m.02pdhz",
            "m.01g7_r"
        ],
        "different_answer": [
            [
                "m.02pdhz",
                "m.01g7_r"
            ]
        ],
        "entity_linking": {
            "Margaret Hoover": "m.03m6921",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m6921)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m6921 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03m6921')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03m6921', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-304",
        "question": "what is jamie oliver children names",
        "answer": [
            "m.0b7m2pg",
            "m.0b7m2p0",
            "m.0b7m2p7",
            "m.0gyd_td"
        ],
        "different_answer": [
            [
                "m.0b7m2pg",
                "m.0b7m2p0",
                "m.0b7m2p7",
                "m.0gyd_td"
            ]
        ],
        "entity_linking": {
            "Jamie Oliver": "m.01myph"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01myph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01myph ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01myph')\na.add_fact('m.01myph', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-305",
        "question": "where does bradley walsh live",
        "answer": [
            "m.030qb3t",
            "m.0h7h6"
        ],
        "different_answer": [
            [
                "m.030qb3t",
                "m.0h7h6"
            ]
        ],
        "entity_linking": {
            "Bradley Walsh": "m.05h48b",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05h48b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05h48b ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05h48b')\na.add_fact('m.05h48b', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-306",
        "question": "who is the head coach of inter milan",
        "answer": [
            "m.026g1wf"
        ],
        "different_answer": [
            [
                "m.026g1wf"
            ]
        ],
        "entity_linking": {
            "Inter Milan": "m.03x6m",
            "Head coach": "m.02md_2",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03x6m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03x6m ns:sports.sports_team.coaches ?y .\n?y ns:sports.sports_team_coach_tenure.coach ?x .\n?y ns:sports.sports_team_coach_tenure.position ns:m.02md_2 .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_coach_tenure.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_coach_tenure.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_coach_tenure.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_coach_tenure.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02md_2')\na.add_filter('x0', '!=', 'm.03x6m')\na.add_fact('x1', 'sports.sports_team_coach_tenure.position', 'm.02md_2')\na.add_fact('m.03x6m', 'sports.sports_team.coaches', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_coach_tenure.from', 'sports.sports_team_coach_tenure.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_coach_tenure.coach', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-308",
        "question": "who did reese witherspoon get married to",
        "answer": [
            "m.0gxm_yg"
        ],
        "different_answer": [
            [
                "m.0gxm_yg"
            ]
        ],
        "entity_linking": {
            "Reese Witherspoon": "m.0n6f8",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n6f8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n6f8 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0n6f8')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0n6f8', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-310",
        "question": "what kind of money should i take to costa rica",
        "answer": [
            "m.04wccn"
        ],
        "different_answer": [
            [
                "m.04wccn"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('m.01p8s', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-311",
        "question": "where is the ufc headquarters",
        "answer": [
            "m.0cv3w"
        ],
        "different_answer": [
            [
                "m.0cv3w"
            ]
        ],
        "entity_linking": {
            "Ultimate Fighting Championship": "m.016r3g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016r3g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016r3g ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016r3g')\na.add_fact('m.016r3g', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-312",
        "question": "who plays captain kirk in star trek",
        "answer": [
            "m.06_6j3",
            "m.084m3",
            "m.0lx2l"
        ],
        "different_answer": [
            [
                "m.06_6j3",
                "m.084m3",
                "m.0lx2l"
            ]
        ],
        "entity_linking": {
            "James T. Kirk": "m.0crtw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crtw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crtw ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0crtw')\na.add_fact('m.0crtw', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-313",
        "question": "who does albert pujols play for 2012",
        "answer": [
            "m.04wmvz",
            "m.0f3wm2"
        ],
        "different_answer": [
            [
                "m.04wmvz",
                "m.0f3wm2"
            ]
        ],
        "entity_linking": {
            "Albert Pujols": "m.035gcb",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035gcb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035gcb ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035gcb')\na.add_fact('m.035gcb', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-314",
        "question": "what kind of government is sweden",
        "answer": [
            "m.018wl5",
            "m.01q20",
            "m.01fpfn",
            "m.01ly4h",
            "m.0drnm"
        ],
        "different_answer": [
            [
                "m.018wl5",
                "m.01q20",
                "m.01fpfn",
                "m.01ly4h",
                "m.0drnm"
            ]
        ],
        "entity_linking": {
            "Sweden": "m.0d0vqn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d0vqn')\na.add_fact('m.0d0vqn', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-315",
        "question": "where was country singer george jones born",
        "answer": [
            "m.0f9hl3"
        ],
        "different_answer": [
            [
                "m.0f9hl3"
            ]
        ],
        "entity_linking": {
            "George Jones": "m.01hb9p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hb9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hb9p ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01hb9p')\na.add_fact('m.01hb9p', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-316",
        "question": "what did shakespeare become famous for",
        "answer": [
            "m.02hrh1q",
            "m.025352",
            "m.02hv44_",
            "m.05z96",
            "m.0kyk"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.025352",
                "m.02hv44_",
                "m.05z96",
                "m.0kyk"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('m.081k8', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-317",
        "question": "where does russia import from",
        "answer": [
            "m.07t_x"
        ],
        "different_answer": [
            [
                "m.07t_x"
            ],
            [
                "m.07t_x"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.statistical_region.places_imported_from', 'x1')\na.add_fact('x1', 'location.imports_and_exports.imported_from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-318",
        "question": "what is the money of switzerland called",
        "answer": [
            "m.01_h4b"
        ],
        "different_answer": [
            [
                "m.01_h4b"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('m.06mzp', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-321",
        "question": "what do people in australia speak",
        "answer": [
            "m.04gd7",
            "m.02jcw",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.04gd7",
                "m.02jcw",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-322",
        "question": "what has ian somerhalder acted in",
        "answer": [
            "m.0w2rr84",
            "m.02vn93f",
            "m.0dqpx9",
            "m.0vsjfsp",
            "m.0glymk",
            "m.0bd5mrx",
            "m.05q8gln",
            "m.04j2fyc",
            "m.0cnbrgy",
            "m.0cs0g8b",
            "m.04f20d",
            "m.0892jh",
            "m.0w2rqf7",
            "m.0crts8b",
            "m.06zpsmp",
            "m.03m8y5",
            "m.04zyhx",
            "m.04j16_m",
            "m.08bgt3",
            "m.0w2rr0c",
            "m.0w2rrp1",
            "m.026_ghc"
        ],
        "different_answer": [
            [
                "m.0w2rr84",
                "m.02vn93f",
                "m.0dqpx9",
                "m.0vsjfsp",
                "m.0glymk",
                "m.0bd5mrx",
                "m.05q8gln",
                "m.04j2fyc",
                "m.0cnbrgy",
                "m.0cs0g8b",
                "m.04f20d",
                "m.0892jh",
                "m.0w2rqf7",
                "m.0crts8b",
                "m.06zpsmp",
                "m.03m8y5",
                "m.04zyhx",
                "m.04j16_m",
                "m.08bgt3",
                "m.0w2rr0c",
                "m.0w2rrp1",
                "m.026_ghc"
            ]
        ],
        "entity_linking": {
            "Ian Somerhalder": "m.044mvs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.044mvs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.044mvs ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.044mvs')\na.add_fact('m.044mvs', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-323",
        "question": "what movies did ron howard director",
        "answer": [
            "m.0134tnr7",
            "m.047nfz",
            "m.05h3bcc",
            "m.02mh4b",
            "m.0gmdpnm",
            "m.06xz7w",
            "m.03r58n",
            "m.0cc5m07",
            "m.09_rkp7",
            "m.09m6kg",
            "m.02_1sj",
            "m.0gy75pd",
            "m.0ngnf3x",
            "m.04ynx7",
            "m.0crrc8",
            "m.02yf34",
            "m.065dc4",
            "m.01xvjb",
            "m.034bm_",
            "m.09hfyy",
            "m.0xnx1p3",
            "m.02t9_q",
            "m.050gkf",
            "m.0f4_2k",
            "m.011yd2",
            "m.0c3_662",
            "m.03xx0x",
            "m.02vqsll",
            "m.01hw5kk"
        ],
        "different_answer": [
            [
                "m.0134tnr7",
                "m.047nfz",
                "m.05h3bcc",
                "m.02mh4b",
                "m.0gmdpnm",
                "m.06xz7w",
                "m.03r58n",
                "m.0cc5m07",
                "m.09_rkp7",
                "m.09m6kg",
                "m.02_1sj",
                "m.0gy75pd",
                "m.0ngnf3x",
                "m.04ynx7",
                "m.0crrc8",
                "m.02yf34",
                "m.065dc4",
                "m.01xvjb",
                "m.034bm_",
                "m.09hfyy",
                "m.0xnx1p3",
                "m.02t9_q",
                "m.050gkf",
                "m.0f4_2k",
                "m.011yd2",
                "m.0c3_662",
                "m.03xx0x",
                "m.02vqsll",
                "m.01hw5kk"
            ]
        ],
        "entity_linking": {
            "Ron Howard": "m.0g2lq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g2lq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g2lq ns:film.director.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g2lq')\na.add_fact('m.0g2lq', 'film.director.film', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-326",
        "question": "what did gerald r ford die from",
        "answer": [
            "m.02k6hp"
        ],
        "different_answer": [
            [
                "m.02k6hp"
            ]
        ],
        "entity_linking": {
            "Gerald Ford": "m.0c_md_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_md_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_md_ ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c_md_')\na.add_fact('m.0c_md_', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-327",
        "question": "what two continents is turkey on",
        "answer": [
            "m.02qkt"
        ],
        "different_answer": [
            [
                "m.02qkt"
            ],
            [
                "m.02j9z",
                "m.0j0k"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'base.locations.countries.continent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-328",
        "question": "where did kevin love go to college",
        "answer": [
            "m.09f2j"
        ],
        "different_answer": [
            [
                "m.09f2j"
            ]
        ],
        "entity_linking": {
            "Kevin Love": "m.0fxgqw",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fxgqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fxgqw ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0fxgqw')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0fxgqw', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-329",
        "question": "what type of government was formed when italy unified",
        "answer": [
            "m.01fpfn",
            "m.0c9rw5",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.0c9rw5",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-331",
        "question": "where was the temple of karnak built",
        "answer": [
            "m.02k54",
            "m.02fhym"
        ],
        "different_answer": [
            [
                "m.02k54",
                "m.02fhym"
            ]
        ],
        "entity_linking": {
            "Karnak": "m.014wy4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014wy4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014wy4 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014wy4')\na.add_fact('m.014wy4', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-333",
        "question": "what movies did morgan freeman star in",
        "answer": [
            "m.0gx8pq3",
            "m.011djb5_",
            "m.0h0_cm_",
            "m.056s2zf",
            "m.0c771m",
            "m.06lbvw",
            "m.0gxwbzk",
            "m.0d7svf",
            "m.038b5k",
            "m.0260bz",
            "m.0h0zs8c",
            "m.02q0v8n",
            "m.03gv656",
            "m.0n43ym4",
            "m.0n4g1dj",
            "m.09v6jyh",
            "m.01jft4",
            "m.0v8_gw0",
            "m.03h0pxb",
            "m.012n8g9g",
            "m.07jyv8",
            "m.0ndwy5n",
            "m.02w86s6",
            "m.02mmwk",
            "m.04j2lcd",
            "m.01msrb",
            "m.026sq47",
            "m.0h2_kb9",
            "m.0crv8mp",
            "m.0h_1cdg",
            "m.0b6qmv",
            "m.0h0_gsx",
            "m.0y511xj",
            "m.061dc7",
            "m.04j1w2g",
            "m.06yv1n",
            "m.02fqrf",
            "m.055yv7",
            "m.0w36vqd",
            "m.0h8860l",
            "m.0_vm56w",
            "m.0crwrlm",
            "m.0crt891",
            "m.0d1yzs",
            "m.088j6t",
            "m.0gx8pwt",
            "m.0bfmdnc",
            "m.02rdvz1",
            "m.0ch0qx",
            "m.02wz1ch",
            "m.0bhc5kw",
            "m.01q2nx",
            "m.07_466",
            "m.021gzd",
            "m.0btpm6",
            "m.0287477",
            "m.02y_lrp",
            "m.03g_b58",
            "m.0brfjd",
            "m.0dgpsql",
            "m.0dsvzh",
            "m.0yntbty",
            "m.04xp1l",
            "m.0kv6pf",
            "m.01dc0c",
            "m.02q1nks",
            "m.04xp9q",
            "m.04jvgb",
            "m.05p7w6k",
            "m.05n9yq",
            "m.0cqvb1x",
            "m.06l9d_",
            "m.0jwy6sk",
            "m.0cf8qb",
            "m.0bpm4yw",
            "m.0114hb3m",
            "m.04n3tmy",
            "m.04fs42",
            "m.036qtd",
            "m.036r3f",
            "m.010vzxsl",
            "m.07p62k",
            "m.026q7m6",
            "m.04gp4lp",
            "m.07jnt",
            "m.07yk1xz",
            "m.04q827",
            "m.04cpvs",
            "m.04j1bhb",
            "m.08wrlb",
            "m.02jxbw",
            "m.02x9t1c",
            "m.0crt1fp",
            "m.0_92w",
            "m.0558xt",
            "m.06gyxs",
            "m.0n3t4y8",
            "m.0gjbskw",
            "m.026v072",
            "m.0yyts",
            "m.0gwn3n6"
        ],
        "different_answer": [
            [
                "m.0gx8pq3",
                "m.011djb5_",
                "m.0h0_cm_",
                "m.056s2zf",
                "m.0c771m",
                "m.06lbvw",
                "m.0gxwbzk",
                "m.0d7svf",
                "m.038b5k",
                "m.0260bz",
                "m.0h0zs8c",
                "m.02q0v8n",
                "m.03gv656",
                "m.0n43ym4",
                "m.0n4g1dj",
                "m.09v6jyh",
                "m.01jft4",
                "m.0v8_gw0",
                "m.03h0pxb",
                "m.012n8g9g",
                "m.07jyv8",
                "m.0ndwy5n",
                "m.02w86s6",
                "m.02mmwk",
                "m.04j2lcd",
                "m.01msrb",
                "m.026sq47",
                "m.0h2_kb9",
                "m.0crv8mp",
                "m.0h_1cdg",
                "m.0b6qmv",
                "m.0h0_gsx",
                "m.0y511xj",
                "m.061dc7",
                "m.04j1w2g",
                "m.06yv1n",
                "m.02fqrf",
                "m.055yv7",
                "m.0w36vqd",
                "m.0h8860l",
                "m.0_vm56w",
                "m.0crwrlm",
                "m.0crt891",
                "m.0d1yzs",
                "m.088j6t",
                "m.0gx8pwt",
                "m.0bfmdnc",
                "m.02rdvz1",
                "m.0ch0qx",
                "m.02wz1ch",
                "m.0bhc5kw",
                "m.01q2nx",
                "m.07_466",
                "m.021gzd",
                "m.0btpm6",
                "m.0287477",
                "m.02y_lrp",
                "m.03g_b58",
                "m.0brfjd",
                "m.0dgpsql",
                "m.0dsvzh",
                "m.0yntbty",
                "m.04xp1l",
                "m.0kv6pf",
                "m.01dc0c",
                "m.02q1nks",
                "m.04xp9q",
                "m.04jvgb",
                "m.05p7w6k",
                "m.05n9yq",
                "m.0cqvb1x",
                "m.06l9d_",
                "m.0jwy6sk",
                "m.0cf8qb",
                "m.0bpm4yw",
                "m.0114hb3m",
                "m.04n3tmy",
                "m.04fs42",
                "m.036qtd",
                "m.036r3f",
                "m.010vzxsl",
                "m.07p62k",
                "m.026q7m6",
                "m.04gp4lp",
                "m.07jnt",
                "m.07yk1xz",
                "m.04q827",
                "m.04cpvs",
                "m.04j1bhb",
                "m.08wrlb",
                "m.02jxbw",
                "m.02x9t1c",
                "m.0crt1fp",
                "m.0_92w",
                "m.0558xt",
                "m.06gyxs",
                "m.0n3t4y8",
                "m.0gjbskw",
                "m.026v072",
                "m.0yyts",
                "m.0gwn3n6"
            ]
        ],
        "entity_linking": {
            "Morgan Freeman": "m.055c8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.055c8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.055c8 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.055c8')\na.add_fact('m.055c8', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-334",
        "question": "who did john kennedy have affairs with",
        "answer": [
            "m.04n4r6",
            "m.04wqr"
        ],
        "different_answer": [
            [
                "m.04n4r6",
                "m.04wqr"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('m.0d3k14', 'celebrities.celebrity.sexual_relationships', 'x1')\na.add_fact('x1', 'celebrities.romantic_relationship.celebrity', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-335",
        "question": "what type of money to take to cuba",
        "answer": [
            "m.049p6c",
            "m.049p2z"
        ],
        "different_answer": [
            [
                "m.049p6c",
                "m.049p2z"
            ]
        ],
        "entity_linking": {
            "Cuba": "m.0d04z6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d04z6')\na.add_fact('m.0d04z6', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-336",
        "question": "what currency should you take to morocco",
        "answer": [
            "m.06qsj1"
        ],
        "different_answer": [
            [
                "m.06qsj1"
            ]
        ],
        "entity_linking": {
            "Morocco": "m.04wgh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wgh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wgh ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04wgh')\na.add_fact('m.04wgh', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-337",
        "question": "who is mary mcleod bethune for kids",
        "answer": [
            "g.121bkpjb"
        ],
        "different_answer": [
            [
                "g.121bkpjb"
            ]
        ],
        "entity_linking": {
            "Mary McLeod Bethune": "m.025rv7p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025rv7p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025rv7p ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025rv7p')\na.add_fact('m.025rv7p', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-338",
        "question": "what do they call money in japan",
        "answer": [
            "m.088n7"
        ],
        "different_answer": [
            [
                "m.088n7"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-339",
        "question": "what nationality is mother teresa",
        "answer": [
            "m.03rk0",
            "m.05kyr"
        ],
        "different_answer": [
            [
                "m.03rk0",
                "m.05kyr"
            ]
        ],
        "entity_linking": {
            "Mother Teresa": "m.01yv6p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yv6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yv6p ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01yv6p')\na.add_fact('m.01yv6p', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-340",
        "question": "who is richard pryor son",
        "answer": [
            "m.05z2scv",
            "m.05z2scn",
            "m.05z2sc1"
        ],
        "different_answer": [
            [
                "m.05z2scv",
                "m.05z2scn",
                "m.05z2sc1"
            ]
        ],
        "entity_linking": {
            "Richard Pryor": "m.01hmk9",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hmk9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hmk9 ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.01hmk9')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.01hmk9', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-341",
        "question": "what countries share borders with spain",
        "answer": [
            "m.05r4w",
            "m.0hg5",
            "m.035hm",
            "m.0f8l9c",
            "m.04wgh"
        ],
        "different_answer": [
            [
                "m.05r4w",
                "m.0hg5",
                "m.035hm",
                "m.0f8l9c",
                "m.04wgh"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.06mkj', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-342",
        "question": "what countries have english as their official language",
        "answer": [
            "m.088q4",
            "m.0hdx8",
            "m.07tp2",
            "m.01nln",
            "m.03t1s",
            "m.05br2",
            "m.06ryl",
            "m.06t2t",
            "m.034m8",
            "m.04v3q",
            "m.07z5n",
            "m.07ssc",
            "m.0160w",
            "m.05r7t",
            "m.06v36",
            "m.0166v",
            "m.019rg5",
            "m.047t_",
            "m.07fsv",
            "m.0d060g",
            "m.07fr_",
            "m.05sb1",
            "m.05v8c",
            "m.0162v",
            "m.0l3h",
            "m.035yg",
            "m.027nb",
            "m.020p1",
            "m.03_xj",
            "m.06s_2",
            "m.06dfg",
            "m.035dk",
            "m.0164b",
            "m.088vb",
            "m.05bmq",
            "m.04hvw",
            "m.04hzj",
            "m.05cgv",
            "m.09wfqp",
            "m.06s6l",
            "m.04v6v",
            "m.06tw8",
            "m.06s0l",
            "m.0165b",
            "m.03h64",
            "m.035hm",
            "m.05qkp",
            "m.06s9y",
            "m.026wtlf",
            "m.0hzlz",
            "m.0j5g9",
            "m.01nty",
            "m.04wcf",
            "m.03rt9",
            "m.03rk0",
            "m.07dzf",
            "m.034tl",
            "m.02wt0",
            "m.0ctw_b"
        ],
        "different_answer": [
            [
                "m.088q4",
                "m.0hdx8",
                "m.07tp2",
                "m.01nln",
                "m.03t1s",
                "m.05br2",
                "m.06ryl",
                "m.06t2t",
                "m.034m8",
                "m.04v3q",
                "m.07z5n",
                "m.07ssc",
                "m.0160w",
                "m.05r7t",
                "m.06v36",
                "m.0166v",
                "m.019rg5",
                "m.047t_",
                "m.07fsv",
                "m.0d060g",
                "m.07fr_",
                "m.05sb1",
                "m.05v8c",
                "m.0162v",
                "m.0l3h",
                "m.035yg",
                "m.027nb",
                "m.020p1",
                "m.03_xj",
                "m.06s_2",
                "m.06dfg",
                "m.035dk",
                "m.0164b",
                "m.088vb",
                "m.05bmq",
                "m.04hvw",
                "m.04hzj",
                "m.05cgv",
                "m.09wfqp",
                "m.06s6l",
                "m.04v6v",
                "m.06tw8",
                "m.06s0l",
                "m.0165b",
                "m.03h64",
                "m.035hm",
                "m.05qkp",
                "m.06s9y",
                "m.026wtlf",
                "m.0hzlz",
                "m.0j5g9",
                "m.01nty",
                "m.04wcf",
                "m.03rt9",
                "m.03rk0",
                "m.07dzf",
                "m.034tl",
                "m.02wt0",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.02h40lc .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('x0', 'location.country.official_language', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-343",
        "question": "what international organizations is china part of",
        "answer": [
            "m.02vk52z",
            "m.0_2v",
            "m.03m6lb",
            "m.06vxc9",
            "m.05yg8kx",
            "m.013w27",
            "m.01027r",
            "m.07t65",
            "m.0b6css"
        ],
        "different_answer": [
            [
                "m.02vk52z",
                "m.0_2v",
                "m.03m6lb",
                "m.06vxc9",
                "m.05yg8kx",
                "m.013w27",
                "m.01027r",
                "m.07t65",
                "m.0b6css"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:organization.organization_member.member_of ?y .\n?y ns:organization.organization_membership.organization ?x .\nFILTER(NOT EXISTS {?y ns:organization.organization_membership.to ?sk0} || \nEXISTS {?y ns:organization.organization_membership.to ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.organization_membership.from ?sk2} || \nEXISTS {?y ns:organization.organization_membership.from ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'organization.organization_member.member_of', 'x1')\na.add_time_constrain('x1', 'organization.organization_membership.from', 'organization.organization_membership.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'organization.organization_membership.organization', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-344",
        "question": "what county is west st paul in",
        "answer": [
            "m.0nhr5"
        ],
        "different_answer": [
            [
                "m.0nhr5"
            ],
            [
                "m.0nhr5"
            ]
        ],
        "entity_linking": {
            "West St. Paul": "m.0vz77"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vz77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vz77 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0vz77')\na.add_fact('m.0vz77', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-346",
        "question": "who does donnie wahlberg play in the sixth sense",
        "answer": [
            "m.0gyxn2c"
        ],
        "different_answer": [
            [
                "m.0gyxn2c"
            ],
            [
                "m.0gyxn2c"
            ]
        ],
        "entity_linking": {
            "Donnie Wahlberg": "m.02stwg",
            "The Sixth Sense": "m.07j94"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02stwg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02stwg ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.07j94 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07j94')\na.add_filter('x0', '!=', 'm.02stwg')\na.add_fact('x1', 'film.performance.film', 'm.07j94')\na.add_fact('m.02stwg', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-347",
        "question": "what did baron de montesquie influence",
        "answer": [
            "m.07kwl",
            "m.0k665",
            "m.056xnr",
            "m.014nx0",
            "m.01g95k",
            "m.029b4z",
            "m.0nk72",
            "m.0424m",
            "m.0cgwf",
            "m.0tfc",
            "m.015v8f",
            "m.032r1",
            "m.0420y",
            "m.05k9m6",
            "m.02qr0",
            "m.02ssn",
            "m.039n1",
            "m.07cbs",
            "m.09j84",
            "m.026lj",
            "m.03_js"
        ],
        "different_answer": [
            [
                "m.07kwl",
                "m.0k665",
                "m.056xnr",
                "m.014nx0",
                "m.01g95k",
                "m.029b4z",
                "m.0nk72",
                "m.0424m",
                "m.0cgwf",
                "m.0tfc",
                "m.015v8f",
                "m.032r1",
                "m.0420y",
                "m.05k9m6",
                "m.02qr0",
                "m.02ssn",
                "m.039n1",
                "m.07cbs",
                "m.09j84",
                "m.026lj",
                "m.03_js"
            ]
        ],
        "entity_linking": {
            "Montesquieu": "m.0f9wd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f9wd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f9wd ns:influence.influence_node.influenced ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f9wd')\na.add_fact('m.0f9wd', 'influence.influence_node.influenced', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-349",
        "question": "who did carlos boozer play for",
        "answer": [
            "m.0jm7n",
            "m.0jmhr"
        ],
        "different_answer": [
            [
                "m.0jm7n",
                "m.0jmhr"
            ]
        ],
        "entity_linking": {
            "Carlos Boozer": "m.03l2cs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2cs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2cs ns:basketball.basketball_player.player_statistics ?y .\n?y ns:basketball.basketball_player_stats.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03l2cs')\na.add_fact('m.03l2cs', 'basketball.basketball_player.player_statistics', 'x1')\na.add_fact('x1', 'basketball.basketball_player_stats.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-351",
        "question": "who owns the portland press herald",
        "answer": [
            "m.05kh9x5"
        ],
        "different_answer": [
            [
                "m.05kh9x5"
            ]
        ],
        "entity_linking": {
            "Portland Press Herald": "m.0852w8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0852w8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0852w8 ns:book.newspaper.owner ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0852w8')\na.add_fact('m.0852w8', 'book.newspaper.owner', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-352",
        "question": "what did albert speer design",
        "answer": [
            "m.06ft3z",
            "m.06cwrf",
            "m.03js7d",
            "m.04j99j"
        ],
        "different_answer": [
            [
                "m.06ft3z",
                "m.06cwrf",
                "m.03js7d",
                "m.04j99j"
            ]
        ],
        "entity_linking": {
            "Albert Speer": "m.0l4t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l4t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l4t ns:architecture.architect.structures_designed ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0l4t')\na.add_fact('m.0l4t', 'architecture.architect.structures_designed', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-353",
        "question": "who does jordan palmer play for",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Jordan Palmer": "m.0d9wsx",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9wsx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9wsx ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d9wsx')\na.add_fact('m.0d9wsx', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-354",
        "question": "what art movement did leonardo da vinci belong to",
        "answer": [
            "m.01z__d",
            "m.011nkkt6"
        ],
        "different_answer": [
            [
                "m.01z__d",
                "m.011nkkt6"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-356",
        "question": "what airport is near arlington tx",
        "answer": [
            "m.02pq2d8"
        ],
        "different_answer": [
            [
                "m.02pq2d8"
            ]
        ],
        "entity_linking": {
            "Arlington": "m.0nqph"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nqph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nqph ns:location.location.nearby_airports ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0nqph')\na.add_fact('m.0nqph', 'location.location.nearby_airports', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-359",
        "question": "what team does heskey play for",
        "answer": [
            "m.0bl8l",
            "m.03d4g8"
        ],
        "different_answer": [
            [
                "m.0bl8l",
                "m.03d4g8"
            ]
        ],
        "entity_linking": {
            "Emile Heskey": "m.01yj16"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yj16)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yj16 ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01yj16')\na.add_fact('m.01yj16', 'base.schemastaging.athlete_extra.salary', 'x1')\na.add_fact('x1', 'base.schemastaging.athlete_salary.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-360",
        "question": "where did emperor hirohito live",
        "answer": [
            "m.03xm9l"
        ],
        "different_answer": [
            [
                "m.03xm9l"
            ]
        ],
        "entity_linking": {
            "Hirohito": "m.02sm8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sm8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sm8 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02sm8')\na.add_fact('m.02sm8', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-361",
        "question": "what to do and see in vienna austria",
        "answer": [
            "m.037yl3",
            "m.08k4xy",
            "m.01c921",
            "m.079jqn",
            "m.07xjrz",
            "m.0czbmkt",
            "m.0b0lgr",
            "m.025zg_7",
            "m.09fvwy",
            "m.021c8v",
            "m.015_kq",
            "m.08gckp",
            "m.05ksgz",
            "m.0dnhg8",
            "m.08v5y9",
            "m.04zct1",
            "m.08j7nmv",
            "m.04lv9z",
            "m.0547jg",
            "m.027fx_h",
            "m.0bygq4",
            "m.02w4zw",
            "m.0c1v9t",
            "m.02q__dl",
            "m.03yy70",
            "m.071ygm",
            "m.098gjd",
            "g.121ymzrf",
            "m.01fdmj"
        ],
        "different_answer": [
            [
                "m.037yl3",
                "m.08k4xy",
                "m.01c921",
                "m.079jqn",
                "m.07xjrz",
                "m.0czbmkt",
                "m.0b0lgr",
                "m.025zg_7",
                "m.09fvwy",
                "m.021c8v",
                "m.015_kq",
                "m.08gckp",
                "m.05ksgz",
                "m.0dnhg8",
                "m.08v5y9",
                "m.04zct1",
                "m.08j7nmv",
                "m.04lv9z",
                "m.0547jg",
                "m.027fx_h",
                "m.0bygq4",
                "m.02w4zw",
                "m.0c1v9t",
                "m.02q__dl",
                "m.03yy70",
                "m.071ygm",
                "m.098gjd",
                "g.121ymzrf",
                "m.01fdmj"
            ]
        ],
        "entity_linking": {
            "Vienna": "m.0fhp9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fhp9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fhp9 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fhp9')\na.add_fact('m.0fhp9', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-362",
        "question": "when did conflict start in ireland",
        "answer": [
            "m.08zz2w",
            "m.0c9_fj",
            "m.0554yw",
            "m.0cffgq",
            "m.053997",
            "m.0gmdvwg",
            "m.03kz35",
            "m.0bh75th",
            "m.08zy1f",
            "m.09qgbg",
            "m.0455n7",
            "m.05ch2v",
            "m.03xvj",
            "m.037pbp",
            "m.0c414c",
            "m.0fzqxy",
            "m.0ddfcvb",
            "m.04qbccl",
            "m.0bmf9lh",
            "m.09gdz49",
            "m.05cfx7",
            "m.05mwtnl",
            "m.03r8xj",
            "m.0fmqqy",
            "m.0467ph",
            "m.01gqg3",
            "m.03ymyvf",
            "m.0c43s6",
            "m.0cnvmv",
            "m.016j83",
            "m.046d2r",
            "m.08zyvy"
        ],
        "different_answer": [
            [
                "m.08zz2w",
                "m.0c9_fj",
                "m.0554yw",
                "m.0cffgq",
                "m.053997",
                "m.0gmdvwg",
                "m.03kz35",
                "m.0bh75th",
                "m.08zy1f",
                "m.09qgbg",
                "m.0455n7",
                "m.05ch2v",
                "m.03xvj",
                "m.037pbp",
                "m.0c414c",
                "m.0fzqxy",
                "m.0ddfcvb",
                "m.04qbccl",
                "m.0bmf9lh",
                "m.09gdz49",
                "m.05cfx7",
                "m.05mwtnl",
                "m.03r8xj",
                "m.0fmqqy",
                "m.0467ph",
                "m.01gqg3",
                "m.03ymyvf",
                "m.0c43s6",
                "m.0cnvmv",
                "m.016j83",
                "m.046d2r",
                "m.08zyvy"
            ]
        ],
        "entity_linking": {
            "Ireland": "m.012wgb",
            "Military Conflict": "m.02h76fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012wgb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012wgb ns:location.location.events ?x .\n?x ns:common.topic.notable_types ns:m.02h76fz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h76fz')\na.add_filter('x0', '!=', 'm.012wgb')\na.add_fact('x0', 'common.topic.notable_types', 'm.02h76fz')\na.add_fact('m.012wgb', 'location.location.events', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-365",
        "question": "what is there to do in peoria illinois",
        "answer": [
            "m.093pd6",
            "m.025vxh4",
            "m.05zlj1p",
            "m.067f5q",
            "m.04vxv8f",
            "m.08bsxj",
            "m.04mzskn",
            "m.05mxh89",
            "m.0cmd5ys",
            "m.02qlj1w"
        ],
        "different_answer": [
            [
                "m.093pd6",
                "m.025vxh4",
                "m.05zlj1p",
                "m.067f5q",
                "m.04vxv8f",
                "m.08bsxj",
                "m.04mzskn",
                "m.05mxh89",
                "m.0cmd5ys",
                "m.02qlj1w"
            ]
        ],
        "entity_linking": {
            "Peoria": "m.0sf9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0sf9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0sf9_ ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0sf9_')\na.add_fact('m.0sf9_', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-366",
        "question": "what language do british speak",
        "answer": [
            "m.02h40lc",
            "m.01v0g",
            "m.0h407",
            "m.0ct8m",
            "m.083tk",
            "m.02jcw",
            "m.03x42",
            "m.070zw"
        ],
        "different_answer": [
            [
                "m.02h40lc",
                "m.01v0g",
                "m.0h407",
                "m.0ct8m",
                "m.083tk",
                "m.02jcw",
                "m.03x42",
                "m.070zw"
            ],
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-367",
        "question": "what makes elvis presley famous",
        "answer": [
            "m.09jwl",
            "m.099md",
            "m.02hrh1q",
            "m.09l65"
        ],
        "different_answer": [
            [
                "m.09jwl",
                "m.099md",
                "m.02hrh1q",
                "m.09l65"
            ]
        ],
        "entity_linking": {
            "Elvis Presley": "m.02jq1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jq1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jq1 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02jq1')\na.add_fact('m.02jq1', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-370",
        "question": "what language do people speak in the netherlands",
        "answer": [
            "m.02y3v",
            "m.02bv9",
            "m.02w0r"
        ],
        "different_answer": [
            [
                "m.02y3v",
                "m.02bv9",
                "m.02w0r"
            ],
            [
                "m.02bv9"
            ]
        ],
        "entity_linking": {
            "Netherlands": "m.059j2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059j2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059j2 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.059j2')\na.add_fact('m.059j2', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-371",
        "question": "what are the major languages spoken in greece",
        "answer": [
            "m.0349s"
        ],
        "different_answer": [
            [
                "m.0349s"
            ]
        ],
        "entity_linking": {
            "Greece": "m.035qy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035qy')\na.add_fact('m.035qy', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-374",
        "question": "what type of artist is henri matisse",
        "answer": [
            "m.06msq",
            "m.01bsxb",
            "m.02csf",
            "m.0bp7w",
            "m.05qdh"
        ],
        "different_answer": [
            [
                "m.06msq",
                "m.01bsxb",
                "m.02csf",
                "m.0bp7w",
                "m.05qdh"
            ]
        ],
        "entity_linking": {
            "Henri Matisse": "m.0gct_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gct_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gct_ ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gct_')\na.add_fact('m.0gct_', 'visual_art.visual_artist.art_forms', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-375",
        "question": "what was the first book charles dickens wrote",
        "answer": [
            "m.015cf8"
        ],
        "different_answer": [
            [
                "m.015cf8"
            ]
        ],
        "entity_linking": {
            "Charles Dickens": "m.01v9724",
            "Book": "m.01xryvm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01v9724)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01v9724 ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:m.01xryvm .\n?x ns:book.written_work.copyright_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xryvm')\na.add_filter('x0', '!=', 'm.01v9724')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xryvm')\na.add_fact('m.01v9724', 'book.author.works_written', 'x0')\na.add_fact('x0', 'book.written_work.copyright_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-376",
        "question": "what books did agatha christie wrote",
        "answer": [
            "m.04v2skk",
            "m.04v2spb",
            "m.04v8k44",
            "m.04v3jkd",
            "m.04vzzbw",
            "m.04v252w",
            "m.04vghp7",
            "m.04vft0p",
            "m.04v2th8",
            "m.04v2tg7",
            "m.04tzwmr",
            "m.04v2wkz",
            "m.04v8828",
            "m.04v7wdn",
            "m.04v3sxf",
            "m.04v_2vz",
            "m.04t_wdp",
            "m.04vgfyr",
            "m.04vbt_8",
            "m.04vf52l",
            "m.04vfv3b",
            "m.04v11p7",
            "m.04v9hmx",
            "m.04vgxyc",
            "m.04v140b",
            "m.04vft64",
            "m.04vb8_x",
            "m.04tsxyp",
            "m.04t_y10",
            "m.04v3yk1",
            "m.04v8k57",
            "m.04vg_0z",
            "m.04v3w4x",
            "m.04t_y2y",
            "m.04v1bth",
            "m.04v2wly",
            "m.04vkhzy",
            "m.04vhpch",
            "m.04vc4sy",
            "m.04v18mr",
            "m.04vzz7j",
            "m.04vfv1d",
            "m.04t_jdc",
            "m.04vhfmz",
            "m.04w00vd",
            "m.04v8l7h",
            "m.04v172g",
            "m.04vjlvl",
            "m.04vf53b",
            "m.04vkg9z",
            "m.04vkxr1",
            "m.04v7ngf",
            "m.04v17sg",
            "m.04vc229",
            "m.04v1wkr",
            "m.04v7vh0",
            "m.04vgftt",
            "m.04v3w7c",
            "m.04v2t84",
            "m.04v7w8j",
            "m.04tzwks",
            "m.04v25mh",
            "m.04vc23l",
            "m.04vhfmg",
            "m.04vbrgg",
            "m.04w00wp",
            "m.04v3w4f",
            "m.04v2v7n",
            "m.04v7h0p",
            "m.04v7jpd",
            "m.04vc220",
            "m.04vc6y_",
            "m.04v8817",
            "m.04vhfs6",
            "m.04v3z8r",
            "m.04tzyqn",
            "m.04tsy2b",
            "m.04v25sh",
            "m.04v197f",
            "m.04vf27z",
            "m.04tsxtq",
            "m.04t_m13",
            "m.04vbrn3",
            "m.04v14yb",
            "m.04vgkq_",
            "m.04v3w1f",
            "m.04v171_",
            "m.04v3jk4",
            "m.04vf3qy",
            "m.04vc709",
            "m.04vg_2w",
            "m.04t_7vw",
            "m.04v19hl",
            "m.04v195h",
            "m.04vf3r5",
            "m.04v25qz",
            "m.04v17w7",
            "m.04vbd20",
            "m.04v3w5m",
            "m.04v9hlm",
            "m.04vf26z",
            "m.04tsy7l",
            "m.04v8k6l",
            "m.04tzntb",
            "m.04vkxrr",
            "m.04vbv2l",
            "m.04tsxsv",
            "m.04vbk5r",
            "m.04v2v6x",
            "m.04vkgc5",
            "m.04w00vp",
            "m.04v2skt",
            "m.04vf3s7",
            "m.04vgy79",
            "m.04v279w",
            "m.04vcw6g",
            "m.04v7h1_",
            "m.04v13_v",
            "m.04vhnt9",
            "m.04vbt_j",
            "m.04v25ns",
            "m.04v224w",
            "m.04v19dc",
            "m.04v987r",
            "m.04vbd3s",
            "m.04v41xg",
            "m.04vb8_n",
            "m.04tsxrz",
            "m.04v196y",
            "m.04v88_r",
            "m.04vzz6l",
            "m.04tzqlw",
            "m.04v182f",
            "m.04vkxtq",
            "m.04v2201",
            "m.04vfszw",
            "m.04v986y",
            "m.04v1x35",
            "m.04v19h4",
            "m.04vcw4j",
            "m.04v3z9h",
            "m.04vghrv",
            "m.04tzyh6",
            "m.04v1wf6",
            "m.04tsxsd",
            "m.04v196j",
            "m.04vf3vk",
            "m.04vg4w8",
            "m.04tsy17",
            "m.04v2t7x",
            "m.04v7wnq",
            "m.04vcw5k",
            "m.04vg_0f",
            "m.04tzsdl",
            "m.04vkj03",
            "m.04vc6_7",
            "m.04v2701",
            "m.04tz_15",
            "m.04v008p",
            "m.04v26_b",
            "m.04v9hky",
            "m.04vkgcp",
            "m.04t_m1c",
            "m.04v14bc",
            "m.04vc24w",
            "m.04vgxxc",
            "m.04v987_",
            "m.04v7w91",
            "m.04v9b62",
            "m.04vfv29",
            "m.04vf27g",
            "m.04vzz96",
            "m.04vc210",
            "m.04vkgcy",
            "m.04t_m7z",
            "m.04v2wkg",
            "m.04vbk0s",
            "m.04vc8b3",
            "m.04v7ndl",
            "m.04v19jb",
            "m.04t_m3n",
            "m.04v9b4w",
            "m.04v7nfm",
            "m.04v_2tc",
            "m.04v1cfw",
            "m.04vhnv9",
            "m.04vgjbk",
            "m.04w00v_",
            "m.04vf33q",
            "m.04tzyjc",
            "m.04vft8b",
            "m.04v4wpq",
            "m.04tzyvw",
            "m.04v3jpw",
            "m.04v3_hr",
            "m.04v4wqf",
            "m.04v7nfx",
            "m.04v1999",
            "m.04v2wft",
            "m.04v7vjj",
            "m.04vjlvv",
            "m.04v2wjq",
            "m.04tsx_y",
            "m.04vb8xq",
            "m.04vc6yr",
            "m.04v8l60",
            "m.04t_jbw",
            "m.04vg4wz",
            "m.04v1w10",
            "m.04vgfz9",
            "m.04v8836",
            "m.04t_pzb",
            "m.04v3jj3",
            "m.04t_lcd",
            "m.04vf1vx",
            "m.04v9fyp",
            "m.04vzzbl",
            "m.04v25l9",
            "m.04t_8jz",
            "m.04t_7xl",
            "m.04vgy94",
            "m.04vkgcf",
            "m.04vkxpl",
            "m.04v3z9r",
            "m.04t_7y3",
            "m.04vhntk",
            "m.04v18m0",
            "m.04vf52v",
            "m.04v1wn7",
            "m.04v198s",
            "m.04t_z02",
            "m.04t_j7h",
            "m.04v1wdg",
            "m.04t_py8",
            "m.04v_16f",
            "m.04v276t",
            "m.04v5zb4",
            "m.04v7ncr",
            "m.04v1chk",
            "m.04vgzz8",
            "m.04vbv1q",
            "m.04v1w2s",
            "m.04v9g0r",
            "m.04v2s59",
            "m.04vblm_",
            "m.04vf34r",
            "m.04v7ww8",
            "m.04vbd38",
            "m.04v1bty",
            "m.04tzmms",
            "m.04v1wl7",
            "m.04vgjy0",
            "m.04v19d3",
            "m.04vghqs",
            "m.04v2sl2",
            "m.04vgzyl",
            "m.04vcw66",
            "m.04v2t7n",
            "m.04vkggc",
            "m.04vcw5t",
            "m.04vbrkj",
            "m.04vbc89",
            "m.04v25p6",
            "m.04vhgwf",
            "m.04v7ndv",
            "m.04v220s",
            "m.04vzz8x",
            "m.04tsy36",
            "m.04vc26b",
            "m.04vbd2r",
            "m.04v4_g9",
            "m.04v7q_y",
            "m.04vhnrc",
            "m.04v3_j7",
            "m.04v4wp5",
            "m.04vcw77",
            "m.04vbd4p",
            "m.04v0vsk",
            "m.04vgy71",
            "m.04vbln7",
            "m.04vfs_c",
            "m.04v7wkh",
            "m.04v2v8t",
            "m.04t_l93",
            "m.04v2rs_",
            "m.04v3w14",
            "m.04vbc6v",
            "m.04v7w9t",
            "m.04vkhzf",
            "m.04vfv0y",
            "m.04v9hkj",
            "m.04v1w18",
            "m.04vbd40",
            "m.04v7r1s",
            "m.04v147m",
            "m.04v25pp",
            "m.04v2wk6",
            "m.04v19j2",
            "m.04v1wm7",
            "m.04v3w0w",
            "m.04v7jr8",
            "m.04v2wh1",
            "m.04vhfqz",
            "m.04v1x1z",
            "m.04vkgfb",
            "m.04v3w6b",
            "m.04v1wl_",
            "m.04vght_",
            "m.04v3sy4",
            "m.04vkxm_",
            "m.04tzytn",
            "m.04v2wmf",
            "m.04t_nqm",
            "m.04v883g",
            "m.04vhfpr",
            "m.04vcwxw",
            "m.04v1wmh",
            "m.04tzmnk",
            "m.04v3yg2",
            "m.04v1wp6",
            "m.04v1wtp",
            "m.04vgkq2",
            "m.04v2w79",
            "m.04v5zbd",
            "m.04vjl1_",
            "m.04v3s4s",
            "m.04v1x1f",
            "m.04v3s3z",
            "m.04vfv0n",
            "m.04v17yc",
            "m.04v9b8j",
            "m.04v2759",
            "m.04vkj0c",
            "m.04v1402",
            "m.04v1cgd",
            "m.04v3jhd",
            "m.04vgjwq",
            "m.04v25nh",
            "m.04v25qq",
            "m.04v2rvk",
            "m.04t_m8d",
            "m.04vghtq",
            "m.04v881h",
            "m.04vjk_7",
            "m.04v2w81",
            "m.04v7wjk",
            "m.04v13zc",
            "m.04t_jcw",
            "m.04v184g",
            "m.04v25wm",
            "m.04w00yg",
            "m.04v1x1p",
            "m.04vc219",
            "m.04tsy5v",
            "m.04v1cc6",
            "m.04v1982",
            "m.04v2vll",
            "m.04v19cw",
            "m.04v_17f",
            "m.04t_nt9",
            "m.04v3yfc",
            "m.04vbwdt",
            "m.04vgjdp",
            "m.04v2sll",
            "m.04vbd3j",
            "m.04vc243",
            "m.04vf3wh",
            "m.04v1wmr",
            "m.04t_lbn",
            "m.04vght4",
            "m.04v1wm_",
            "m.04vc9k5",
            "m.04t_w9k",
            "m.04vf3v3",
            "m.04v1cbz",
            "m.04vhnpm",
            "m.04v19f3",
            "m.04v18lh",
            "m.04vgkrk",
            "m.04v17v_",
            "m.04tzyr4",
            "m.04vgy7k",
            "m.04w00tc",
            "m.04v222f",
            "m.04v25xw",
            "m.04vbrm9",
            "m.04vbwbt",
            "m.04vgxx3",
            "m.04v9f_6",
            "m.04v3s71",
            "m.04v277z",
            "m.04vgfv8",
            "m.04v21zw",
            "m.04v3yjb",
            "m.04vf1px",
            "m.04vf34h",
            "m.04v13zw",
            "m.04vgj90",
            "m.04vg4v_",
            "m.04vft23",
            "m.04tzys5",
            "m.04vg4_b",
            "m.04vbd48",
            "m.04t_z0l",
            "m.04vftq2",
            "m.04tzsfl",
            "m.04tsxrj",
            "m.04vbrf8",
            "m.04v9b73",
            "m.04v8k3x",
            "m.04v17tr",
            "m.04vbc69",
            "m.04vhnq3",
            "m.04tzqmn",
            "m.04vft07",
            "m.04v26lr",
            "m.04v2t6n",
            "m.04v17ry",
            "m.04vjl0s",
            "m.04vb90l",
            "m.04v256b",
            "m.04v3lb1",
            "m.04tsxy6",
            "m.04vghtf",
            "m.04vb8zx",
            "m.04vf1wj",
            "m.04v2709",
            "m.04vf1lc",
            "m.04v25qg",
            "m.04tzwpy",
            "m.04vbwc1",
            "m.04v_2s4",
            "m.04vfv03",
            "m.04vgjc8",
            "m.04t_7yx",
            "m.04t_l9c",
            "m.04vgksl",
            "m.04v1bs8",
            "m.04vgybf",
            "m.04v9b5b",
            "m.04v2vbc",
            "m.04tzqpf",
            "m.04v25tf",
            "m.04v25tp",
            "m.04v1bbc",
            "m.04v1b6g",
            "m.04v2rv9",
            "m.04t_y2p",
            "m.04vgj9s",
            "m.04vft0y",
            "m.04v0vst",
            "m.04v9fzp",
            "m.04v1wfr",
            "m.04vc88_",
            "m.04vgfx2",
            "m.04vf556",
            "m.04v19rl",
            "m.04v5qf8",
            "m.04v7wmy",
            "m.04v5qd1",
            "m.04vf3w7",
            "m.04tzysz",
            "m.04v251w",
            "m.04v1wjv",
            "m.04vhfph",
            "m.04vgxzl",
            "m.04vgfwk",
            "m.04t_lcp",
            "m.04tsxxb",
            "m.04vf1lm",
            "m.04vkxqb",
            "m.04vc4sd",
            "m.04v2s5r",
            "m.04v7r0v",
            "m.04vkj13",
            "m.04v883z",
            "m.04v2rq8",
            "m.04v2796",
            "m.04vbrl8",
            "m.04vbrpk",
            "m.04t_7wv",
            "m.04v19qx",
            "m.04v2rr8",
            "m.04v989_",
            "m.04t_w91",
            "m.04v24zy",
            "m.04v1w30",
            "m.04w02yp",
            "m.04t_j8l",
            "m.04vcwxl",
            "m.04v2762",
            "m.04v147c",
            "m.04vc6zj",
            "m.04t_wc2",
            "m.04vhgy3",
            "m.04vft8l",
            "m.04v3jhn",
            "m.04tzps5",
            "m.04tzsdv",
            "m.04v275t",
            "m.04vgbvn",
            "m.04vc89p",
            "m.04v2smk",
            "m.04v197v",
            "m.04v3z7_",
            "m.04v2s3t",
            "m.04v7wcc",
            "m.04vhnrw",
            "m.04vkg9q",
            "m.04vcw3r",
            "m.04vft79",
            "m.04vkh_5",
            "m.04v1w7j",
            "m.04vg500",
            "m.04vkjfy",
            "m.04t_lb3",
            "m.04v19pf",
            "m.04vgjys",
            "m.04v1cc_",
            "m.04v1wj3",
            "m.04w02vv",
            "m.04v98br",
            "m.04v25py",
            "m.04vgy80",
            "m.04vbk3m",
            "m.04vc700",
            "m.04tznw4",
            "m.04vkxt5",
            "m.04v2tfj",
            "m.04v7vj8",
            "m.04v1x26",
            "m.04v7wbw",
            "m.04vhfnz",
            "m.04vbrfj",
            "m.04vbrfs",
            "m.04v21zc",
            "m.04t_7yc",
            "m.04v1800",
            "m.04vbrgz",
            "m.04v7h0y",
            "m.04t_7zc",
            "m.04tzwnr",
            "m.04vf1p9",
            "m.04vft7k",
            "m.04vkxpw",
            "m.04vjl0h",
            "m.04t_py0",
            "m.04vghsb",
            "m.04t_y52",
            "m.04vzz8m",
            "m.04vbt_0",
            "m.04tznqy",
            "m.04v3l9t",
            "m.04t_y18",
            "m.04vc6_h",
            "m.04tzmn0",
            "m.04v3jpl",
            "m.04vg4yp",
            "m.04v1w38",
            "m.04t_jbm",
            "m.04vb8zc",
            "m.04tsy4j",
            "m.04v221x",
            "m.04v25rd",
            "m.04v251c",
            "m.04v21zm",
            "m.04v2snv",
            "m.04vgfxy",
            "m.04v7nd9",
            "m.028xy2v",
            "m.04t_nr3",
            "m.04v7jr0",
            "m.04v3jjc",
            "m.04vbk1s",
            "m.04v9fy0",
            "m.04v1w9z",
            "m.04vhfqq",
            "m.04tsy68",
            "m.04vfv0d",
            "m.04vgjcj",
            "m.04v2s51",
            "m.04vhfn6",
            "m.04vfv1x",
            "m.04vkxsy",
            "m.04v4ws8",
            "m.04v3zc6",
            "m.04v8k3n",
            "m.04vf1nq",
            "m.04v25xc",
            "m.04t_l9v",
            "m.04vftnp",
            "m.04v3jjm",
            "m.04v1wvc",
            "m.04vhnqm",
            "m.04vfv2l",
            "m.04t_nrw",
            "m.04v2wjz",
            "m.04v25vm",
            "m.04v148c",
            "m.04vgjx6",
            "m.04vbc5w",
            "m.04vf1s4",
            "m.04t_jd3",
            "m.04v7h27",
            "m.04vfv2v",
            "m.04tsxzm",
            "m.04vghs2",
            "m.04v1wjk",
            "m.04vgfvt",
            "m.04vc4p2",
            "m.04vgy8x",
            "m.04tz_sm",
            "m.04tznvc",
            "m.04vkj0w",
            "m.04v13_4",
            "m.04vc8bx",
            "m.04tsxt8",
            "m.04vkhyq",
            "m.04v1w20",
            "m.04t_w88",
            "m.04vft81",
            "m.04t_7zm",
            "m.04tsy6q",
            "m.04vghsm",
            "m.04tz_sc",
            "m.04v2rqr",
            "m.04v9hmn",
            "m.04w02xr",
            "m.04v007n",
            "m.04w00w7",
            "m.04t_jb2",
            "m.04vzz63",
            "m.04v2rrj",
            "m.04v21_c",
            "m.04tzwm6",
            "m.04v1wlj",
            "m.04v8k4d",
            "m.04tsy0c",
            "m.04vbrwn",
            "m.04v7vfh",
            "m.04t_7yn",
            "m.04vgjvy",
            "m.04v2t4f",
            "m.04v26_2",
            "m.04tzpsf",
            "m.04v7jrz",
            "m.04v3jp9",
            "m.04tzqlm",
            "m.04t_nq2",
            "m.04v2504",
            "m.04t_z1b",
            "m.04vc26r",
            "m.04vfvmy",
            "m.04v1wcz",
            "m.04tz_rm",
            "m.04vhnqc",
            "m.04v19k6",
            "m.04tzwn_",
            "m.04v198b",
            "m.04v3_h_",
            "m.04vftb1",
            "m.04v26nn",
            "m.04vb90w",
            "m.04vkh_l",
            "m.04v25s7",
            "m.04tsx_1",
            "m.04vghwn",
            "m.04vhnt1",
            "m.04tzsdb",
            "m.04v881_",
            "m.04v17yt",
            "m.04v2sn2",
            "m.04tsy2s",
            "m.04vghvj",
            "m.04v26kk",
            "m.04vbrdr",
            "m.04v2tf_",
            "m.04v3jkw",
            "m.04vbrnt",
            "m.04tzmpj",
            "m.04vgfz0",
            "m.04v7r1j",
            "m.04v2rs7",
            "m.04v2v6m",
            "m.04vkz1j",
            "m.04vb8_c",
            "m.04tsxz5",
            "m.04vjl10",
            "m.04vky_y",
            "m.04v2s3b",
            "m.04vc29c",
            "m.04v3l8z",
            "m.04vf1rp",
            "m.04v_2vq",
            "m.04v8l99",
            "m.04v_2vg",
            "m.04v17xb",
            "m.04tsxr2",
            "m.04v17xv",
            "m.028yc88",
            "m.04vf1qw",
            "m.04v19vm",
            "m.04v0084",
            "m.04vbk20",
            "m.04v9fwm",
            "m.04v2s49",
            "m.04v2wj0",
            "m.04v2tk8",
            "m.04t_nqw",
            "m.04tznqp",
            "m.04v2smv",
            "m.04v1w5b",
            "m.04v2rts",
            "m.04v7vgr",
            "m.04vkz0_",
            "m.04v7n9j",
            "m.04tzqnx",
            "m.04vf1hz",
            "m.04vf1t5",
            "m.04t_npv",
            "m.04vkh_v",
            "m.04tzqmx",
            "m.04v2216",
            "m.04v9fz5",
            "m.04v25n6",
            "m.04v17sq",
            "m.04vft16",
            "m.04v19s8",
            "m.04v7w8t",
            "m.04v270k",
            "m.04t_7xw",
            "m.04v26qr",
            "m.04t_pys",
            "m.04vkxpb",
            "m.04vc4rx",
            "m.04v8846",
            "m.028yq8_",
            "m.04tzwl7",
            "m.04v2t6d",
            "m.04vgkrt",
            "m.04vcwyc",
            "m.04tzyhn",
            "m.04tzwlz",
            "m.04vhgxd",
            "m.04v4wq4",
            "m.04v1bb3",
            "m.04v2t4q",
            "m.04vbrj2",
            "m.04v0vs9",
            "m.04v3_gh",
            "m.04v9f_y",
            "m.04vft7t",
            "m.04v3sww",
            "m.04vgybp",
            "m.04vf1nf",
            "m.04vgyb5",
            "m.04vc9kf",
            "m.04v7q_4",
            "m.04vgjdf",
            "m.04tzyk4",
            "m.04v18nr",
            "m.04vc4rn",
            "m.04v883q",
            "m.04v882j",
            "m.04v9hmd",
            "m.04vc8cn",
            "m.04vgxxw",
            "m.04t_lc4",
            "m.04v988z",
            "m.04v8l8j",
            "m.04vbrp1",
            "m.04v1cch",
            "m.04vgbwv",
            "m.04tznvx",
            "m.04vjk_h",
            "m.04vg4xz",
            "m.04t_pxr",
            "m.04v1whf",
            "m.04vhpbz",
            "m.04t_m0w",
            "m.04v2s6v",
            "m.04vkj0m",
            "m.04v98bh",
            "m.04v17th",
            "m.04vb8y5",
            "m.028xw99",
            "m.028ym09",
            "m.04v3jly",
            "m.04v3yh4",
            "m.04vbk5h",
            "m.04t_m0b",
            "m.04v_15_",
            "m.04v7wcw",
            "m.04v2v9v",
            "m.04vgy9f",
            "m.04vftsv",
            "m.04v7h1g",
            "m.04vkxp1",
            "m.04vbrm1",
            "m.04v2t45",
            "m.04t_y1y",
            "m.04v1wqg",
            "m.04t_jcm",
            "m.04v3l9d",
            "m.04v8k62",
            "m.04vkgbq",
            "m.04v2s41",
            "m.04tzqmc",
            "m.04v1473",
            "m.04v41x5",
            "m.04v7wvs",
            "m.04v2v74",
            "m.04v3w5w",
            "m.04tzwn6",
            "m.04t_wbl",
            "m.04tzwp7",
            "m.04v9fxs",
            "m.04vhfqg",
            "m.04v3yf3",
            "m.04v9ftz",
            "m.04tzyrn",
            "m.04tzmlr",
            "m.04v3jq3",
            "m.04tz_wr",
            "m.04v2513",
            "m.04v1bvb",
            "m.04vg4zp",
            "m.04vf3sz",
            "m.04vbv1g",
            "m.04t_m2w",
            "m.04v2ryx",
            "m.04v3ygn",
            "m.04vftbn",
            "m.04tzmnv",
            "m.04vf1xh",
            "m.04tzwng",
            "m.04vky_9",
            "m.04v1bw0",
            "m.04v27cw",
            "m.04vgj9j",
            "m.04vftrm",
            "m.04v25yn",
            "m.04tsxw0",
            "m.04v7w9k",
            "m.04v7jpn",
            "m.04v7wb1",
            "m.04vhfsz",
            "m.04v17x1",
            "m.04v7g_z",
            "m.04v882s",
            "m.04vftcd",
            "m.04vcw6_",
            "m.04vb90b",
            "m.04vf1w8",
            "m.04tzmmj",
            "m.04v7ngp",
            "m.04vblnh",
            "m.04v4wrb",
            "m.04w00xq",
            "m.04w00xg",
            "m.04v7w7x",
            "m.04vhgyx",
            "m.04v7w99",
            "m.04vjl18",
            "m.04v3w34",
            "m.04vblpg",
            "m.04v3l89",
            "m.04tzqnn",
            "m.04v2wb4",
            "m.04v8k5n",
            "m.04v250m",
            "m.04vghsx",
            "m.04vc4qh",
            "m.04tzsd2",
            "m.04vky_1",
            "m.04v1968",
            "m.04vf34_",
            "m.04tsxwx",
            "m.04v3z8_",
            "m.04tsy42",
            "m.04vgy9y",
            "m.04v180z",
            "m.04vhnr3",
            "m.04v24_5",
            "m.04v2vkn",
            "m.04v3zbq",
            "m.04v3_fr",
            "m.04v11m_",
            "m.04t_lbx",
            "m.04v11qf",
            "m.04v9fzf",
            "m.04v13zm",
            "m.04vkj23",
            "m.04w00xz",
            "m.04vf1qc",
            "m.04v0vvh",
            "m.04w02xh",
            "m.04v_2wg",
            "m.04v7ng4",
            "m.04v1bw8",
            "m.04tznt2",
            "m.04tz_qt",
            "m.04v2wj9",
            "m.04t_l_j",
            "m.04v24zg",
            "m.04v9b4c",
            "m.04v2tgs",
            "m.04vf3sh",
            "m.04tzpsq",
            "m.04v7nbs",
            "m.04vfv32",
            "m.04v7vf0",
            "m.04v3jnn",
            "m.04v7wmp",
            "m.04v88_2",
            "m.04v1w45",
            "m.04v7nc8",
            "m.04v25yd",
            "m.04v272n",
            "m.04v24_x",
            "m.04v27b4",
            "m.04v1w69",
            "m.04t_l8w",
            "m.04vkxnj",
            "m.04v_16p",
            "m.04v3z97",
            "m.04v7ww0",
            "m.04vbv07",
            "m.04tsy5d",
            "m.04vkhzp",
            "m.04vf28h",
            "m.04v_18_",
            "m.04t_jbc",
            "m.04vf52b",
            "m.04v9hn_",
            "m.04vgjxh",
            "m.04v22wd",
            "m.04tzysg",
            "m.04v3zb4",
            "m.04v2rv0",
            "m.04v1975",
            "m.04v25s_",
            "m.04v25mz",
            "m.04vgktm",
            "m.04v1x2r",
            "m.04v3jm5",
            "m.04vhgx4",
            "m.04v1ccr",
            "m.04tzwq5",
            "m.04v3yj2",
            "m.04vkxrb",
            "m.04vzzb0",
            "m.04vbd4z",
            "m.04v25xm",
            "m.04v279m",
            "m.04vg4_2",
            "m.04v1cjg",
            "m.04vgxzb",
            "m.04v11lk",
            "m.04tzwqf",
            "m.04t_z0b",
            "m.04vkxns",
            "m.04v2s64",
            "m.04vhgz5",
            "m.04v9fvx",
            "m.04vcw59",
            "m.04v7vk6",
            "m.04v2tgh",
            "m.04vzz82",
            "m.04tsy4z",
            "m.04t_y2f",
            "m.04w02x0",
            "m.04vgfvj",
            "m.04v7nf3",
            "m.04vghv7",
            "m.04vc21k",
            "m.04t_lbc",
            "m.04v7h0f",
            "m.04vc6z_",
            "m.04tzyv1",
            "m.04tzyq5",
            "m.04vkj2n",
            "m.04vbls4",
            "m.04v3l81",
            "m.04vkz0r",
            "m.04vf346",
            "m.04vbc6l",
            "m.04v199k",
            "m.04v1w7s",
            "m.04t_m2c",
            "m.04vjl07",
            "m.04vc24c",
            "m.04v2v5p",
            "m.04v25x3",
            "m.04v_174",
            "m.04v7wc3",
            "m.04v2t6x",
            "m.04v275k",
            "m.04v_14g",
            "m.04vf54g",
            "m.04vc71n",
            "m.04v19gx",
            "m.04v148n",
            "m.04v25sr",
            "m.04vbwd1",
            "m.04vkggw",
            "m.04v7wb9",
            "m.04vc231",
            "m.04v182z",
            "m.04vgjcs",
            "m.04tsy74",
            "m.04v4wnn",
            "m.04vgfxn",
            "m.04v1w3j",
            "m.04t_7x2",
            "m.04tznv3",
            "m.04v3z8h",
            "m.04vghr0",
            "m.04vc71x",
            "m.04v3w6l",
            "m.04vgfyg",
            "m.04vc719",
            "m.04v17t7",
            "m.04vkxqt",
            "m.04v7r0l",
            "m.04t_7wl",
            "m.04vc4vf",
            "m.04v2thj",
            "m.04v8l9k",
            "m.04v8k34",
            "m.04t_8kv",
            "m.04vfvqw",
            "m.04vgfxc",
            "m.04v8k2p",
            "m.04vc6z7",
            "m.04tznwy",
            "m.04vbv24",
            "m.04v21_t",
            "m.04v9b6b",
            "m.04vbv10",
            "m.04v277k",
            "m.04v2vby",
            "m.04vbrck",
            "m.04vkz1s",
            "m.04v2tf1",
            "m.04tznwp",
            "m.04vg4z5",
            "m.04vf532",
            "m.04vc24m",
            "m.04tz_0x",
            "m.04v2rr0",
            "m.04v7h16",
            "m.04v17vh",
            "m.04vkxsp",
            "m.04v2v92",
            "m.04v220j",
            "m.04vgbw9",
            "m.04t_wb0",
            "m.04tzmk1",
            "m.04v221n",
            "m.04v5z93",
            "m.04vc9jx",
            "m.04vcw8x",
            "m.04t_pw7",
            "m.04vkjlz",
            "m.04v4wn4",
            "m.04vkgh4",
            "m.04t_8jf",
            "m.04v9hm4",
            "m.04vf1x1",
            "m.04v2s4k",
            "m.04vgfw9",
            "m.04w02ws",
            "m.04tzpsz",
            "m.04vc22l",
            "m.04vfvn5",
            "m.04v9hl5",
            "m.04v5z8w",
            "m.04v98b7",
            "m.04vg4zf",
            "m.04tz_tk",
            "m.04vft1w",
            "m.04v0vwx",
            "m.04v007d",
            "m.04v41xq",
            "m.04tz_rw",
            "m.04vf3vt",
            "m.04v01wm",
            "m.04t_m9p",
            "m.04v7r29",
            "m.04vg_33",
            "m.04vgfw1",
            "m.04vkgdm",
            "m.04v0vs1",
            "m.04tsxxs",
            "m.04tz_0n",
            "m.04vc28p",
            "m.04t_jcc",
            "m.04vblpq",
            "m.04t_wbv",
            "m.04vgy9p",
            "m.04v2wkq",
            "m.04vbd5d",
            "m.04vgbxb",
            "m.04v3zbz",
            "m.04tzwk8",
            "m.04v881r",
            "m.04t_nrc",
            "m.04v7wn6",
            "m.04v2rxc",
            "m.04v25rt",
            "m.04vc87_",
            "m.04v3w7x",
            "m.04v3l7t",
            "m.04vb91y",
            "m.04v11n_",
            "m.04tsy1x",
            "m.04v1w87",
            "m.04w00wy",
            "m.04vbc73",
            "m.04tzyqx",
            "m.04v_189",
            "m.04t_7_1",
            "m.04v2s6d",
            "m.04v2sm1",
            "m.04v26p_",
            "m.04v2spl",
            "m.04v25w3",
            "m.04v27cc",
            "m.04v1x2g",
            "m.04vhfnq",
            "m.04v3yhd",
            "m.04vhgwq",
            "m.04v2v6c",
            "m.04v2rt8",
            "m.04vf3tw",
            "m.04vft_w",
            "m.04t_nrm",
            "m.04v250w",
            "m.04t_jdt",
            "m.04vftcy",
            "m.04vg_21",
            "m.04vkz18",
            "m.04vkgfw",
            "m.04v1cfm",
            "m.04vcw4s",
            "m.04vghrk",
            "m.04t_npl",
            "m.04v7gzz",
            "m.04v1cdh",
            "m.04v2vb2",
            "m.04vfs_y",
            "m.04v1w1j",
            "m.04vzz5n",
            "m.04tzyt6",
            "m.04w00x6",
            "m.04v7r18",
            "m.04vft2t",
            "m.04vg_2m",
            "m.04vbc4q",
            "m.04v1483",
            "m.04vghvt",
            "m.04v3jld",
            "m.04v_2tx",
            "m.04vfs_n",
            "m.04tsx_h",
            "m.04vfv1n",
            "m.04v8lbk",
            "m.04vzz71",
            "m.04v3w3y",
            "m.04vbk28",
            "m.04v270t",
            "m.04v19g3",
            "m.04t_m2m",
            "m.04t_m8x",
            "m.04v21_3",
            "m.04v2sp2",
            "m.04vzzb9",
            "m.04v1wcg",
            "m.04vft91",
            "m.04v181h",
            "m.04v2x7l",
            "m.04tsy80",
            "m.04tzql3",
            "m.04v3s47",
            "m.04vfs_3",
            "m.04vfvnf",
            "m.04v7wbl",
            "m.04v7jqj",
            "m.04tzsf2",
            "m.04vgx_c",
            "m.04vgj86",
            "m.04v3v_p",
            "m.04tzml0",
            "m.04vzzcf",
            "m.04vb8zm",
            "m.04tzntl",
            "m.04t_8n2",
            "m.04tznsk",
            "m.04w02wj",
            "m.04v1w8s",
            "m.028y5cy",
            "m.04vgj98",
            "m.04v5z9c",
            "m.04v26pq",
            "m.04tzwlq",
            "m.04v25vc",
            "m.04v8l88",
            "m.04v1wcq",
            "m.04w02y4",
            "m.04v2225",
            "m.04tsxvl",
            "m.04vg4_s",
            "m.04v146c",
            "m.04v27cm",
            "m.04v251m",
            "m.04t_wb9",
            "m.04tzmm8",
            "m.04vftcp",
            "m.04t_z0v",
            "m.04vbrlj",
            "m.04vbrg6",
            "m.04v1w8j",
            "m.04vgfy6",
            "m.04vzz9s",
            "m.04v3s68",
            "m.04vzz7v",
            "m.04v7h1q",
            "m.04v3ygx",
            "m.04v13_l",
            "m.04t_wcc",
            "m.04t_m94",
            "m.04v25vw",
            "m.04v2rtj",
            "m.04v3w45",
            "m.04vc6yh",
            "m.04v2s4t",
            "m.04vf3tf",
            "m.04v2tjj",
            "m.04v2s78",
            "m.04v2snb",
            "m.04v2vlv",
            "m.04vftdc",
            "m.04vkgg3",
            "m.04t_j9v",
            "m.04v1cd7",
            "m.04vbt_s",
            "m.04vbk51",
            "m.04t_pyj",
            "m.04vbk40",
            "m.04t_m8n",
            "m.04v2t8d",
            "m.04v3_k0",
            "m.04vgjwf",
            "m.04v2tbp",
            "m.04vf3rq",
            "m.04t_w99",
            "m.04tzqlc",
            "m.04vb913",
            "m.04tzpv2",
            "m.04v25yx",
            "m.04v7gzg",
            "m.04v7vhk",
            "m.04vhns3",
            "m.04v25ww",
            "m.04v3w5c",
            "m.04v2rsj",
            "m.04v9b5l",
            "m.04vgy8h",
            "m.04tz_1f",
            "m.04t_w8j",
            "m.04v2t64",
            "m.04vgx_x",
            "m.04vc89f",
            "m.04v19gn",
            "m.04v_17w",
            "m.04vg_29",
            "m.04v_2v5",
            "m.04vcw37",
            "m.04v181r",
            "m.04t_7xb",
            "m.04v1w3s",
            "m.04vf359",
            "m.04v7vjs",
            "m.04vkxs0",
            "m.04v9fvf",
            "m.04v3jgy",
            "m.04tz_s3",
            "m.04vc4ps",
            "m.04v7vg6",
            "m.04vgxxm",
            "m.04vgxy3",
            "m.04tzmn8",
            "m.04v7jqs",
            "m.04v1ww2",
            "m.04vc20s",
            "m.04vc23w",
            "m.04tsxv4",
            "m.04v1w1s",
            "m.04vjkzd",
            "m.04v144x",
            "m.04tsy0t",
            "m.04vbd5n",
            "m.04v7nb7",
            "m.04v2vmd",
            "m.04v2vkd",
            "m.04v_150",
            "m.04vc4sp",
            "m.04t_z12",
            "m.04tzqm3",
            "m.04vkxsf",
            "m.04v3_g_",
            "m.04vjl1k",
            "m.04vgjd5",
            "m.04v2tjs",
            "m.04tzyjn",
            "m.04vgyf0",
            "m.04w00tm",
            "m.04v1wdq",
            "m.04v0095",
            "m.04vf1h5",
            "m.04v989j",
            "m.04vg4y6",
            "m.04v1bs_",
            "m.04v7n91",
            "m.04vc6_s",
            "m.04vghqh",
            "m.04vf35k",
            "m.04v22w4",
            "m.04w02yf",
            "m.04v008y",
            "m.04v9fx2",
            "m.04v2rr_",
            "m.04vgks9",
            "m.04vky_k",
            "m.04v3w8l",
            "m.04v3jlp",
            "m.04vghr9",
            "m.04v7wcm",
            "m.04v00bc",
            "m.04v7vh8",
            "m.04v5qdt",
            "m.04vbd64",
            "m.04v2x7b",
            "m.04tsy3n",
            "m.04vbwd9",
            "m.04v3zbf",
            "m.04vbk2j",
            "m.04vbk3c",
            "m.04v2wlp",
            "m.04v8lb9",
            "m.04v1717",
            "m.04vgbwl",
            "m.028xyps",
            "m.04v2snl",
            "m.04vc8bc",
            "m.04v8k4t",
            "m.04v3w6v",
            "m.04v8l80",
            "m.04v19gd",
            "m.04tzyry",
            "m.04vf28v",
            "m.04vft9b",
            "m.04tsxwg",
            "m.04v2vvt",
            "m.04v25m7",
            "m.04vc4tf",
            "m.04vcwy3",
            "m.04v1bt7",
            "m.04v25zb",
            "m.04t_7_v",
            "m.04vgjxs",
            "m.04v25y4",
            "m.04vgks1",
            "m.04tzwqp",
            "m.04v2v88",
            "m.04vhfng",
            "m.04vgxw0",
            "m.04v4wnd",
            "m.04v1w71",
            "m.04v2th0",
            "m.04v8k3d",
            "m.04vc274",
            "m.04vgx_n",
            "m.04v17t_",
            "m.04v140l",
            "m.04vgxzv",
            "m.04vbv0s",
            "m.04v7gzq",
            "m.04tzyj2",
            "m.04v25v3",
            "m.04t_m9f",
            "m.04vfvm6",
            "m.04t_j9l",
            "m.04v2vk4",
            "m.04v7vhv",
            "m.04v1839",
            "m.04v9887",
            "m.04v7g_6",
            "m.04vc6xz",
            "m.04v4_h9",
            "m.04vg_17",
            "m.04v19ll",
            "m.04w02w2",
            "m.04v1wd6",
            "m.04v3ycw",
            "m.04v7wjt",
            "m.04v19nr",
            "m.04v2sm9",
            "m.04tzscv",
            "m.04v3svs",
            "m.04v183k",
            "m.04v2tk0",
            "m.04v25wc",
            "m.04v9b3d",
            "m.04v1817",
            "m.04v3l8q",
            "m.04vgx_3",
            "m.04t_jc3",
            "m.04vcw6q",
            "m.04tsy8g",
            "m.04t_y1p",
            "m.04v27bn",
            "m.04vjl2q",
            "m.04v5z7n",
            "m.04v9898",
            "m.04v3w72",
            "m.04vb8yx",
            "m.04v006z",
            "m.04t_nqb",
            "m.04v3y_p",
            "m.04v3w7m",
            "m.04vkz06",
            "m.04vb8x7",
            "m.04v25q5",
            "m.04v26n2",
            "m.04tzysq",
            "m.04v2wsw",
            "m.04v1w52",
            "m.04v2ths",
            "m.04v1cdy",
            "m.04v1w2h",
            "m.04vbv0j",
            "m.04v19dm",
            "m.04vgfwv",
            "m.04v2v9l",
            "m.04v9fzy",
            "m.04v2slb",
            "m.04v9hk8",
            "m.04v2v9b",
            "m.04v2tdl",
            "m.04vbrnk",
            "m.04v8l9t",
            "m.04v1wk_",
            "m.04v1cg4",
            "m.04v180q",
            "m.04tzmm0",
            "m.04vb8w_",
            "m.04vbd0s"
        ],
        "different_answer": [
            [
                "m.04v2skk",
                "m.04v2spb",
                "m.04v8k44",
                "m.04v3jkd",
                "m.04vzzbw",
                "m.04v252w",
                "m.04vghp7",
                "m.04vft0p",
                "m.04v2th8",
                "m.04v2tg7",
                "m.04tzwmr",
                "m.04v2wkz",
                "m.04v8828",
                "m.04v7wdn",
                "m.04v3sxf",
                "m.04v_2vz",
                "m.04t_wdp",
                "m.04vgfyr",
                "m.04vbt_8",
                "m.04vf52l",
                "m.04vfv3b",
                "m.04v11p7",
                "m.04v9hmx",
                "m.04vgxyc",
                "m.04v140b",
                "m.04vft64",
                "m.04vb8_x",
                "m.04tsxyp",
                "m.04t_y10",
                "m.04v3yk1",
                "m.04v8k57",
                "m.04vg_0z",
                "m.04v3w4x",
                "m.04t_y2y",
                "m.04v1bth",
                "m.04v2wly",
                "m.04vkhzy",
                "m.04vhpch",
                "m.04vc4sy",
                "m.04v18mr",
                "m.04vzz7j",
                "m.04vfv1d",
                "m.04t_jdc",
                "m.04vhfmz",
                "m.04w00vd",
                "m.04v8l7h",
                "m.04v172g",
                "m.04vjlvl",
                "m.04vf53b",
                "m.04vkg9z",
                "m.04vkxr1",
                "m.04v7ngf",
                "m.04v17sg",
                "m.04vc229",
                "m.04v1wkr",
                "m.04v7vh0",
                "m.04vgftt",
                "m.04v3w7c",
                "m.04v2t84",
                "m.04v7w8j",
                "m.04tzwks",
                "m.04v25mh",
                "m.04vc23l",
                "m.04vhfmg",
                "m.04vbrgg",
                "m.04w00wp",
                "m.04v3w4f",
                "m.04v2v7n",
                "m.04v7h0p",
                "m.04v7jpd",
                "m.04vc220",
                "m.04vc6y_",
                "m.04v8817",
                "m.04vhfs6",
                "m.04v3z8r",
                "m.04tzyqn",
                "m.04tsy2b",
                "m.04v25sh",
                "m.04v197f",
                "m.04vf27z",
                "m.04tsxtq",
                "m.04t_m13",
                "m.04vbrn3",
                "m.04v14yb",
                "m.04vgkq_",
                "m.04v3w1f",
                "m.04v171_",
                "m.04v3jk4",
                "m.04vf3qy",
                "m.04vc709",
                "m.04vg_2w",
                "m.04t_7vw",
                "m.04v19hl",
                "m.04v195h",
                "m.04vf3r5",
                "m.04v25qz",
                "m.04v17w7",
                "m.04vbd20",
                "m.04v3w5m",
                "m.04v9hlm",
                "m.04vf26z",
                "m.04tsy7l",
                "m.04v8k6l",
                "m.04tzntb",
                "m.04vkxrr",
                "m.04vbv2l",
                "m.04tsxsv",
                "m.04vbk5r",
                "m.04v2v6x",
                "m.04vkgc5",
                "m.04w00vp",
                "m.04v2skt",
                "m.04vf3s7",
                "m.04vgy79",
                "m.04v279w",
                "m.04vcw6g",
                "m.04v7h1_",
                "m.04v13_v",
                "m.04vhnt9",
                "m.04vbt_j",
                "m.04v25ns",
                "m.04v224w",
                "m.04v19dc",
                "m.04v987r",
                "m.04vbd3s",
                "m.04v41xg",
                "m.04vb8_n",
                "m.04tsxrz",
                "m.04v196y",
                "m.04v88_r",
                "m.04vzz6l",
                "m.04tzqlw",
                "m.04v182f",
                "m.04vkxtq",
                "m.04v2201",
                "m.04vfszw",
                "m.04v986y",
                "m.04v1x35",
                "m.04v19h4",
                "m.04vcw4j",
                "m.04v3z9h",
                "m.04vghrv",
                "m.04tzyh6",
                "m.04v1wf6",
                "m.04tsxsd",
                "m.04v196j",
                "m.04vf3vk",
                "m.04vg4w8",
                "m.04tsy17",
                "m.04v2t7x",
                "m.04v7wnq",
                "m.04vcw5k",
                "m.04vg_0f",
                "m.04tzsdl",
                "m.04vkj03",
                "m.04vc6_7",
                "m.04v2701",
                "m.04tz_15",
                "m.04v008p",
                "m.04v26_b",
                "m.04v9hky",
                "m.04vkgcp",
                "m.04t_m1c",
                "m.04v14bc",
                "m.04vc24w",
                "m.04vgxxc",
                "m.04v987_",
                "m.04v7w91",
                "m.04v9b62",
                "m.04vfv29",
                "m.04vf27g",
                "m.04vzz96",
                "m.04vc210",
                "m.04vkgcy",
                "m.04t_m7z",
                "m.04v2wkg",
                "m.04vbk0s",
                "m.04vc8b3",
                "m.04v7ndl",
                "m.04v19jb",
                "m.04t_m3n",
                "m.04v9b4w",
                "m.04v7nfm",
                "m.04v_2tc",
                "m.04v1cfw",
                "m.04vhnv9",
                "m.04vgjbk",
                "m.04w00v_",
                "m.04vf33q",
                "m.04tzyjc",
                "m.04vft8b",
                "m.04v4wpq",
                "m.04tzyvw",
                "m.04v3jpw",
                "m.04v3_hr",
                "m.04v4wqf",
                "m.04v7nfx",
                "m.04v1999",
                "m.04v2wft",
                "m.04v7vjj",
                "m.04vjlvv",
                "m.04v2wjq",
                "m.04tsx_y",
                "m.04vb8xq",
                "m.04vc6yr",
                "m.04v8l60",
                "m.04t_jbw",
                "m.04vg4wz",
                "m.04v1w10",
                "m.04vgfz9",
                "m.04v8836",
                "m.04t_pzb",
                "m.04v3jj3",
                "m.04t_lcd",
                "m.04vf1vx",
                "m.04v9fyp",
                "m.04vzzbl",
                "m.04v25l9",
                "m.04t_8jz",
                "m.04t_7xl",
                "m.04vgy94",
                "m.04vkgcf",
                "m.04vkxpl",
                "m.04v3z9r",
                "m.04t_7y3",
                "m.04vhntk",
                "m.04v18m0",
                "m.04vf52v",
                "m.04v1wn7",
                "m.04v198s",
                "m.04t_z02",
                "m.04t_j7h",
                "m.04v1wdg",
                "m.04t_py8",
                "m.04v_16f",
                "m.04v276t",
                "m.04v5zb4",
                "m.04v7ncr",
                "m.04v1chk",
                "m.04vgzz8",
                "m.04vbv1q",
                "m.04v1w2s",
                "m.04v9g0r",
                "m.04v2s59",
                "m.04vblm_",
                "m.04vf34r",
                "m.04v7ww8",
                "m.04vbd38",
                "m.04v1bty",
                "m.04tzmms",
                "m.04v1wl7",
                "m.04vgjy0",
                "m.04v19d3",
                "m.04vghqs",
                "m.04v2sl2",
                "m.04vgzyl",
                "m.04vcw66",
                "m.04v2t7n",
                "m.04vkggc",
                "m.04vcw5t",
                "m.04vbrkj",
                "m.04vbc89",
                "m.04v25p6",
                "m.04vhgwf",
                "m.04v7ndv",
                "m.04v220s",
                "m.04vzz8x",
                "m.04tsy36",
                "m.04vc26b",
                "m.04vbd2r",
                "m.04v4_g9",
                "m.04v7q_y",
                "m.04vhnrc",
                "m.04v3_j7",
                "m.04v4wp5",
                "m.04vcw77",
                "m.04vbd4p",
                "m.04v0vsk",
                "m.04vgy71",
                "m.04vbln7",
                "m.04vfs_c",
                "m.04v7wkh",
                "m.04v2v8t",
                "m.04t_l93",
                "m.04v2rs_",
                "m.04v3w14",
                "m.04vbc6v",
                "m.04v7w9t",
                "m.04vkhzf",
                "m.04vfv0y",
                "m.04v9hkj",
                "m.04v1w18",
                "m.04vbd40",
                "m.04v7r1s",
                "m.04v147m",
                "m.04v25pp",
                "m.04v2wk6",
                "m.04v19j2",
                "m.04v1wm7",
                "m.04v3w0w",
                "m.04v7jr8",
                "m.04v2wh1",
                "m.04vhfqz",
                "m.04v1x1z",
                "m.04vkgfb",
                "m.04v3w6b",
                "m.04v1wl_",
                "m.04vght_",
                "m.04v3sy4",
                "m.04vkxm_",
                "m.04tzytn",
                "m.04v2wmf",
                "m.04t_nqm",
                "m.04v883g",
                "m.04vhfpr",
                "m.04vcwxw",
                "m.04v1wmh",
                "m.04tzmnk",
                "m.04v3yg2",
                "m.04v1wp6",
                "m.04v1wtp",
                "m.04vgkq2",
                "m.04v2w79",
                "m.04v5zbd",
                "m.04vjl1_",
                "m.04v3s4s",
                "m.04v1x1f",
                "m.04v3s3z",
                "m.04vfv0n",
                "m.04v17yc",
                "m.04v9b8j",
                "m.04v2759",
                "m.04vkj0c",
                "m.04v1402",
                "m.04v1cgd",
                "m.04v3jhd",
                "m.04vgjwq",
                "m.04v25nh",
                "m.04v25qq",
                "m.04v2rvk",
                "m.04t_m8d",
                "m.04vghtq",
                "m.04v881h",
                "m.04vjk_7",
                "m.04v2w81",
                "m.04v7wjk",
                "m.04v13zc",
                "m.04t_jcw",
                "m.04v184g",
                "m.04v25wm",
                "m.04w00yg",
                "m.04v1x1p",
                "m.04vc219",
                "m.04tsy5v",
                "m.04v1cc6",
                "m.04v1982",
                "m.04v2vll",
                "m.04v19cw",
                "m.04v_17f",
                "m.04t_nt9",
                "m.04v3yfc",
                "m.04vbwdt",
                "m.04vgjdp",
                "m.04v2sll",
                "m.04vbd3j",
                "m.04vc243",
                "m.04vf3wh",
                "m.04v1wmr",
                "m.04t_lbn",
                "m.04vght4",
                "m.04v1wm_",
                "m.04vc9k5",
                "m.04t_w9k",
                "m.04vf3v3",
                "m.04v1cbz",
                "m.04vhnpm",
                "m.04v19f3",
                "m.04v18lh",
                "m.04vgkrk",
                "m.04v17v_",
                "m.04tzyr4",
                "m.04vgy7k",
                "m.04w00tc",
                "m.04v222f",
                "m.04v25xw",
                "m.04vbrm9",
                "m.04vbwbt",
                "m.04vgxx3",
                "m.04v9f_6",
                "m.04v3s71",
                "m.04v277z",
                "m.04vgfv8",
                "m.04v21zw",
                "m.04v3yjb",
                "m.04vf1px",
                "m.04vf34h",
                "m.04v13zw",
                "m.04vgj90",
                "m.04vg4v_",
                "m.04vft23",
                "m.04tzys5",
                "m.04vg4_b",
                "m.04vbd48",
                "m.04t_z0l",
                "m.04vftq2",
                "m.04tzsfl",
                "m.04tsxrj",
                "m.04vbrf8",
                "m.04v9b73",
                "m.04v8k3x",
                "m.04v17tr",
                "m.04vbc69",
                "m.04vhnq3",
                "m.04tzqmn",
                "m.04vft07",
                "m.04v26lr",
                "m.04v2t6n",
                "m.04v17ry",
                "m.04vjl0s",
                "m.04vb90l",
                "m.04v256b",
                "m.04v3lb1",
                "m.04tsxy6",
                "m.04vghtf",
                "m.04vb8zx",
                "m.04vf1wj",
                "m.04v2709",
                "m.04vf1lc",
                "m.04v25qg",
                "m.04tzwpy",
                "m.04vbwc1",
                "m.04v_2s4",
                "m.04vfv03",
                "m.04vgjc8",
                "m.04t_7yx",
                "m.04t_l9c",
                "m.04vgksl",
                "m.04v1bs8",
                "m.04vgybf",
                "m.04v9b5b",
                "m.04v2vbc",
                "m.04tzqpf",
                "m.04v25tf",
                "m.04v25tp",
                "m.04v1bbc",
                "m.04v1b6g",
                "m.04v2rv9",
                "m.04t_y2p",
                "m.04vgj9s",
                "m.04vft0y",
                "m.04v0vst",
                "m.04v9fzp",
                "m.04v1wfr",
                "m.04vc88_",
                "m.04vgfx2",
                "m.04vf556",
                "m.04v19rl",
                "m.04v5qf8",
                "m.04v7wmy",
                "m.04v5qd1",
                "m.04vf3w7",
                "m.04tzysz",
                "m.04v251w",
                "m.04v1wjv",
                "m.04vhfph",
                "m.04vgxzl",
                "m.04vgfwk",
                "m.04t_lcp",
                "m.04tsxxb",
                "m.04vf1lm",
                "m.04vkxqb",
                "m.04vc4sd",
                "m.04v2s5r",
                "m.04v7r0v",
                "m.04vkj13",
                "m.04v883z",
                "m.04v2rq8",
                "m.04v2796",
                "m.04vbrl8",
                "m.04vbrpk",
                "m.04t_7wv",
                "m.04v19qx",
                "m.04v2rr8",
                "m.04v989_",
                "m.04t_w91",
                "m.04v24zy",
                "m.04v1w30",
                "m.04w02yp",
                "m.04t_j8l",
                "m.04vcwxl",
                "m.04v2762",
                "m.04v147c",
                "m.04vc6zj",
                "m.04t_wc2",
                "m.04vhgy3",
                "m.04vft8l",
                "m.04v3jhn",
                "m.04tzps5",
                "m.04tzsdv",
                "m.04v275t",
                "m.04vgbvn",
                "m.04vc89p",
                "m.04v2smk",
                "m.04v197v",
                "m.04v3z7_",
                "m.04v2s3t",
                "m.04v7wcc",
                "m.04vhnrw",
                "m.04vkg9q",
                "m.04vcw3r",
                "m.04vft79",
                "m.04vkh_5",
                "m.04v1w7j",
                "m.04vg500",
                "m.04vkjfy",
                "m.04t_lb3",
                "m.04v19pf",
                "m.04vgjys",
                "m.04v1cc_",
                "m.04v1wj3",
                "m.04w02vv",
                "m.04v98br",
                "m.04v25py",
                "m.04vgy80",
                "m.04vbk3m",
                "m.04vc700",
                "m.04tznw4",
                "m.04vkxt5",
                "m.04v2tfj",
                "m.04v7vj8",
                "m.04v1x26",
                "m.04v7wbw",
                "m.04vhfnz",
                "m.04vbrfj",
                "m.04vbrfs",
                "m.04v21zc",
                "m.04t_7yc",
                "m.04v1800",
                "m.04vbrgz",
                "m.04v7h0y",
                "m.04t_7zc",
                "m.04tzwnr",
                "m.04vf1p9",
                "m.04vft7k",
                "m.04vkxpw",
                "m.04vjl0h",
                "m.04t_py0",
                "m.04vghsb",
                "m.04t_y52",
                "m.04vzz8m",
                "m.04vbt_0",
                "m.04tznqy",
                "m.04v3l9t",
                "m.04t_y18",
                "m.04vc6_h",
                "m.04tzmn0",
                "m.04v3jpl",
                "m.04vg4yp",
                "m.04v1w38",
                "m.04t_jbm",
                "m.04vb8zc",
                "m.04tsy4j",
                "m.04v221x",
                "m.04v25rd",
                "m.04v251c",
                "m.04v21zm",
                "m.04v2snv",
                "m.04vgfxy",
                "m.04v7nd9",
                "m.028xy2v",
                "m.04t_nr3",
                "m.04v7jr0",
                "m.04v3jjc",
                "m.04vbk1s",
                "m.04v9fy0",
                "m.04v1w9z",
                "m.04vhfqq",
                "m.04tsy68",
                "m.04vfv0d",
                "m.04vgjcj",
                "m.04v2s51",
                "m.04vhfn6",
                "m.04vfv1x",
                "m.04vkxsy",
                "m.04v4ws8",
                "m.04v3zc6",
                "m.04v8k3n",
                "m.04vf1nq",
                "m.04v25xc",
                "m.04t_l9v",
                "m.04vftnp",
                "m.04v3jjm",
                "m.04v1wvc",
                "m.04vhnqm",
                "m.04vfv2l",
                "m.04t_nrw",
                "m.04v2wjz",
                "m.04v25vm",
                "m.04v148c",
                "m.04vgjx6",
                "m.04vbc5w",
                "m.04vf1s4",
                "m.04t_jd3",
                "m.04v7h27",
                "m.04vfv2v",
                "m.04tsxzm",
                "m.04vghs2",
                "m.04v1wjk",
                "m.04vgfvt",
                "m.04vc4p2",
                "m.04vgy8x",
                "m.04tz_sm",
                "m.04tznvc",
                "m.04vkj0w",
                "m.04v13_4",
                "m.04vc8bx",
                "m.04tsxt8",
                "m.04vkhyq",
                "m.04v1w20",
                "m.04t_w88",
                "m.04vft81",
                "m.04t_7zm",
                "m.04tsy6q",
                "m.04vghsm",
                "m.04tz_sc",
                "m.04v2rqr",
                "m.04v9hmn",
                "m.04w02xr",
                "m.04v007n",
                "m.04w00w7",
                "m.04t_jb2",
                "m.04vzz63",
                "m.04v2rrj",
                "m.04v21_c",
                "m.04tzwm6",
                "m.04v1wlj",
                "m.04v8k4d",
                "m.04tsy0c",
                "m.04vbrwn",
                "m.04v7vfh",
                "m.04t_7yn",
                "m.04vgjvy",
                "m.04v2t4f",
                "m.04v26_2",
                "m.04tzpsf",
                "m.04v7jrz",
                "m.04v3jp9",
                "m.04tzqlm",
                "m.04t_nq2",
                "m.04v2504",
                "m.04t_z1b",
                "m.04vc26r",
                "m.04vfvmy",
                "m.04v1wcz",
                "m.04tz_rm",
                "m.04vhnqc",
                "m.04v19k6",
                "m.04tzwn_",
                "m.04v198b",
                "m.04v3_h_",
                "m.04vftb1",
                "m.04v26nn",
                "m.04vb90w",
                "m.04vkh_l",
                "m.04v25s7",
                "m.04tsx_1",
                "m.04vghwn",
                "m.04vhnt1",
                "m.04tzsdb",
                "m.04v881_",
                "m.04v17yt",
                "m.04v2sn2",
                "m.04tsy2s",
                "m.04vghvj",
                "m.04v26kk",
                "m.04vbrdr",
                "m.04v2tf_",
                "m.04v3jkw",
                "m.04vbrnt",
                "m.04tzmpj",
                "m.04vgfz0",
                "m.04v7r1j",
                "m.04v2rs7",
                "m.04v2v6m",
                "m.04vkz1j",
                "m.04vb8_c",
                "m.04tsxz5",
                "m.04vjl10",
                "m.04vky_y",
                "m.04v2s3b",
                "m.04vc29c",
                "m.04v3l8z",
                "m.04vf1rp",
                "m.04v_2vq",
                "m.04v8l99",
                "m.04v_2vg",
                "m.04v17xb",
                "m.04tsxr2",
                "m.04v17xv",
                "m.028yc88",
                "m.04vf1qw",
                "m.04v19vm",
                "m.04v0084",
                "m.04vbk20",
                "m.04v9fwm",
                "m.04v2s49",
                "m.04v2wj0",
                "m.04v2tk8",
                "m.04t_nqw",
                "m.04tznqp",
                "m.04v2smv",
                "m.04v1w5b",
                "m.04v2rts",
                "m.04v7vgr",
                "m.04vkz0_",
                "m.04v7n9j",
                "m.04tzqnx",
                "m.04vf1hz",
                "m.04vf1t5",
                "m.04t_npv",
                "m.04vkh_v",
                "m.04tzqmx",
                "m.04v2216",
                "m.04v9fz5",
                "m.04v25n6",
                "m.04v17sq",
                "m.04vft16",
                "m.04v19s8",
                "m.04v7w8t",
                "m.04v270k",
                "m.04t_7xw",
                "m.04v26qr",
                "m.04t_pys",
                "m.04vkxpb",
                "m.04vc4rx",
                "m.04v8846",
                "m.028yq8_",
                "m.04tzwl7",
                "m.04v2t6d",
                "m.04vgkrt",
                "m.04vcwyc",
                "m.04tzyhn",
                "m.04tzwlz",
                "m.04vhgxd",
                "m.04v4wq4",
                "m.04v1bb3",
                "m.04v2t4q",
                "m.04vbrj2",
                "m.04v0vs9",
                "m.04v3_gh",
                "m.04v9f_y",
                "m.04vft7t",
                "m.04v3sww",
                "m.04vgybp",
                "m.04vf1nf",
                "m.04vgyb5",
                "m.04vc9kf",
                "m.04v7q_4",
                "m.04vgjdf",
                "m.04tzyk4",
                "m.04v18nr",
                "m.04vc4rn",
                "m.04v883q",
                "m.04v882j",
                "m.04v9hmd",
                "m.04vc8cn",
                "m.04vgxxw",
                "m.04t_lc4",
                "m.04v988z",
                "m.04v8l8j",
                "m.04vbrp1",
                "m.04v1cch",
                "m.04vgbwv",
                "m.04tznvx",
                "m.04vjk_h",
                "m.04vg4xz",
                "m.04t_pxr",
                "m.04v1whf",
                "m.04vhpbz",
                "m.04t_m0w",
                "m.04v2s6v",
                "m.04vkj0m",
                "m.04v98bh",
                "m.04v17th",
                "m.04vb8y5",
                "m.028xw99",
                "m.028ym09",
                "m.04v3jly",
                "m.04v3yh4",
                "m.04vbk5h",
                "m.04t_m0b",
                "m.04v_15_",
                "m.04v7wcw",
                "m.04v2v9v",
                "m.04vgy9f",
                "m.04vftsv",
                "m.04v7h1g",
                "m.04vkxp1",
                "m.04vbrm1",
                "m.04v2t45",
                "m.04t_y1y",
                "m.04v1wqg",
                "m.04t_jcm",
                "m.04v3l9d",
                "m.04v8k62",
                "m.04vkgbq",
                "m.04v2s41",
                "m.04tzqmc",
                "m.04v1473",
                "m.04v41x5",
                "m.04v7wvs",
                "m.04v2v74",
                "m.04v3w5w",
                "m.04tzwn6",
                "m.04t_wbl",
                "m.04tzwp7",
                "m.04v9fxs",
                "m.04vhfqg",
                "m.04v3yf3",
                "m.04v9ftz",
                "m.04tzyrn",
                "m.04tzmlr",
                "m.04v3jq3",
                "m.04tz_wr",
                "m.04v2513",
                "m.04v1bvb",
                "m.04vg4zp",
                "m.04vf3sz",
                "m.04vbv1g",
                "m.04t_m2w",
                "m.04v2ryx",
                "m.04v3ygn",
                "m.04vftbn",
                "m.04tzmnv",
                "m.04vf1xh",
                "m.04tzwng",
                "m.04vky_9",
                "m.04v1bw0",
                "m.04v27cw",
                "m.04vgj9j",
                "m.04vftrm",
                "m.04v25yn",
                "m.04tsxw0",
                "m.04v7w9k",
                "m.04v7jpn",
                "m.04v7wb1",
                "m.04vhfsz",
                "m.04v17x1",
                "m.04v7g_z",
                "m.04v882s",
                "m.04vftcd",
                "m.04vcw6_",
                "m.04vb90b",
                "m.04vf1w8",
                "m.04tzmmj",
                "m.04v7ngp",
                "m.04vblnh",
                "m.04v4wrb",
                "m.04w00xq",
                "m.04w00xg",
                "m.04v7w7x",
                "m.04vhgyx",
                "m.04v7w99",
                "m.04vjl18",
                "m.04v3w34",
                "m.04vblpg",
                "m.04v3l89",
                "m.04tzqnn",
                "m.04v2wb4",
                "m.04v8k5n",
                "m.04v250m",
                "m.04vghsx",
                "m.04vc4qh",
                "m.04tzsd2",
                "m.04vky_1",
                "m.04v1968",
                "m.04vf34_",
                "m.04tsxwx",
                "m.04v3z8_",
                "m.04tsy42",
                "m.04vgy9y",
                "m.04v180z",
                "m.04vhnr3",
                "m.04v24_5",
                "m.04v2vkn",
                "m.04v3zbq",
                "m.04v3_fr",
                "m.04v11m_",
                "m.04t_lbx",
                "m.04v11qf",
                "m.04v9fzf",
                "m.04v13zm",
                "m.04vkj23",
                "m.04w00xz",
                "m.04vf1qc",
                "m.04v0vvh",
                "m.04w02xh",
                "m.04v_2wg",
                "m.04v7ng4",
                "m.04v1bw8",
                "m.04tznt2",
                "m.04tz_qt",
                "m.04v2wj9",
                "m.04t_l_j",
                "m.04v24zg",
                "m.04v9b4c",
                "m.04v2tgs",
                "m.04vf3sh",
                "m.04tzpsq",
                "m.04v7nbs",
                "m.04vfv32",
                "m.04v7vf0",
                "m.04v3jnn",
                "m.04v7wmp",
                "m.04v88_2",
                "m.04v1w45",
                "m.04v7nc8",
                "m.04v25yd",
                "m.04v272n",
                "m.04v24_x",
                "m.04v27b4",
                "m.04v1w69",
                "m.04t_l8w",
                "m.04vkxnj",
                "m.04v_16p",
                "m.04v3z97",
                "m.04v7ww0",
                "m.04vbv07",
                "m.04tsy5d",
                "m.04vkhzp",
                "m.04vf28h",
                "m.04v_18_",
                "m.04t_jbc",
                "m.04vf52b",
                "m.04v9hn_",
                "m.04vgjxh",
                "m.04v22wd",
                "m.04tzysg",
                "m.04v3zb4",
                "m.04v2rv0",
                "m.04v1975",
                "m.04v25s_",
                "m.04v25mz",
                "m.04vgktm",
                "m.04v1x2r",
                "m.04v3jm5",
                "m.04vhgx4",
                "m.04v1ccr",
                "m.04tzwq5",
                "m.04v3yj2",
                "m.04vkxrb",
                "m.04vzzb0",
                "m.04vbd4z",
                "m.04v25xm",
                "m.04v279m",
                "m.04vg4_2",
                "m.04v1cjg",
                "m.04vgxzb",
                "m.04v11lk",
                "m.04tzwqf",
                "m.04t_z0b",
                "m.04vkxns",
                "m.04v2s64",
                "m.04vhgz5",
                "m.04v9fvx",
                "m.04vcw59",
                "m.04v7vk6",
                "m.04v2tgh",
                "m.04vzz82",
                "m.04tsy4z",
                "m.04t_y2f",
                "m.04w02x0",
                "m.04vgfvj",
                "m.04v7nf3",
                "m.04vghv7",
                "m.04vc21k",
                "m.04t_lbc",
                "m.04v7h0f",
                "m.04vc6z_",
                "m.04tzyv1",
                "m.04tzyq5",
                "m.04vkj2n",
                "m.04vbls4",
                "m.04v3l81",
                "m.04vkz0r",
                "m.04vf346",
                "m.04vbc6l",
                "m.04v199k",
                "m.04v1w7s",
                "m.04t_m2c",
                "m.04vjl07",
                "m.04vc24c",
                "m.04v2v5p",
                "m.04v25x3",
                "m.04v_174",
                "m.04v7wc3",
                "m.04v2t6x",
                "m.04v275k",
                "m.04v_14g",
                "m.04vf54g",
                "m.04vc71n",
                "m.04v19gx",
                "m.04v148n",
                "m.04v25sr",
                "m.04vbwd1",
                "m.04vkggw",
                "m.04v7wb9",
                "m.04vc231",
                "m.04v182z",
                "m.04vgjcs",
                "m.04tsy74",
                "m.04v4wnn",
                "m.04vgfxn",
                "m.04v1w3j",
                "m.04t_7x2",
                "m.04tznv3",
                "m.04v3z8h",
                "m.04vghr0",
                "m.04vc71x",
                "m.04v3w6l",
                "m.04vgfyg",
                "m.04vc719",
                "m.04v17t7",
                "m.04vkxqt",
                "m.04v7r0l",
                "m.04t_7wl",
                "m.04vc4vf",
                "m.04v2thj",
                "m.04v8l9k",
                "m.04v8k34",
                "m.04t_8kv",
                "m.04vfvqw",
                "m.04vgfxc",
                "m.04v8k2p",
                "m.04vc6z7",
                "m.04tznwy",
                "m.04vbv24",
                "m.04v21_t",
                "m.04v9b6b",
                "m.04vbv10",
                "m.04v277k",
                "m.04v2vby",
                "m.04vbrck",
                "m.04vkz1s",
                "m.04v2tf1",
                "m.04tznwp",
                "m.04vg4z5",
                "m.04vf532",
                "m.04vc24m",
                "m.04tz_0x",
                "m.04v2rr0",
                "m.04v7h16",
                "m.04v17vh",
                "m.04vkxsp",
                "m.04v2v92",
                "m.04v220j",
                "m.04vgbw9",
                "m.04t_wb0",
                "m.04tzmk1",
                "m.04v221n",
                "m.04v5z93",
                "m.04vc9jx",
                "m.04vcw8x",
                "m.04t_pw7",
                "m.04vkjlz",
                "m.04v4wn4",
                "m.04vkgh4",
                "m.04t_8jf",
                "m.04v9hm4",
                "m.04vf1x1",
                "m.04v2s4k",
                "m.04vgfw9",
                "m.04w02ws",
                "m.04tzpsz",
                "m.04vc22l",
                "m.04vfvn5",
                "m.04v9hl5",
                "m.04v5z8w",
                "m.04v98b7",
                "m.04vg4zf",
                "m.04tz_tk",
                "m.04vft1w",
                "m.04v0vwx",
                "m.04v007d",
                "m.04v41xq",
                "m.04tz_rw",
                "m.04vf3vt",
                "m.04v01wm",
                "m.04t_m9p",
                "m.04v7r29",
                "m.04vg_33",
                "m.04vgfw1",
                "m.04vkgdm",
                "m.04v0vs1",
                "m.04tsxxs",
                "m.04tz_0n",
                "m.04vc28p",
                "m.04t_jcc",
                "m.04vblpq",
                "m.04t_wbv",
                "m.04vgy9p",
                "m.04v2wkq",
                "m.04vbd5d",
                "m.04vgbxb",
                "m.04v3zbz",
                "m.04tzwk8",
                "m.04v881r",
                "m.04t_nrc",
                "m.04v7wn6",
                "m.04v2rxc",
                "m.04v25rt",
                "m.04vc87_",
                "m.04v3w7x",
                "m.04v3l7t",
                "m.04vb91y",
                "m.04v11n_",
                "m.04tsy1x",
                "m.04v1w87",
                "m.04w00wy",
                "m.04vbc73",
                "m.04tzyqx",
                "m.04v_189",
                "m.04t_7_1",
                "m.04v2s6d",
                "m.04v2sm1",
                "m.04v26p_",
                "m.04v2spl",
                "m.04v25w3",
                "m.04v27cc",
                "m.04v1x2g",
                "m.04vhfnq",
                "m.04v3yhd",
                "m.04vhgwq",
                "m.04v2v6c",
                "m.04v2rt8",
                "m.04vf3tw",
                "m.04vft_w",
                "m.04t_nrm",
                "m.04v250w",
                "m.04t_jdt",
                "m.04vftcy",
                "m.04vg_21",
                "m.04vkz18",
                "m.04vkgfw",
                "m.04v1cfm",
                "m.04vcw4s",
                "m.04vghrk",
                "m.04t_npl",
                "m.04v7gzz",
                "m.04v1cdh",
                "m.04v2vb2",
                "m.04vfs_y",
                "m.04v1w1j",
                "m.04vzz5n",
                "m.04tzyt6",
                "m.04w00x6",
                "m.04v7r18",
                "m.04vft2t",
                "m.04vg_2m",
                "m.04vbc4q",
                "m.04v1483",
                "m.04vghvt",
                "m.04v3jld",
                "m.04v_2tx",
                "m.04vfs_n",
                "m.04tsx_h",
                "m.04vfv1n",
                "m.04v8lbk",
                "m.04vzz71",
                "m.04v3w3y",
                "m.04vbk28",
                "m.04v270t",
                "m.04v19g3",
                "m.04t_m2m",
                "m.04t_m8x",
                "m.04v21_3",
                "m.04v2sp2",
                "m.04vzzb9",
                "m.04v1wcg",
                "m.04vft91",
                "m.04v181h",
                "m.04v2x7l",
                "m.04tsy80",
                "m.04tzql3",
                "m.04v3s47",
                "m.04vfs_3",
                "m.04vfvnf",
                "m.04v7wbl",
                "m.04v7jqj",
                "m.04tzsf2",
                "m.04vgx_c",
                "m.04vgj86",
                "m.04v3v_p",
                "m.04tzml0",
                "m.04vzzcf",
                "m.04vb8zm",
                "m.04tzntl",
                "m.04t_8n2",
                "m.04tznsk",
                "m.04w02wj",
                "m.04v1w8s",
                "m.028y5cy",
                "m.04vgj98",
                "m.04v5z9c",
                "m.04v26pq",
                "m.04tzwlq",
                "m.04v25vc",
                "m.04v8l88",
                "m.04v1wcq",
                "m.04w02y4",
                "m.04v2225",
                "m.04tsxvl",
                "m.04vg4_s",
                "m.04v146c",
                "m.04v27cm",
                "m.04v251m",
                "m.04t_wb9",
                "m.04tzmm8",
                "m.04vftcp",
                "m.04t_z0v",
                "m.04vbrlj",
                "m.04vbrg6",
                "m.04v1w8j",
                "m.04vgfy6",
                "m.04vzz9s",
                "m.04v3s68",
                "m.04vzz7v",
                "m.04v7h1q",
                "m.04v3ygx",
                "m.04v13_l",
                "m.04t_wcc",
                "m.04t_m94",
                "m.04v25vw",
                "m.04v2rtj",
                "m.04v3w45",
                "m.04vc6yh",
                "m.04v2s4t",
                "m.04vf3tf",
                "m.04v2tjj",
                "m.04v2s78",
                "m.04v2snb",
                "m.04v2vlv",
                "m.04vftdc",
                "m.04vkgg3",
                "m.04t_j9v",
                "m.04v1cd7",
                "m.04vbt_s",
                "m.04vbk51",
                "m.04t_pyj",
                "m.04vbk40",
                "m.04t_m8n",
                "m.04v2t8d",
                "m.04v3_k0",
                "m.04vgjwf",
                "m.04v2tbp",
                "m.04vf3rq",
                "m.04t_w99",
                "m.04tzqlc",
                "m.04vb913",
                "m.04tzpv2",
                "m.04v25yx",
                "m.04v7gzg",
                "m.04v7vhk",
                "m.04vhns3",
                "m.04v25ww",
                "m.04v3w5c",
                "m.04v2rsj",
                "m.04v9b5l",
                "m.04vgy8h",
                "m.04tz_1f",
                "m.04t_w8j",
                "m.04v2t64",
                "m.04vgx_x",
                "m.04vc89f",
                "m.04v19gn",
                "m.04v_17w",
                "m.04vg_29",
                "m.04v_2v5",
                "m.04vcw37",
                "m.04v181r",
                "m.04t_7xb",
                "m.04v1w3s",
                "m.04vf359",
                "m.04v7vjs",
                "m.04vkxs0",
                "m.04v9fvf",
                "m.04v3jgy",
                "m.04tz_s3",
                "m.04vc4ps",
                "m.04v7vg6",
                "m.04vgxxm",
                "m.04vgxy3",
                "m.04tzmn8",
                "m.04v7jqs",
                "m.04v1ww2",
                "m.04vc20s",
                "m.04vc23w",
                "m.04tsxv4",
                "m.04v1w1s",
                "m.04vjkzd",
                "m.04v144x",
                "m.04tsy0t",
                "m.04vbd5n",
                "m.04v7nb7",
                "m.04v2vmd",
                "m.04v2vkd",
                "m.04v_150",
                "m.04vc4sp",
                "m.04t_z12",
                "m.04tzqm3",
                "m.04vkxsf",
                "m.04v3_g_",
                "m.04vjl1k",
                "m.04vgjd5",
                "m.04v2tjs",
                "m.04tzyjn",
                "m.04vgyf0",
                "m.04w00tm",
                "m.04v1wdq",
                "m.04v0095",
                "m.04vf1h5",
                "m.04v989j",
                "m.04vg4y6",
                "m.04v1bs_",
                "m.04v7n91",
                "m.04vc6_s",
                "m.04vghqh",
                "m.04vf35k",
                "m.04v22w4",
                "m.04w02yf",
                "m.04v008y",
                "m.04v9fx2",
                "m.04v2rr_",
                "m.04vgks9",
                "m.04vky_k",
                "m.04v3w8l",
                "m.04v3jlp",
                "m.04vghr9",
                "m.04v7wcm",
                "m.04v00bc",
                "m.04v7vh8",
                "m.04v5qdt",
                "m.04vbd64",
                "m.04v2x7b",
                "m.04tsy3n",
                "m.04vbwd9",
                "m.04v3zbf",
                "m.04vbk2j",
                "m.04vbk3c",
                "m.04v2wlp",
                "m.04v8lb9",
                "m.04v1717",
                "m.04vgbwl",
                "m.028xyps",
                "m.04v2snl",
                "m.04vc8bc",
                "m.04v8k4t",
                "m.04v3w6v",
                "m.04v8l80",
                "m.04v19gd",
                "m.04tzyry",
                "m.04vf28v",
                "m.04vft9b",
                "m.04tsxwg",
                "m.04v2vvt",
                "m.04v25m7",
                "m.04vc4tf",
                "m.04vcwy3",
                "m.04v1bt7",
                "m.04v25zb",
                "m.04t_7_v",
                "m.04vgjxs",
                "m.04v25y4",
                "m.04vgks1",
                "m.04tzwqp",
                "m.04v2v88",
                "m.04vhfng",
                "m.04vgxw0",
                "m.04v4wnd",
                "m.04v1w71",
                "m.04v2th0",
                "m.04v8k3d",
                "m.04vc274",
                "m.04vgx_n",
                "m.04v17t_",
                "m.04v140l",
                "m.04vgxzv",
                "m.04vbv0s",
                "m.04v7gzq",
                "m.04tzyj2",
                "m.04v25v3",
                "m.04t_m9f",
                "m.04vfvm6",
                "m.04t_j9l",
                "m.04v2vk4",
                "m.04v7vhv",
                "m.04v1839",
                "m.04v9887",
                "m.04v7g_6",
                "m.04vc6xz",
                "m.04v4_h9",
                "m.04vg_17",
                "m.04v19ll",
                "m.04w02w2",
                "m.04v1wd6",
                "m.04v3ycw",
                "m.04v7wjt",
                "m.04v19nr",
                "m.04v2sm9",
                "m.04tzscv",
                "m.04v3svs",
                "m.04v183k",
                "m.04v2tk0",
                "m.04v25wc",
                "m.04v9b3d",
                "m.04v1817",
                "m.04v3l8q",
                "m.04vgx_3",
                "m.04t_jc3",
                "m.04vcw6q",
                "m.04tsy8g",
                "m.04t_y1p",
                "m.04v27bn",
                "m.04vjl2q",
                "m.04v5z7n",
                "m.04v9898",
                "m.04v3w72",
                "m.04vb8yx",
                "m.04v006z",
                "m.04t_nqb",
                "m.04v3y_p",
                "m.04v3w7m",
                "m.04vkz06",
                "m.04vb8x7",
                "m.04v25q5",
                "m.04v26n2",
                "m.04tzysq",
                "m.04v2wsw",
                "m.04v1w52",
                "m.04v2ths",
                "m.04v1cdy",
                "m.04v1w2h",
                "m.04vbv0j",
                "m.04v19dm",
                "m.04vgfwv",
                "m.04v2v9l",
                "m.04v9fzy",
                "m.04v2slb",
                "m.04v9hk8",
                "m.04v2v9b",
                "m.04v2tdl",
                "m.04vbrnk",
                "m.04v8l9t",
                "m.04v1wk_",
                "m.04v1cg4",
                "m.04v180q",
                "m.04tzmm0",
                "m.04vb8w_",
                "m.04vbd0s"
            ]
        ],
        "entity_linking": {
            "Agatha Christie": "m.0ldd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ldd')\na.add_fact('m.0ldd', 'book.author.book_editions_published', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-377",
        "question": "what school did michael jordan attend",
        "answer": [
            "m.07qymj",
            "m.0bx8pn"
        ],
        "different_answer": [
            [
                "m.07qymj",
                "m.0bx8pn"
            ]
        ],
        "entity_linking": {
            "Michael Jordan": "m.054c1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054c1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054c1 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.054c1')\na.add_fact('m.054c1', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-379",
        "question": "what year does hitler die",
        "answer": [
            "1945-04-30-08:00"
        ],
        "different_answer": [
            [
                "1945-04-30-08:00"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.deceased_person.date_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'people.deceased_person.date_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-380",
        "question": "where is mount st helens volcano",
        "answer": [
            "m.059g4",
            "m.09c7w0",
            "m.081yw",
            "m.0mly4",
            "m.0k3nk"
        ],
        "different_answer": [
            [
                "m.059g4",
                "m.09c7w0",
                "m.081yw",
                "m.0mly4",
                "m.0k3nk"
            ]
        ],
        "entity_linking": {
            "Mount St. Helens": "m.094xz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094xz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094xz ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.094xz')\na.add_fact('m.094xz', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-381",
        "question": "what shows are shot in new york",
        "answer": [
            "m.02rkkn1",
            "m.07chq93",
            "m.09fc83",
            "m.0n3k5nh"
        ],
        "different_answer": [
            [
                "m.02rkkn1",
                "m.07chq93",
                "m.09fc83",
                "m.0n3k5nh"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:tv.tv_location.tv_shows_filmed_here ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('m.02_286', 'tv.tv_location.tv_shows_filmed_here', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-382",
        "question": "what book did tupac write",
        "answer": [
            "m.04xl335",
            "m.04xl38k",
            "m.04xl391",
            "m.04xl32f",
            "m.04xl36z"
        ],
        "different_answer": [
            [
                "m.04xl335",
                "m.04xl38k",
                "m.04xl391",
                "m.04xl32f",
                "m.04xl36z"
            ]
        ],
        "entity_linking": {
            "Tupac Shakur": "m.07pzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pzc ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07pzc')\na.add_fact('m.07pzc', 'book.author.book_editions_published', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-383",
        "question": "what language do chinese people write in",
        "answer": [
            "m.0mmzb",
            "m.01mw7r",
            "m.050fyz",
            "m.01nf5z",
            "m.014lbg"
        ],
        "different_answer": [
            [
                "m.0mmzb",
                "m.01mw7r",
                "m.050fyz",
                "m.01nf5z",
                "m.014lbg"
            ]
        ],
        "entity_linking": {
            "Chinese language": "m.01r2l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r2l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r2l ns:language.human_language.writing_system ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r2l')\na.add_fact('m.01r2l', 'language.human_language.writing_system', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-384",
        "question": "what was robert burns famous for",
        "answer": [
            "m.0kyk",
            "m.0cbd2",
            "m.0knj1",
            "m.05z96"
        ],
        "different_answer": [
            [
                "m.0kyk",
                "m.0cbd2",
                "m.0knj1",
                "m.05z96"
            ]
        ],
        "entity_linking": {
            "Robert Burns": "m.09482"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09482)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09482 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09482')\na.add_fact('m.09482', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-385",
        "question": "when did william mckinley died",
        "answer": [
            "1901-09-14-08:00"
        ],
        "different_answer": [
            [
                "1901-09-14-08:00"
            ]
        ],
        "entity_linking": {
            "William McKinley": "m.083p7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083p7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083p7 ns:people.deceased_person.date_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.083p7')\na.add_fact('m.083p7', 'people.deceased_person.date_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-386",
        "question": "how deep is lake merritt oakland",
        "answer": [
            "3.048"
        ],
        "different_answer": [
            [
                "3.048"
            ]
        ],
        "entity_linking": {
            "Lake Merritt": "m.02_sf_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_sf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_sf_ ns:geography.body_of_water.depth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_sf_')\na.add_fact('m.02_sf_', 'geography.body_of_water.depth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-388",
        "question": "what are the important holidays of islam",
        "answer": [
            "m.04q3_d",
            "m.0vpsp_r",
            "m.01_403",
            "m.02gk03",
            "m.03clhwf",
            "m.0_tkhhs",
            "m.0148n3",
            "m.0114y4k_",
            "m.04jc26j",
            "m.07_46x",
            "m.011njw8h",
            "m.06j8x",
            "m.04b4l4",
            "m.027cs49",
            "m.0_tkryk"
        ],
        "different_answer": [
            [
                "m.04q3_d",
                "m.0vpsp_r",
                "m.01_403",
                "m.02gk03",
                "m.03clhwf",
                "m.0_tkhhs",
                "m.0148n3",
                "m.0114y4k_",
                "m.04jc26j",
                "m.07_46x",
                "m.011njw8h",
                "m.06j8x",
                "m.04b4l4",
                "m.027cs49",
                "m.0_tkryk"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.holidays ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.holidays', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-389",
        "question": "what type of music did claude debussy play",
        "answer": [
            "m.0d6n1",
            "m.021dvj",
            "m.01wqlc",
            "m.0ggq0m",
            "m.014m9r",
            "m.06q6jz",
            "m.0h4v9d"
        ],
        "different_answer": [
            [
                "m.0d6n1",
                "m.021dvj",
                "m.01wqlc",
                "m.0ggq0m",
                "m.014m9r",
                "m.06q6jz",
                "m.0h4v9d"
            ]
        ],
        "entity_linking": {
            "Claude Debussy": "m.01vvy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvy ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vvy')\na.add_fact('m.01vvy', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-390",
        "question": "when was the last time the toronto maple leafs were in the stanley cup finals",
        "answer": [
            "m.03by199"
        ],
        "different_answer": [
            [
                "m.03by199"
            ]
        ],
        "entity_linking": {
            "Stanley Cup Finals": "m.0cc8tt9"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ?x ns:sports.sports_championship_event.championship ns:m.0hn79\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.0j6tr . # Toronto Maple Leafs\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.0j6tr . # Toronto Maple Leafs\n  }\n  ?x ns:time.event.start_date ?st .\n}\nORDER BY DESC(xsd:datetime(?st))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-392",
        "question": "what team is hank baskett on 2010",
        "answer": [
            "m.05tg3",
            "m.03wnh",
            "m.051q5"
        ],
        "different_answer": [
            [
                "m.05tg3",
                "m.03wnh",
                "m.051q5"
            ]
        ],
        "entity_linking": {
            "Hank Baskett": "m.0d81yf",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d81yf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d81yf ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d81yf')\na.add_fact('m.0d81yf', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-393",
        "question": "what are the two official languages of paraguay",
        "answer": [
            "m.06nm1",
            "m.0k3pq"
        ],
        "different_answer": [
            [
                "m.06nm1",
                "m.0k3pq"
            ]
        ],
        "entity_linking": {
            "Paraguay": "m.05v10"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05v10)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05v10 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05v10')\na.add_fact('m.05v10', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-395",
        "question": "what state is the steelers from",
        "answer": [
            "m.068p2"
        ],
        "different_answer": [
            [
                "m.068p2"
            ]
        ],
        "entity_linking": {
            "Pittsburgh Steelers": "m.05tfm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tfm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tfm ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05tfm')\na.add_fact('m.05tfm', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-396",
        "question": "what college did sir isaac newton go to",
        "answer": [
            "m.07tk7"
        ],
        "different_answer": [
            [
                "m.07tk7"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03s9v', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-397",
        "question": "what are the school colors for harvard university",
        "answer": [
            "m.01jnf1"
        ],
        "different_answer": [
            [
                "m.01jnf1"
            ]
        ],
        "entity_linking": {
            "Harvard University": "m.03ksy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ksy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ksy ns:education.educational_institution.colors ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ksy')\na.add_fact('m.03ksy', 'education.educational_institution.colors', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-398",
        "question": "where is the university of the rockies located",
        "answer": [
            "m.01vsl",
            "m.01n4w",
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.01vsl",
                "m.01n4w",
                "m.09c7w0"
            ],
            [
                "m.01vsl"
            ],
            [
                "m.01n4w"
            ]
        ],
        "entity_linking": {
            "University of the Rockies": "m.03wbmx5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wbmx5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wbmx5 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03wbmx5')\na.add_fact('m.03wbmx5', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-399",
        "question": "what disease does robin roberts have",
        "answer": [
            "m.0j8hd",
            "m.019gky"
        ],
        "different_answer": [
            [
                "m.0j8hd",
                "m.019gky"
            ]
        ],
        "entity_linking": {
            "Robin Roberts": "m.06k3_t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06k3_t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06k3_t ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06k3_t')\na.add_fact('m.06k3_t', 'medicine.notable_person_with_medical_condition.condition', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-400",
        "question": "what was the capital city of the east roman empire",
        "answer": [
            "m.01q0l"
        ],
        "different_answer": [
            [
                "m.01q0l"
            ]
        ],
        "entity_linking": {
            "Byzantine Empire": "m.017cw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017cw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017cw ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.017cw')\na.add_fact('m.017cw', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-401",
        "question": "who plays edward scissorhands",
        "answer": [
            "m.0jfx1"
        ],
        "different_answer": [
            [
                "m.0jfx1"
            ]
        ],
        "entity_linking": {
            "Edward Scissorhands": "m.0gmm518"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s3vk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s3vk ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gmm518 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gmm518')\na.add_filter('x0', '!=', 'm.01s3vk')\na.add_fact('x1', 'film.performance.character', 'm.0gmm518')\na.add_fact('m.01s3vk', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-402",
        "question": "what does joey jordison play in slipknot",
        "answer": [
            "m.02hnl"
        ],
        "different_answer": [
            [
                "m.02hnl"
            ],
            [
                "m.02hnl"
            ]
        ],
        "entity_linking": {
            "Joey Jordison": "m.01wt4wc",
            "Slipknot": "m.0ntq7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wt4wc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wt4wc ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:m.0ntq7 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wt4wc')\na.add_filter('x0', '!=', 'm.0ntq7')\na.add_fact('x1', 'music.group_membership.member', 'm.01wt4wc')\na.add_fact('m.0ntq7', 'music.musical_group.member', 'x1')\na.add_fact('x1', 'music.group_membership.role', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-403",
        "question": "what kind of language does turkey speak",
        "answer": [
            "m.033xvz",
            "m.0jzc",
            "m.02hwyss",
            "m.04p7x",
            "m.0b1g2"
        ],
        "different_answer": [
            [
                "m.033xvz",
                "m.0jzc",
                "m.02hwyss",
                "m.04p7x",
                "m.0b1g2"
            ],
            [
                "m.02hwyss"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-404",
        "question": "what was lebron james first team",
        "answer": [
            "m.0jm7n"
        ],
        "different_answer": [
            [
                "m.0jm7n"
            ],
            [
                "m.0jm7n"
            ]
        ],
        "entity_linking": {
            "LeBron James": "m.01jz6d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:basketball.basketball_player.player_statistics ?y .\n?y ns:basketball.basketball_player_stats.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01jz6d')\na.add_fact('m.01jz6d', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-405",
        "question": "who fought the battle of gettysburg",
        "answer": [
            "m.012pml",
            "m.06f5j",
            "m.020d5",
            "m.02fp48"
        ],
        "different_answer": [
            [
                "m.012pml",
                "m.06f5j",
                "m.020d5",
                "m.02fp48"
            ],
            [
                "m.09c7w0",
                "m.020d5",
                "m.02fp48"
            ],
            [
                "m.020d5",
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Battle of Gettysburg": "m.01jnm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jnm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jnm ns:base.culturalevent.event.entity_involved ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01jnm')\na.add_fact('m.01jnm', 'base.culturalevent.event.entity_involved', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-406",
        "question": "who is the coach of the sf giants",
        "answer": [
            "m.085wxv",
            "m.057jcc",
            "m.02680w9",
            "m.02yf3x",
            "m.02plhsr",
            "m.07w9kn",
            "m.079w94"
        ],
        "different_answer": [
            [
                "m.085wxv",
                "m.057jcc",
                "m.02680w9",
                "m.02yf3x",
                "m.02plhsr",
                "m.07w9kn",
                "m.079w94"
            ]
        ],
        "entity_linking": {
            "San Francisco Giants": "m.0713r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0713r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0713r ns:baseball.baseball_team.current_coaches ?y .\n?y ns:baseball.current_coaching_tenure.baseball_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0713r')\na.add_fact('m.0713r', 'baseball.baseball_team.current_coaches', 'x1')\na.add_fact('x1', 'baseball.current_coaching_tenure.baseball_coach', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-408",
        "question": "who was the first president of the afl",
        "answer": [
            "m.01wtr5",
            "m.035yc3"
        ],
        "different_answer": [
            [
                "m.01wtr5",
                "m.035yc3"
            ]
        ],
        "entity_linking": {
            "American Football League": "m.0ysy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ysy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ysy ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ysy')\na.add_fact('m.0ysy', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-409",
        "question": "where did giuliana rancic grow up",
        "answer": [
            "m.0fhsz"
        ],
        "different_answer": [
            [
                "m.0fhsz"
            ]
        ],
        "entity_linking": {
            "Giuliana Rancic": "m.0b0tw3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b0tw3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b0tw3 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b0tw3')\na.add_fact('m.0b0tw3', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-410",
        "question": "what are the major cities in ukraine",
        "answer": [
            "m.02sn34"
        ],
        "different_answer": [
            [
                "m.02sn34"
            ]
        ],
        "entity_linking": {
            "Ukraine": "m.07t21"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t21)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t21 ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t21')\na.add_fact('m.07t21', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-414",
        "question": "who does brian dawkins play for 2011",
        "answer": [
            "m.0289q"
        ],
        "different_answer": [
            [
                "m.0289q"
            ]
        ],
        "entity_linking": {
            "Brian Dawkins": "m.04m4p5",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04m4p5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04m4p5 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04m4p5')\na.add_fact('m.04m4p5', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-415",
        "question": "what movies did tupac star in",
        "answer": [
            "m.08dk0b",
            "m.06974q",
            "m.0cc2r_",
            "m.02pkz7",
            "m.0c6vx0",
            "m.08dk10",
            "m.0f4nt1",
            "m.08w51z"
        ],
        "different_answer": [
            [
                "m.08dk0b",
                "m.06974q",
                "m.0cc2r_",
                "m.02pkz7",
                "m.0c6vx0",
                "m.08dk10",
                "m.0f4nt1",
                "m.08w51z"
            ]
        ],
        "entity_linking": {
            "Tupac Shakur": "m.07pzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pzc ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07pzc')\na.add_fact('m.07pzc', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-416",
        "question": "what form of currency does china have",
        "answer": [
            "m.0hn4_"
        ],
        "different_answer": [
            [
                "m.0hn4_"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-417",
        "question": "who plays kenneth",
        "answer": [
            "m.0h27vc"
        ],
        "different_answer": [
            [
                "m.0h27vc"
            ]
        ],
        "entity_linking": {
            "Kenneth Parcell": "m.0272jt5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0272jt5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0272jt5 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0272jt5')\na.add_fact('m.0272jt5', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-418",
        "question": "what league are the indianapolis colts in",
        "answer": [
            "m.059yj",
            "m.0hh4",
            "m.068g_2"
        ],
        "different_answer": [
            [
                "m.059yj",
                "m.0hh4",
                "m.068g_2"
            ]
        ],
        "entity_linking": {
            "Indianapolis Colts": "m.03wnh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03wnh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03wnh ns:sports.sports_team.league ?y .\n?y ns:sports.sports_league_participation.league ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03wnh')\na.add_fact('m.03wnh', 'sports.sports_team.league', 'x1')\na.add_fact('x1', 'sports.sports_league_participation.league', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-419",
        "question": "what country did magellan represent",
        "answer": [
            "m.0285m87"
        ],
        "different_answer": [
            [
                "m.0285m87"
            ]
        ],
        "entity_linking": {
            "Ferdinand Magellan": "m.033ky"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033ky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033ky ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.033ky')\na.add_fact('m.033ky', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-420",
        "question": "where is perpignan located",
        "answer": [
            "m.01087l",
            "m.0lwkz",
            "m.0f8l9c"
        ],
        "different_answer": [
            [
                "m.01087l",
                "m.0lwkz",
                "m.0f8l9c"
            ]
        ],
        "entity_linking": {
            "Perpignan": "m.09nkq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09nkq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09nkq ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09nkq')\na.add_fact('m.09nkq', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-421",
        "question": "who did kim richards marry",
        "answer": [
            "m.0bjbnly",
            "m.0mtnbfr"
        ],
        "different_answer": [
            [
                "m.0bjbnly",
                "m.0mtnbfr"
            ]
        ],
        "entity_linking": {
            "Kim Richards": "m.08l257",
            "Marriage": "m.04ztj",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08l257)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08l257 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.08l257')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.08l257', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-422",
        "question": "what happened in bosnia in the 90s",
        "answer": [
            "m.02x498w",
            "m.0r4mgjp",
            "m.02rwmk",
            "m.05b2nn7",
            "m.05xtp5",
            "m.02r7cqw",
            "m.076xnfy",
            "m.011sn_8x",
            "m.0bs5_tz",
            "m.03c14sx",
            "m.07s8p9r",
            "m.02qg1ks",
            "m.04y7gmx",
            "m.0rf7kgn",
            "m.09r2zf",
            "m.09rxt7n",
            "m.01x59y",
            "m.0640tw9",
            "m.05q6krh",
            "m.027s8p8",
            "m.02qfnq2",
            "m.0dnx18",
            "m.0275ln3",
            "m.076yl3t",
            "m.0545v9",
            "m.02z2hbr",
            "m.05zl5rk",
            "m.051w_vp",
            "m.05mzrb0",
            "m.03byy_7",
            "m.02qg2fz",
            "m.05zv9jc",
            "m.0286jd",
            "m.0zg63nv",
            "m.0rfgpgn"
        ],
        "different_answer": [
            [
                "m.02x498w",
                "m.0r4mgjp",
                "m.02rwmk",
                "m.05b2nn7",
                "m.05xtp5",
                "m.02r7cqw",
                "m.076xnfy",
                "m.011sn_8x",
                "m.0bs5_tz",
                "m.03c14sx",
                "m.07s8p9r",
                "m.02qg1ks",
                "m.04y7gmx",
                "m.0rf7kgn",
                "m.09r2zf",
                "m.09rxt7n",
                "m.01x59y",
                "m.0640tw9",
                "m.05q6krh",
                "m.027s8p8",
                "m.02qfnq2",
                "m.0dnx18",
                "m.0275ln3",
                "m.076yl3t",
                "m.0545v9",
                "m.02z2hbr",
                "m.05zl5rk",
                "m.051w_vp",
                "m.05mzrb0",
                "m.03byy_7",
                "m.02qg2fz",
                "m.05zv9jc",
                "m.0286jd",
                "m.0zg63nv",
                "m.0rfgpgn"
            ]
        ],
        "entity_linking": {
            "Bosnia and Herzegovina": "m.0166b",
            "1999-12-31": "\"1999-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1990-01-01": "\"1990-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0166b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0166b ns:location.location.events ?x .\nFILTER(NOT EXISTS {?x ns:time.event.start_date ?sk0} || \nEXISTS {?x ns:time.event.start_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"1999-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:time.event.end_date ?sk2} || \nEXISTS {?x ns:time.event.end_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"1990-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0166b')\na.add_fact('m.0166b', 'location.location.events', 'x0')\na.add_time_constrain('x0', 'time.event.start_date', 'time.event.end_date', '\"1999-12-31\"^^xsd:dateTime', '\"1999-01-01\"^^xsd:dateTime')\n"
    },
    {
        "qid": "WebQTest-423",
        "question": "when 's the last time the steelers won the superbowl",
        "answer": [
            "m.04n7r5"
        ],
        "different_answer": [
            [
                "m.04n7r5"
            ]
        ],
        "entity_linking": {
            "Pittsburgh Steelers": "m.05tfm",
            "Super bowl": "m.01xljv1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tfm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tfm ns:sports.sports_team.championships ?x .\n?x ns:common.topic.notable_types ns:m.01xljv1 .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xljv1')\na.add_filter('x0', '!=', 'm.05tfm')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xljv1')\na.add_fact('m.05tfm', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-425",
        "question": "where english is spoken",
        "answer": [
            "m.01nln",
            "m.06ryl",
            "m.06t2t",
            "m.065skb",
            "m.07fsv",
            "m.019rg5",
            "m.06m_5",
            "m.0l3h",
            "m.04hhv",
            "m.027nb",
            "m.06dfg",
            "m.035dk",
            "m.0164b",
            "m.04hvw",
            "m.09wfqp",
            "m.04v6v",
            "m.0d05w3",
            "m.03h2c",
            "m.0165b",
            "m.05qkp",
            "m.02lx0",
            "m.03rt9",
            "m.03rk0",
            "m.07dzf",
            "m.034tl",
            "m.05v8c",
            "m.088q4",
            "m.0hdx8",
            "m.07tp2",
            "m.07ytt",
            "m.0rdr4",
            "m.04v3q",
            "m.0160w",
            "m.047t_",
            "m.03__y",
            "m.05sb1",
            "m.035yg",
            "m.020p1",
            "m.01k0p4",
            "m.05bmq",
            "m.06s0l",
            "m.035hm",
            "m.06s9y",
            "m.026wtlf",
            "m.0j5g9",
            "m.04wcf",
            "m.02wt0",
            "m.0ctw_b",
            "m.0167v",
            "m.03t1s",
            "m.0162b",
            "m.07ssc",
            "m.05r7t",
            "m.06v36",
            "m.03_3d",
            "m.02jx1",
            "m.03ryn",
            "m.04hzj",
            "m.06s6l",
            "m.06tw8",
            "m.09pmkv",
            "m.03spz",
            "m.01nty",
            "m.019pcs",
            "m.01ppq",
            "m.0hbgh",
            "m.035hr8",
            "m.05br2",
            "m.0697s",
            "m.034m8",
            "m.07z5n",
            "m.0h44w",
            "m.0166v",
            "m.0d060g",
            "m.07fr_",
            "m.0162v",
            "m.016p5p",
            "m.03_xj",
            "m.06s_2",
            "m.0chghy",
            "m.088vb",
            "m.05cgv",
            "m.03h64",
            "m.0hzlz",
            "m.07f9q"
        ],
        "different_answer": [
            [
                "m.01nln",
                "m.06ryl",
                "m.06t2t",
                "m.065skb",
                "m.07fsv",
                "m.019rg5",
                "m.06m_5",
                "m.0l3h",
                "m.04hhv",
                "m.027nb",
                "m.06dfg",
                "m.035dk",
                "m.0164b",
                "m.04hvw",
                "m.09wfqp",
                "m.04v6v",
                "m.0d05w3",
                "m.03h2c",
                "m.0165b",
                "m.05qkp",
                "m.02lx0",
                "m.03rt9",
                "m.03rk0",
                "m.07dzf",
                "m.034tl",
                "m.05v8c",
                "m.088q4",
                "m.0hdx8",
                "m.07tp2",
                "m.07ytt",
                "m.0rdr4",
                "m.04v3q",
                "m.0160w",
                "m.047t_",
                "m.03__y",
                "m.05sb1",
                "m.035yg",
                "m.020p1",
                "m.01k0p4",
                "m.05bmq",
                "m.06s0l",
                "m.035hm",
                "m.06s9y",
                "m.026wtlf",
                "m.0j5g9",
                "m.04wcf",
                "m.02wt0",
                "m.0ctw_b",
                "m.0167v",
                "m.03t1s",
                "m.0162b",
                "m.07ssc",
                "m.05r7t",
                "m.06v36",
                "m.03_3d",
                "m.02jx1",
                "m.03ryn",
                "m.04hzj",
                "m.06s6l",
                "m.06tw8",
                "m.09pmkv",
                "m.03spz",
                "m.01nty",
                "m.019pcs",
                "m.01ppq",
                "m.0hbgh",
                "m.035hr8",
                "m.05br2",
                "m.0697s",
                "m.034m8",
                "m.07z5n",
                "m.0h44w",
                "m.0166v",
                "m.0d060g",
                "m.07fr_",
                "m.0162v",
                "m.016p5p",
                "m.03_xj",
                "m.06s_2",
                "m.0chghy",
                "m.088vb",
                "m.05cgv",
                "m.03h64",
                "m.0hzlz",
                "m.07f9q"
            ],
            [
                "m.0d060g",
                "m.03rt9",
                "m.09c7w0",
                "m.014tss",
                "m.07ssc",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-426",
        "question": "where is giza pyramids located",
        "answer": [
            "m.012b0q",
            "m.02k54"
        ],
        "different_answer": [
            [
                "m.012b0q",
                "m.02k54"
            ]
        ],
        "entity_linking": {
            "Giza Necropolis": "m.07s6gb8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07s6gb8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07s6gb8 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07s6gb8')\na.add_fact('m.07s6gb8', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-427",
        "question": "what is the zip code for midland tx",
        "answer": [
            "m.07nq9ls",
            "m.0215t3_",
            "m.020zz8q",
            "m.0215t9t",
            "m.07nq9m6",
            "m.07nq9mf",
            "m.0215t0_",
            "m.07nq9mn",
            "m.0215s_p",
            "m.0215t88",
            "m.07nq9l_"
        ],
        "different_answer": [
            [
                "m.07nq9ls",
                "m.0215t3_",
                "m.020zz8q",
                "m.0215t9t",
                "m.07nq9m6",
                "m.07nq9mf",
                "m.0215t0_",
                "m.07nq9mn",
                "m.0215s_p",
                "m.0215t88",
                "m.07nq9l_"
            ]
        ],
        "entity_linking": {
            "Midland": "m.013n2h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013n2h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013n2h ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013n2h')\na.add_fact('m.013n2h', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-428",
        "question": "what states make up the midwest us",
        "answer": [
            "m.0t8xg",
            "m.03v0t",
            "m.05kkh",
            "m.03v1s",
            "m.05fhy",
            "m.04ykg",
            "m.0488g",
            "m.0824r",
            "m.03pzys",
            "m.03pz_y",
            "m.04ych",
            "m.03kch9",
            "m.03s0w",
            "m.04rrx",
            "m.06mz5",
            "m.05fky"
        ],
        "different_answer": [
            [
                "m.0t8xg",
                "m.03v0t",
                "m.05kkh",
                "m.03v1s",
                "m.05fhy",
                "m.04ykg",
                "m.0488g",
                "m.0824r",
                "m.03pzys",
                "m.03pz_y",
                "m.04ych",
                "m.03kch9",
                "m.03s0w",
                "m.04rrx",
                "m.06mz5",
                "m.05fky"
            ]
        ],
        "entity_linking": {
            "Midwestern United States": "m.0q76g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q76g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q76g ns:location.location.contains ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0q76g')\na.add_fact('m.0q76g', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-430",
        "question": "what instruments does justin bieber use",
        "answer": [
            "m.0290ngj"
        ],
        "different_answer": [
            [
                "m.0290ngj"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w2sn5')\na.add_fact('m.06w2sn5', 'music.group_member.membership', 'x1')\na.add_fact('x1', 'music.group_membership.role', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-431",
        "question": "what language does australians speak",
        "answer": [
            "m.04gd7",
            "m.02jcw",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.04gd7",
                "m.02jcw",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-432",
        "question": "who did annie oakley married",
        "answer": [
            "m.06zqpqq"
        ],
        "different_answer": [
            [
                "m.06zqpqq"
            ]
        ],
        "entity_linking": {
            "Annie Oakley": "m.0237np",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0237np)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0237np ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0237np')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0237np', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-433",
        "question": "who has played lex luthor",
        "answer": [
            "m.0301bq",
            "m.03wy70",
            "m.057176",
            "m.039bp",
            "m.079jd_",
            "m.01f9mq",
            "m.04cf09",
            "m.048lv",
            "m.02p7_k"
        ],
        "different_answer": [
            [
                "m.0301bq",
                "m.03wy70",
                "m.057176",
                "m.039bp",
                "m.079jd_",
                "m.01f9mq",
                "m.04cf09",
                "m.048lv",
                "m.02p7_k"
            ]
        ],
        "entity_linking": {
            "Alexander Luthor": "m.04q78"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04q78)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04q78 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04q78')\na.add_fact('m.04q78', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-434",
        "question": "where does the zambezi river start",
        "answer": [
            "m.07cdmr"
        ],
        "different_answer": [
            [
                "m.07cdmr"
            ]
        ],
        "entity_linking": {
            "Zambezi": "m.0p_70"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p_70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p_70 ns:geography.river.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0p_70')\na.add_fact('m.0p_70', 'geography.river.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-436",
        "question": "what is the nigeria time",
        "answer": [
            "m.0gsrsm"
        ],
        "different_answer": [
            [
                "m.0gsrsm"
            ]
        ],
        "entity_linking": {
            "Nigeria": "m.05cgv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cgv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cgv ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05cgv')\na.add_fact('m.05cgv', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-437",
        "question": "where did they find jenni rivera 's body",
        "answer": [
            "m.0nycl8h"
        ],
        "different_answer": [
            [
                "m.0nycl8h"
            ]
        ],
        "entity_linking": {
            "Jenni Rivera": "m.01v5vfj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01v5vfj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01v5vfj ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01v5vfj')\na.add_fact('m.01v5vfj', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-438",
        "question": "what university did romney graduated from",
        "answer": [
            "m.0l2tk"
        ],
        "different_answer": [
            [
                "m.0l2tk"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s",
            "Bachelor of Arts": "m.014mlp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.014mlp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014mlp')\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('x1', 'education.education.degree', 'm.014mlp')\na.add_fact('m.0271_s', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-439",
        "question": "where is the time zone line in south dakota",
        "answer": [
            "m.02hczc",
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02hczc",
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "South Dakota": "m.06mz5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mz5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mz5 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mz5')\na.add_fact('m.06mz5', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-440",
        "question": "where is jason mraz from",
        "answer": [
            "m.01wkmq",
            "m.01n7q"
        ],
        "different_answer": [
            [
                "m.01wkmq",
                "m.01n7q"
            ],
            [
                "m.01wkmq"
            ]
        ],
        "entity_linking": {
            "Jason Mraz": "m.0259r0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0259r0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0259r0 ns:music.artist.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0259r0')\na.add_fact('m.0259r0', 'music.artist.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-441",
        "question": "what killed john bonham",
        "answer": [
            "m.023l3k_"
        ],
        "different_answer": [
            [
                "m.023l3k_"
            ]
        ],
        "entity_linking": {
            "John Bonham": "m.015pvx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015pvx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015pvx ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015pvx')\na.add_fact('m.015pvx', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-442",
        "question": "what industry does walmart operate in",
        "answer": [
            "m.03qtgrv",
            "m.0191_7",
            "m.01k_mv"
        ],
        "different_answer": [
            [
                "m.03qtgrv",
                "m.0191_7",
                "m.01k_mv"
            ]
        ],
        "entity_linking": {
            "Walmart": "m.0841v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0841v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0841v ns:business.business_operation.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0841v')\na.add_fact('m.0841v', 'business.business_operation.industry', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-443",
        "question": "what county is texarkana arkansas in",
        "answer": [
            "m.0p2xk"
        ],
        "different_answer": [
            [
                "m.0p2xk"
            ],
            [
                "m.0p2xk"
            ]
        ],
        "entity_linking": {
            "Texarkana, Arkansas": "m.0d9z_y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9z_y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9z_y ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d9z_y')\na.add_fact('m.0d9z_y', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-446",
        "question": "what music period did beethoven live in",
        "answer": [
            "m.05lls",
            "m.0ggq0m"
        ],
        "different_answer": [
            [
                "m.05lls",
                "m.0ggq0m"
            ]
        ],
        "entity_linking": {
            "Ludwig van Beethoven": "m.04k15"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04k15)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04k15 ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04k15')\na.add_fact('m.04k15', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-447",
        "question": "what did laura ingalls wilder wrote",
        "answer": [
            "m.04v62ty",
            "m.04vrb7q",
            "m.028xv15",
            "m.04vjy2k",
            "m.04tv45v",
            "m.04vfk6g",
            "m.04vjy1q",
            "m.04vhcsr",
            "m.04v60z2",
            "m.04vr9qg",
            "m.04v62wz",
            "m.04vrbbl",
            "m.04v62rn",
            "m.04vfkbw",
            "m.04tv455",
            "m.04vj5y1",
            "m.04v61bb",
            "m.04vjy2w",
            "m.04tv3vt",
            "m.04vhcth",
            "m.04tv3zr",
            "m.04vjzyj",
            "m.04tv40h",
            "m.04vr9xr",
            "m.04vhf4w",
            "m.04vj2n_",
            "m.04vrb5q",
            "m.04vjy3d",
            "m.04vj347",
            "m.04vjyvg",
            "m.04vk35m",
            "m.04vrb7f",
            "m.04vhcs_",
            "m.04vj_94",
            "m.04tv3_v",
            "m.04tv3y6",
            "m.04w01f5",
            "m.04tv43n",
            "m.04vjzzq",
            "m.04vr9vt",
            "m.04vr9x4",
            "m.04vrbb9",
            "m.04vjy3p",
            "m.04vj2nr",
            "m.04vhct7",
            "m.04tv3xb",
            "m.04v63sl",
            "m.04tv3zz",
            "m.04vrb75",
            "m.04vfk7d",
            "m.04w06jt",
            "m.04vj5xt",
            "m.04tv474",
            "m.04vhcr5",
            "m.04vj6sy",
            "m.04w06mw",
            "m.04vk34c",
            "m.04tv42y",
            "m.04v63s9",
            "m.04vrb3_",
            "m.04vfk92",
            "m.04vj5zb",
            "m.04v61c1",
            "m.04vhcrf",
            "m.04tv41d",
            "m.04vrb8y",
            "m.04tv415",
            "m.04vj5z2",
            "m.04vrb49",
            "m.04v60_q",
            "m.04vrb36",
            "m.04v62sf",
            "m.04v61g0",
            "m.04tv3w0",
            "m.04tv449",
            "m.04vj2q8",
            "m.04tv45d",
            "m.04w06l1",
            "m.04vj5xc",
            "m.04vfkbm",
            "m.04v60zr",
            "m.04vrbcm",
            "m.04vrb55",
            "m.04vrb12",
            "m.04vfk7w",
            "m.04vk35b",
            "m.04tv3wg",
            "m.04vj5x3",
            "m.04vfk74",
            "m.04vrbdf",
            "m.04v61d2",
            "m.04vk2rb",
            "m.04vrbcb",
            "m.04vj2mq",
            "m.04vj5yk",
            "m.04vk34p",
            "m.04w06mm",
            "m.04vrb6d",
            "m.04vjyt6",
            "m.04vrb1x",
            "m.04vhcqn",
            "m.04w06nq",
            "m.04vj2mz",
            "m.04tv468",
            "m.04vr9mc",
            "m.04v61bt",
            "m.04vk35w",
            "m.04tv3sz",
            "m.04v60_g",
            "m.04tv40r",
            "m.04tv434",
            "m.04tv43c",
            "m.04tv44j",
            "m.04vrb1n",
            "m.04tv3yw",
            "m.04tv43w",
            "m.04vj6ty",
            "m.04v60_0",
            "m.04vhcs7",
            "m.04v619x",
            "m.04vj2q0",
            "m.04w040v",
            "m.04vhcsh",
            "m.04w01c1",
            "m.04vr9xg",
            "m.04vr9p3",
            "m.04vj2n6",
            "m.04vfk8b",
            "m.04vrb2d",
            "m.04v60yt",
            "m.04vjzw_",
            "m.04tv3td",
            "m.04vr9rb",
            "m.04vjz_f",
            "m.04w07f9",
            "m.04vfk6x",
            "m.04w01c9",
            "m.04vhf43",
            "m.04v62ry",
            "m.04vhf3w",
            "m.04vrb5f",
            "m.04vfk8l",
            "m.04vrbdz",
            "m.04w06lt",
            "m.04vk30q",
            "m.04tv3ym",
            "m.04v60xs",
            "m.04w01d2",
            "m.04tv3xk",
            "m.04w03z6",
            "m.04vfk9x",
            "m.04vjysz",
            "m.04tv3x_",
            "m.04vfk8v",
            "m.04vk2qs",
            "m.04vrbb1",
            "m.04w06ng",
            "m.04v61dt",
            "m.04vjy4q",
            "m.04w06ks",
            "m.04tv46y",
            "m.04w043p",
            "m.04tv42q",
            "m.04w01db",
            "m.04tv421",
            "m.04vjzy8",
            "m.04tv3z2",
            "m.04vjy1z",
            "m.04vjzy0",
            "m.04vrb4x",
            "m.04tv41v",
            "m.04vj2kx",
            "m.04tv3_d",
            "m.04vj6vq",
            "m.04tv46h",
            "m.04v610t",
            "m.04v61cv",
            "m.04v62sy",
            "m.04v60yj",
            "m.04tv46q",
            "m.04w06jj",
            "m.04w041j",
            "m.04v61fj",
            "m.04vrb04",
            "m.04tv42h",
            "m.04vrb8l",
            "m.04tv3v8",
            "m.04vrb1c",
            "m.04v61gk",
            "m.04w01j7",
            "m.04vrb88",
            "m.04vrb9h",
            "m.04vjzz5",
            "m.04w06l9",
            "m.04vjy3z",
            "m.04vhf3b",
            "m.04v6136",
            "m.04vj_bg",
            "m.04vj5v9",
            "m.04vjy46",
            "m.04vrb5z",
            "m.04vrb6x",
            "m.04tv44r",
            "m.04vj2pr",
            "m.04tv40z",
            "m.04v62r4",
            "m.04vj2mg",
            "m.04v61cl",
            "m.04v62w4",
            "m.04vjy4g",
            "m.04tv401",
            "m.04w01hg",
            "m.04vj5zl",
            "m.04vrb24",
            "m.04v6103",
            "m.04w0426",
            "m.04vr9r1",
            "m.04vrb2y",
            "m.04vrb2p",
            "m.04vr9ns",
            "m.04vrb6n",
            "m.04w01dn",
            "m.04vjzxk",
            "m.04w01ck",
            "m.04v61c9",
            "m.04vjy27",
            "m.04vr9s3",
            "m.04w01h5",
            "m.04vk2rt",
            "m.04vhcrq",
            "m.04v61db",
            "m.04vfk9n",
            "m.04vr9yb",
            "m.04vrb0k",
            "m.04vj2nh",
            "m.04vrbbv",
            "m.04v62t5",
            "m.04v62vf",
            "m.04vj6w8",
            "m.04vrb0t",
            "m.04w041s",
            "m.04vrb96",
            "m.04w07gk",
            "m.04vrbd5",
            "m.04vjzzg",
            "m.04v619n",
            "m.04w01g5",
            "m.04v62tf",
            "m.04tv428",
            "m.04vrbcy",
            "m.04vjytq",
            "m.04vrbdp",
            "m.04tv3wx",
            "m.04vjzyy",
            "m.04v62sp",
            "m.04tv3w7",
            "m.04vrb4l",
            "m.04v62tp",
            "m.04tv3xs",
            "m.04w0412",
            "m.04vrbc2",
            "m.04vj5y9",
            "m.04vrb80",
            "m.04vrb9r",
            "m.04v60zb",
            "m.04tv3zj"
        ],
        "different_answer": [
            [
                "m.04v62ty",
                "m.04vrb7q",
                "m.028xv15",
                "m.04vjy2k",
                "m.04tv45v",
                "m.04vfk6g",
                "m.04vjy1q",
                "m.04vhcsr",
                "m.04v60z2",
                "m.04vr9qg",
                "m.04v62wz",
                "m.04vrbbl",
                "m.04v62rn",
                "m.04vfkbw",
                "m.04tv455",
                "m.04vj5y1",
                "m.04v61bb",
                "m.04vjy2w",
                "m.04tv3vt",
                "m.04vhcth",
                "m.04tv3zr",
                "m.04vjzyj",
                "m.04tv40h",
                "m.04vr9xr",
                "m.04vhf4w",
                "m.04vj2n_",
                "m.04vrb5q",
                "m.04vjy3d",
                "m.04vj347",
                "m.04vjyvg",
                "m.04vk35m",
                "m.04vrb7f",
                "m.04vhcs_",
                "m.04vj_94",
                "m.04tv3_v",
                "m.04tv3y6",
                "m.04w01f5",
                "m.04tv43n",
                "m.04vjzzq",
                "m.04vr9vt",
                "m.04vr9x4",
                "m.04vrbb9",
                "m.04vjy3p",
                "m.04vj2nr",
                "m.04vhct7",
                "m.04tv3xb",
                "m.04v63sl",
                "m.04tv3zz",
                "m.04vrb75",
                "m.04vfk7d",
                "m.04w06jt",
                "m.04vj5xt",
                "m.04tv474",
                "m.04vhcr5",
                "m.04vj6sy",
                "m.04w06mw",
                "m.04vk34c",
                "m.04tv42y",
                "m.04v63s9",
                "m.04vrb3_",
                "m.04vfk92",
                "m.04vj5zb",
                "m.04v61c1",
                "m.04vhcrf",
                "m.04tv41d",
                "m.04vrb8y",
                "m.04tv415",
                "m.04vj5z2",
                "m.04vrb49",
                "m.04v60_q",
                "m.04vrb36",
                "m.04v62sf",
                "m.04v61g0",
                "m.04tv3w0",
                "m.04tv449",
                "m.04vj2q8",
                "m.04tv45d",
                "m.04w06l1",
                "m.04vj5xc",
                "m.04vfkbm",
                "m.04v60zr",
                "m.04vrbcm",
                "m.04vrb55",
                "m.04vrb12",
                "m.04vfk7w",
                "m.04vk35b",
                "m.04tv3wg",
                "m.04vj5x3",
                "m.04vfk74",
                "m.04vrbdf",
                "m.04v61d2",
                "m.04vk2rb",
                "m.04vrbcb",
                "m.04vj2mq",
                "m.04vj5yk",
                "m.04vk34p",
                "m.04w06mm",
                "m.04vrb6d",
                "m.04vjyt6",
                "m.04vrb1x",
                "m.04vhcqn",
                "m.04w06nq",
                "m.04vj2mz",
                "m.04tv468",
                "m.04vr9mc",
                "m.04v61bt",
                "m.04vk35w",
                "m.04tv3sz",
                "m.04v60_g",
                "m.04tv40r",
                "m.04tv434",
                "m.04tv43c",
                "m.04tv44j",
                "m.04vrb1n",
                "m.04tv3yw",
                "m.04tv43w",
                "m.04vj6ty",
                "m.04v60_0",
                "m.04vhcs7",
                "m.04v619x",
                "m.04vj2q0",
                "m.04w040v",
                "m.04vhcsh",
                "m.04w01c1",
                "m.04vr9xg",
                "m.04vr9p3",
                "m.04vj2n6",
                "m.04vfk8b",
                "m.04vrb2d",
                "m.04v60yt",
                "m.04vjzw_",
                "m.04tv3td",
                "m.04vr9rb",
                "m.04vjz_f",
                "m.04w07f9",
                "m.04vfk6x",
                "m.04w01c9",
                "m.04vhf43",
                "m.04v62ry",
                "m.04vhf3w",
                "m.04vrb5f",
                "m.04vfk8l",
                "m.04vrbdz",
                "m.04w06lt",
                "m.04vk30q",
                "m.04tv3ym",
                "m.04v60xs",
                "m.04w01d2",
                "m.04tv3xk",
                "m.04w03z6",
                "m.04vfk9x",
                "m.04vjysz",
                "m.04tv3x_",
                "m.04vfk8v",
                "m.04vk2qs",
                "m.04vrbb1",
                "m.04w06ng",
                "m.04v61dt",
                "m.04vjy4q",
                "m.04w06ks",
                "m.04tv46y",
                "m.04w043p",
                "m.04tv42q",
                "m.04w01db",
                "m.04tv421",
                "m.04vjzy8",
                "m.04tv3z2",
                "m.04vjy1z",
                "m.04vjzy0",
                "m.04vrb4x",
                "m.04tv41v",
                "m.04vj2kx",
                "m.04tv3_d",
                "m.04vj6vq",
                "m.04tv46h",
                "m.04v610t",
                "m.04v61cv",
                "m.04v62sy",
                "m.04v60yj",
                "m.04tv46q",
                "m.04w06jj",
                "m.04w041j",
                "m.04v61fj",
                "m.04vrb04",
                "m.04tv42h",
                "m.04vrb8l",
                "m.04tv3v8",
                "m.04vrb1c",
                "m.04v61gk",
                "m.04w01j7",
                "m.04vrb88",
                "m.04vrb9h",
                "m.04vjzz5",
                "m.04w06l9",
                "m.04vjy3z",
                "m.04vhf3b",
                "m.04v6136",
                "m.04vj_bg",
                "m.04vj5v9",
                "m.04vjy46",
                "m.04vrb5z",
                "m.04vrb6x",
                "m.04tv44r",
                "m.04vj2pr",
                "m.04tv40z",
                "m.04v62r4",
                "m.04vj2mg",
                "m.04v61cl",
                "m.04v62w4",
                "m.04vjy4g",
                "m.04tv401",
                "m.04w01hg",
                "m.04vj5zl",
                "m.04vrb24",
                "m.04v6103",
                "m.04w0426",
                "m.04vr9r1",
                "m.04vrb2y",
                "m.04vrb2p",
                "m.04vr9ns",
                "m.04vrb6n",
                "m.04w01dn",
                "m.04vjzxk",
                "m.04w01ck",
                "m.04v61c9",
                "m.04vjy27",
                "m.04vr9s3",
                "m.04w01h5",
                "m.04vk2rt",
                "m.04vhcrq",
                "m.04v61db",
                "m.04vfk9n",
                "m.04vr9yb",
                "m.04vrb0k",
                "m.04vj2nh",
                "m.04vrbbv",
                "m.04v62t5",
                "m.04v62vf",
                "m.04vj6w8",
                "m.04vrb0t",
                "m.04w041s",
                "m.04vrb96",
                "m.04w07gk",
                "m.04vrbd5",
                "m.04vjzzg",
                "m.04v619n",
                "m.04w01g5",
                "m.04v62tf",
                "m.04tv428",
                "m.04vrbcy",
                "m.04vjytq",
                "m.04vrbdp",
                "m.04tv3wx",
                "m.04vjzyy",
                "m.04v62sp",
                "m.04tv3w7",
                "m.04vrb4l",
                "m.04v62tp",
                "m.04tv3xs",
                "m.04w0412",
                "m.04vrbc2",
                "m.04vj5y9",
                "m.04vrb80",
                "m.04vrb9r",
                "m.04v60zb",
                "m.04tv3zj"
            ],
            [
                "m.06dgz9j",
                "m.06614rb",
                "m.0_ghgcw",
                "m.06_tw6s",
                "m.0_gh312",
                "m.04t31vr",
                "m.04t31w7",
                "m.0_ggzp5",
                "m.010r3lf1",
                "m.06s4dxs",
                "m.04t31th",
                "m.04t31y7",
                "m.010r4sgv",
                "m.0_gh4d6",
                "m.04t320_",
                "m.010r4f77",
                "m.04t31w_",
                "m.010r34qs",
                "m.04t31v_",
                "m.04t31z_",
                "m.0_ghcz6",
                "m.04t31z7",
                "m.04t3227",
                "m.02x87pj",
                "m.0462r95",
                "m.06bwxcn",
                "m.04t31zh",
                "m.04t3207",
                "m.0_ghfbg",
                "m.0462nj3",
                "m.027qfnk",
                "m.04t31v7",
                "m.04t31xh",
                "m.010r40l7",
                "m.04t320r",
                "m.010rnr_1",
                "m.0_gh3gq",
                "m.04t321r",
                "m.02q8085",
                "m.068f65l",
                "m.06jjd8t",
                "m.0_ghdw7",
                "m.04t322r",
                "m.0_ghdyx",
                "m.0_ghfx8",
                "m.02qqh0p",
                "m.04t31x_",
                "m.02x87s8",
                "m.0j3zd0c",
                "m.010r4070",
                "m.069832t",
                "m.010r8h92",
                "m.04t31_h",
                "m.0_ghgmr",
                "m.06qzzw7",
                "m.0_gh2zr",
                "m.04t322h",
                "m.04t31yr",
                "m.06qllnk",
                "m.0_gh1b9",
                "m.0_gh67y",
                "m.0_ghfvc",
                "m.010r506y",
                "m.02x880w",
                "m.06tlq0c",
                "m.0_gh9fh",
                "m.0_ghb47",
                "m.04t31yh",
                "m.04t322_",
                "m.04t31_r",
                "m.04t31xr",
                "g.122chq7m",
                "m.04t31x7",
                "m.06tprs4",
                "m.02x87t_",
                "m.0_gh69s",
                "m.04t31zr",
                "m.06dwl46",
                "m.04t31wh",
                "g.11b60fcs_w",
                "m.02vl7t6"
            ]
        ],
        "entity_linking": {
            "Laura Ingalls Wilder": "m.01bt87"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bt87')\na.add_fact('m.01bt87', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-448",
        "question": "what type of government system does italy have",
        "answer": [
            "m.01fpfn",
            "m.0c9rw5",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.0c9rw5",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-449",
        "question": "what did john irving wrote",
        "answer": [
            "m.06w3z7",
            "m.025926",
            "m.07p50s",
            "m.025zx",
            "m.05cnz2",
            "m.01l9hr",
            "m.06ffrnd",
            "m.06l1qtk",
            "m.07kclvh",
            "m.03p66w",
            "m.0jwyh6c",
            "m.0g9d_7",
            "m.02z1045",
            "m.06pfdf",
            "m.026rp1_",
            "m.0c3rf",
            "m.03g_q1"
        ],
        "different_answer": [
            [
                "m.06w3z7",
                "m.025926",
                "m.07p50s",
                "m.025zx",
                "m.05cnz2",
                "m.01l9hr",
                "m.06ffrnd",
                "m.06l1qtk",
                "m.07kclvh",
                "m.03p66w",
                "m.0jwyh6c",
                "m.0g9d_7",
                "m.02z1045",
                "m.06pfdf",
                "m.026rp1_",
                "m.0c3rf",
                "m.03g_q1"
            ]
        ],
        "entity_linking": {
            "John Irving": "m.042v2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042v2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042v2 ns:book.author.works_written ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.042v2')\na.add_fact('m.042v2', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-450",
        "question": "what is the national flower of hawaii",
        "answer": [
            "m.03dkj_"
        ],
        "different_answer": [
            [
                "m.03dkj_"
            ]
        ],
        "entity_linking": {
            "Hawaii": "m.03gh4",
            "State flower": "m.04627gn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gh4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gh4 ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627gn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04627gn')\na.add_filter('x0', '!=', 'm.03gh4')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.04627gn')\na.add_fact('m.03gh4', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-451",
        "question": "what did alice paul accomplish",
        "answer": [
            "m.02_77lg"
        ],
        "different_answer": [
            [
                "m.02_77lg"
            ]
        ],
        "entity_linking": {
            "Alice Stokes Paul": "m.02lp71"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lp71)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lp71 ns:common.topic.notable_types ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lp71')\na.add_fact('m.02lp71', 'common.topic.notable_types', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-453",
        "question": "what languages do they speak in costa rica",
        "answer": [
            "m.04ygk0",
            "m.02hwk2m",
            "m.06nm1",
            "m.06k02z"
        ],
        "different_answer": [
            [
                "m.04ygk0",
                "m.02hwk2m",
                "m.06nm1",
                "m.06k02z"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('m.01p8s', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-454",
        "question": "where did hank marvin come from",
        "answer": [
            "m.0j7ng"
        ],
        "different_answer": [
            [
                "m.0j7ng"
            ]
        ],
        "entity_linking": {
            "Hank Marvin": "m.01x2fx0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01x2fx0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01x2fx0 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01x2fx0')\na.add_fact('m.01x2fx0', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-455",
        "question": "when did chipper jones get drafted",
        "answer": [
            "m.04cwtph"
        ],
        "different_answer": [
            [
                "m.04cwtph"
            ]
        ],
        "entity_linking": {
            "Chipper Jones": "m.0crdkb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crdkb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crdkb ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0crdkb')\na.add_fact('m.0crdkb', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.draft', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-456",
        "question": "what part did winona ryder play in star trek",
        "answer": [
            "m.02thlt"
        ],
        "different_answer": [
            [
                "m.02thlt"
            ],
            [
                "m.02thlt"
            ]
        ],
        "entity_linking": {
            "Winona Ryder": "m.086sj",
            "Star Trek": "m.08phg9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.086sj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.086sj ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.08phg9 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08phg9')\na.add_filter('x0', '!=', 'm.086sj')\na.add_fact('x1', 'film.performance.film', 'm.08phg9')\na.add_fact('m.086sj', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-459",
        "question": "where did jovan belcher kill himself",
        "answer": [
            "m.04f_d"
        ],
        "different_answer": [
            [
                "m.04f_d"
            ]
        ],
        "entity_linking": {
            "Jovan Belcher": "m.055d_1d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.055d_1d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.055d_1d ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.055d_1d')\na.add_fact('m.055d_1d', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-461",
        "question": "where did clay matthews go to school",
        "answer": [
            "m.06w97y",
            "m.065y4w7"
        ],
        "different_answer": [
            [
                "m.06w97y",
                "m.065y4w7"
            ]
        ],
        "entity_linking": {
            "Clay Matthews III": "m.04zy7pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04zy7pw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04zy7pw ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04zy7pw')\na.add_fact('m.04zy7pw', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-462",
        "question": "what time is it in texas houston right now",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Houston": "m.03l2n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03l2n')\na.add_fact('m.03l2n', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-463",
        "question": "who is princess leia in star wars",
        "answer": [
            "m.01tnbn"
        ],
        "different_answer": [
            [
                "m.01tnbn"
            ]
        ],
        "entity_linking": {
            "Leia Organa": "m.0ddqw",
            "Star Wars": "m.0dtfn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddqw ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0dtfn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dtfn')\na.add_filter('x0', '!=', 'm.0ddqw')\na.add_fact('x1', 'film.performance.film', 'm.0dtfn')\na.add_fact('m.0ddqw', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-464",
        "question": "what is the political structure of china",
        "answer": [
            "m.01fkst",
            "m.025tbxf",
            "m.0py4y"
        ],
        "different_answer": [
            [
                "m.01fkst",
                "m.025tbxf",
                "m.0py4y"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-465",
        "question": "what is new york city airport",
        "answer": [
            "m.01kyln",
            "m.0p1l2",
            "m.01l5hm"
        ],
        "different_answer": [
            [
                "m.01kyln",
                "m.0p1l2",
                "m.01l5hm"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286",
            "Air travel": "m.025t3bg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:m.025t3bg .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025t3bg')\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('x1', 'travel.transportation.mode_of_transportation', 'm.025t3bg')\na.add_fact('m.02_286', 'travel.travel_destination.how_to_get_here', 'x1')\na.add_fact('x1', 'travel.transportation.transport_terminus', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-466",
        "question": "what language brazil speak",
        "answer": [
            "m.05zjd",
            "m.02bjrlw",
            "m.02zj58"
        ],
        "different_answer": [
            [
                "m.05zjd",
                "m.02bjrlw",
                "m.02zj58"
            ],
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-467",
        "question": "who played obi wan in episode 2",
        "answer": [
            "m.0k269"
        ],
        "different_answer": [
            [
                "m.0k269"
            ]
        ],
        "entity_linking": {
            "Obi-Wan Kenobi": "m.0fkm7",
            "Star Wars Episode II: Attack of the Clones": "m.0dfw0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fkm7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fkm7 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0dfw0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dfw0')\na.add_filter('x0', '!=', 'm.0fkm7')\na.add_fact('x1', 'film.performance.film', 'm.0dfw0')\na.add_fact('m.0fkm7', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-468",
        "question": "where did venus williams come from",
        "answer": [
            "m.0r0ls"
        ],
        "different_answer": [
            [
                "m.0r0ls"
            ]
        ],
        "entity_linking": {
            "Venus Williams": "m.016cff"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016cff)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016cff ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016cff')\na.add_fact('m.016cff', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-469",
        "question": "what currency is used in panama",
        "answer": [
            "m.09nqf",
            "m.0200cp"
        ],
        "different_answer": [
            [
                "m.09nqf",
                "m.0200cp"
            ]
        ],
        "entity_linking": {
            "Panama": "m.05qx1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qx1 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qx1')\na.add_fact('m.05qx1', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-470",
        "question": "where does the zambezi river originate",
        "answer": [
            "m.07cdmr"
        ],
        "different_answer": [
            [
                "m.07cdmr"
            ]
        ],
        "entity_linking": {
            "Zambezi": "m.0p_70"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p_70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p_70 ns:geography.river.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0p_70')\na.add_fact('m.0p_70', 'geography.river.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-472",
        "question": "what team did ronaldo play for in 2003",
        "answer": [
            "m.01352_",
            "m.06l22"
        ],
        "different_answer": [
            [
                "m.01352_",
                "m.06l22"
            ]
        ],
        "entity_linking": {
            "Ronaldo": "m.0hhqw",
            "2003-12-31": "\"2003-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2003-01-01": "\"2003-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hhqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hhqw ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2003-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2003-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hhqw')\na.add_fact('m.0hhqw', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2003-12-31\"^^xsd:dateTime', '\"2003-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-473",
        "question": "where does robin williams live 2011",
        "answer": [
            "m.0d6lp",
            "m.0vg8x"
        ],
        "different_answer": [
            [
                "m.0d6lp",
                "m.0vg8x"
            ]
        ],
        "entity_linking": {
            "Robin Williams": "m.0dzf_",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dzf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dzf_ ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2011-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2011-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dzf_')\na.add_fact('m.0dzf_', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-474",
        "question": "who played jacob black in twilight",
        "answer": [
            "m.07ldhs"
        ],
        "different_answer": [
            [
                "m.07ldhs"
            ],
            [
                "m.07ldhs"
            ]
        ],
        "entity_linking": {
            "Twilight": "m.03nm_fh",
            "Jacob Black": "m.02qd_td"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03nm_fh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03nm_fh ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.02qd_td .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02qd_td')\na.add_fact('m.02qd_td', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-475",
        "question": "when was president john adams elected",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "John Adams": "m.03_js"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?dt\nWHERE {\n  ?e ns:government.election.winner  ns:m.03_js ; # John Adams\n     ns:government.election.office  ns:m.060d2 ; # President of the United States\n     ns:government.election.election_year ?dt  .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-477",
        "question": "which airport to fly into in buenos aires",
        "answer": [
            "m.01ky3d",
            "m.01_t37",
            "m.04fmtt8"
        ],
        "different_answer": [
            [
                "m.01ky3d",
                "m.01_t37",
                "m.04fmtt8"
            ]
        ],
        "entity_linking": {
            "Buenos Aires": "m.01ly5m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ly5m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ly5m ns:location.location.nearby_airports ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ly5m')\na.add_fact('m.01ly5m', 'location.location.nearby_airports', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-479",
        "question": "what team did adrian peterson play for in college",
        "answer": [
            "m.01vs5c"
        ],
        "different_answer": [
            [
                "m.01vs5c"
            ]
        ],
        "entity_linking": {
            "Adrian Peterson": "m.095xk6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.095xk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.095xk6 ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.school ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.095xk6')\na.add_fact('m.095xk6', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.school', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-480",
        "question": "where does name pennsylvania come from",
        "answer": [
            "m.03br25"
        ],
        "different_answer": [
            [
                "m.03br25"
            ]
        ],
        "entity_linking": {
            "Pennsylvania": "m.05tbn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05tbn')\na.add_fact('m.05tbn', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-481",
        "question": "what kind of money do they use in germany",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-482",
        "question": "who plays blaine in batman",
        "answer": [
            "m.0115x7ps",
            "m.05xf75",
            "m.01xllf",
            "m.02hblj"
        ],
        "different_answer": [
            [
                "m.0115x7ps",
                "m.05xf75",
                "m.01xllf",
                "m.02hblj"
            ]
        ],
        "entity_linking": {
            "Batman": "m.01hp5"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\t{ \n\tns:m.0321b4 ns:film.film_character.portrayed_in_films ?y .\n\t?y ns:film.performance.actor ?x .\n\t}\n\tUNION\n\t{\n\tns:m.0321b4 ns:tv.tv_character.appeared_in_tv_program ?y .\n\t?y ns:tv.regular_tv_appearance.actor ?x .\n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-484",
        "question": "what language does australia use",
        "answer": [
            "m.04gd7",
            "m.02jcw",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.04gd7",
                "m.02jcw",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-487",
        "question": "who did veronica lake mary",
        "answer": [
            "m.0h2qr4q",
            "m.0h2qr53",
            "m.02w1_m0",
            "m.07cszd"
        ],
        "different_answer": [
            [
                "m.0h2qr4q",
                "m.0h2qr53",
                "m.02w1_m0",
                "m.07cszd"
            ]
        ],
        "entity_linking": {
            "Veronica Lake": "m.01xm6k",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xm6k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xm6k ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01xm6k')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01xm6k', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-488",
        "question": "who did sir francis drake marry",
        "answer": [
            "m.0k1nmzm",
            "m.0k1nmz5"
        ],
        "different_answer": [
            [
                "m.0k1nmzm",
                "m.0k1nmz5"
            ]
        ],
        "entity_linking": {
            "Francis Drake": "m.031t2",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.031t2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.031t2 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.031t2')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.031t2', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-489",
        "question": "who plays stephanie plum in one for the money",
        "answer": [
            "m.025b5y"
        ],
        "different_answer": [
            [
                "m.025b5y"
            ]
        ],
        "entity_linking": {
            "One for the Money": "m.0g5sxb4",
            "Stephanie Plum": "m.098by5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g5sxb4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g5sxb4 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.098by5 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.098by5')\na.add_filter('x0', '!=', 'm.0g5sxb4')\na.add_fact('x1', 'film.performance.character', 'm.098by5')\na.add_fact('m.0g5sxb4', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-490",
        "question": "what did the ancient romans speak",
        "answer": [
            "m.04h9h"
        ],
        "different_answer": [
            [
                "m.04h9h"
            ]
        ],
        "entity_linking": {
            "Roman Empire": "m.06cmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06cmp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06cmp ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06cmp')\na.add_fact('m.06cmp', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-491",
        "question": "what does ringo sing",
        "answer": [
            "m.0r1y_c",
            "m.0f530yp",
            "g.11bbmn1n5m",
            "m.0g0h5b5",
            "m.01dxrft",
            "m.0dmms6h",
            "m.0nn1bg9",
            "m.0ft6j0m",
            "m.0132m7y0",
            "m.0x5rx_",
            "m.0112sxp5",
            "m.0dxsw0g",
            "m.0f4p_99",
            "m.01dybt2",
            "m.0qczdv",
            "m.0ml539",
            "m.0112tvbr",
            "m.0qczf8",
            "m.0myfsn",
            "m.0myfsw",
            "m.0g5wlrn",
            "m.0wkxfr",
            "m.0r1yyv",
            "m.013351gq",
            "m.0dw1lvy",
            "m.0_wmdb_",
            "m.0f78vlm",
            "m.0pk828",
            "m.01dybs6",
            "m.0f2ytss",
            "m.0d_6zdd",
            "m.0f4p_g8",
            "m.01b1rhq",
            "m.0g30rx8",
            "m.0x5rx3",
            "m.0101gw3",
            "m.0fr2c4g",
            "m.0fs8v2t",
            "m.0pmz8q",
            "m.0dvdcmd",
            "m.0dw1lwm",
            "m.024rzts",
            "m.01dw88f",
            "m.0101gvx",
            "m.0143s5s",
            "m.019r3rm",
            "m.0g30rws",
            "m.0f3nyn7",
            "m.01dxrg7",
            "m.01b1rhh",
            "m.0145flf",
            "m.0fcb2ym",
            "m.0f9s0t_",
            "m.0fxy809",
            "m.0f4p_h0",
            "m.0wlw31",
            "m.0dmms78",
            "m.0wlw2m",
            "m.0r1z00",
            "m.0qczd5",
            "m.0wlw38",
            "m.0f4p_f9",
            "m.01dxrzn",
            "m.0g27sms",
            "m.0qczg4",
            "m.0r1yz1",
            "m.0fzfc5d",
            "m.0f1mkry",
            "m.019r3sy",
            "m.01dxrg0",
            "m.0f3vtyk",
            "g.1q5z8k909",
            "m.0dwq3vq",
            "g.1q5z21ld4",
            "m.0g14twl",
            "m.0111yt9p",
            "m.0dmbj21",
            "m.0143s5k",
            "m.01dxrfc",
            "m.0_wmrfq",
            "m.0pk82h",
            "m.0dmms5q",
            "m.01dxrd8",
            "m.0143s3c",
            "m.0132v5tl",
            "m.0dw1lw0",
            "m.0rk5bth",
            "m.0r1z0p",
            "m.024rzw5",
            "m.0pmz8y",
            "m.0r1y_l",
            "m.0g71j7g",
            "m.01dxrys",
            "m.0f1zbgb",
            "m.0dmbxws",
            "g.11bbmy7jd6",
            "m.0nllmtb",
            "m.0myftz",
            "m.0ftr4m5",
            "m.0111x56w",
            "g.11bbmlrj06",
            "m.0dw1lwc",
            "m.0flq2td",
            "m.0g293rw",
            "g.1q5z2fgy9",
            "m.0wlw3q",
            "m.0qczcr",
            "m.0fr7n5k",
            "g.11bbmtyx3h",
            "m.01dybrs",
            "m.0ft_dv0",
            "m.0143s34",
            "m.0g6l9x0",
            "m.0r1z0g",
            "m.0dsxjx1",
            "m.0dxk7wy",
            "m.0pk80z",
            "m.0112s55j",
            "g.1q5yzl5k6",
            "m.0pk821",
            "g.11bbmkdp7f",
            "m.0dyjx0j",
            "m.0nn6jry",
            "m.0f8clr_",
            "m.0wlw19",
            "m.0f2zl2_",
            "m.0fvtn8c",
            "m.0qczfy",
            "m.0d_zwcz",
            "m.0143s2y",
            "m.0nnhrkx",
            "m.01b1rgd",
            "m.0dm8vqn",
            "m.0r1yzy",
            "m.0myfw1",
            "m.0145fmj",
            "m.0111r2pw",
            "m.0145fk_",
            "m.0_wwlk7",
            "m.0pmz9l",
            "m.014kl2l",
            "m.0fw4n1t",
            "m.0143s47",
            "m.0r1yz8",
            "m.0wkxgm",
            "m.0wlw2d",
            "m.0145fn5",
            "m.0g8tc_r",
            "m.0133czh3",
            "m.0145flw",
            "m.019r3qz",
            "m.0_jzhc7",
            "m.01b1rjc",
            "m.0145fm2",
            "m.0fd6x9d",
            "m.0133f11b",
            "m.0f4g4cg",
            "m.01b1rj4",
            "m.0f3vv1z",
            "m.0pmz9t",
            "m.0fwpd39",
            "m.0qczfh",
            "m.0wkxdn",
            "m.0dmrx1g",
            "m.0vgy80",
            "m.01dxrzw",
            "m.024rzwr",
            "m.0dwzfv5",
            "m.0f_bjy1",
            "m.0dzqk44",
            "m.019r3r5",
            "m.0143s40",
            "m.0143s4p",
            "m.0g2hjh7",
            "m.0143s2q",
            "m.0fb52lk",
            "m.0g8vxb3",
            "m.0r1y_t",
            "m.0myfw8",
            "m.024rzth",
            "m.01dxr_2",
            "m.0wlw3h",
            "m.0pmz88",
            "m.0145fm9",
            "m.0qczf1",
            "m.0wkxh1",
            "m.0qn5cv",
            "m.0132dgc4",
            "m.0wkxgv",
            "m.024rzwg",
            "m.0r1yzq",
            "m.0111m6fm",
            "m.0f2mf25",
            "m.0g6ypcp",
            "m.0f6h0p5",
            "m.019r3sh",
            "m.01b1rh8",
            "m.0g71j6m",
            "m.0ft3r8f",
            "m.0myft2",
            "m.0wkxfj",
            "g.1q5zm23ky",
            "m.01dxry_",
            "m.0f_bjxs",
            "m.0x5rwx",
            "m.0nnpxjz",
            "m.0132nmn2",
            "m.0132_h5w",
            "m.0111y6jr",
            "m.0qyg3_",
            "m.0fs8v2c",
            "m.0112qdyb",
            "g.11bbmmlzcn",
            "m.0f3qsnv",
            "m.0dqrt_f",
            "m.0dtyfsr",
            "m.0_wmkl3",
            "m.0dmms6m",
            "m.01dxrfl",
            "m.0dnjv9p",
            "m.01dxrgg",
            "m.0f1hnck",
            "m.0_rj_9_",
            "m.01b1rgm",
            "m.0flq2v3",
            "m.0g71j70",
            "m.01dxr_9",
            "m.0_j_hv5",
            "m.0f8s72l",
            "m.0sgt8l",
            "m.0x5r_d",
            "m.0qczdd",
            "m.0dwc4tj",
            "g.11bbmr_d15",
            "m.0ff6l2z",
            "m.0dr511n",
            "m.0d_500q",
            "m.0wlw25",
            "m.0f6yb5t",
            "m.0145fl6",
            "m.0dybyf0",
            "m.0nm6dty",
            "m.024rzvx",
            "g.1q5z8j358",
            "m.01dybrk",
            "m.0wlw1z",
            "m.0dx2tpm",
            "m.024rzx0",
            "m.0fyzy8b",
            "m.0dyc13q",
            "m.0pmz8h",
            "m.0nmr0ss",
            "m.0g71j6j",
            "g.1q5zb98nd",
            "m.0rfkpv_",
            "m.0fd6x6f",
            "m.01dxrdh",
            "m.01dxrz6",
            "g.1q5ywz6vp",
            "m.0wlw3y",
            "m.01dxr_j",
            "m.0rgv4fl",
            "m.01dxryk",
            "m.0g92jgn",
            "m.0pk83c",
            "m.0fcb31j",
            "m.0qczcz",
            "m.0fhszg7",
            "m.0g71j7r",
            "m.0fd6x5l",
            "m.0g1hptg",
            "m.0g71j6b",
            "m.024rzvm",
            "m.0nn2vr8",
            "m.01b1rjl",
            "m.0123zxd",
            "m.0myfv5",
            "m.0r1y_4",
            "m.01dxrzf",
            "m.0f7p0gh",
            "m.01dxrcv",
            "g.1q5yxv4yc",
            "m.0111t7h2",
            "m.0f3dzjd",
            "m.01127hxx",
            "m.0qczdm",
            "m.01dxrd1",
            "m.019r3qr",
            "m.0dzkk34",
            "m.0pk82q",
            "m.01b1rh1",
            "m.0wkxfz",
            "m.0dpzghq",
            "m.0f4p_dg",
            "m.0ftgb87",
            "m.0f3vtvx",
            "m.0dmms67",
            "m.0myftr",
            "m.019r3s1",
            "m.0143s3t",
            "m.0133vkdy",
            "m.0143s2h",
            "m.0dvcb5t",
            "m.0145fmr",
            "m.0f_bjxj",
            "m.0_wnv9f",
            "m.0f4p_8f",
            "m.0133gr58",
            "m.0f7p18d",
            "m.0wkxgd",
            "m.0dw45_5",
            "m.0dpfj6g",
            "m.0_wkys2",
            "m.0myfvd",
            "m.01dxrdq",
            "m.0ftf64m",
            "m.0nfjqx",
            "m.0143s3l",
            "m.01dybvm",
            "m.0qczfq",
            "m.0dq84rf",
            "g.11bbmk7fg7",
            "m.019r3sq",
            "m.0f4p_bk",
            "m.0g0whrg",
            "m.0132lj41",
            "m.0dz4rxj",
            "m.0f2_whq",
            "m.01b1rgv",
            "m.0f31gw8",
            "m.01dxrdy",
            "m.0dpfv2g",
            "m.0mf7_r",
            "g.1q5yxtcfs",
            "g.1q5y_fbf4",
            "m.0dnlvzl",
            "m.01dxrf4",
            "m.0wkxf2",
            "m.0myfvv",
            "m.0104lsv",
            "m.0myfvm",
            "m.0nl0h9h",
            "m.0145fln",
            "m.0fxm25t",
            "m.0g2_zgc",
            "m.0myfsf",
            "m.0fr0jxs",
            "m.0ftpz01",
            "m.0nlbg81",
            "m.01dybr_",
            "m.024rzvb",
            "m.0ds3p0_",
            "m.0myft9",
            "m.014kl05",
            "m.0yg09l",
            "m.0fdscg7",
            "m.0143s53",
            "m.0wkxdw",
            "m.0111_nq7",
            "m.0f4p_cj",
            "m.0r1yzh",
            "m.0dw1lwg",
            "m.0dw1lwx",
            "m.01b1rhy",
            "m.0dw1lwt",
            "m.0dw1lw5",
            "g.11bbmycs15",
            "m.0wkxbp",
            "m.01dybvd",
            "m.0dt52vt",
            "m.0dmms6t",
            "m.0dw1lw_",
            "m.0nm22r3",
            "m.0f3trq9",
            "m.0dz3xj7",
            "m.0f1tc8v",
            "m.0dnkslx",
            "m.0145fmz",
            "m.019r3s8",
            "m.0104lt1",
            "m.019r3rv",
            "m.0f3vtwk",
            "m.0_wtrvv",
            "m.0wlw1r",
            "m.0dqb_sl",
            "m.0x5r_5",
            "m.0qczcj",
            "m.0f0r9yh",
            "m.0wlw1j",
            "m.0dycc14",
            "m.0dwpzsh",
            "m.0wkxf9",
            "m.0wlw2v",
            "m.0dw1lwq",
            "m.01f02qw",
            "m.0g0h62d",
            "m.0pmzb0",
            "m.0143s5b",
            "m.0dmms87",
            "m.0myftj",
            "g.1q5z7w29k",
            "m.0143s4x",
            "m.0124sjh",
            "m.0r1z07",
            "m.0pmzb7",
            "m.0pk81d",
            "m.0dphv93",
            "m.0fr7cmn",
            "m.024rzv1",
            "m.0145fnd",
            "m.019r3rd",
            "m.0_rv713",
            "m.0ybckyv",
            "m.0g71j7n",
            "m.0f55xsf",
            "m.015qsz6"
        ],
        "different_answer": [
            [
                "m.0r1y_c",
                "m.0f530yp",
                "g.11bbmn1n5m",
                "m.0g0h5b5",
                "m.01dxrft",
                "m.0dmms6h",
                "m.0nn1bg9",
                "m.0ft6j0m",
                "m.0132m7y0",
                "m.0x5rx_",
                "m.0112sxp5",
                "m.0dxsw0g",
                "m.0f4p_99",
                "m.01dybt2",
                "m.0qczdv",
                "m.0ml539",
                "m.0112tvbr",
                "m.0qczf8",
                "m.0myfsn",
                "m.0myfsw",
                "m.0g5wlrn",
                "m.0wkxfr",
                "m.0r1yyv",
                "m.013351gq",
                "m.0dw1lvy",
                "m.0_wmdb_",
                "m.0f78vlm",
                "m.0pk828",
                "m.01dybs6",
                "m.0f2ytss",
                "m.0d_6zdd",
                "m.0f4p_g8",
                "m.01b1rhq",
                "m.0g30rx8",
                "m.0x5rx3",
                "m.0101gw3",
                "m.0fr2c4g",
                "m.0fs8v2t",
                "m.0pmz8q",
                "m.0dvdcmd",
                "m.0dw1lwm",
                "m.024rzts",
                "m.01dw88f",
                "m.0101gvx",
                "m.0143s5s",
                "m.019r3rm",
                "m.0g30rws",
                "m.0f3nyn7",
                "m.01dxrg7",
                "m.01b1rhh",
                "m.0145flf",
                "m.0fcb2ym",
                "m.0f9s0t_",
                "m.0fxy809",
                "m.0f4p_h0",
                "m.0wlw31",
                "m.0dmms78",
                "m.0wlw2m",
                "m.0r1z00",
                "m.0qczd5",
                "m.0wlw38",
                "m.0f4p_f9",
                "m.01dxrzn",
                "m.0g27sms",
                "m.0qczg4",
                "m.0r1yz1",
                "m.0fzfc5d",
                "m.0f1mkry",
                "m.019r3sy",
                "m.01dxrg0",
                "m.0f3vtyk",
                "g.1q5z8k909",
                "m.0dwq3vq",
                "g.1q5z21ld4",
                "m.0g14twl",
                "m.0111yt9p",
                "m.0dmbj21",
                "m.0143s5k",
                "m.01dxrfc",
                "m.0_wmrfq",
                "m.0pk82h",
                "m.0dmms5q",
                "m.01dxrd8",
                "m.0143s3c",
                "m.0132v5tl",
                "m.0dw1lw0",
                "m.0rk5bth",
                "m.0r1z0p",
                "m.024rzw5",
                "m.0pmz8y",
                "m.0r1y_l",
                "m.0g71j7g",
                "m.01dxrys",
                "m.0f1zbgb",
                "m.0dmbxws",
                "g.11bbmy7jd6",
                "m.0nllmtb",
                "m.0myftz",
                "m.0ftr4m5",
                "m.0111x56w",
                "g.11bbmlrj06",
                "m.0dw1lwc",
                "m.0flq2td",
                "m.0g293rw",
                "g.1q5z2fgy9",
                "m.0wlw3q",
                "m.0qczcr",
                "m.0fr7n5k",
                "g.11bbmtyx3h",
                "m.01dybrs",
                "m.0ft_dv0",
                "m.0143s34",
                "m.0g6l9x0",
                "m.0r1z0g",
                "m.0dsxjx1",
                "m.0dxk7wy",
                "m.0pk80z",
                "m.0112s55j",
                "g.1q5yzl5k6",
                "m.0pk821",
                "g.11bbmkdp7f",
                "m.0dyjx0j",
                "m.0nn6jry",
                "m.0f8clr_",
                "m.0wlw19",
                "m.0f2zl2_",
                "m.0fvtn8c",
                "m.0qczfy",
                "m.0d_zwcz",
                "m.0143s2y",
                "m.0nnhrkx",
                "m.01b1rgd",
                "m.0dm8vqn",
                "m.0r1yzy",
                "m.0myfw1",
                "m.0145fmj",
                "m.0111r2pw",
                "m.0145fk_",
                "m.0_wwlk7",
                "m.0pmz9l",
                "m.014kl2l",
                "m.0fw4n1t",
                "m.0143s47",
                "m.0r1yz8",
                "m.0wkxgm",
                "m.0wlw2d",
                "m.0145fn5",
                "m.0g8tc_r",
                "m.0133czh3",
                "m.0145flw",
                "m.019r3qz",
                "m.0_jzhc7",
                "m.01b1rjc",
                "m.0145fm2",
                "m.0fd6x9d",
                "m.0133f11b",
                "m.0f4g4cg",
                "m.01b1rj4",
                "m.0f3vv1z",
                "m.0pmz9t",
                "m.0fwpd39",
                "m.0qczfh",
                "m.0wkxdn",
                "m.0dmrx1g",
                "m.0vgy80",
                "m.01dxrzw",
                "m.024rzwr",
                "m.0dwzfv5",
                "m.0f_bjy1",
                "m.0dzqk44",
                "m.019r3r5",
                "m.0143s40",
                "m.0143s4p",
                "m.0g2hjh7",
                "m.0143s2q",
                "m.0fb52lk",
                "m.0g8vxb3",
                "m.0r1y_t",
                "m.0myfw8",
                "m.024rzth",
                "m.01dxr_2",
                "m.0wlw3h",
                "m.0pmz88",
                "m.0145fm9",
                "m.0qczf1",
                "m.0wkxh1",
                "m.0qn5cv",
                "m.0132dgc4",
                "m.0wkxgv",
                "m.024rzwg",
                "m.0r1yzq",
                "m.0111m6fm",
                "m.0f2mf25",
                "m.0g6ypcp",
                "m.0f6h0p5",
                "m.019r3sh",
                "m.01b1rh8",
                "m.0g71j6m",
                "m.0ft3r8f",
                "m.0myft2",
                "m.0wkxfj",
                "g.1q5zm23ky",
                "m.01dxry_",
                "m.0f_bjxs",
                "m.0x5rwx",
                "m.0nnpxjz",
                "m.0132nmn2",
                "m.0132_h5w",
                "m.0111y6jr",
                "m.0qyg3_",
                "m.0fs8v2c",
                "m.0112qdyb",
                "g.11bbmmlzcn",
                "m.0f3qsnv",
                "m.0dqrt_f",
                "m.0dtyfsr",
                "m.0_wmkl3",
                "m.0dmms6m",
                "m.01dxrfl",
                "m.0dnjv9p",
                "m.01dxrgg",
                "m.0f1hnck",
                "m.0_rj_9_",
                "m.01b1rgm",
                "m.0flq2v3",
                "m.0g71j70",
                "m.01dxr_9",
                "m.0_j_hv5",
                "m.0f8s72l",
                "m.0sgt8l",
                "m.0x5r_d",
                "m.0qczdd",
                "m.0dwc4tj",
                "g.11bbmr_d15",
                "m.0ff6l2z",
                "m.0dr511n",
                "m.0d_500q",
                "m.0wlw25",
                "m.0f6yb5t",
                "m.0145fl6",
                "m.0dybyf0",
                "m.0nm6dty",
                "m.024rzvx",
                "g.1q5z8j358",
                "m.01dybrk",
                "m.0wlw1z",
                "m.0dx2tpm",
                "m.024rzx0",
                "m.0fyzy8b",
                "m.0dyc13q",
                "m.0pmz8h",
                "m.0nmr0ss",
                "m.0g71j6j",
                "g.1q5zb98nd",
                "m.0rfkpv_",
                "m.0fd6x6f",
                "m.01dxrdh",
                "m.01dxrz6",
                "g.1q5ywz6vp",
                "m.0wlw3y",
                "m.01dxr_j",
                "m.0rgv4fl",
                "m.01dxryk",
                "m.0g92jgn",
                "m.0pk83c",
                "m.0fcb31j",
                "m.0qczcz",
                "m.0fhszg7",
                "m.0g71j7r",
                "m.0fd6x5l",
                "m.0g1hptg",
                "m.0g71j6b",
                "m.024rzvm",
                "m.0nn2vr8",
                "m.01b1rjl",
                "m.0123zxd",
                "m.0myfv5",
                "m.0r1y_4",
                "m.01dxrzf",
                "m.0f7p0gh",
                "m.01dxrcv",
                "g.1q5yxv4yc",
                "m.0111t7h2",
                "m.0f3dzjd",
                "m.01127hxx",
                "m.0qczdm",
                "m.01dxrd1",
                "m.019r3qr",
                "m.0dzkk34",
                "m.0pk82q",
                "m.01b1rh1",
                "m.0wkxfz",
                "m.0dpzghq",
                "m.0f4p_dg",
                "m.0ftgb87",
                "m.0f3vtvx",
                "m.0dmms67",
                "m.0myftr",
                "m.019r3s1",
                "m.0143s3t",
                "m.0133vkdy",
                "m.0143s2h",
                "m.0dvcb5t",
                "m.0145fmr",
                "m.0f_bjxj",
                "m.0_wnv9f",
                "m.0f4p_8f",
                "m.0133gr58",
                "m.0f7p18d",
                "m.0wkxgd",
                "m.0dw45_5",
                "m.0dpfj6g",
                "m.0_wkys2",
                "m.0myfvd",
                "m.01dxrdq",
                "m.0ftf64m",
                "m.0nfjqx",
                "m.0143s3l",
                "m.01dybvm",
                "m.0qczfq",
                "m.0dq84rf",
                "g.11bbmk7fg7",
                "m.019r3sq",
                "m.0f4p_bk",
                "m.0g0whrg",
                "m.0132lj41",
                "m.0dz4rxj",
                "m.0f2_whq",
                "m.01b1rgv",
                "m.0f31gw8",
                "m.01dxrdy",
                "m.0dpfv2g",
                "m.0mf7_r",
                "g.1q5yxtcfs",
                "g.1q5y_fbf4",
                "m.0dnlvzl",
                "m.01dxrf4",
                "m.0wkxf2",
                "m.0myfvv",
                "m.0104lsv",
                "m.0myfvm",
                "m.0nl0h9h",
                "m.0145fln",
                "m.0fxm25t",
                "m.0g2_zgc",
                "m.0myfsf",
                "m.0fr0jxs",
                "m.0ftpz01",
                "m.0nlbg81",
                "m.01dybr_",
                "m.024rzvb",
                "m.0ds3p0_",
                "m.0myft9",
                "m.014kl05",
                "m.0yg09l",
                "m.0fdscg7",
                "m.0143s53",
                "m.0wkxdw",
                "m.0111_nq7",
                "m.0f4p_cj",
                "m.0r1yzh",
                "m.0dw1lwg",
                "m.0dw1lwx",
                "m.01b1rhy",
                "m.0dw1lwt",
                "m.0dw1lw5",
                "g.11bbmycs15",
                "m.0wkxbp",
                "m.01dybvd",
                "m.0dt52vt",
                "m.0dmms6t",
                "m.0dw1lw_",
                "m.0nm22r3",
                "m.0f3trq9",
                "m.0dz3xj7",
                "m.0f1tc8v",
                "m.0dnkslx",
                "m.0145fmz",
                "m.019r3s8",
                "m.0104lt1",
                "m.019r3rv",
                "m.0f3vtwk",
                "m.0_wtrvv",
                "m.0wlw1r",
                "m.0dqb_sl",
                "m.0x5r_5",
                "m.0qczcj",
                "m.0f0r9yh",
                "m.0wlw1j",
                "m.0dycc14",
                "m.0dwpzsh",
                "m.0wkxf9",
                "m.0wlw2v",
                "m.0dw1lwq",
                "m.01f02qw",
                "m.0g0h62d",
                "m.0pmzb0",
                "m.0143s5b",
                "m.0dmms87",
                "m.0myftj",
                "g.1q5z7w29k",
                "m.0143s4x",
                "m.0124sjh",
                "m.0r1z07",
                "m.0pmzb7",
                "m.0pk81d",
                "m.0dphv93",
                "m.0fr7cmn",
                "m.024rzv1",
                "m.0145fnd",
                "m.019r3rd",
                "m.0_rv713",
                "m.0ybckyv",
                "m.0g71j7n",
                "m.0f55xsf",
                "m.015qsz6"
            ]
        ],
        "entity_linking": {
            "Ringo Starr": "m.01vrnsk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vrnsk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vrnsk ns:music.artist.track ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vrnsk')\na.add_fact('m.01vrnsk', 'music.artist.track', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-492",
        "question": "where was st. lucy born",
        "answer": [
            "m.071bn"
        ],
        "different_answer": [
            [
                "m.071bn"
            ],
            [
                "m.071bn"
            ]
        ],
        "entity_linking": {
            "Saint Lucy": "m.01r0zd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r0zd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r0zd ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r0zd')\na.add_fact('m.01r0zd', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-493",
        "question": "what type of government does australia have",
        "answer": [
            "m.01q20",
            "m.018wl5",
            "m.0g3y9q"
        ],
        "different_answer": [
            [
                "m.01q20",
                "m.018wl5",
                "m.0g3y9q"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-497",
        "question": "who was the father of king george vi",
        "answer": [
            "m.0cmpn"
        ],
        "different_answer": [
            [
                "m.0cmpn"
            ]
        ],
        "entity_linking": {
            "George VI": "m.0cm83",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm83)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm83 ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0cm83')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.0cm83', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-500",
        "question": "what is the zip code for trenton",
        "answer": [
            "m.07nrtqm",
            "m.07nrtnf",
            "m.0206njw",
            "m.07nrtn6",
            "m.07nrtpz",
            "m.02075s5",
            "m.0206nlg",
            "m.07nrtpr",
            "m.02075z3",
            "m.07nrtpj",
            "m.07nrtnw",
            "m.07nrtnn",
            "m.0206qgw",
            "m.03dtqmy",
            "m.0206qr2",
            "m.03dtqnj",
            "m.03dtqlk",
            "m.0206qlh",
            "m.0206qfx",
            "m.07nrtp2",
            "m.0206qq6",
            "m.02075l8",
            "m.0206ng_",
            "m.07nrtq5",
            "m.07nrtp9",
            "m.07nrtqd",
            "m.07nrtm_"
        ],
        "different_answer": [
            [
                "m.07nrtqm",
                "m.07nrtnf",
                "m.0206njw",
                "m.07nrtn6",
                "m.07nrtpz",
                "m.02075s5",
                "m.0206nlg",
                "m.07nrtpr",
                "m.02075z3",
                "m.07nrtpj",
                "m.07nrtnw",
                "m.07nrtnn",
                "m.0206qgw",
                "m.03dtqmy",
                "m.0206qr2",
                "m.03dtqnj",
                "m.03dtqlk",
                "m.0206qlh",
                "m.0206qfx",
                "m.07nrtp2",
                "m.0206qq6",
                "m.02075l8",
                "m.0206ng_",
                "m.07nrtq5",
                "m.07nrtp9",
                "m.07nrtqd",
                "m.07nrtm_"
            ]
        ],
        "entity_linking": {
            "Trenton": "m.0fvxz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fvxz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fvxz ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fvxz')\na.add_fact('m.0fvxz', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-501",
        "question": "what has ashley greene been in",
        "answer": [
            "m.0bs3vgr",
            "m.075wx89",
            "m.011l6lm6",
            "m.09v4v1k",
            "m.012d_3c_",
            "m.0cmddrx",
            "m.064mdnk",
            "m.0vmy7yj",
            "m.03bzfwy",
            "m.013f7hgr",
            "m.0v998k8",
            "m.04jlsj4",
            "m.05kdryb",
            "m.075wx7_",
            "m.03d0sxq",
            "m.0j4573m",
            "m.03nm_fh",
            "m.0gbwht4",
            "m.0vmy745",
            "m.0djz0rc",
            "m.05pdh86",
            "m.047g36w",
            "m.05kdrxt"
        ],
        "different_answer": [
            [
                "m.0bs3vgr",
                "m.075wx89",
                "m.011l6lm6",
                "m.09v4v1k",
                "m.012d_3c_",
                "m.0cmddrx",
                "m.064mdnk",
                "m.0vmy7yj",
                "m.03bzfwy",
                "m.013f7hgr",
                "m.0v998k8",
                "m.04jlsj4",
                "m.05kdryb",
                "m.075wx7_",
                "m.03d0sxq",
                "m.0j4573m",
                "m.03nm_fh",
                "m.0gbwht4",
                "m.0vmy745",
                "m.0djz0rc",
                "m.05pdh86",
                "m.047g36w",
                "m.05kdrxt"
            ]
        ],
        "entity_linking": {
            "Ashley Greene": "m.03w9v1d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03w9v1d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03w9v1d ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03w9v1d')\na.add_fact('m.03w9v1d', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-502",
        "question": "where did al qaeda attack",
        "answer": [
            "m.0c6cwg",
            "m.0d0vp3"
        ],
        "different_answer": [
            [
                "m.0c6cwg",
                "m.0d0vp3"
            ]
        ],
        "entity_linking": {
            "Al-Qaeda": "m.0v74"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v74)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v74 ns:base.disaster2.attacker.attack_s ?y .\n?y ns:base.disaster2.attack_process.attack_event ?x .\n?y ns:base.disaster2.attack_process.attacker ns:m.0v74 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0v74')\na.add_filter('x0', '!=', 'm.0v74')\na.add_fact('x1', 'base.disaster2.attack_process.attacker', 'm.0v74')\na.add_fact('m.0v74', 'base.disaster2.attacker.attack_s', 'x1')\na.add_fact('x1', 'base.disaster2.attack_process.attack_event', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-503",
        "question": "what language is spoken in switzerland",
        "answer": [
            "m.06ctk",
            "m.064_8sq",
            "m.04306rv",
            "m.02bjrlw"
        ],
        "different_answer": [
            [
                "m.06ctk",
                "m.064_8sq",
                "m.04306rv",
                "m.02bjrlw"
            ],
            [
                "m.06ctk",
                "m.064_8sq",
                "m.04306rv",
                "m.02bjrlw"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('m.06mzp', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-504",
        "question": "who was philip in acts chapter 8",
        "answer": [
            "m.075pg8m"
        ],
        "different_answer": [
            [
                "m.075pg8m"
            ]
        ],
        "entity_linking": {
            "Philip the Apostle": "m.012tjy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012tjy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012tjy ns:fictional_universe.person_in_fiction.representations_in_fiction ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012tjy')\na.add_fact('m.012tjy', 'fictional_universe.person_in_fiction.representations_in_fiction', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-506",
        "question": "what the time zone in england",
        "answer": [
            "m.03bdv"
        ],
        "different_answer": [
            [
                "m.03bdv"
            ]
        ],
        "entity_linking": {
            "England": "m.02jx1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02jx1')\na.add_fact('m.02jx1', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-508",
        "question": "what is the best currency to take to turkey",
        "answer": [
            "m.04dq0w"
        ],
        "different_answer": [
            [
                "m.04dq0w"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-509",
        "question": "what system of government is practiced in nigeria",
        "answer": [
            "m.01d9r3",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Nigeria": "m.05cgv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cgv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cgv ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05cgv')\na.add_fact('m.05cgv', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-512",
        "question": "who were mary shelley",
        "answer": [
            "m.02h6nsx",
            "m.02kvk_g",
            "m.0f1hr",
            "m.02hv44_",
            "m.02h6676",
            "m.0kyk",
            "m.0cbd2",
            "m.02xhgwq"
        ],
        "different_answer": [
            [
                "m.02h6nsx",
                "m.02kvk_g",
                "m.0f1hr",
                "m.02hv44_",
                "m.02h6676",
                "m.0kyk",
                "m.0cbd2",
                "m.02xhgwq"
            ]
        ],
        "entity_linking": {
            "Mary Shelley": "m.04_by"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_by)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_by ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04_by')\na.add_fact('m.04_by', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-513",
        "question": "what language do most australians speak",
        "answer": [
            "m.04gd7",
            "m.02jcw",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.04gd7",
                "m.02jcw",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-514",
        "question": "where is denmark situated",
        "answer": [
            "m.06mx8",
            "m.0140mf"
        ],
        "different_answer": [
            [
                "m.06mx8",
                "m.0140mf"
            ]
        ],
        "entity_linking": {
            "Denmark": "m.0k6nt",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k6nt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k6nt ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.0k6nt')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.0k6nt', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-515",
        "question": "where was teddy roosevelt 's house",
        "answer": [
            "m.02_286",
            "m.0rh6k"
        ],
        "different_answer": [
            [
                "m.02_286",
                "m.0rh6k"
            ]
        ],
        "entity_linking": {
            "Theodore Roosevelt": "m.07hyk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hyk ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07hyk')\na.add_fact('m.07hyk', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-516",
        "question": "what is the government system of malaysia",
        "answer": [
            "m.026wp",
            "m.01q20",
            "m.018wl5",
            "m.01m4w_"
        ],
        "different_answer": [
            [
                "m.026wp",
                "m.01q20",
                "m.018wl5",
                "m.01m4w_"
            ]
        ],
        "entity_linking": {
            "Malaysia": "m.09pmkv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09pmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09pmkv ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09pmkv')\na.add_fact('m.09pmkv', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-517",
        "question": "what do people speak in canada",
        "answer": [
            "m.02tfbg",
            "m.02h40lc",
            "m.0dqhd",
            "m.07qv_",
            "m.06b_j",
            "m.06jdbv",
            "m.02hwhyv",
            "m.0121sr",
            "m.05zjd",
            "m.02g5qs",
            "m.02t692",
            "m.06nm1",
            "m.02hxcvy",
            "m.02kdw56",
            "m.04306rv",
            "m.02hx6h7",
            "m.04gd7",
            "m.02pmtdt",
            "m.07zrf",
            "m.02hxc3j",
            "m.0349s",
            "m.0322q8",
            "m.01r2l",
            "m.02w36s",
            "m.0688f",
            "m.05qqm",
            "m.0jzc",
            "m.07c9s",
            "m.02syd6",
            "m.032f6"
        ],
        "different_answer": [
            [
                "m.02tfbg",
                "m.02h40lc",
                "m.0dqhd",
                "m.07qv_",
                "m.06b_j",
                "m.06jdbv",
                "m.02hwhyv",
                "m.0121sr",
                "m.05zjd",
                "m.02g5qs",
                "m.02t692",
                "m.06nm1",
                "m.02hxcvy",
                "m.02kdw56",
                "m.04306rv",
                "m.02hx6h7",
                "m.04gd7",
                "m.02pmtdt",
                "m.07zrf",
                "m.02hxc3j",
                "m.0349s",
                "m.0322q8",
                "m.01r2l",
                "m.02w36s",
                "m.0688f",
                "m.05qqm",
                "m.0jzc",
                "m.07c9s",
                "m.02syd6",
                "m.032f6"
            ],
            [
                "m.064_8sq",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('m.0d060g', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-518",
        "question": "what type of money do they use in costa rica",
        "answer": [
            "m.04wccn"
        ],
        "different_answer": [
            [
                "m.04wccn"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('m.01p8s', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-519",
        "question": "what timezone is nashville tn",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Nashville": "m.05jbn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05jbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05jbn ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05jbn')\na.add_fact('m.05jbn', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-521",
        "question": "who was anakin skywalker",
        "answer": [
            "m.0jzmgh"
        ],
        "different_answer": [
            [
                "m.0jzmgh"
            ]
        ],
        "entity_linking": {
            "Anakin Skywalker": "g.125_cxx77"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:g.125_cxx77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:g.125_cxx77 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'g.125_cxx77')\na.add_fact('g.125_cxx77', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-522",
        "question": "where did adolf hitler die",
        "answer": [
            "m.0156q"
        ],
        "different_answer": [
            [
                "m.0156q"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-523",
        "question": "what is the largest nation in europe",
        "answer": [
            "m.06bnz"
        ],
        "different_answer": [
            [
                "m.06bnz"
            ]
        ],
        "entity_linking": {
            "Europe": "m.02j9z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02j9z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02j9z ns:base.locations.continents.countries_within ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02j9z')\na.add_fact('m.02j9z', 'base.locations.continents.countries_within', 'x0')\na.add_fact('x0', 'topic_server.population_number', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-524",
        "question": "where was the first gulf war fought",
        "answer": [
            "m.0d05q4",
            "m.01z215",
            "m.0cvmv",
            "m.047yc",
            "m.0661z",
            "m.03spz"
        ],
        "different_answer": [
            [
                "m.0d05q4",
                "m.01z215",
                "m.0cvmv",
                "m.047yc",
                "m.0661z",
                "m.03spz"
            ]
        ],
        "entity_linking": {
            "Gulf War": "m.018w0j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018w0j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018w0j ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018w0j')\na.add_fact('m.018w0j', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-525",
        "question": "who are the senators of virginia 2013",
        "answer": [
            "m.024mm1",
            "m.053f8h",
            "m.0574xy"
        ],
        "different_answer": [
            [
                "m.024mm1",
                "m.053f8h",
                "m.0574xy"
            ]
        ],
        "entity_linking": {
            "Virginia": "m.07z1m",
            "United States Senate": "m.07t58",
            "2013-12-31": "\"2013-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2013-01-01": "\"2013-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z1m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z1m ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t58')\na.add_filter('x0', '!=', 'm.07z1m')\na.add_fact('x1', 'government.government_position_held.governmental_body', 'm.07t58')\na.add_fact('m.07z1m', 'government.political_district.representatives', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2013-12-31\"^^xsd:dateTime', '\"2013-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-526",
        "question": "what band was george clinton in",
        "answer": [
            "m.01tzqkk",
            "m.0qmny",
            "m.01180cs1",
            "m.0qlhx",
            "m.01rjw6v",
            "m.03xp1t4"
        ],
        "different_answer": [
            [
                "m.01tzqkk",
                "m.0qmny",
                "m.01180cs1",
                "m.0qlhx",
                "m.01rjw6v",
                "m.03xp1t4"
            ]
        ],
        "entity_linking": {
            "George Clinton": "m.0ql36"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ql36)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ql36 ns:music.group_member.membership ?y .\n?y ns:music.group_membership.group ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ql36')\na.add_fact('m.0ql36', 'music.group_member.membership', 'x1')\na.add_fact('x1', 'music.group_membership.group', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-527",
        "question": "what country borders slovakia",
        "answer": [
            "m.05qhw",
            "m.01mjq",
            "m.03gj2",
            "m.07t21",
            "m.0h7x"
        ],
        "different_answer": [
            [
                "m.05qhw",
                "m.01mjq",
                "m.03gj2",
                "m.07t21",
                "m.0h7x"
            ]
        ],
        "entity_linking": {
            "Slovakia": "m.06npd",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06npd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06npd ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.06npd')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.06npd', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-528",
        "question": "what was james garfield most known for",
        "answer": [
            "m.01xljv7"
        ],
        "different_answer": [
            [
                "m.01xljv7"
            ]
        ],
        "entity_linking": {
            "James A. Garfield": "m.0b22w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b22w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b22w ns:common.topic.notable_for ?y .\n?y ns:common.notable_for.object ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b22w')\na.add_fact('m.0b22w', 'common.topic.notable_for', 'x1')\na.add_fact('x1', 'common.notable_for.object', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-529",
        "question": "where did paula deen go to school",
        "answer": [
            "m.0610np"
        ],
        "different_answer": [
            [
                "m.0610np"
            ]
        ],
        "entity_linking": {
            "Paula Deen": "m.05dpch"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05dpch)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05dpch ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05dpch')\na.add_fact('m.05dpch', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-530",
        "question": "where does robert irvine come from",
        "answer": [
            "m.0jgvy"
        ],
        "different_answer": [
            [
                "m.0jgvy"
            ]
        ],
        "entity_linking": {
            "Robert Irvine": "m.0272y2y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0272y2y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0272y2y ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0272y2y')\na.add_fact('m.0272y2y', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-531",
        "question": "what style of music does michael jackson perform",
        "answer": [
            "m.06j6l",
            "m.0gywn",
            "m.02lkt",
            "m.02bqnt",
            "m.05bt6j",
            "m.02x8m",
            "m.0ggx5q",
            "m.03c34yl",
            "m.02vjzr",
            "m.064t9",
            "m.06by7",
            "m.025sc50",
            "m.026z9",
            "m.021_z5",
            "m.02lnbg"
        ],
        "different_answer": [
            [
                "m.06j6l",
                "m.0gywn",
                "m.02lkt",
                "m.02bqnt",
                "m.05bt6j",
                "m.02x8m",
                "m.0ggx5q",
                "m.03c34yl",
                "m.02vjzr",
                "m.064t9",
                "m.06by7",
                "m.025sc50",
                "m.026z9",
                "m.021_z5",
                "m.02lnbg"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-532",
        "question": "what does david beckham play",
        "answer": [
            "m.02vx4"
        ],
        "different_answer": [
            [
                "m.02vx4"
            ]
        ],
        "entity_linking": {
            "David Beckham": "m.02d9k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02d9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02d9k ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.sport ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02d9k')\na.add_fact('m.02d9k', 'sports.pro_athlete.sports_played_professionally', 'x1')\na.add_fact('x1', 'sports.pro_sports_played.sport', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-533",
        "question": "what does julian lennon do",
        "answer": [
            "m.02hrh1q",
            "m.0lgw7",
            "m.0dz3r",
            "m.09jwl",
            "m.04l1gwb",
            "m.016z4k",
            "m.09l65",
            "m.039v1",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.0lgw7",
                "m.0dz3r",
                "m.09jwl",
                "m.04l1gwb",
                "m.016z4k",
                "m.09l65",
                "m.039v1",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Julian Lennon": "m.01k4jy3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01k4jy3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01k4jy3 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01k4jy3')\na.add_fact('m.01k4jy3', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-534",
        "question": "what is the milwaukee brewers mascot",
        "answer": [
            "m.0100sszz",
            "m.0blvgb",
            "m.049kl_"
        ],
        "different_answer": [
            [
                "m.0100sszz",
                "m.0blvgb",
                "m.049kl_"
            ]
        ],
        "entity_linking": {
            "Milwaukee Brewers": "m.051vz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051vz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051vz ns:sports.sports_team.team_mascot ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051vz')\na.add_fact('m.051vz', 'sports.sports_team.team_mascot', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-535",
        "question": "what is the second biggest state in the united states",
        "answer": [
            "m.07b_l"
        ],
        "different_answer": [
            [
                "m.07b_l"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0",
            "US State": "m.0kpys4"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n                ns:m.09c7w0 ns:base.aareas.schema.administrative_area.administrative_children ?x .\n                ?x ns:common.topic.notable_types ns:m.0kpys4 .  # US State\n                ?x ns:location.location.area ?y .\n}\nORDER BY DESC(xsd:float(?y))\nLIMIT 1\nOFFSET 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-537",
        "question": "what has charlie hunnam been in",
        "answer": [
            "m.04y5gz",
            "m.0h0yd81",
            "m.0g55y4p",
            "m.0gx0plf",
            "m.02cbhg",
            "m.02z0nhq",
            "g.11b6gq6dl2",
            "m.0zn1hg0",
            "m.0gyffmd",
            "m.0bk88p",
            "m.079s_7",
            "m.0fh2v5"
        ],
        "different_answer": [
            [
                "m.04y5gz",
                "m.0h0yd81",
                "m.0g55y4p",
                "m.0gx0plf",
                "m.02cbhg",
                "m.02z0nhq",
                "g.11b6gq6dl2",
                "m.0zn1hg0",
                "m.0gyffmd",
                "m.0bk88p",
                "m.079s_7",
                "m.0fh2v5"
            ]
        ],
        "entity_linking": {
            "Charlie Hunnam": "m.057yk8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057yk8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057yk8 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.057yk8')\na.add_fact('m.057yk8', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-538",
        "question": "what are all the movies taylor swift has been in",
        "answer": [
            "m.06_wqk4",
            "m.0djb8hx",
            "m.02x3lt7",
            "m.087wc7n",
            "m.0dx5q8"
        ],
        "different_answer": [
            [
                "m.06_wqk4",
                "m.0djb8hx",
                "m.02x3lt7",
                "m.087wc7n",
                "m.0dx5q8"
            ]
        ],
        "entity_linking": {
            "Taylor Swift": "m.0dl567"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dl567)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dl567 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dl567')\na.add_fact('m.0dl567', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-540",
        "question": "what college did brett favre",
        "answer": [
            "m.0cchk3"
        ],
        "different_answer": [
            [
                "m.0cchk3"
            ]
        ],
        "entity_linking": {
            "Brett Favre": "m.0cv72h",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cv72h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cv72h ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0cv72h')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0cv72h', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-542",
        "question": "where did alex chilton die",
        "answer": [
            "m.0f2tj"
        ],
        "different_answer": [
            [
                "m.0f2tj"
            ]
        ],
        "entity_linking": {
            "Alex Chilton": "m.024bwn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024bwn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024bwn ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.024bwn')\na.add_fact('m.024bwn', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-543",
        "question": "what college did martin luther king jr go to",
        "answer": [
            "m.01_r9k",
            "m.06yr21",
            "m.0gl5_"
        ],
        "different_answer": [
            [
                "m.01_r9k",
                "m.06yr21",
                "m.0gl5_"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.051cc', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-545",
        "question": "what kind of cancer did farrah fawcett die of",
        "answer": [
            "m.02vxm4"
        ],
        "different_answer": [
            [
                "m.02vxm4"
            ]
        ],
        "entity_linking": {
            "Farrah Fawcett": "m.01j851",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j851)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j851 ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.01j851')\na.add_fact('x0', 'medicine.disease.parent_disease', 'm.0qcr0')\na.add_fact('m.01j851', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-546",
        "question": "who is michael j fox 's wife",
        "answer": [
            "m.03gpck"
        ],
        "different_answer": [
            [
                "m.03gpck"
            ]
        ],
        "entity_linking": {
            "Michael J. Fox": "m.0hz_1",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz_1 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0hz_1')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0hz_1', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-547",
        "question": "what money do i use in costa rica",
        "answer": [
            "m.04wccn"
        ],
        "different_answer": [
            [
                "m.04wccn"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('m.01p8s', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-548",
        "question": "what guitar did joe walsh play",
        "answer": [
            "m.02m873"
        ],
        "different_answer": [
            [
                "m.02m873"
            ]
        ],
        "entity_linking": {
            "Joe Walsh": "m.01sb5r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sb5r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sb5r ns:music.guitarist.guitars_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01sb5r')\na.add_fact('m.01sb5r', 'music.guitarist.guitars_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-549",
        "question": "what are the official languages of the eu",
        "answer": [
            "m.064_8sq",
            "m.02h40lc",
            "m.04306rv",
            "m.06mp7",
            "m.05qqm",
            "m.02bjrlw",
            "m.02bv9",
            "m.05zjd",
            "m.06nm1",
            "m.0349s"
        ],
        "different_answer": [
            [
                "m.064_8sq",
                "m.02h40lc",
                "m.04306rv",
                "m.06mp7",
                "m.05qqm",
                "m.02bjrlw",
                "m.02bv9",
                "m.05zjd",
                "m.06nm1",
                "m.0349s"
            ]
        ],
        "entity_linking": {
            "European Union": "m.0_6t_z8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_6t_z8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_6t_z8 ns:user.ktrueman.default_domain.international_organization.official_language_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0_6t_z8')\na.add_fact('m.0_6t_z8', 'user.ktrueman.default_domain.international_organization.official_language_s', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-550",
        "question": "what is ryan seacrest radio show",
        "answer": [
            "m.02ttn8",
            "m.047m5ls"
        ],
        "different_answer": [
            [
                "m.02ttn8",
                "m.047m5ls"
            ]
        ],
        "entity_linking": {
            "Ryan Seacrest": "m.02b9g4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02b9g4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02b9g4 ns:broadcast.artist.content ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02b9g4')\na.add_fact('m.02b9g4', 'broadcast.artist.content', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-552",
        "question": "what language do most italians speak",
        "answer": [
            "m.02bjrlw"
        ],
        "different_answer": [
            [
                "m.02bjrlw"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-554",
        "question": "what money do they use in spain",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-555",
        "question": "what did drew barrymore go to rehab for",
        "answer": [
            "m.0256b",
            "m.012mj"
        ],
        "different_answer": [
            [
                "m.0256b",
                "m.012mj"
            ]
        ],
        "entity_linking": {
            "Drew Barrymore": "m.026c1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026c1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026c1 ns:celebrities.celebrity.substance_abuse_problems ?y .\n?y ns:celebrities.substance_abuse_problem.substance ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.026c1')\na.add_fact('m.026c1', 'celebrities.celebrity.substance_abuse_problems', 'x1')\na.add_fact('x1', 'celebrities.substance_abuse_problem.substance', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-556",
        "question": "when is saint george day celebrated",
        "answer": [
            "m.0tht"
        ],
        "different_answer": [
            [
                "m.0tht"
            ]
        ],
        "entity_linking": {
            "St George's Day": "m.05474b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05474b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05474b ns:time.holiday.day_of_year ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05474b')\na.add_fact('m.05474b', 'time.holiday.day_of_year', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-557",
        "question": "what government did the roman empire have",
        "answer": [
            "m.0d8tn"
        ],
        "different_answer": [
            [
                "m.0d8tn"
            ]
        ],
        "entity_linking": {
            "Roman Empire": "m.06cmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06cmp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06cmp ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06cmp')\na.add_fact('m.06cmp', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-559",
        "question": "what instrument did robin gibb play",
        "answer": [
            "m.07y_7",
            "m.05r5c"
        ],
        "different_answer": [
            [
                "m.07y_7",
                "m.05r5c"
            ],
            [
                "m.03qjg",
                "m.05r5c",
                "m.0290ngj",
                "m.07y_7",
                "m.0cfdd"
            ]
        ],
        "entity_linking": {
            "Robin Gibb": "m.0137hn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0137hn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0137hn ns:music.group_member.instruments_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0137hn')\na.add_fact('m.0137hn', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-560",
        "question": "who voiced darth vader",
        "answer": [
            "m.0b2l8f"
        ],
        "different_answer": [
            [
                "m.0b2l8f"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0f2y0', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-561",
        "question": "when was abe lincoln president",
        "answer": [
            "m.05brd5c",
            "m.05brd51"
        ],
        "different_answer": [
            [
                "m.05brd5c",
                "m.05brd51"
            ]
        ],
        "entity_linking": {
            "Abraham Lincoln": "m.0gzh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:base.inaugurations.inauguration_speaker.inauguration ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gzh')\na.add_fact('m.0gzh', 'base.inaugurations.inauguration_speaker.inauguration', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-562",
        "question": "where are the texas rangers playing",
        "answer": [
            "m.01wmlm"
        ],
        "different_answer": [
            [
                "m.01wmlm"
            ]
        ],
        "entity_linking": {
            "Texas Rangers": "m.07l8x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07l8x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07l8x ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07l8x')\na.add_fact('m.07l8x', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-564",
        "question": "what is arkansas state capitol",
        "answer": [
            "m.0ftvg"
        ],
        "different_answer": [
            [
                "m.0ftvg"
            ]
        ],
        "entity_linking": {
            "Arkansas State Capitol": "m.05yzfg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05yzfg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05yzfg ns:location.location.street_address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05yzfg')\na.add_fact('m.05yzfg', 'location.location.street_address', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-567",
        "question": "what is the zip code for nogales az",
        "answer": [
            "m.07nq6b_",
            "m.07nq6d9",
            "m.01z5r29"
        ],
        "different_answer": [
            [
                "m.07nq6b_",
                "m.07nq6d9",
                "m.01z5r29"
            ]
        ],
        "entity_linking": {
            "Nogales": "m.0qqw9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qqw9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qqw9 ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qqw9')\na.add_fact('m.0qqw9', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-568",
        "question": "when did michael vick start playing for the eagles",
        "answer": [
            "2009-08:00"
        ],
        "different_answer": [
            [
                "2009-08:00"
            ]
        ],
        "entity_linking": {
            "Michael Vick": "m.027f42",
            "Philadelphia Eagles": "m.05tg3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027f42)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027f42 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.from ?x .\n?y ns:sports.sports_team_roster.team ns:m.05tg3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05tg3')\na.add_filter('x0', '!=', 'm.027f42')\na.add_fact('x1', 'sports.sports_team_roster.team', 'm.05tg3')\na.add_fact('m.027f42', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-570",
        "question": "what is william taft famous for",
        "answer": [
            "m.0dl08",
            "m.04gc2",
            "m.0c5lg"
        ],
        "different_answer": [
            [
                "m.0dl08",
                "m.04gc2",
                "m.0c5lg"
            ]
        ],
        "entity_linking": {
            "William Howard Taft": "m.083pr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083pr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083pr ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.083pr')\na.add_fact('m.083pr', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-572",
        "question": "where did robin cook die",
        "answer": [
            "m.012d9h"
        ],
        "different_answer": [
            [
                "m.012d9h"
            ]
        ],
        "entity_linking": {
            "Robin Cook": "m.019jy5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019jy5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019jy5 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019jy5')\na.add_fact('m.019jy5', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-573",
        "question": "where did melba beals live",
        "answer": [
            "m.0vbk"
        ],
        "different_answer": [
            [
                "m.0vbk"
            ]
        ],
        "entity_linking": {
            "Melba Pattillo Beals": "m.08s1bb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08s1bb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08s1bb ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08s1bb')\na.add_fact('m.08s1bb', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-575",
        "question": "who is louisiana state senator",
        "answer": [
            "m.04r1w2",
            "m.01gqtx",
            "m.0d3g9m",
            "m.025jr2",
            "m.0337h3",
            "m.0py1g",
            "m.019tyn",
            "m.0d32vk",
            "m.0b079s",
            "m.05tvn8",
            "m.0d2s6n",
            "m.0d3287",
            "m.0d32rg",
            "m.01xctw",
            "m.0cvwfs",
            "m.095vrl",
            "m.02s1w9",
            "m.0d3g7j",
            "m.0d2rbw",
            "m.01_nrx",
            "m.01fptq",
            "m.04jm72",
            "m.05mmtq",
            "m.0d04_1",
            "m.01bxb3",
            "m.0d21y8"
        ],
        "different_answer": [
            [
                "m.04r1w2",
                "m.01gqtx",
                "m.0d3g9m",
                "m.025jr2",
                "m.0337h3",
                "m.0py1g",
                "m.019tyn",
                "m.0d32vk",
                "m.0b079s",
                "m.05tvn8",
                "m.0d2s6n",
                "m.0d3287",
                "m.0d32rg",
                "m.01xctw",
                "m.0cvwfs",
                "m.095vrl",
                "m.02s1w9",
                "m.0d3g7j",
                "m.0d2rbw",
                "m.01_nrx",
                "m.01fptq",
                "m.04jm72",
                "m.05mmtq",
                "m.0d04_1",
                "m.01bxb3",
                "m.0d21y8"
            ]
        ],
        "entity_linking": {
            "Louisiana": "m.04ly1",
            "United States Senator": "m.02_7l8y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ly1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ly1 ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7l8y')\na.add_filter('x0', '!=', 'm.04ly1')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.02_7l8y')\na.add_fact('m.04ly1', 'government.political_district.representatives', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-576",
        "question": "what are the 7 countries that are part of central america",
        "answer": [
            "m.0345_",
            "m.0dkz7x",
            "m.01p8s",
            "m.03h2c",
            "m.05qx1",
            "m.02k8k",
            "m.0164b"
        ],
        "different_answer": [
            [
                "m.0345_",
                "m.0dkz7x",
                "m.01p8s",
                "m.03h2c",
                "m.05qx1",
                "m.02k8k",
                "m.0164b"
            ]
        ],
        "entity_linking": {
            "Central America": "m.01tzh",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tzh ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.01tzh')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.01tzh', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-577",
        "question": "where did derek fisher go to college",
        "answer": [
            "m.07dtym",
            "m.01rc6f"
        ],
        "different_answer": [
            [
                "m.07dtym",
                "m.01rc6f"
            ]
        ],
        "entity_linking": {
            "Derek Fisher": "m.04lvwk",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lvwk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lvwk ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.04lvwk')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.04lvwk', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-578",
        "question": "who was kobe bryant drafted by",
        "answer": [
            "m.02z8z6"
        ],
        "different_answer": [
            [
                "m.02z8z6"
            ]
        ],
        "entity_linking": {
            "Kobe Bryant": "m.01kmd4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kmd4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kmd4 ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01kmd4')\na.add_fact('m.01kmd4', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-579",
        "question": "where are the new orleans hornets moving to",
        "answer": [
            "m.0fsb8"
        ],
        "different_answer": [
            [
                "m.0fsb8"
            ]
        ],
        "entity_linking": {
            "Charlotte Hornets": "m.01k8vh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01k8vh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01k8vh ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01k8vh')\na.add_fact('m.01k8vh', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-580",
        "question": "what language does algerian people speak",
        "answer": [
            "m.05zyx75",
            "m.064_8sq",
            "m.03dzq0",
            "m.035y4y",
            "m.0jzc",
            "m.0h7prcf",
            "m.0j6528c"
        ],
        "different_answer": [
            [
                "m.05zyx75",
                "m.064_8sq",
                "m.03dzq0",
                "m.035y4y",
                "m.0jzc",
                "m.0h7prcf",
                "m.0j6528c"
            ],
            [
                "m.0jzc"
            ]
        ],
        "entity_linking": {
            "Algeria": "m.0h3y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h3y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h3y ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h3y')\na.add_fact('m.0h3y', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-581",
        "question": "where was anne boleyn executed",
        "answer": [
            "m.07nqn"
        ],
        "different_answer": [
            [
                "m.07nqn"
            ]
        ],
        "entity_linking": {
            "Anne Boleyn": "m.09sxn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09sxn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09sxn ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09sxn')\na.add_fact('m.09sxn', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-582",
        "question": "what did galileo do to become famous",
        "answer": [
            "m.0h9c",
            "m.05snw",
            "m.06q2q",
            "m.04s2z",
            "m.025rxky"
        ],
        "different_answer": [
            [
                "m.0h9c",
                "m.05snw",
                "m.06q2q",
                "m.04s2z",
                "m.025rxky"
            ]
        ],
        "entity_linking": {
            "Galileo Galilei": "m.034ks"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034ks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034ks ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034ks')\na.add_fact('m.034ks', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-583",
        "question": "what school did martin luther king jr received his doctorate degree from",
        "answer": [
            "m.0gl5_"
        ],
        "different_answer": [
            [
                "m.0gl5_"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc",
            "PhD": "m.04zx3q1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.04zx3q1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04zx3q1')\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('x1', 'education.education.degree', 'm.04zx3q1')\na.add_fact('m.051cc', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-584",
        "question": "where buddha come from",
        "answer": [
            "m.06_86x"
        ],
        "different_answer": [
            [
                "m.06_86x"
            ]
        ],
        "entity_linking": {
            "Gautama Buddha": "m.015k7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015k7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015k7 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015k7')\na.add_fact('m.015k7', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-585",
        "question": "what did king henry viii rule",
        "answer": [
            "m.02jx1"
        ],
        "different_answer": [
            [
                "m.02jx1"
            ]
        ],
        "entity_linking": {
            "Henry VIII of England": "m.03p77"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p77 ns:royalty.monarch.kingdom ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03p77')\na.add_fact('m.03p77', 'royalty.monarch.kingdom', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-586",
        "question": "what type of cancer did larry hagman have",
        "answer": [
            "m.0369n2",
            "m.04psf"
        ],
        "different_answer": [
            [
                "m.0369n2",
                "m.04psf"
            ]
        ],
        "entity_linking": {
            "Larry Hagman": "m.01vyv9",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vyv9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vyv9 ns:people.deceased_person.cause_of_death ?x .\n?x ns:people.cause_of_death.parent_cause_of_death ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.01vyv9')\na.add_fact('x0', 'people.cause_of_death.parent_cause_of_death', 'm.0qcr0')\na.add_fact('m.01vyv9', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-588",
        "question": "what wars did robert e lee served in",
        "answer": [
            "m.05lv52",
            "m.0d0y7",
            "m.04vqhq",
            "m.0lkxb",
            "m.054pn2",
            "m.0d220",
            "m.04xsb_",
            "m.05kxs5",
            "m.05k0fs",
            "m.04jnfr",
            "m.0d0mw",
            "m.02n29c",
            "m.0d0yp",
            "m.04vqpt",
            "m.0dgkk",
            "m.04vqf8",
            "m.0h1hwvh",
            "m.04wbkc",
            "m.012lb3ht",
            "m.0kbq",
            "m.05zhyqj",
            "m.05740w",
            "m.097_v4",
            "m.0fgkhp",
            "m.04q33ft",
            "m.0f777",
            "m.0541vp",
            "m.04lf234",
            "m.0d20b",
            "m.05jzx8",
            "m.05k4d6",
            "m.047g1bq",
            "m.0kbcg",
            "m.04vqyp",
            "m.04vt26",
            "m.01jnm",
            "m.09q9fk",
            "m.01mwc1",
            "m.05lhjt",
            "m.05lxjz",
            "m.0c16t",
            "m.027r0yc",
            "m.03xzs_",
            "m.0c00cv3"
        ],
        "different_answer": [
            [
                "m.05lv52",
                "m.0d0y7",
                "m.04vqhq",
                "m.0lkxb",
                "m.054pn2",
                "m.0d220",
                "m.04xsb_",
                "m.05kxs5",
                "m.05k0fs",
                "m.04jnfr",
                "m.0d0mw",
                "m.02n29c",
                "m.0d0yp",
                "m.04vqpt",
                "m.0dgkk",
                "m.04vqf8",
                "m.0h1hwvh",
                "m.04wbkc",
                "m.012lb3ht",
                "m.0kbq",
                "m.05zhyqj",
                "m.05740w",
                "m.097_v4",
                "m.0fgkhp",
                "m.04q33ft",
                "m.0f777",
                "m.0541vp",
                "m.04lf234",
                "m.0d20b",
                "m.05jzx8",
                "m.05k4d6",
                "m.047g1bq",
                "m.0kbcg",
                "m.04vqyp",
                "m.04vt26",
                "m.01jnm",
                "m.09q9fk",
                "m.01mwc1",
                "m.05lhjt",
                "m.05lxjz",
                "m.0c16t",
                "m.027r0yc",
                "m.03xzs_",
                "m.0c00cv3"
            ],
            [
                "m.0d0mw",
                "m.0c16t",
                "m.0kbq"
            ]
        ],
        "entity_linking": {
            "Robert E. Lee": "m.06f5j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f5j ns:military.military_commander.military_commands ?y .\n?y ns:military.military_command.military_conflict ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06f5j')\na.add_fact('m.06f5j', 'military.military_person.participated_in_conflicts', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-589",
        "question": "what russian language called",
        "answer": [
            "m.06b_j"
        ],
        "different_answer": [
            [
                "m.06b_j"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-590",
        "question": "who is in charge of libya now",
        "answer": [
            "m.0_ymzsm"
        ],
        "different_answer": [
            [
                "m.0_ymzsm"
            ]
        ],
        "entity_linking": {
            "Libya": "m.04gqr",
            "Prime Minister of Libya": "m.0j5wjnc",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.0j5wjnc .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j5wjnc')\na.add_filter('x0', '!=', 'm.04gqr')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.0j5wjnc')\na.add_fact('m.04gqr', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-592",
        "question": "when did shays rebellion start",
        "answer": [
            "1786-08:00"
        ],
        "different_answer": [
            [
                "1786-08:00"
            ]
        ],
        "entity_linking": {
            "Shays' Rebellion": "m.0x284"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0x284)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0x284 ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0x284')\na.add_fact('m.0x284', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-593",
        "question": "what kind of disease does montel williams have",
        "answer": [
            "m.0dcqh"
        ],
        "different_answer": [
            [
                "m.0dcqh"
            ]
        ],
        "entity_linking": {
            "Montel Williams": "m.018ptv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018ptv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018ptv ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018ptv')\na.add_fact('m.018ptv', 'medicine.notable_person_with_medical_condition.condition', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-595",
        "question": "when is the last time the ravens won a superbowl",
        "answer": [
            "m.0642vqv"
        ],
        "different_answer": [
            [
                "m.0642vqv"
            ]
        ],
        "entity_linking": {
            "Baltimore Ravens": "m.01ct6",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ct6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ct6 ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.06x5s .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.01ct6')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.06x5s')\na.add_fact('m.01ct6', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-596",
        "question": "where did kansas city royals come from",
        "answer": [
            "m.04f_d"
        ],
        "different_answer": [
            [
                "m.04f_d"
            ]
        ],
        "entity_linking": {
            "Kansas City Royals": "m.049n7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.049n7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.049n7 ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.049n7')\na.add_fact('m.049n7', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-597",
        "question": "what style of music does john mayer play",
        "answer": [
            "m.01243b",
            "m.016clz",
            "m.01lyv",
            "m.027pgn0",
            "m.02k_kn",
            "m.02yv6b",
            "m.0gywn",
            "m.05bt6j",
            "m.016jny",
            "m.02qdgx",
            "m.09qxq7",
            "m.064t9",
            "m.06by7",
            "m.0155w",
            "m.0mhfr",
            "m.02w4v"
        ],
        "different_answer": [
            [
                "m.01243b",
                "m.016clz",
                "m.01lyv",
                "m.027pgn0",
                "m.02k_kn",
                "m.02yv6b",
                "m.0gywn",
                "m.05bt6j",
                "m.016jny",
                "m.02qdgx",
                "m.09qxq7",
                "m.064t9",
                "m.06by7",
                "m.0155w",
                "m.0mhfr",
                "m.02w4v"
            ]
        ],
        "entity_linking": {
            "John Mayer": "m.01s21dg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s21dg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s21dg ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01s21dg')\na.add_fact('m.01s21dg', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-599",
        "question": "what inventions did thomas edison invent list",
        "answer": [
            "m.0xrxw",
            "m.0cpk7",
            "m.02r0w8q",
            "m.03q9w5j",
            "m.01cbh9",
            "m.0505x",
            "m.0d9fkw",
            "m.063md"
        ],
        "different_answer": [
            [
                "m.0xrxw",
                "m.0cpk7",
                "m.02r0w8q",
                "m.03q9w5j",
                "m.01cbh9",
                "m.0505x",
                "m.0d9fkw",
                "m.063md"
            ]
        ],
        "entity_linking": {
            "Thomas Edison": "m.07bty"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bty ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07bty')\na.add_fact('m.07bty', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-600",
        "question": "where did djokovic come from",
        "answer": [
            "m.077qn"
        ],
        "different_answer": [
            [
                "m.077qn"
            ],
            [
                "m.077qn"
            ],
            [
                "m.077qn"
            ]
        ],
        "entity_linking": {
            "Novak Djokovic": "m.09n70c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09n70c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09n70c ns:olympics.olympic_athlete.country ?y .\n?y ns:olympics.olympic_athlete_affiliation.country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09n70c')\na.add_fact('m.09n70c', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-602",
        "question": "what part of the country is new england",
        "answer": [
            "m.027rjr"
        ],
        "different_answer": [
            [
                "m.027rjr"
            ]
        ],
        "entity_linking": {
            "New England": "m.029jpy",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029jpy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029jpy ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.029jpy')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.029jpy', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-603",
        "question": "what money to take to turkey",
        "answer": [
            "m.04dq0w"
        ],
        "different_answer": [
            [
                "m.04dq0w"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-604",
        "question": "what kind of music did jimi hendrix play",
        "answer": [
            "m.06j6l",
            "m.0dl5d",
            "m.03lty",
            "m.02yv6b",
            "m.09nwwf",
            "m.0xhtw",
            "m.05w3f",
            "m.02l96k",
            "m.06by7",
            "m.0155w",
            "m.0cgxt",
            "m.08jyyk"
        ],
        "different_answer": [
            [
                "m.06j6l",
                "m.0dl5d",
                "m.03lty",
                "m.02yv6b",
                "m.09nwwf",
                "m.0xhtw",
                "m.05w3f",
                "m.02l96k",
                "m.06by7",
                "m.0155w",
                "m.0cgxt",
                "m.08jyyk"
            ]
        ],
        "entity_linking": {
            "Jimi Hendrix": "m.01vsy3q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vsy3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vsy3q ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vsy3q')\na.add_fact('m.01vsy3q', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-605",
        "question": "what degrees did obama get in college",
        "answer": [
            "m.014mlp",
            "m.013zdg"
        ],
        "different_answer": [
            [
                "m.014mlp",
                "m.013zdg"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.degree', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-606",
        "question": "who were alexander graham bell 's siblings",
        "answer": [
            "m.0k257qt",
            "m.0w17rt6"
        ],
        "different_answer": [
            [
                "m.0k257qt",
                "m.0w17rt6"
            ]
        ],
        "entity_linking": {
            "Alexander Graham Bell": "m.0k70"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k70 ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k70')\na.add_fact('m.0k70', 'people.person.sibling_s', 'x1')\na.add_fact('x1', 'people.sibling_relationship.sibling', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-608",
        "question": "when did liverpool fc last win the champions league",
        "answer": [
            "m.0h_b67k"
        ],
        "different_answer": [
            [
                "m.0h_b67k"
            ]
        ],
        "entity_linking": {
            "Liverpool F.C.": "m.04ltf",
            "Football League Cup": "m.012dbw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ltf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ltf ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.012dbw .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012dbw')\na.add_filter('x0', '!=', 'm.04ltf')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.012dbw')\na.add_fact('m.04ltf', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-609",
        "question": "who played jeannie",
        "answer": [
            "m.034jjp"
        ],
        "different_answer": [
            [
                "m.034jjp"
            ]
        ],
        "entity_linking": {
            "I Dream of Jeannie": "m.025m13",
            "Jeannie": "m.04lqy4g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025m13)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025m13 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.04lqy4g .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lqy4g')\na.add_filter('x0', '!=', 'm.025m13')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.04lqy4g')\na.add_fact('m.025m13', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-611",
        "question": "where was st peter killed",
        "answer": [
            "m.06c62"
        ],
        "different_answer": [
            [
                "m.06c62"
            ]
        ],
        "entity_linking": {
            "Saint Peter": "m.071wp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071wp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071wp ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.071wp')\na.add_fact('m.071wp', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-612",
        "question": "who does jeremy shockey play for in 2012",
        "answer": [
            "m.01y3c"
        ],
        "different_answer": [
            [
                "m.01y3c"
            ]
        ],
        "entity_linking": {
            "Jeremy Shockey": "m.076ltd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.076ltd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.076ltd ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.076ltd')\na.add_fact('m.076ltd', 'base.schemastaging.athlete_extra.salary', 'x1')\na.add_fact('x1', 'base.schemastaging.athlete_salary.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-613",
        "question": "what college did deion sanders jr go to",
        "answer": [
            "m.01jq0j"
        ],
        "different_answer": [
            [
                "m.01jq0j"
            ]
        ],
        "entity_linking": {
            "Deion Sanders": "m.03n69x",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03n69x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03n69x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03n69x')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03n69x', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-614",
        "question": "when did the battle of alamo start",
        "answer": [
            "1836-02-23-08:00"
        ],
        "different_answer": [
            [
                "1836-02-23-08:00"
            ]
        ],
        "entity_linking": {
            "Battle of the Alamo": "m.02hztm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hztm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hztm ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02hztm')\na.add_fact('m.02hztm', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-615",
        "question": "what were the names of henry viii 's three children",
        "answer": [
            "m.056j9",
            "m.0hn9rc9",
            "m.02sx6f",
            "m.02rg_",
            "m.02s82"
        ],
        "different_answer": [
            [
                "m.056j9",
                "m.0hn9rc9",
                "m.02sx6f",
                "m.02rg_",
                "m.02s82"
            ]
        ],
        "entity_linking": {
            "Henry VIII of England": "m.03p77"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p77 ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03p77')\na.add_fact('m.03p77', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-616",
        "question": "what was queen elizabeth ii childhood nickname",
        "answer": [
            "Elizabeth II",
            "Lilibet"
        ],
        "different_answer": [
            [
                "Elizabeth II",
                "Lilibet"
            ]
        ],
        "entity_linking": {
            "Elizabeth II": "m.0d1_f"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1_f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1_f ns:base.schemastaging.context_name.nickname ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d1_f')\na.add_fact('m.0d1_f', 'base.schemastaging.context_name.nickname', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-617",
        "question": "where did tim tebow grow up",
        "answer": [
            "m.01dvzy"
        ],
        "different_answer": [
            [
                "m.01dvzy"
            ]
        ],
        "entity_linking": {
            "Tim Tebow": "m.0g7km1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g7km1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g7km1 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g7km1')\na.add_fact('m.0g7km1', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-618",
        "question": "where is chesapeake bay bridge",
        "answer": [
            "m.0dn8b",
            "m.0g834"
        ],
        "different_answer": [
            [
                "m.0dn8b",
                "m.0g834"
            ]
        ],
        "entity_linking": {
            "Chesapeake Bay Bridge": "m.03xksb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xksb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xksb ns:transportation.bridge.locale ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03xksb')\na.add_fact('m.03xksb', 'transportation.bridge.locale', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-619",
        "question": "who played victoria barkley",
        "answer": [
            "m.0bw6y"
        ],
        "different_answer": [
            [
                "m.0bw6y"
            ]
        ],
        "entity_linking": {
            "The Big Valley": "m.030k44",
            "Victoria Barkley": "m.09cyx23"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030k44)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030k44 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.09cyx23 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09cyx23')\na.add_filter('x0', '!=', 'm.030k44')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.09cyx23')\na.add_fact('m.030k44', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-620",
        "question": "where did kennedy 's inaugural address take place",
        "answer": [
            "m.07vth",
            "m.0rh6k"
        ],
        "different_answer": [
            [
                "m.07vth",
                "m.0rh6k"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.05br2y1 ns:time.event.locations ?x .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-621",
        "question": "what countries have german as the official language",
        "answer": [
            "m.03f2w",
            "m.0345h",
            "m.0h7x",
            "m.04j53",
            "m.06mzp",
            "m.04g61",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.03f2w",
                "m.0345h",
                "m.0h7x",
                "m.04j53",
                "m.06mzp",
                "m.04g61",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "German Language": "m.04306rv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.04306rv .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04306rv')\na.add_filter('x0', '!=', 'm.04306rv')\na.add_fact('x0', 'location.country.official_language', 'm.04306rv')\na.add_fact('m.04306rv', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-622",
        "question": "where did the taliban began",
        "answer": [
            "m.0jdd"
        ],
        "different_answer": [
            [
                "m.0jdd"
            ]
        ],
        "entity_linking": {
            "Taliban": "m.07jqh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07jqh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07jqh ns:organization.organization.geographic_scope ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07jqh')\na.add_fact('m.07jqh', 'organization.organization.geographic_scope', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-624",
        "question": "who plays elena gilbert on vampire diaries",
        "answer": [
            "m.027nwk2"
        ],
        "different_answer": [
            [
                "m.027nwk2"
            ]
        ],
        "entity_linking": {
            "Elena Gilbert": "m.0790rw8",
            "The Vampire Diaries": "m.05sy2k_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0790rw8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0790rw8 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.05sy2k_ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05sy2k_')\na.add_filter('x0', '!=', 'm.0790rw8')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.05sy2k_')\na.add_fact('m.0790rw8', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-626",
        "question": "what does the missouri river bisect",
        "answer": [
            "m.05fhy",
            "m.0488g",
            "m.04ych",
            "m.03s0w",
            "m.06mz5",
            "m.050l8",
            "m.05fky"
        ],
        "different_answer": [
            [
                "m.05fhy",
                "m.0488g",
                "m.04ych",
                "m.03s0w",
                "m.06mz5",
                "m.050l8",
                "m.05fky"
            ]
        ],
        "entity_linking": {
            "Missouri River": "m.04ykz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04ykz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04ykz ns:location.location.partially_contained_by ?y .\n?y ns:location.partial_containment_relationship.partially_contained_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ykz')\na.add_fact('m.04ykz', 'location.location.partially_contained_by', 'x1')\na.add_fact('x1', 'location.partial_containment_relationship.partially_contained_by', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-627",
        "question": "what nationality is taylor lautner jacob black",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Taylor Lautner": "m.07ldhs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ldhs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ldhs ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ldhs')\na.add_fact('m.07ldhs', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-628",
        "question": "what animal represents california",
        "answer": [
            "m.046279b"
        ],
        "different_answer": [
            [
                "m.046279b"
            ]
        ],
        "entity_linking": {
            "California": "m.01n7q",
            "State animal": "m.0462793"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n7q ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.0462793 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0462793')\na.add_filter('x0', '!=', 'm.01n7q')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.0462793')\na.add_fact('m.01n7q', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-629",
        "question": "what company does nike own",
        "answer": [
            "m.09m5tqw",
            "m.09m8m24",
            "m.0cnsqj1",
            "m.09m77sg",
            "m.09m7733",
            "m.09n586p",
            "m.09mxgzw",
            "m.09mqvs8",
            "m.09n4sfr",
            "m.09l_qsy",
            "m.09mpfwh",
            "m.09n05qk",
            "m.09mg9yx",
            "m.09n3w10",
            "m.09m2_gr",
            "m.09n4brr",
            "m.09n6p3w",
            "m.09mdfny",
            "m.09mj74b",
            "m.09m04cp",
            "m.09n20nr",
            "m.09mtq69",
            "m.09n05q3",
            "m.09mxzcf",
            "m.09m3gg9",
            "m.09n65_6",
            "m.09n5867",
            "m.09mdxp6",
            "m.09m3gw1",
            "m.09n2hct",
            "m.09n2h_r",
            "m.0b4zbb",
            "m.09mj4t7",
            "m.09mdfp4",
            "m.09mbk23",
            "m.09mqvs1",
            "m.09mb0fr",
            "m.09n9ftn",
            "m.09mcybt",
            "m.09n65z_",
            "m.09n3fsz",
            "m.09n4brj",
            "m.09n3f3q",
            "m.09m7p_d",
            "m.09mtq62",
            "m.09ml2ln",
            "m.09mxykw",
            "m.09m1m2f",
            "m.09mv4rv",
            "m.09m84_6",
            "m.09n73w8",
            "m.09mdfnq",
            "m.09mnf93",
            "m.09m8n9d",
            "m.09mpxh9",
            "m.09m_933",
            "m.09m3ydc",
            "m.09mxgzn",
            "m.09mx070",
            "m.09m84_f",
            "m.09mpfwq",
            "m.09m8lqy",
            "m.09m0mrr",
            "m.09m84_n",
            "m.0_yyy0j",
            "m.09n05qb",
            "m.09mtq6j",
            "m.0140d2",
            "m.09mxyl2",
            "m.09m_8xp",
            "m.09n12q_",
            "m.09mnf8x",
            "m.09m5vf0",
            "m.09n9ftf",
            "m.09mdygz",
            "m.09n2hc5",
            "m.09mv5h1",
            "m.09m_82n",
            "m.09n6p42",
            "m.09m9l86",
            "m.09mh80z",
            "m.09mnx3b",
            "m.09mnxz3",
            "m.09mk4jq",
            "m.09m12pm",
            "m.09mt6xr",
            "m.09ms8bg",
            "m.05j1g6",
            "m.09n6pt6",
            "m.09m67_9",
            "m.09n1kjv",
            "m.09mc11v",
            "m.09mh80r",
            "m.09m3ggj",
            "m.0bq0k3",
            "m.09mgs5z",
            "m.09mdxf_",
            "m.09m1knm",
            "m.09m2_gz",
            "m.09l_qsh",
            "m.09n73w1",
            "m.09n2hcl",
            "m.09m_ptr",
            "m.09mgsym",
            "m.09m_6y0",
            "m.09m12g4",
            "m.09m4dd7",
            "m.09mcj4c",
            "m.09mpy3t",
            "m.09m7p_w",
            "m.09mmhj9",
            "m.09l_qsq",
            "m.09n80p_",
            "m.09mmzcd",
            "m.09mnf8p",
            "m.09n586g",
            "m.09m3ydl",
            "m.09mxykn",
            "m.09mmhhw",
            "m.09m773b",
            "m.09ml2lw",
            "m.09mchdq",
            "m.09n2z87",
            "m.09mj55s",
            "m.09m_qf6",
            "m.09mm1kl",
            "m.09n65zs",
            "m.09mqvsh",
            "m.08qt1l",
            "m.09n0nbn",
            "m.09mmhj2",
            "m.09myf89",
            "m.09mb2c9",
            "m.09mxzbb",
            "m.09m9lj7",
            "m.09mnx33",
            "m.09mt6xj",
            "m.09n4brz",
            "m.09n2z8g",
            "m.09mk4jh"
        ],
        "different_answer": [
            [
                "m.09m5tqw",
                "m.09m8m24",
                "m.0cnsqj1",
                "m.09m77sg",
                "m.09m7733",
                "m.09n586p",
                "m.09mxgzw",
                "m.09mqvs8",
                "m.09n4sfr",
                "m.09l_qsy",
                "m.09mpfwh",
                "m.09n05qk",
                "m.09mg9yx",
                "m.09n3w10",
                "m.09m2_gr",
                "m.09n4brr",
                "m.09n6p3w",
                "m.09mdfny",
                "m.09mj74b",
                "m.09m04cp",
                "m.09n20nr",
                "m.09mtq69",
                "m.09n05q3",
                "m.09mxzcf",
                "m.09m3gg9",
                "m.09n65_6",
                "m.09n5867",
                "m.09mdxp6",
                "m.09m3gw1",
                "m.09n2hct",
                "m.09n2h_r",
                "m.0b4zbb",
                "m.09mj4t7",
                "m.09mdfp4",
                "m.09mbk23",
                "m.09mqvs1",
                "m.09mb0fr",
                "m.09n9ftn",
                "m.09mcybt",
                "m.09n65z_",
                "m.09n3fsz",
                "m.09n4brj",
                "m.09n3f3q",
                "m.09m7p_d",
                "m.09mtq62",
                "m.09ml2ln",
                "m.09mxykw",
                "m.09m1m2f",
                "m.09mv4rv",
                "m.09m84_6",
                "m.09n73w8",
                "m.09mdfnq",
                "m.09mnf93",
                "m.09m8n9d",
                "m.09mpxh9",
                "m.09m_933",
                "m.09m3ydc",
                "m.09mxgzn",
                "m.09mx070",
                "m.09m84_f",
                "m.09mpfwq",
                "m.09m8lqy",
                "m.09m0mrr",
                "m.09m84_n",
                "m.0_yyy0j",
                "m.09n05qb",
                "m.09mtq6j",
                "m.0140d2",
                "m.09mxyl2",
                "m.09m_8xp",
                "m.09n12q_",
                "m.09mnf8x",
                "m.09m5vf0",
                "m.09n9ftf",
                "m.09mdygz",
                "m.09n2hc5",
                "m.09mv5h1",
                "m.09m_82n",
                "m.09n6p42",
                "m.09m9l86",
                "m.09mh80z",
                "m.09mnx3b",
                "m.09mnxz3",
                "m.09mk4jq",
                "m.09m12pm",
                "m.09mt6xr",
                "m.09ms8bg",
                "m.05j1g6",
                "m.09n6pt6",
                "m.09m67_9",
                "m.09n1kjv",
                "m.09mc11v",
                "m.09mh80r",
                "m.09m3ggj",
                "m.0bq0k3",
                "m.09mgs5z",
                "m.09mdxf_",
                "m.09m1knm",
                "m.09m2_gz",
                "m.09l_qsh",
                "m.09n73w1",
                "m.09n2hcl",
                "m.09m_ptr",
                "m.09mgsym",
                "m.09m_6y0",
                "m.09m12g4",
                "m.09m4dd7",
                "m.09mcj4c",
                "m.09mpy3t",
                "m.09m7p_w",
                "m.09mmhj9",
                "m.09l_qsq",
                "m.09n80p_",
                "m.09mmzcd",
                "m.09mnf8p",
                "m.09n586g",
                "m.09m3ydl",
                "m.09mxykn",
                "m.09mmhhw",
                "m.09m773b",
                "m.09ml2lw",
                "m.09mchdq",
                "m.09n2z87",
                "m.09mj55s",
                "m.09m_qf6",
                "m.09mm1kl",
                "m.09n65zs",
                "m.09mqvsh",
                "m.08qt1l",
                "m.09n0nbn",
                "m.09mmhj2",
                "m.09myf89",
                "m.09mb2c9",
                "m.09mxzbb",
                "m.09m9lj7",
                "m.09mnx33",
                "m.09mt6xj",
                "m.09n4brz",
                "m.09n2z8g",
                "m.09mk4jh"
            ]
        ],
        "entity_linking": {
            "Nike, Inc.": "m.0lwkh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lwkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lwkh ns:organization.organization.child ?y .\n?y ns:organization.organization_relationship.child ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lwkh')\na.add_fact('m.0lwkh', 'organization.organization.child', 'x1')\na.add_fact('x1', 'organization.organization_relationship.child', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-630",
        "question": "what language do colombian people speak",
        "answer": [
            "m.02hwglw",
            "m.02hwl46",
            "m.02hwv8r",
            "m.02hxvjw",
            "m.02hwyr3",
            "m.05tnswp",
            "m.09gpqdh",
            "m.02hwvm1",
            "m.02hwh2x",
            "m.02hxb6s",
            "m.06nm1",
            "m.02hxds7",
            "m.02hxh5f",
            "m.02hwwxk",
            "m.02hwqrn",
            "m.02hxlpz",
            "m.03h0wpt",
            "m.02hxsy4",
            "m.01yppj",
            "m.02hwt3q",
            "m.02ppbb5",
            "m.02hxl2t",
            "m.02hwnpn",
            "m.02hwr84",
            "m.0b7mcv",
            "m.02hxz2z",
            "m.02ppbg9",
            "m.02hwxgh",
            "m.02hxb4m",
            "m.02hxs9_",
            "m.0km3ztb",
            "m.02hwl4_",
            "m.02hxssc",
            "m.02hxj6x",
            "m.02ppbnh",
            "m.02hxy6v",
            "m.02hx2q2",
            "m.02hxhrz",
            "m.02hxdd2",
            "m.02hxksk",
            "m.02hx2tn",
            "m.02hxs7q",
            "m.02hwrvb",
            "m.02hxswb",
            "m.02hxtwj",
            "m.085vdy",
            "m.02hw_7r",
            "m.02hxb1x",
            "m.09k4cp",
            "m.025syhx",
            "m.02hwv5q",
            "m.02hxnf6",
            "m.02hxxcv",
            "m.02pq8qn",
            "m.026wqvr",
            "m.02hxf1r",
            "m.07k4r10",
            "m.06gdhz",
            "m.02hx0bf",
            "m.02hx5w4",
            "m.02hwqww",
            "m.02hwnwm",
            "g.1q6h_1_4j",
            "m.02hwzgg",
            "m.02hwmth",
            "m.03w6b4",
            "m.02hxzv2",
            "m.02hxp1v",
            "m.02hwwlp",
            "m.02hwzdd",
            "m.02hxdfd",
            "m.02hxy04",
            "m.02hxv46",
            "m.08w0ky",
            "m.02hww1x",
            "m.02hwgnw",
            "m.02hwpxb",
            "m.02hwgxh",
            "m.02hx_dp",
            "m.02hxfkq",
            "m.02hxsz8",
            "m.02hx8nb",
            "m.0bm08x",
            "m.02hwqkg",
            "m.02hwzld",
            "m.02hwxg4"
        ],
        "different_answer": [
            [
                "m.02hwglw",
                "m.02hwl46",
                "m.02hwv8r",
                "m.02hxvjw",
                "m.02hwyr3",
                "m.05tnswp",
                "m.09gpqdh",
                "m.02hwvm1",
                "m.02hwh2x",
                "m.02hxb6s",
                "m.06nm1",
                "m.02hxds7",
                "m.02hxh5f",
                "m.02hwwxk",
                "m.02hwqrn",
                "m.02hxlpz",
                "m.03h0wpt",
                "m.02hxsy4",
                "m.01yppj",
                "m.02hwt3q",
                "m.02ppbb5",
                "m.02hxl2t",
                "m.02hwnpn",
                "m.02hwr84",
                "m.0b7mcv",
                "m.02hxz2z",
                "m.02ppbg9",
                "m.02hwxgh",
                "m.02hxb4m",
                "m.02hxs9_",
                "m.0km3ztb",
                "m.02hwl4_",
                "m.02hxssc",
                "m.02hxj6x",
                "m.02ppbnh",
                "m.02hxy6v",
                "m.02hx2q2",
                "m.02hxhrz",
                "m.02hxdd2",
                "m.02hxksk",
                "m.02hx2tn",
                "m.02hxs7q",
                "m.02hwrvb",
                "m.02hxswb",
                "m.02hxtwj",
                "m.085vdy",
                "m.02hw_7r",
                "m.02hxb1x",
                "m.09k4cp",
                "m.025syhx",
                "m.02hwv5q",
                "m.02hxnf6",
                "m.02hxxcv",
                "m.02pq8qn",
                "m.026wqvr",
                "m.02hxf1r",
                "m.07k4r10",
                "m.06gdhz",
                "m.02hx0bf",
                "m.02hx5w4",
                "m.02hwqww",
                "m.02hwnwm",
                "g.1q6h_1_4j",
                "m.02hwzgg",
                "m.02hwmth",
                "m.03w6b4",
                "m.02hxzv2",
                "m.02hxp1v",
                "m.02hwwlp",
                "m.02hwzdd",
                "m.02hxdfd",
                "m.02hxy04",
                "m.02hxv46",
                "m.08w0ky",
                "m.02hww1x",
                "m.02hwgnw",
                "m.02hwpxb",
                "m.02hwgxh",
                "m.02hx_dp",
                "m.02hxfkq",
                "m.02hxsz8",
                "m.02hx8nb",
                "m.0bm08x",
                "m.02hwqkg",
                "m.02hwzld",
                "m.02hwxg4"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Colombia": "m.01ls2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ls2')\na.add_fact('m.01ls2', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-631",
        "question": "what year did ray allen join the nba",
        "answer": [
            "1996-08:00"
        ],
        "different_answer": [
            [
                "1996-08:00"
            ]
        ],
        "entity_linking": {
            "Ray Allen": "m.03lh3v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03lh3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03lh3v ns:sports.pro_athlete.career_start ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03lh3v')\na.add_fact('m.03lh3v', 'sports.pro_athlete.career_start', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-633",
        "question": "what is claire danes famous for",
        "answer": [
            "m.03gjzk",
            "m.02hrh1q",
            "m.0np9r"
        ],
        "different_answer": [
            [
                "m.03gjzk",
                "m.02hrh1q",
                "m.0np9r"
            ]
        ],
        "entity_linking": {
            "Claire Danes": "m.01gq0b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gq0b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gq0b ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01gq0b')\na.add_fact('m.01gq0b', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-634",
        "question": "what county is san antonio in",
        "answer": [
            "m.0ms5v"
        ],
        "different_answer": [
            [
                "m.0ms5v"
            ],
            [
                "m.0mskq",
                "m.0mqr8",
                "m.0ms5v"
            ]
        ],
        "entity_linking": {
            "San Antonio": "m.0f2w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2w0 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f2w0')\na.add_fact('m.0f2w0', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-635",
        "question": "what characters does matt stone do",
        "answer": [
            "m.0h0z48_",
            "m.0bzk1s0",
            "m.0h0z488",
            "m.0h0z4dl",
            "m.0h0z47s",
            "m.0h0z481",
            "m.0h0z48k",
            "m.0bthgtn",
            "m.0bthgtr",
            "m.0g1jfp",
            "m.0h0z47h",
            "m.0bzk1qh",
            "m.0dnc0h",
            "m.01lgj0",
            "m.021r0s",
            "m.0h0z48s",
            "m.0vnkcxn",
            "m.013z1n",
            "m.0bzk1r1",
            "m.0bthgtk",
            "m.0bzk1rh"
        ],
        "different_answer": [
            [
                "m.0h0z48_",
                "m.0bzk1s0",
                "m.0h0z488",
                "m.0h0z4dl",
                "m.0h0z47s",
                "m.0h0z481",
                "m.0h0z48k",
                "m.0bthgtn",
                "m.0bthgtr",
                "m.0g1jfp",
                "m.0h0z47h",
                "m.0bzk1qh",
                "m.0dnc0h",
                "m.01lgj0",
                "m.021r0s",
                "m.0h0z48s",
                "m.0vnkcxn",
                "m.013z1n",
                "m.0bzk1r1",
                "m.0bthgtk",
                "m.0bzk1rh"
            ]
        ],
        "entity_linking": {
            "Matt Stone": "m.01_x6d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_x6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_x6d ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01_x6d')\na.add_fact('m.01_x6d', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-636",
        "question": "what timezone is the state of michigan and",
        "answer": [
            "m.02_37z",
            "m.02hcv8",
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02_37z",
                "m.02hcv8",
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Michigan": "m.04rrx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04rrx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04rrx ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04rrx')\na.add_fact('m.04rrx', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-637",
        "question": "what type of government did soviet union have",
        "answer": [
            "m.01fkst",
            "m.025tbxf",
            "m.06zgbt",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.01fkst",
                "m.025tbxf",
                "m.06zgbt",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Soviet Union": "m.05vz3zq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vz3zq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vz3zq ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05vz3zq')\na.add_fact('m.05vz3zq', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-638",
        "question": "what languages are there in japan",
        "answer": [
            "m.0jdg7",
            "m.02h40lc",
            "m.03_9r",
            "m.02jcw",
            "m.02hwhyv"
        ],
        "different_answer": [
            [
                "m.0jdg7",
                "m.02h40lc",
                "m.03_9r",
                "m.02jcw",
                "m.02hwhyv"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-639",
        "question": "what year did the bulls get rodman",
        "answer": [
            "1995-08:00"
        ],
        "different_answer": [
            [
                "1995-08:00"
            ]
        ],
        "entity_linking": {
            "Dennis Rodman": "m.01ztgm",
            "Chicago Bulls": "m.0jm74"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ztgm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ztgm ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.from ?x .\n?y ns:sports.sports_team_roster.team ns:m.0jm74 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jm74')\na.add_filter('x0', '!=', 'm.01ztgm')\na.add_fact('x1', 'sports.sports_team_roster.team', 'm.0jm74')\na.add_fact('m.01ztgm', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-640",
        "question": "who was saint paul the apostle",
        "answer": [
            "m.02k_m1q",
            "m.066dv",
            "m.0cbd2",
            "m.0f2pm"
        ],
        "different_answer": [
            [
                "m.02k_m1q",
                "m.066dv",
                "m.0cbd2",
                "m.0f2pm"
            ]
        ],
        "entity_linking": {
            "Paul the Apostle": "m.060nc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060nc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060nc ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060nc')\na.add_fact('m.060nc', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-642",
        "question": "where did vince scully go to college",
        "answer": [
            "m.027kp3"
        ],
        "different_answer": [
            [
                "m.027kp3"
            ]
        ],
        "entity_linking": {
            "Vin Scully": "m.038gnr",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038gnr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038gnr ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.038gnr')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.038gnr', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-643",
        "question": "where does princess leia live",
        "answer": [
            "m.065lhy"
        ],
        "different_answer": [
            [
                "m.065lhy"
            ]
        ],
        "entity_linking": {
            "Leia Organa": "m.0ddqw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddqw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddqw ns:fictional_universe.fictional_character.places_lived ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ddqw')\na.add_fact('m.0ddqw', 'fictional_universe.fictional_character.places_lived', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-644",
        "question": "what famous people are from el salvador",
        "answer": [
            "m.05zkrkw",
            "m.06y2q9",
            "m.04y963w",
            "m.02phhjj",
            "m.026xmgs",
            "m.0gck6d6",
            "m.0h1bw_6",
            "m.0knxpym",
            "m.0ds0ght",
            "m.04f4spb",
            "m.0dbk9r",
            "m.07bk65",
            "m.0h2lqh",
            "m.02qscbm",
            "m.02qsclj",
            "m.02pyjqw",
            "m.0j3y75j",
            "m.03chr1c",
            "m.0drw_42",
            "m.05zv1fd",
            "m.012_0d7s",
            "m.0ndx3dp",
            "m.03m4f_f",
            "m.03c5z5s",
            "m.0n484vf",
            "m.0yzmtry",
            "m.0gysvkq",
            "m.05b_737",
            "m.080bz0l",
            "m.04n3xqn",
            "m.0gx_9sj",
            "m.02vmtpg",
            "m.0dlnrmt",
            "m.011v5_6y",
            "m.010h0d8y",
            "m.03c250_",
            "m.06y1sn",
            "m.012_0fc_",
            "m.0k_fvt",
            "m.02v_3hr",
            "m.0j442fb",
            "m.03cblzx",
            "m.06y1tb",
            "m.0dd34w",
            "m.0v_3g3z",
            "m.0j9nts6",
            "m.0ktzqtz",
            "m.05yr4wm",
            "m.04lhqln",
            "m.09ggck_",
            "m.03chqtt",
            "m.07swd6",
            "m.03f4fxd",
            "m.04yfkr7",
            "m.0glt20_",
            "m.0cny39v",
            "m.09v1mhy",
            "m.0j9k7c7",
            "g.11b8058v7j",
            "m.04dyyg2",
            "m.0hr5tm9",
            "m.06y2kd",
            "m.08vz5d",
            "m.0kg2yh2",
            "m.013b7xby",
            "m.0131y42k",
            "m.0knmfg3",
            "m.011k0bpp",
            "m.05c2y_f",
            "m.0h8k38b",
            "m.0b_qjns",
            "m.0h1gfdk",
            "m.03hzxty",
            "m.03cfwyh",
            "m.06y25k",
            "m.06y1yv",
            "m.065thkd",
            "m.04cykvj",
            "m.03nxqf0",
            "m.0cc70k9",
            "m.03c9124",
            "m.0pmg_63",
            "m.06y2bv",
            "m.0h3cwk",
            "m.0h7mwf5",
            "m.06y2mv",
            "m.06w9_j6",
            "m.03ctvv4",
            "m.066127x",
            "m.05m3gg",
            "m.06y1yh",
            "m.02qsc86",
            "m.011k0bx8",
            "m.01311sns",
            "m.06y27b",
            "m.0h3vkz2",
            "m.02qgkkg",
            "m.02x5pqn",
            "m.06y2cw",
            "m.012z_6bb",
            "m.03ck2fb",
            "m.0cc8gnq",
            "m.0h5595b",
            "m.0gyr_2r",
            "m.07p8ps",
            "m.0hrgx45",
            "m.0kmy4yx",
            "m.04q8w4h",
            "m.03nxgl4",
            "m.0fbs00",
            "m.043ks6h",
            "m.0bm9y7c",
            "m.0b__gm3",
            "m.04f69lb",
            "m.0q200b9",
            "m.04_076h"
        ],
        "different_answer": [
            [
                "m.05zkrkw",
                "m.06y2q9",
                "m.04y963w",
                "m.02phhjj",
                "m.026xmgs",
                "m.0gck6d6",
                "m.0h1bw_6",
                "m.0knxpym",
                "m.0ds0ght",
                "m.04f4spb",
                "m.0dbk9r",
                "m.07bk65",
                "m.0h2lqh",
                "m.02qscbm",
                "m.02qsclj",
                "m.02pyjqw",
                "m.0j3y75j",
                "m.03chr1c",
                "m.0drw_42",
                "m.05zv1fd",
                "m.012_0d7s",
                "m.0ndx3dp",
                "m.03m4f_f",
                "m.03c5z5s",
                "m.0n484vf",
                "m.0yzmtry",
                "m.0gysvkq",
                "m.05b_737",
                "m.080bz0l",
                "m.04n3xqn",
                "m.0gx_9sj",
                "m.02vmtpg",
                "m.0dlnrmt",
                "m.011v5_6y",
                "m.010h0d8y",
                "m.03c250_",
                "m.06y1sn",
                "m.012_0fc_",
                "m.0k_fvt",
                "m.02v_3hr",
                "m.0j442fb",
                "m.03cblzx",
                "m.06y1tb",
                "m.0dd34w",
                "m.0v_3g3z",
                "m.0j9nts6",
                "m.0ktzqtz",
                "m.05yr4wm",
                "m.04lhqln",
                "m.09ggck_",
                "m.03chqtt",
                "m.07swd6",
                "m.03f4fxd",
                "m.04yfkr7",
                "m.0glt20_",
                "m.0cny39v",
                "m.09v1mhy",
                "m.0j9k7c7",
                "g.11b8058v7j",
                "m.04dyyg2",
                "m.0hr5tm9",
                "m.06y2kd",
                "m.08vz5d",
                "m.0kg2yh2",
                "m.013b7xby",
                "m.0131y42k",
                "m.0knmfg3",
                "m.011k0bpp",
                "m.05c2y_f",
                "m.0h8k38b",
                "m.0b_qjns",
                "m.0h1gfdk",
                "m.03hzxty",
                "m.03cfwyh",
                "m.06y25k",
                "m.06y1yv",
                "m.065thkd",
                "m.04cykvj",
                "m.03nxqf0",
                "m.0cc70k9",
                "m.03c9124",
                "m.0pmg_63",
                "m.06y2bv",
                "m.0h3cwk",
                "m.0h7mwf5",
                "m.06y2mv",
                "m.06w9_j6",
                "m.03ctvv4",
                "m.066127x",
                "m.05m3gg",
                "m.06y1yh",
                "m.02qsc86",
                "m.011k0bx8",
                "m.01311sns",
                "m.06y27b",
                "m.0h3vkz2",
                "m.02qgkkg",
                "m.02x5pqn",
                "m.06y2cw",
                "m.012z_6bb",
                "m.03ck2fb",
                "m.0cc8gnq",
                "m.0h5595b",
                "m.0gyr_2r",
                "m.07p8ps",
                "m.0hrgx45",
                "m.0kmy4yx",
                "m.04q8w4h",
                "m.03nxgl4",
                "m.0fbs00",
                "m.043ks6h",
                "m.0bm9y7c",
                "m.0b__gm3",
                "m.04f69lb",
                "m.0q200b9",
                "m.04_076h"
            ]
        ],
        "entity_linking": {
            "El Salvador": "m.02k8k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k8k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k8k ns:location.location.people_born_here ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k8k')\na.add_fact('m.02k8k', 'location.location.people_born_here', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-645",
        "question": "what type of art did leonardo da vinci make",
        "answer": [
            "m.05qdh",
            "m.02csf",
            "m.06msq"
        ],
        "different_answer": [
            [
                "m.05qdh",
                "m.02csf",
                "m.06msq"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'visual_art.visual_artist.art_forms', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-646",
        "question": "where did mary bell live",
        "answer": [
            "m.0j7ng"
        ],
        "different_answer": [
            [
                "m.0j7ng"
            ]
        ],
        "entity_linking": {
            "Mary Bell": "m.01j324"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j324)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j324 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01j324')\na.add_fact('m.01j324', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-648",
        "question": "who did kimberly williams marry",
        "answer": [
            "m.03gr7w"
        ],
        "different_answer": [
            [
                "m.03gr7w"
            ]
        ],
        "entity_linking": {
            "Kimberly Williams-Paisley": "m.05d5mc",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d5mc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d5mc ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.05d5mc')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.05d5mc', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-649",
        "question": "what other movies has ryan gosling been in",
        "answer": [
            "m.0y4qznp",
            "m.08gv6s",
            "m.0cyn0z",
            "m.093d8j0",
            "m.0d78m2r",
            "m.023gxx",
            "m.0ddf2bm",
            "m.043k1_h",
            "m.026k37r",
            "g.11by0vcm_y",
            "m.0gx99m8",
            "m.02x18l",
            "m.0gg5qcw",
            "m.0dgrqg",
            "m.0g4vmj8",
            "m.0z8ngl9",
            "m.04j1bgz",
            "m.05ft32",
            "m.0583wk",
            "m.0gx999d",
            "m.047tsx3",
            "m.0nh4bl2",
            "m.02x0fs9",
            "m.0v_c6kv",
            "m.0gx997r",
            "m.0dryx2",
            "m.01262msv"
        ],
        "different_answer": [
            [
                "m.0y4qznp",
                "m.08gv6s",
                "m.0cyn0z",
                "m.093d8j0",
                "m.0d78m2r",
                "m.023gxx",
                "m.0ddf2bm",
                "m.043k1_h",
                "m.026k37r",
                "g.11by0vcm_y",
                "m.0gx99m8",
                "m.02x18l",
                "m.0gg5qcw",
                "m.0dgrqg",
                "m.0g4vmj8",
                "m.0z8ngl9",
                "m.04j1bgz",
                "m.05ft32",
                "m.0583wk",
                "m.0gx999d",
                "m.047tsx3",
                "m.0nh4bl2",
                "m.02x0fs9",
                "m.0v_c6kv",
                "m.0gx997r",
                "m.0dryx2",
                "m.01262msv"
            ]
        ],
        "entity_linking": {
            "Ryan Gosling": "m.03m6_z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m6_z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m6_z ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03m6_z')\na.add_fact('m.03m6_z', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-650",
        "question": "what political party does julia gillard belong to",
        "answer": [
            "m.02w5p3q",
            "m.0q96"
        ],
        "different_answer": [
            [
                "m.02w5p3q",
                "m.0q96"
            ]
        ],
        "entity_linking": {
            "Julia Gillard": "m.02kx9r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kx9r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kx9r ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02kx9r')\na.add_fact('m.02kx9r', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-651",
        "question": "what is the currency of germany now",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-652",
        "question": "what kind of hispanic is selena gomez",
        "answer": [
            "m.0xnvg",
            "m.09k5jvk"
        ],
        "different_answer": [
            [
                "m.0xnvg",
                "m.09k5jvk"
            ]
        ],
        "entity_linking": {
            "Selena Gomez": "m.0gs6vr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:people.person.ethnicity ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gs6vr')\na.add_fact('m.0gs6vr', 'people.person.ethnicity', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-653",
        "question": "who did denise van outen married",
        "answer": [
            "m.02r9lyp"
        ],
        "different_answer": [
            [
                "m.02r9lyp"
            ]
        ],
        "entity_linking": {
            "Denise van Outen": "m.02_75_",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_75_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_75_ ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.02_75_')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.02_75_', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-654",
        "question": "what are egyptian money called",
        "answer": [
            "m.04phzg"
        ],
        "different_answer": [
            [
                "m.04phzg"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-655",
        "question": "what is the zip code for wyoming michigan",
        "answer": [
            "m.01_xv47",
            "m.01_xtr9"
        ],
        "different_answer": [
            [
                "m.01_xv47",
                "m.01_xtr9"
            ]
        ],
        "entity_linking": {
            "Wyoming": "m.0v9xs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v9xs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v9xs ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0v9xs')\na.add_fact('m.0v9xs', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-656",
        "question": "who is the president of costa rica in 2012",
        "answer": [
            "m.0bh9gpm"
        ],
        "different_answer": [
            [
                "m.0bh9gpm"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s",
            "President": "m.060c4",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060c4')\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060c4')\na.add_fact('m.01p8s', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-657",
        "question": "where did martin luther king got shot at",
        "answer": [
            "m.0c_m3"
        ],
        "different_answer": [
            [
                "m.0c_m3"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-658",
        "question": "who wrote the gospel according to john",
        "answer": [
            "m.046_b"
        ],
        "different_answer": [
            [
                "m.046_b"
            ]
        ],
        "entity_linking": {
            "Gospel of John": "m.038vs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038vs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038vs ns:book.written_work.author ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.038vs')\na.add_fact('m.038vs', 'book.written_work.author', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-659",
        "question": "what form of government is the uk",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-661",
        "question": "who did nasri play for before arsenal",
        "answer": [
            "m.02gys2"
        ],
        "different_answer": [
            [
                "m.02gys2"
            ]
        ],
        "entity_linking": {
            "Samir Nasri": "m.0f2dbm"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nfilter(?x != ns:m.0xbm)\nns:m.0f2dbm ns:sports.pro_athlete.teams ?z . #Samir Nasri\n?z ns:sports.sports_team_roster.team ns:m.0xbm  . #arsenal\n?z ns:sports.sports_team_roster.from ?from .\nns:m.0f2dbm ns:sports.pro_athlete.teams ?y . #Samir Nasri\n?y ns:sports.sports_team_roster.team ?x .\n?y  ns:sports.sports_team_roster.to ?to .\nFILTER (xsd:dateTime(?from) - xsd:dateTime(?to) >= 0)\n}\nORDER BY Desc(xsd:datetime(?from))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-662",
        "question": "what currency does the czech republic use now",
        "answer": [
            "m.04rpc3"
        ],
        "different_answer": [
            [
                "m.04rpc3"
            ]
        ],
        "entity_linking": {
            "Czech Republic": "m.01mjq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mjq')\na.add_fact('m.01mjq', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-663",
        "question": "what age did william penn get married",
        "answer": [
            "1672-04-04-08:00"
        ],
        "different_answer": [
            [
                "1672-04-04-08:00"
            ]
        ],
        "entity_linking": {
            "William Penn": "m.083qr",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083qr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083qr ns:people.person.spouse_s ?y .\n?y ns:people.marriage.from ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.083qr')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.083qr', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-664",
        "question": "what was firefox programmed in",
        "answer": [
            "m.011y70",
            "m.0jgqg",
            "m.02p97",
            "m.015tjh",
            "m.03cjm6"
        ],
        "different_answer": [
            [
                "m.011y70",
                "m.0jgqg",
                "m.02p97",
                "m.015tjh",
                "m.03cjm6"
            ]
        ],
        "entity_linking": {
            "Firefox": "m.01dyhm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01dyhm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01dyhm ns:computer.software.languages_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01dyhm')\na.add_fact('m.01dyhm', 'computer.software.languages_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-665",
        "question": "what government does new zealand have",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5"
            ]
        ],
        "entity_linking": {
            "New Zealand": "m.0ctw_b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ctw_b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ctw_b ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ctw_b')\na.add_fact('m.0ctw_b', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-666",
        "question": "where is isthmus of panama located on the map",
        "answer": [
            "m.06n3y"
        ],
        "different_answer": [
            [
                "m.06n3y"
            ]
        ],
        "entity_linking": {
            "Isthmus of Panama": "m.04zwft"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04zwft)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04zwft ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04zwft')\na.add_fact('m.04zwft', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-667",
        "question": "what is the capital of republic of ireland",
        "answer": [
            "m.02cft"
        ],
        "different_answer": [
            [
                "m.02cft"
            ]
        ],
        "entity_linking": {
            "Republic of Ireland": "m.03rt9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rt9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rt9 ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rt9')\na.add_fact('m.03rt9', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-668",
        "question": "what has kristen stewart acted in",
        "answer": [
            "m.06wjwv",
            "m.075wx89",
            "m.02z8bfh",
            "m.08ldl8",
            "m.04ynd_",
            "m.0_g812d",
            "m.02rx2m5",
            "m.02rj2v7",
            "m.04q86tb",
            "m.05q7874",
            "m.0d5jxc",
            "m.029xhb",
            "m.0g5qs2k",
            "m.0_vl_q6",
            "m.075wx7_",
            "m.0b6hmnc",
            "m.03nm_fh",
            "m.0fjckn",
            "m.0cty5n",
            "m.0w1zl9t",
            "m.03c7twt",
            "m.0ywy9pl",
            "m.02nhxs",
            "m.0295m6",
            "m.0n4n1y_",
            "m.0cp0t91",
            "m.05p5m5f",
            "m.0djz0rc",
            "m.09bw4_",
            "m.0w06pqf",
            "m.09qs_s",
            "m.05pdh86",
            "m.0w06rkh",
            "m.0ywy_65",
            "m.05b3kq9",
            "m.0133dmyj",
            "m.02wgbb"
        ],
        "different_answer": [
            [
                "m.06wjwv",
                "m.075wx89",
                "m.02z8bfh",
                "m.08ldl8",
                "m.04ynd_",
                "m.0_g812d",
                "m.02rx2m5",
                "m.02rj2v7",
                "m.04q86tb",
                "m.05q7874",
                "m.0d5jxc",
                "m.029xhb",
                "m.0g5qs2k",
                "m.0_vl_q6",
                "m.075wx7_",
                "m.0b6hmnc",
                "m.03nm_fh",
                "m.0fjckn",
                "m.0cty5n",
                "m.0w1zl9t",
                "m.03c7twt",
                "m.0ywy9pl",
                "m.02nhxs",
                "m.0295m6",
                "m.0n4n1y_",
                "m.0cp0t91",
                "m.05p5m5f",
                "m.0djz0rc",
                "m.09bw4_",
                "m.0w06pqf",
                "m.09qs_s",
                "m.05pdh86",
                "m.0w06rkh",
                "m.0ywy_65",
                "m.05b3kq9",
                "m.0133dmyj",
                "m.02wgbb"
            ]
        ],
        "entity_linking": {
            "Kristen Stewart": "m.07swvb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07swvb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07swvb ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07swvb')\na.add_fact('m.07swvb', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-669",
        "question": "what did dr josef mengele do",
        "answer": [
            "m.05t4q"
        ],
        "different_answer": [
            [
                "m.05t4q"
            ]
        ],
        "entity_linking": {
            "Josef Mengele": "m.0lhsd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lhsd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lhsd ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lhsd')\na.add_fact('m.0lhsd', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-670",
        "question": "what kind of language does egypt speak",
        "answer": [
            "m.025rvv7"
        ],
        "different_answer": [
            [
                "m.025rvv7"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-671",
        "question": "who are the senators of hawaii 2012",
        "answer": [
            "m.0357cd"
        ],
        "different_answer": [
            [
                "m.0357cd"
            ]
        ],
        "entity_linking": {
            "Hawaii": "m.03gh4",
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gh4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gh4 ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.jurisdiction_of_office ns:m.09c7w0 .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_filter('x0', '!=', 'm.03gh4')\na.add_fact('x1', 'government.government_position_held.jurisdiction_of_office', 'm.09c7w0')\na.add_fact('m.03gh4', 'government.political_district.representatives', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x2')\na.add_max('x2')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-672",
        "question": "what form of government does north korea have",
        "answer": [
            "m.025tbxf",
            "m.01gt0n",
            "m.0py4y"
        ],
        "different_answer": [
            [
                "m.025tbxf",
                "m.01gt0n",
                "m.0py4y"
            ]
        ],
        "entity_linking": {
            "North Korea": "m.05b7q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b7q ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05b7q')\na.add_fact('m.05b7q', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-673",
        "question": "where did robert kardashian go to college",
        "answer": [
            "m.02rky4",
            "m.065y4w7",
            "m.05pyvz"
        ],
        "different_answer": [
            [
                "m.02rky4",
                "m.065y4w7",
                "m.05pyvz"
            ]
        ],
        "entity_linking": {
            "Robert Kardashian": "m.01x48v",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01x48v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01x48v ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01x48v')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01x48v', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-675",
        "question": "what county is st james city fl in",
        "answer": [
            "m.0jrjb"
        ],
        "different_answer": [
            [
                "m.0jrjb"
            ],
            [
                "m.0jrjb"
            ]
        ],
        "entity_linking": {
            "St. James City": "m.0rmlp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rmlp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rmlp ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0rmlp')\na.add_fact('m.0rmlp', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-676",
        "question": "what did the akkadian empire include",
        "answer": [
            "m.0n541jb"
        ],
        "different_answer": [
            [
                "m.0n541jb"
            ]
        ],
        "entity_linking": {
            "Akkadian Empire": "m.0q_7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0q_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0q_7 ns:location.location.contains ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0q_7')\na.add_fact('m.0q_7', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-677",
        "question": "after how many years are the olympic games held",
        "answer": [
            "m.04q0_4f"
        ],
        "different_answer": [
            [
                "m.04q0_4f"
            ]
        ],
        "entity_linking": {
            "Olympic Games": "m.05nd_",
            "Time": "m.07c_l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nd_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nd_ ns:time.recurring_event.current_frequency ?x .\n?x ns:freebase.unit_profile.dimension ns:m.07c_l .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07c_l')\na.add_filter('x0', '!=', 'm.05nd_')\na.add_fact('x0', 'freebase.unit_profile.dimension', 'm.07c_l')\na.add_fact('m.05nd_', 'time.recurring_event.current_frequency', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-678",
        "question": "what system of government does guyana have",
        "answer": [
            "m.01fpfn",
            "m.01dw03",
            "m.06cx9"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01dw03",
                "m.06cx9"
            ]
        ],
        "entity_linking": {
            "Guyana": "m.034m8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034m8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034m8 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034m8')\na.add_fact('m.034m8', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-680",
        "question": "what team did aguero play for",
        "answer": [
            "m.0lg7v",
            "m.02bh_v",
            "m.01634x",
            "m.047yd6"
        ],
        "different_answer": [
            [
                "m.0lg7v",
                "m.02bh_v",
                "m.01634x",
                "m.047yd6"
            ]
        ],
        "entity_linking": {
            "Sergio Ag\u00fcero": "m.099vgz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.099vgz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.099vgz ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.099vgz')\na.add_fact('m.099vgz', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-681",
        "question": "who is the president of the european union 2012",
        "answer": [
            "m.036y38"
        ],
        "different_answer": [
            [
                "m.036y38"
            ]
        ],
        "entity_linking": {
            "European Union": "m.0_6t_z8",
            "President of the European Parliament": "m.039h0j",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_6t_z8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_6t_z8 ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.039h0j .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.039h0j')\na.add_filter('x0', '!=', 'm.0_6t_z8')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.039h0j')\na.add_fact('m.0_6t_z8', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-683",
        "question": "what year was kenya moore crowned miss usa",
        "answer": [
            "m.02vmzrl"
        ],
        "different_answer": [
            [
                "m.02vmzrl"
            ]
        ],
        "entity_linking": {
            "Miss USA": "m.03lp2g",
            "Kenya Moore": "m.08cpnf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03lp2g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03lp2g ns:time.recurring_event.instances ?x .\n?x ns:award.competition.winner ns:m.08cpnf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08cpnf')\na.add_filter('x0', '!=', 'm.03lp2g')\na.add_fact('x0', 'award.competition.winner', 'm.08cpnf')\na.add_fact('m.03lp2g', 'time.recurring_event.instances', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-684",
        "question": "what sort of government does nigeria have",
        "answer": [
            "m.01d9r3",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Nigeria": "m.05cgv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cgv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cgv ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05cgv')\na.add_fact('m.05cgv', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-685",
        "question": "where does chef ina garten live",
        "answer": [
            "m.0cr3d"
        ],
        "different_answer": [
            [
                "m.0cr3d"
            ]
        ],
        "entity_linking": {
            "Ina Garten": "m.0315fl",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0315fl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0315fl ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0315fl')\na.add_fact('m.0315fl', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-686",
        "question": "when the atlanta braves won the world series",
        "answer": [
            "m.04j712"
        ],
        "different_answer": [
            [
                "m.04j712"
            ]
        ],
        "entity_linking": {
            "Atlanta Braves": "m.0x2p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0x2p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0x2p ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0x2p')\na.add_fact('m.0x2p', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-688",
        "question": "what kind of language do they speak in iran",
        "answer": [
            "m.0fq4jq",
            "m.0xrg",
            "m.032f6",
            "m.0bqk9s",
            "m.01bcw_",
            "m.0jzc",
            "m.01m3f7",
            "m.09k7n_",
            "m.03gg_5",
            "m.04w042",
            "m.040blg",
            "m.0b1g2",
            "m.0gl97",
            "m.09hn84",
            "m.03h871",
            "m.07k3wd",
            "m.0fqmnr",
            "m.0swlx"
        ],
        "different_answer": [
            [
                "m.0fq4jq",
                "m.0xrg",
                "m.032f6",
                "m.0bqk9s",
                "m.01bcw_",
                "m.0jzc",
                "m.01m3f7",
                "m.09k7n_",
                "m.03gg_5",
                "m.04w042",
                "m.040blg",
                "m.0b1g2",
                "m.0gl97",
                "m.09hn84",
                "m.03h871",
                "m.07k3wd",
                "m.0fqmnr",
                "m.0swlx"
            ],
            [
                "m.032f6"
            ]
        ],
        "entity_linking": {
            "Iran": "m.03shp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03shp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03shp ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03shp')\na.add_fact('m.03shp', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-689",
        "question": "what was the first language spoken in spain",
        "answer": [
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-690",
        "question": "what did scott joplin play",
        "answer": [
            "m.06ch55",
            "m.05r5c"
        ],
        "different_answer": [
            [
                "m.06ch55",
                "m.05r5c"
            ]
        ],
        "entity_linking": {
            "Scott Joplin": "m.07b69"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07b69)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07b69 ns:music.group_member.instruments_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07b69')\na.add_fact('m.07b69', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-691",
        "question": "what school did miley cyrus",
        "answer": [
            "m.0d_s7d"
        ],
        "different_answer": [
            [
                "m.0d_s7d"
            ]
        ],
        "entity_linking": {
            "Miley Cyrus": "m.0bdxs5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bdxs5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bdxs5 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bdxs5')\na.add_fact('m.0bdxs5', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-693",
        "question": "what language do most people speak in afghanistan",
        "answer": [
            "m.02hwl5z",
            "m.0swlx"
        ],
        "different_answer": [
            [
                "m.02hwl5z",
                "m.0swlx"
            ],
            [
                "m.02hwl5z",
                "m.0swlx"
            ]
        ],
        "entity_linking": {
            "Afghanistan": "m.0jdd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jdd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jdd ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jdd')\na.add_fact('m.0jdd', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-694",
        "question": "who is the prime minister of jamaica west indies",
        "answer": [
            "m.0bpvhb"
        ],
        "different_answer": [
            [
                "m.0bpvhb"
            ]
        ],
        "entity_linking": {
            "Prime Minister of Jamaica": "m.01sm66",
            "Prime minister": "m.060bp",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sm66)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sm66 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060bp .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060bp')\na.add_filter('x0', '!=', 'm.01sm66')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060bp')\na.add_fact('m.01sm66', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-695",
        "question": "what role did paul mccartney play in the beatles",
        "answer": [
            "m.03_vpw",
            "m.0_sv_90",
            "m.01vj9c"
        ],
        "different_answer": [
            [
                "m.03_vpw",
                "m.0_sv_90",
                "m.01vj9c"
            ]
        ],
        "entity_linking": {
            "Paul McCartney": "m.03j24kf",
            "The Beatles": "m.07c0j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03j24kf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03j24kf ns:music.group_member.membership ?y .\n?y ns:music.group_membership.role ?x .\n?y ns:music.group_membership.group ns:m.07c0j .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07c0j')\na.add_filter('x0', '!=', 'm.03j24kf')\na.add_fact('x1', 'music.group_membership.group', 'm.07c0j')\na.add_fact('m.03j24kf', 'music.group_member.membership', 'x1')\na.add_fact('x1', 'music.group_membership.role', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-696",
        "question": "when did juventus win the champions league",
        "answer": [
            "m.02pt_57"
        ],
        "different_answer": [
            [
                "m.02pt_57"
            ]
        ],
        "entity_linking": {
            "Juventus F.C.": "m.045xx",
            "UEFA Champions League Final": "m.05nblxt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045xx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045xx ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.05nblxt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05nblxt')\na.add_filter('x0', '!=', 'm.045xx')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.05nblxt')\na.add_fact('m.045xx', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-698",
        "question": "who is robin roberts father",
        "answer": [
            "m.0czc1yg"
        ],
        "different_answer": [
            [
                "m.0czc1yg"
            ]
        ],
        "entity_linking": {
            "Robin Roberts": "m.06k3_t",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06k3_t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06k3_t ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.06k3_t')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.06k3_t', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-699",
        "question": "what is the capital of australia victoria state",
        "answer": [
            "m.0chgzm"
        ],
        "different_answer": [
            [
                "m.0chgzm"
            ],
            [
                "m.0chgzm"
            ],
            [
                "m.0chgzm"
            ]
        ],
        "entity_linking": {
            "Victoria": "m.0chgr2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chgr2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chgr2 ns:base.aareas.schema.administrative_area.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chgr2')\na.add_fact('m.0chgr2', 'location.australian_state.capital_city', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-700",
        "question": "where is french spoken most",
        "answer": [
            "m.04w58",
            "m.03548",
            "m.01nln",
            "m.0g8bw",
            "m.0697s",
            "m.07ytt",
            "m.04sj3",
            "m.04v09",
            "m.01p1b",
            "m.07z5n",
            "m.06mzp",
            "m.04vg8",
            "m.01xbgx",
            "m.0h3y",
            "m.04hqz",
            "m.06srk",
            "m.027jk",
            "m.0162v",
            "m.0fv4v",
            "m.04hhv",
            "m.027nb",
            "m.03_xj",
            "m.03c8mkv",
            "m.06dfg",
            "m.04vs9",
            "m.05cc1",
            "m.0169t",
            "m.03gk2",
            "m.0f8l9c",
            "m.03676",
            "m.01rxw",
            "m.04g61",
            "m.0164v",
            "m.0154j",
            "m.01nyl",
            "m.02kcz",
            "m.01699",
            "m.01ppq",
            "m.01n6c",
            "m.06sw9",
            "m.03gyl",
            "m.07fj_",
            "m.04wgh"
        ],
        "different_answer": [
            [
                "m.04w58",
                "m.03548",
                "m.01nln",
                "m.0g8bw",
                "m.0697s",
                "m.07ytt",
                "m.04sj3",
                "m.04v09",
                "m.01p1b",
                "m.07z5n",
                "m.06mzp",
                "m.04vg8",
                "m.01xbgx",
                "m.0h3y",
                "m.04hqz",
                "m.06srk",
                "m.027jk",
                "m.0162v",
                "m.0fv4v",
                "m.04hhv",
                "m.027nb",
                "m.03_xj",
                "m.03c8mkv",
                "m.06dfg",
                "m.04vs9",
                "m.05cc1",
                "m.0169t",
                "m.03gk2",
                "m.0f8l9c",
                "m.03676",
                "m.01rxw",
                "m.04g61",
                "m.0164v",
                "m.0154j",
                "m.01nyl",
                "m.02kcz",
                "m.01699",
                "m.01ppq",
                "m.01n6c",
                "m.06sw9",
                "m.03gyl",
                "m.07fj_",
                "m.04wgh"
            ]
        ],
        "entity_linking": {
            "French": "m.064_8sq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064_8sq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064_8sq ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.064_8sq')\na.add_fact('m.064_8sq', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-701",
        "question": "what team is reggie bush on 2011",
        "answer": [
            "m.05g3v",
            "m.04vn5"
        ],
        "different_answer": [
            [
                "m.05g3v",
                "m.04vn5"
            ]
        ],
        "entity_linking": {
            "Reggie Bush": "m.05cb70",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05cb70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05cb70 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05cb70')\na.add_fact('m.05cb70', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-702",
        "question": "what highschool did emily osment go to",
        "answer": [
            "m.07q2jh"
        ],
        "different_answer": [
            [
                "m.07q2jh"
            ]
        ],
        "entity_linking": {
            "Emily Osment": "m.03xnq9_",
            "Secondary/High School": "m.0ppgzhv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xnq9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xnq9_ ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:base.schemastaging.non_profit_extra.classification ns:m.0ppgzhv .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ppgzhv')\na.add_filter('x0', '!=', 'm.03xnq9_')\na.add_fact('x0', 'base.schemastaging.non_profit_extra.classification', 'm.0ppgzhv')\na.add_fact('m.03xnq9_', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-703",
        "question": "what currency should i take to mexico",
        "answer": [
            "m.012ts8"
        ],
        "different_answer": [
            [
                "m.012ts8"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-704",
        "question": "who is thor heyerdahl",
        "answer": [
            "m.0dgd_",
            "m.02xlj97",
            "m.029lh1",
            "m.02jknp",
            "m.01d_h8",
            "m.06q2q"
        ],
        "different_answer": [
            [
                "m.0dgd_",
                "m.02xlj97",
                "m.029lh1",
                "m.02jknp",
                "m.01d_h8",
                "m.06q2q"
            ]
        ],
        "entity_linking": {
            "Thor Heyerdahl": "m.09fcm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09fcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09fcm ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09fcm')\na.add_fact('m.09fcm', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-706",
        "question": "where did troy aikman play football",
        "answer": [
            "m.02896"
        ],
        "different_answer": [
            [
                "m.02896"
            ]
        ],
        "entity_linking": {
            "Troy Aikman": "m.0dr5g9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dr5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dr5g9 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dr5g9')\na.add_fact('m.0dr5g9', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-707",
        "question": "who played cletus hogg",
        "answer": [
            "m.04cyn66"
        ],
        "different_answer": [
            [
                "m.04cyn66"
            ]
        ],
        "entity_linking": {
            "Cletus Hogg": "m.0bxcc6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxcc6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxcc6 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bxcc6')\na.add_fact('m.0bxcc6', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-708",
        "question": "who won fa cup 1976",
        "answer": [
            "m.0k_l4"
        ],
        "different_answer": [
            [
                "m.0k_l4"
            ]
        ],
        "entity_linking": {
            "FA Cup": "m.02_p0",
            "1975\u201376 FA Cup": "m.04gp5lx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_p0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_p0 ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:m.04gp5lx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04gp5lx')\na.add_filter('x0', '!=', 'm.02_p0')\na.add_fact('x1', 'sports.sports_award.season', 'm.04gp5lx')\na.add_fact('m.02_p0', 'sports.sports_award_type.winners', 'x1')\na.add_fact('x1', 'sports.sports_award.award_winner', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-709",
        "question": "what did general robert e lee die from",
        "answer": [
            "m.0dq9p"
        ],
        "different_answer": [
            [
                "m.0dq9p"
            ]
        ],
        "entity_linking": {
            "Robert E. Lee": "m.06f5j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06f5j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06f5j ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06f5j')\na.add_fact('m.06f5j', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-710",
        "question": "what style of art did henri matisse do",
        "answer": [
            "m.049xrv",
            "m.03xj1",
            "m.04lx1",
            "m.015r61",
            "m.04y41"
        ],
        "different_answer": [
            [
                "m.049xrv",
                "m.03xj1",
                "m.04lx1",
                "m.015r61",
                "m.04y41"
            ]
        ],
        "entity_linking": {
            "Henri Matisse": "m.0gct_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gct_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gct_ ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gct_')\na.add_fact('m.0gct_', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-711",
        "question": "who plays chuck bass in gossip girl",
        "answer": [
            "m.02w4x29"
        ],
        "different_answer": [
            [
                "m.02w4x29"
            ],
            [
                "m.02w4x29"
            ]
        ],
        "entity_linking": {
            "Chuck Bass": "m.0g0jx7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g0jx7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g0jx7 ns:base.gossipgirl.character.played_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g0jx7')\na.add_fact('m.0g0jx7', 'base.gossipgirl.character.played_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-712",
        "question": "what countries have territories in oceania",
        "answer": [
            "m.05br2",
            "m.07fb6",
            "m.05c17",
            "m.07z5n",
            "m.05vd5",
            "m.03188",
            "m.082nw",
            "m.07fsv",
            "m.047t_",
            "m.05cnr",
            "m.05tr7",
            "m.02wzv",
            "m.020p1",
            "m.05b2h",
            "m.0chghy",
            "m.03ryn",
            "m.0h8d",
            "m.04v6v",
            "m.01n8qg",
            "m.05qkp",
            "m.06s9y",
            "m.02lx0",
            "m.07f9q",
            "m.05cqm",
            "m.034tl",
            "m.02wt0",
            "m.0ctw_b"
        ],
        "different_answer": [
            [
                "m.05br2",
                "m.07fb6",
                "m.05c17",
                "m.07z5n",
                "m.05vd5",
                "m.03188",
                "m.082nw",
                "m.07fsv",
                "m.047t_",
                "m.05cnr",
                "m.05tr7",
                "m.02wzv",
                "m.020p1",
                "m.05b2h",
                "m.0chghy",
                "m.03ryn",
                "m.0h8d",
                "m.04v6v",
                "m.01n8qg",
                "m.05qkp",
                "m.06s9y",
                "m.02lx0",
                "m.07f9q",
                "m.05cqm",
                "m.034tl",
                "m.02wt0",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "Oceania": "m.05nrg",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nrg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nrg ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.05nrg')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.05nrg', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-713",
        "question": "what county is st. louis park in",
        "answer": [
            "m.0nhmw"
        ],
        "different_answer": [
            [
                "m.0nhmw"
            ],
            [
                "m.0nhmw"
            ]
        ],
        "entity_linking": {
            "St. Louis Park": "m.0xdhj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xdhj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xdhj ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0xdhj')\na.add_fact('m.0xdhj', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-714",
        "question": "what is the political system of south africa",
        "answer": [
            "m.0c9rw5",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.0c9rw5",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "South Africa": "m.0hzlz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hzlz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hzlz ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzlz')\na.add_fact('m.0hzlz', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-716",
        "question": "what language group does germany belong to",
        "answer": [
            "m.0140qt",
            "m.03489",
            "m.03v09"
        ],
        "different_answer": [
            [
                "m.0140qt",
                "m.03489",
                "m.03v09"
            ]
        ],
        "entity_linking": {
            "German Language": "m.04306rv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.language_family ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04306rv')\na.add_fact('m.04306rv', 'language.human_language.language_family', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-717",
        "question": "what timezone is tucson arizona in right now",
        "answer": [
            "m.02hczc"
        ],
        "different_answer": [
            [
                "m.02hczc"
            ]
        ],
        "entity_linking": {
            "Tucson": "m.0fr0t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fr0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fr0t ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fr0t')\na.add_fact('m.0fr0t', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-718",
        "question": "when was lucy lawless born",
        "answer": [
            "1968-03-29-08:00"
        ],
        "different_answer": [
            [
                "1968-03-29-08:00"
            ]
        ],
        "entity_linking": {
            "Lucy Lawless": "m.01r9md"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r9md)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r9md ns:people.person.date_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r9md')\na.add_fact('m.01r9md', 'people.person.date_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-719",
        "question": "which political party does barack obama represent",
        "answer": [
            "m.0d075m"
        ],
        "different_answer": [
            [
                "m.0d075m"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-721",
        "question": "what kind of leukemia did jill clayburgh have",
        "answer": [
            "m.02bg7m",
            "m.04psf"
        ],
        "different_answer": [
            [
                "m.02bg7m",
                "m.04psf"
            ]
        ],
        "entity_linking": {
            "Jill Clayburgh": "m.01gw8b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01gw8b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01gw8b ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01gw8b')\na.add_fact('m.01gw8b', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-722",
        "question": "what is the name of the book hitler wrote in jail",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_",
            "Book": "m.01xryvm"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT  ?x\nWHERE {\n  ns:m.07_m9_ ns:book.book_subject.works ?x .\n  ?x ns:book.written_work.date_written ?d .\n\n  ns:m.07_m9_ ns:base.prison.prisoner.imprisoned ?y .\n  ?y          ns:base.prison.imprisonment.from ?from ;\n              ns:base.prison.imprisonment.to ?to .\n  FILTER (xsd:dateTime(?d) - xsd:dateTime(?from) >= 0)\n  FILTER (xsd:dateTime(?to) - xsd:dateTime(?d) >= 0)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-723",
        "question": "what is there to see in sydney australia",
        "answer": [
            "m.0pnrn",
            "m.0hddw",
            "m.0cj82q",
            "m.020772",
            "m.02x0jgm",
            "m.02x7mq",
            "m.01xlnqr",
            "m.0_ymvs4",
            "m.040sd3",
            "m.01rfyc",
            "m.0261k3j",
            "m.0j2r2w2",
            "m.0701q",
            "m.0j65cht",
            "m.02q0lr",
            "m.04dxfg",
            "m.05115h",
            "m.06_nm",
            "m.02kwln",
            "m.0b8fsx"
        ],
        "different_answer": [
            [
                "m.0pnrn",
                "m.0hddw",
                "m.0cj82q",
                "m.020772",
                "m.02x0jgm",
                "m.02x7mq",
                "m.01xlnqr",
                "m.0_ymvs4",
                "m.040sd3",
                "m.01rfyc",
                "m.0261k3j",
                "m.0j2r2w2",
                "m.0701q",
                "m.0j65cht",
                "m.02q0lr",
                "m.04dxfg",
                "m.05115h",
                "m.06_nm",
                "m.02kwln",
                "m.0b8fsx"
            ]
        ],
        "entity_linking": {
            "Sydney": "m.06y57"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06y57)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06y57 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06y57')\na.add_fact('m.06y57', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-724",
        "question": "where was marilyn monroe found dead",
        "answer": [
            "m.01yq4f"
        ],
        "different_answer": [
            [
                "m.01yq4f"
            ]
        ],
        "entity_linking": {
            "Marilyn Monroe": "m.04wqr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wqr ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04wqr')\na.add_fact('m.04wqr', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-725",
        "question": "what states does the sierra nevada run through",
        "answer": [
            "m.01n7q",
            "m.059_c"
        ],
        "different_answer": [
            [
                "m.01n7q",
                "m.059_c"
            ]
        ],
        "entity_linking": {
            "Sierra Nevada": "m.0db94",
            "\"State\"": "\"State\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0db94)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0db94 ns:location.location.partially_containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0db94')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"State\"^^xsd:string')\na.add_fact('m.0db94', 'location.location.partially_containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-726",
        "question": "what language is spoken in greek",
        "answer": [
            "m.012v8",
            "m.0349s"
        ],
        "different_answer": [
            [
                "m.012v8",
                "m.0349s"
            ],
            [
                "m.0349s"
            ]
        ],
        "entity_linking": {
            "Greece": "m.035qy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035qy')\na.add_fact('m.035qy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-728",
        "question": "what is the name of the speaker of the house of representatives now 2011",
        "answer": [
            "m.039rwf",
            "m.012v1t"
        ],
        "different_answer": [
            [
                "m.039rwf",
                "m.012v1t"
            ]
        ],
        "entity_linking": {
            "Speaker of the United States House of Representatives": "m.0cgqx",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cgqx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cgqx ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cgqx')\na.add_fact('m.0cgqx', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-729",
        "question": "who plays stanley hudson",
        "answer": [
            "m.0cnl09"
        ],
        "different_answer": [
            [
                "m.0cnl09"
            ]
        ],
        "entity_linking": {
            "Stanley Hudson": "m.026nx7k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026nx7k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026nx7k ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.026nx7k')\na.add_fact('m.026nx7k', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-730",
        "question": "what record label is kelly clarkson signed with",
        "answer": [
            "m.03mp8k",
            "m.0rpfr83",
            "m.043g7l",
            "m.0181dw"
        ],
        "different_answer": [
            [
                "m.03mp8k",
                "m.0rpfr83",
                "m.043g7l",
                "m.0181dw"
            ]
        ],
        "entity_linking": {
            "Kelly Clarkson": "m.025ldg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025ldg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025ldg ns:music.artist.label ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025ldg')\na.add_fact('m.025ldg', 'music.artist.label', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-731",
        "question": "where does tim roth come from",
        "answer": [
            "m.0n9h9"
        ],
        "different_answer": [
            [
                "m.0n9h9"
            ]
        ],
        "entity_linking": {
            "Tim Roth": "m.021yzs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.021yzs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.021yzs ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.021yzs')\na.add_fact('m.021yzs', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-733",
        "question": "what currency should you take to vietnam",
        "answer": [
            "m.03ksl6"
        ],
        "different_answer": [
            [
                "m.03ksl6"
            ]
        ],
        "entity_linking": {
            "Vietnam": "m.01crd5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01crd5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01crd5 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01crd5')\na.add_fact('m.01crd5', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-734",
        "question": "who did roger federer married",
        "answer": [
            "m.07w9t_"
        ],
        "different_answer": [
            [
                "m.07w9t_"
            ]
        ],
        "entity_linking": {
            "Roger Federer": "m.01my95",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01my95)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01my95 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01my95')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01my95', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-735",
        "question": "what kind of money do i need in costa rica",
        "answer": [
            "m.04wccn"
        ],
        "different_answer": [
            [
                "m.04wccn"
            ]
        ],
        "entity_linking": {
            "Costa Rica": "m.01p8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01p8s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01p8s ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01p8s')\na.add_fact('m.01p8s', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-737",
        "question": "what is the name of the capital of belgium",
        "answer": [
            "m.02rnbv",
            "m.0177z"
        ],
        "different_answer": [
            [
                "m.02rnbv",
                "m.0177z"
            ]
        ],
        "entity_linking": {
            "Belgium": "m.0154j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0154j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0154j ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0154j')\na.add_fact('m.0154j', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-738",
        "question": "what kind of government does japan have now",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-739",
        "question": "what pieces of music did claude debussy compose",
        "answer": [
            "m.05b508d",
            "m.0135s85z",
            "m.0_j986w",
            "m.0zx9qvj",
            "m.0_kggph",
            "m.0_70swk",
            "m.0zls891",
            "m.0gbm9t9",
            "m.0zjgk9n",
            "m.010zyg_m",
            "m.0_k4v8w",
            "m.0_kjz6p",
            "m.0_k42mz",
            "m.0_hzt3d",
            "m.0wf_vpd",
            "m.0gbm9gz",
            "m.0zxxg9g",
            "m.0_hzhpj",
            "m.0_jdgg0",
            "m.0_j1ysx",
            "m.0gbm9kd",
            "m.0zx7352",
            "m.0_kks2z",
            "m.0_kc5_1",
            "m.0zhzxkd",
            "m.0_6n8l_",
            "m.0zj20cd",
            "m.0_785n5",
            "m.0_7l3nl",
            "m.0_htp_j",
            "m.0_j8c26",
            "g.1ym_l6xb0",
            "m.0gbm9r1",
            "m.0_66pb7",
            "m.05q7yst",
            "m.0_5zhxw",
            "m.0_6jtms",
            "m.0_k3zl4",
            "m.010ylz79",
            "m.03r98g",
            "m.0_hvx8w",
            "m.0_k01yx",
            "m.0_k4g8h",
            "m.0zlgwg7",
            "m.0gbmbr3",
            "m.0zxnb2h",
            "m.0gbmbw8",
            "m.0gbm97c",
            "m.0_fk14v",
            "m.0_k673s",
            "m.0_6vxqc",
            "m.0bb5lbr",
            "m.0zkwf3m",
            "m.0zh8g5x",
            "m.0gbm9j6",
            "m.0_j6h8x",
            "m.0zjnxb5",
            "m.0_7qyt2",
            "m.0_j_xxl",
            "m.0zxvq0n",
            "m.0_6glx1",
            "m.010zfkcw",
            "m.0_kcx_z",
            "m.0_626vh",
            "m.0gbm9vt",
            "m.0gbm9qk",
            "m.0zkc50w",
            "m.0zl_41l",
            "m.0_6m_m5",
            "m.0hrc0vc",
            "m.0_j8k40",
            "m.0_k5d2x",
            "m.0_j_9fv",
            "m.0gbm8_g",
            "m.0_j49vq",
            "m.010sz7qv",
            "m.0_79_89",
            "m.0_jcyrt",
            "m.0zkpjrv",
            "m.03c7cvp",
            "m.0gbm9f6",
            "m.0zkdj_g",
            "m.0gbm98w",
            "m.0_km14z",
            "m.0135ftry",
            "m.0zjmrly",
            "m.0zxrl2g",
            "m.0gbmc06",
            "m.0gbm8_y",
            "m.0gbmbpm",
            "m.0gbm97y",
            "m.0_kc9vf",
            "m.0_hqkc2",
            "m.01zprb",
            "m.0_6lxl_",
            "m.0_jqhyb",
            "m.0gbmbm2",
            "m.0zm6_br",
            "m.0gbm9s1",
            "m.0_jf98_",
            "m.0zj788m",
            "m.0zxrr8c",
            "m.0zx7xv5",
            "m.0gbm9p0",
            "m.0gbmbmr",
            "m.0gbm8zk",
            "m.0_j10m0",
            "m.0_hwmys",
            "m.0_67yr1",
            "m.0zk2k0c",
            "m.0gbm9q9",
            "m.0_j1vqk",
            "m.0gbm9vk",
            "m.0zjt4l9",
            "m.0zxpq7z",
            "m.0gbm8_q",
            "m.0zl6c71",
            "m.0gbm965",
            "m.0_k630v",
            "m.0_jp2jg",
            "m.0zjsdbt",
            "m.0_6q7bm",
            "m.0gbm8z2",
            "m.042cky",
            "m.0_jy0gc",
            "m.0_k29xg",
            "m.0_7nk_p",
            "m.0_k0srm",
            "m.0_6yrsf",
            "m.0_7mtb0",
            "m.0_hzbwx",
            "m.0gbm9dz",
            "m.0gbmbw1",
            "m.06pzhs",
            "m.0gbm94c",
            "m.0zk1hhj",
            "m.0_j2cwc",
            "m.010sytyv",
            "m.0_60cr2",
            "m.0_jtc90",
            "m.0_jykjp",
            "m.0_j52k3",
            "m.0_5zc3z",
            "m.0_7203v",
            "m.0_7yxtv",
            "m.0zhk1t8",
            "m.0zjf6zn",
            "m.0zx66ys",
            "m.07k8v62",
            "m.0zxfkgp",
            "m.010y6d7d",
            "m.0_hrj54",
            "m.0_rvrgg",
            "m.0_j5stf",
            "m.010y5t8h",
            "m.0_k34tp",
            "m.0_k4h6f",
            "m.0gbm9y3",
            "m.0zjbv6y",
            "m.0zxy7vf",
            "m.0gbm9s9",
            "m.0_jqsxk",
            "m.0zkmw83",
            "m.0zhv3tc",
            "m.0zxwtzf",
            "m.0zjqlpp",
            "m.047rcxb",
            "m.0_6857g",
            "m.0zj8v8r",
            "m.0zhhl6q",
            "m.0_kljjn",
            "m.010z9pqn",
            "m.0_hyr_4",
            "m.0zlgp7k",
            "m.0gbm9xw",
            "m.0_hv57k",
            "m.0_k73zm",
            "m.010vft_p",
            "m.0gbmbvv",
            "m.0gbm9jg",
            "g.11b821q1dm",
            "m.0_7x7ck",
            "m.0_j4b19",
            "m.0_k7d0l",
            "m.0gbm9rt",
            "m.0gbm9r9",
            "m.0gbm9st",
            "m.0_jcpgz",
            "m.0gbm9hg",
            "m.0_6cz57",
            "m.03cy7ps",
            "m.0_j7zrp",
            "m.0gbm9p8",
            "m.0_hstxy",
            "m.0_63vyz",
            "m.0_6ttlh",
            "m.0_hr0pw",
            "m.0_66lnh",
            "m.05b4_47",
            "m.03cy7m0",
            "m.0gbmbx2",
            "m.0gbm92k",
            "m.0_67qq5",
            "m.0gbm9q1",
            "m.0_kjyvx",
            "m.0_7pj_2",
            "m.033nf5",
            "m.0zx9d8y",
            "m.0_kkvmy",
            "m.0gbm9cf",
            "m.0_jyd58",
            "m.0zx5zs1",
            "m.0_69yfv",
            "m.0409840",
            "m.0gbm9t1",
            "m.0_j8hpw",
            "m.0_kh4ps",
            "m.0gbm8yf",
            "m.0_kmffq",
            "m.0zl8vp5",
            "m.0zkwkn9",
            "m.010s8lf0",
            "g.1234bndn",
            "m.0gbmbnm",
            "m.0gbm99c",
            "m.0_k2hh2",
            "m.0_j18my",
            "m.0zxbzr5",
            "m.0zhk1wf",
            "m.0gbmbnv",
            "m.0gbm9qt",
            "m.0_704z6",
            "m.0_jg6m7",
            "m.0bb5zrh",
            "m.0_rkpdn",
            "m.0_rwh7q",
            "m.0_7l7b6",
            "m.0_hph7q",
            "m.0zh8j_z",
            "m.0_jt121",
            "m.0zlhjbs",
            "m.0gbm9gg",
            "m.0_74qkz",
            "m.0_j3kw_",
            "m.0zjvx06",
            "m.0zxv16w",
            "g.1234nfvz",
            "m.0_hyxyy",
            "g.120ldwp4",
            "m.0_813fq",
            "m.0_6q7bt",
            "m.0zl5lbp",
            "m.0gbmbrm",
            "m.0gbm9bl",
            "m.0_5_6yg",
            "m.0_74qc9",
            "m.0135ycg0",
            "m.0_jkghl",
            "m.0136b801",
            "m.0zx19pm",
            "m.0zlb3c4",
            "m.03c7ct9",
            "m.0_kfzpt",
            "m.0zlswy6",
            "m.0_jhxly",
            "m.010xv_jw",
            "m.0_rkyxc",
            "m.0_64mfg",
            "m.0gbm8x_",
            "m.0gbm93g",
            "m.0_jvgb9",
            "m.0_jzrlf",
            "m.0_k3x0t",
            "m.0_k4lrp",
            "m.0133nsl0",
            "m.0zxvyvq",
            "m.0_6hj8p",
            "m.0_hvvsj",
            "m.0gbm972",
            "m.0_6478t",
            "m.0_kbxxp",
            "m.0_jv13d",
            "m.0gbmblw",
            "m.0zh5fb7",
            "m.05b2wv5",
            "m.0_7k80b",
            "m.0gbm8xs",
            "m.0gbm9v1",
            "m.0_js17c",
            "m.0_5zvq3",
            "m.0zkp3h9",
            "m.0gbm9fg",
            "m.0zxfdj8",
            "m.0_j99gk",
            "m.0_5yrhj",
            "m.0gbm9bv",
            "m.0_k63t3",
            "m.0_js5jc",
            "m.0_j98ks",
            "m.0_hv4js",
            "m.0_jxk74",
            "m.0zkqvlx",
            "m.0_6g83_",
            "m.0gbm9pt",
            "m.0zxt6kz",
            "m.0_ht0n6",
            "m.0zkg3v2",
            "m.0zlcfft",
            "m.0_j_dcn",
            "m.0_j9qcf",
            "m.0_hsrdk",
            "m.0gbm8x3",
            "m.0_hthyg",
            "m.0_kh4ct",
            "m.0_j6n7b",
            "m.0gbm9tk",
            "m.0gbm8yn",
            "m.0gbmbmj",
            "m.0_jqjsm",
            "m.0gbm9fq",
            "m.0gbm96g",
            "m.0gbmbqw",
            "m.0wfy5sl",
            "m.0zx26r5",
            "m.0zk44cj",
            "m.0_7w7pf",
            "m.0gbmblg",
            "m.02rtdzh",
            "m.0_kgvk3",
            "m.0_7363q",
            "m.010tnyxh",
            "m.0zl_133",
            "m.0_6mn47",
            "m.0gbm9v9",
            "m.071vr8",
            "m.0zjk61w",
            "m.0_jws40",
            "m.0_64jsh",
            "m.0_k3h6d",
            "m.0zl1f05",
            "m.0zk8sj4",
            "m.0_kfwhr",
            "m.0crjbd",
            "m.0gbm9hz",
            "m.0gbmbg7",
            "m.0gbm9dc",
            "m.0_647ch",
            "m.0zlmtxl",
            "m.0_6dtbk",
            "m.0zxlf2h",
            "m.0gbm993",
            "m.0_kf9wt",
            "m.0zjtsvm",
            "m.0zj0y0p",
            "m.05b042d",
            "m.0_rth63",
            "m.0zlcrsg",
            "m.0_k0vb_",
            "m.0_667ql",
            "m.0zlz0_y",
            "m.0_7t946",
            "m.0_jb7d3",
            "m.0_hxw83",
            "m.0_7dpnl",
            "m.0_6c184",
            "m.0_6x4r0",
            "m.0_jxdsw",
            "m.0_j_367",
            "m.027kxq4",
            "m.0_k7r_r",
            "m.0_6_zhg",
            "m.0_jm5dj",
            "m.0_k0t4j",
            "m.0zj155p",
            "m.0_65d7k",
            "m.010s18wn",
            "m.0_jdffp",
            "m.0_jvmy7",
            "m.0zxxtm4",
            "m.0gbmbn5",
            "m.0cxqwc",
            "m.0_k737_",
            "m.0cqw5w",
            "m.0_6bjlf",
            "m.010_dtxz",
            "m.0zhsb53",
            "m.0_6c7fn",
            "m.0g3x2_",
            "m.0_7l7wd",
            "m.010tpkzw",
            "m.0_rv468",
            "m.0_hrz7g",
            "m.0_km12c",
            "m.0gbm8xk",
            "m.0_jnmw5",
            "m.0gbm9hq",
            "m.0gbmbpd",
            "m.0zk40mx",
            "m.0dq9b_",
            "m.0_62vb5",
            "m.0zh6nqy",
            "m.0_67q33",
            "m.0gbm8y6",
            "m.0_5zm61",
            "m.0zl3q5p",
            "m.0_jclnm",
            "m.0zhvgd9",
            "m.0zmww8h",
            "m.0zx5s79",
            "m.0zx2wb7",
            "m.0zhpnhw",
            "m.0zm683f",
            "m.06y_gm",
            "m.0_hyzjt",
            "m.03h2pvy",
            "m.0_61wmp",
            "m.0_6721p",
            "m.0_7jv18",
            "m.0_6b4px",
            "m.0gbm8yw",
            "m.0gbm99m",
            "m.0zh1xxd",
            "m.0n5vf6t",
            "m.0_jbfl3",
            "m.0gbm9tt",
            "m.0_jfm84",
            "m.0gbmbrc",
            "m.0_kfrmb",
            "m.01381b1q",
            "m.0gbm9nf",
            "m.0_hsxp8",
            "m.0_k0d1c",
            "m.0zjtymf",
            "m.0_7t9jk",
            "m.0_jy4lv",
            "m.0_6d6lm",
            "m.053wty",
            "m.0zxhrfq",
            "m.0_6dyl4",
            "m.0zl_97h",
            "m.0_kdtrr",
            "m.0gbm8zs",
            "m.0zxnwpv",
            "m.0sggpxq",
            "m.0_60q1h",
            "m.0gbm9sk",
            "m.0zxwzf0",
            "m.0_k3vd9",
            "m.0_hq905",
            "m.0zl8kw5",
            "m.0_7gzrq",
            "m.0_68qzd",
            "m.0_60czy",
            "m.0gbmbm9",
            "m.0_rn5wm",
            "m.0_jr4pp",
            "m.03cy8t5",
            "m.0f44r_",
            "m.0zknbxp",
            "m.0_k4z7f",
            "m.0_j42wt",
            "m.03cy92g",
            "m.0_kg5pr",
            "m.01248h9t",
            "m.03d7mtj",
            "m.0_75kkp",
            "m.0gbm9pj",
            "m.0_6f191",
            "m.0_hwd77",
            "m.0g2x01",
            "m.0gbm9ns",
            "m.0_6k3cr",
            "m.0bb3zh0",
            "m.0_jlbpm",
            "m.0_605jr",
            "m.010yk19g",
            "m.0_jy8nh",
            "m.0_j125r",
            "m.0zk27d5",
            "m.0_6gs5y",
            "m.0_7pmfh",
            "m.0gbm9gq",
            "m.0zj777b",
            "m.0gbm94l",
            "m.0gbm9z7",
            "m.0_7tsmn",
            "m.0zhfddr",
            "m.0_6vjgd",
            "m.0gbm8_7",
            "m.0zm4n6l",
            "m.0gbm8zb",
            "m.0_j93t2",
            "m.0zlkyst",
            "m.0zh8cfz",
            "m.0zlzpy2",
            "m.0_7tsqc",
            "m.06w5rgn",
            "m.0_jqdbr",
            "m.0gbm9rk",
            "m.0gbmbvm",
            "m.0zlrdgg",
            "m.0zjr1yc",
            "m.0_rk7bq",
            "m.0_kh_kk",
            "m.0gbmblp",
            "m.0gbmbmz",
            "m.0_6qhbw",
            "m.0gbm94t"
        ],
        "different_answer": [
            [
                "m.05b508d",
                "m.0135s85z",
                "m.0_j986w",
                "m.0zx9qvj",
                "m.0_kggph",
                "m.0_70swk",
                "m.0zls891",
                "m.0gbm9t9",
                "m.0zjgk9n",
                "m.010zyg_m",
                "m.0_k4v8w",
                "m.0_kjz6p",
                "m.0_k42mz",
                "m.0_hzt3d",
                "m.0wf_vpd",
                "m.0gbm9gz",
                "m.0zxxg9g",
                "m.0_hzhpj",
                "m.0_jdgg0",
                "m.0_j1ysx",
                "m.0gbm9kd",
                "m.0zx7352",
                "m.0_kks2z",
                "m.0_kc5_1",
                "m.0zhzxkd",
                "m.0_6n8l_",
                "m.0zj20cd",
                "m.0_785n5",
                "m.0_7l3nl",
                "m.0_htp_j",
                "m.0_j8c26",
                "g.1ym_l6xb0",
                "m.0gbm9r1",
                "m.0_66pb7",
                "m.05q7yst",
                "m.0_5zhxw",
                "m.0_6jtms",
                "m.0_k3zl4",
                "m.010ylz79",
                "m.03r98g",
                "m.0_hvx8w",
                "m.0_k01yx",
                "m.0_k4g8h",
                "m.0zlgwg7",
                "m.0gbmbr3",
                "m.0zxnb2h",
                "m.0gbmbw8",
                "m.0gbm97c",
                "m.0_fk14v",
                "m.0_k673s",
                "m.0_6vxqc",
                "m.0bb5lbr",
                "m.0zkwf3m",
                "m.0zh8g5x",
                "m.0gbm9j6",
                "m.0_j6h8x",
                "m.0zjnxb5",
                "m.0_7qyt2",
                "m.0_j_xxl",
                "m.0zxvq0n",
                "m.0_6glx1",
                "m.010zfkcw",
                "m.0_kcx_z",
                "m.0_626vh",
                "m.0gbm9vt",
                "m.0gbm9qk",
                "m.0zkc50w",
                "m.0zl_41l",
                "m.0_6m_m5",
                "m.0hrc0vc",
                "m.0_j8k40",
                "m.0_k5d2x",
                "m.0_j_9fv",
                "m.0gbm8_g",
                "m.0_j49vq",
                "m.010sz7qv",
                "m.0_79_89",
                "m.0_jcyrt",
                "m.0zkpjrv",
                "m.03c7cvp",
                "m.0gbm9f6",
                "m.0zkdj_g",
                "m.0gbm98w",
                "m.0_km14z",
                "m.0135ftry",
                "m.0zjmrly",
                "m.0zxrl2g",
                "m.0gbmc06",
                "m.0gbm8_y",
                "m.0gbmbpm",
                "m.0gbm97y",
                "m.0_kc9vf",
                "m.0_hqkc2",
                "m.01zprb",
                "m.0_6lxl_",
                "m.0_jqhyb",
                "m.0gbmbm2",
                "m.0zm6_br",
                "m.0gbm9s1",
                "m.0_jf98_",
                "m.0zj788m",
                "m.0zxrr8c",
                "m.0zx7xv5",
                "m.0gbm9p0",
                "m.0gbmbmr",
                "m.0gbm8zk",
                "m.0_j10m0",
                "m.0_hwmys",
                "m.0_67yr1",
                "m.0zk2k0c",
                "m.0gbm9q9",
                "m.0_j1vqk",
                "m.0gbm9vk",
                "m.0zjt4l9",
                "m.0zxpq7z",
                "m.0gbm8_q",
                "m.0zl6c71",
                "m.0gbm965",
                "m.0_k630v",
                "m.0_jp2jg",
                "m.0zjsdbt",
                "m.0_6q7bm",
                "m.0gbm8z2",
                "m.042cky",
                "m.0_jy0gc",
                "m.0_k29xg",
                "m.0_7nk_p",
                "m.0_k0srm",
                "m.0_6yrsf",
                "m.0_7mtb0",
                "m.0_hzbwx",
                "m.0gbm9dz",
                "m.0gbmbw1",
                "m.06pzhs",
                "m.0gbm94c",
                "m.0zk1hhj",
                "m.0_j2cwc",
                "m.010sytyv",
                "m.0_60cr2",
                "m.0_jtc90",
                "m.0_jykjp",
                "m.0_j52k3",
                "m.0_5zc3z",
                "m.0_7203v",
                "m.0_7yxtv",
                "m.0zhk1t8",
                "m.0zjf6zn",
                "m.0zx66ys",
                "m.07k8v62",
                "m.0zxfkgp",
                "m.010y6d7d",
                "m.0_hrj54",
                "m.0_rvrgg",
                "m.0_j5stf",
                "m.010y5t8h",
                "m.0_k34tp",
                "m.0_k4h6f",
                "m.0gbm9y3",
                "m.0zjbv6y",
                "m.0zxy7vf",
                "m.0gbm9s9",
                "m.0_jqsxk",
                "m.0zkmw83",
                "m.0zhv3tc",
                "m.0zxwtzf",
                "m.0zjqlpp",
                "m.047rcxb",
                "m.0_6857g",
                "m.0zj8v8r",
                "m.0zhhl6q",
                "m.0_kljjn",
                "m.010z9pqn",
                "m.0_hyr_4",
                "m.0zlgp7k",
                "m.0gbm9xw",
                "m.0_hv57k",
                "m.0_k73zm",
                "m.010vft_p",
                "m.0gbmbvv",
                "m.0gbm9jg",
                "g.11b821q1dm",
                "m.0_7x7ck",
                "m.0_j4b19",
                "m.0_k7d0l",
                "m.0gbm9rt",
                "m.0gbm9r9",
                "m.0gbm9st",
                "m.0_jcpgz",
                "m.0gbm9hg",
                "m.0_6cz57",
                "m.03cy7ps",
                "m.0_j7zrp",
                "m.0gbm9p8",
                "m.0_hstxy",
                "m.0_63vyz",
                "m.0_6ttlh",
                "m.0_hr0pw",
                "m.0_66lnh",
                "m.05b4_47",
                "m.03cy7m0",
                "m.0gbmbx2",
                "m.0gbm92k",
                "m.0_67qq5",
                "m.0gbm9q1",
                "m.0_kjyvx",
                "m.0_7pj_2",
                "m.033nf5",
                "m.0zx9d8y",
                "m.0_kkvmy",
                "m.0gbm9cf",
                "m.0_jyd58",
                "m.0zx5zs1",
                "m.0_69yfv",
                "m.0409840",
                "m.0gbm9t1",
                "m.0_j8hpw",
                "m.0_kh4ps",
                "m.0gbm8yf",
                "m.0_kmffq",
                "m.0zl8vp5",
                "m.0zkwkn9",
                "m.010s8lf0",
                "g.1234bndn",
                "m.0gbmbnm",
                "m.0gbm99c",
                "m.0_k2hh2",
                "m.0_j18my",
                "m.0zxbzr5",
                "m.0zhk1wf",
                "m.0gbmbnv",
                "m.0gbm9qt",
                "m.0_704z6",
                "m.0_jg6m7",
                "m.0bb5zrh",
                "m.0_rkpdn",
                "m.0_rwh7q",
                "m.0_7l7b6",
                "m.0_hph7q",
                "m.0zh8j_z",
                "m.0_jt121",
                "m.0zlhjbs",
                "m.0gbm9gg",
                "m.0_74qkz",
                "m.0_j3kw_",
                "m.0zjvx06",
                "m.0zxv16w",
                "g.1234nfvz",
                "m.0_hyxyy",
                "g.120ldwp4",
                "m.0_813fq",
                "m.0_6q7bt",
                "m.0zl5lbp",
                "m.0gbmbrm",
                "m.0gbm9bl",
                "m.0_5_6yg",
                "m.0_74qc9",
                "m.0135ycg0",
                "m.0_jkghl",
                "m.0136b801",
                "m.0zx19pm",
                "m.0zlb3c4",
                "m.03c7ct9",
                "m.0_kfzpt",
                "m.0zlswy6",
                "m.0_jhxly",
                "m.010xv_jw",
                "m.0_rkyxc",
                "m.0_64mfg",
                "m.0gbm8x_",
                "m.0gbm93g",
                "m.0_jvgb9",
                "m.0_jzrlf",
                "m.0_k3x0t",
                "m.0_k4lrp",
                "m.0133nsl0",
                "m.0zxvyvq",
                "m.0_6hj8p",
                "m.0_hvvsj",
                "m.0gbm972",
                "m.0_6478t",
                "m.0_kbxxp",
                "m.0_jv13d",
                "m.0gbmblw",
                "m.0zh5fb7",
                "m.05b2wv5",
                "m.0_7k80b",
                "m.0gbm8xs",
                "m.0gbm9v1",
                "m.0_js17c",
                "m.0_5zvq3",
                "m.0zkp3h9",
                "m.0gbm9fg",
                "m.0zxfdj8",
                "m.0_j99gk",
                "m.0_5yrhj",
                "m.0gbm9bv",
                "m.0_k63t3",
                "m.0_js5jc",
                "m.0_j98ks",
                "m.0_hv4js",
                "m.0_jxk74",
                "m.0zkqvlx",
                "m.0_6g83_",
                "m.0gbm9pt",
                "m.0zxt6kz",
                "m.0_ht0n6",
                "m.0zkg3v2",
                "m.0zlcfft",
                "m.0_j_dcn",
                "m.0_j9qcf",
                "m.0_hsrdk",
                "m.0gbm8x3",
                "m.0_hthyg",
                "m.0_kh4ct",
                "m.0_j6n7b",
                "m.0gbm9tk",
                "m.0gbm8yn",
                "m.0gbmbmj",
                "m.0_jqjsm",
                "m.0gbm9fq",
                "m.0gbm96g",
                "m.0gbmbqw",
                "m.0wfy5sl",
                "m.0zx26r5",
                "m.0zk44cj",
                "m.0_7w7pf",
                "m.0gbmblg",
                "m.02rtdzh",
                "m.0_kgvk3",
                "m.0_7363q",
                "m.010tnyxh",
                "m.0zl_133",
                "m.0_6mn47",
                "m.0gbm9v9",
                "m.071vr8",
                "m.0zjk61w",
                "m.0_jws40",
                "m.0_64jsh",
                "m.0_k3h6d",
                "m.0zl1f05",
                "m.0zk8sj4",
                "m.0_kfwhr",
                "m.0crjbd",
                "m.0gbm9hz",
                "m.0gbmbg7",
                "m.0gbm9dc",
                "m.0_647ch",
                "m.0zlmtxl",
                "m.0_6dtbk",
                "m.0zxlf2h",
                "m.0gbm993",
                "m.0_kf9wt",
                "m.0zjtsvm",
                "m.0zj0y0p",
                "m.05b042d",
                "m.0_rth63",
                "m.0zlcrsg",
                "m.0_k0vb_",
                "m.0_667ql",
                "m.0zlz0_y",
                "m.0_7t946",
                "m.0_jb7d3",
                "m.0_hxw83",
                "m.0_7dpnl",
                "m.0_6c184",
                "m.0_6x4r0",
                "m.0_jxdsw",
                "m.0_j_367",
                "m.027kxq4",
                "m.0_k7r_r",
                "m.0_6_zhg",
                "m.0_jm5dj",
                "m.0_k0t4j",
                "m.0zj155p",
                "m.0_65d7k",
                "m.010s18wn",
                "m.0_jdffp",
                "m.0_jvmy7",
                "m.0zxxtm4",
                "m.0gbmbn5",
                "m.0cxqwc",
                "m.0_k737_",
                "m.0cqw5w",
                "m.0_6bjlf",
                "m.010_dtxz",
                "m.0zhsb53",
                "m.0_6c7fn",
                "m.0g3x2_",
                "m.0_7l7wd",
                "m.010tpkzw",
                "m.0_rv468",
                "m.0_hrz7g",
                "m.0_km12c",
                "m.0gbm8xk",
                "m.0_jnmw5",
                "m.0gbm9hq",
                "m.0gbmbpd",
                "m.0zk40mx",
                "m.0dq9b_",
                "m.0_62vb5",
                "m.0zh6nqy",
                "m.0_67q33",
                "m.0gbm8y6",
                "m.0_5zm61",
                "m.0zl3q5p",
                "m.0_jclnm",
                "m.0zhvgd9",
                "m.0zmww8h",
                "m.0zx5s79",
                "m.0zx2wb7",
                "m.0zhpnhw",
                "m.0zm683f",
                "m.06y_gm",
                "m.0_hyzjt",
                "m.03h2pvy",
                "m.0_61wmp",
                "m.0_6721p",
                "m.0_7jv18",
                "m.0_6b4px",
                "m.0gbm8yw",
                "m.0gbm99m",
                "m.0zh1xxd",
                "m.0n5vf6t",
                "m.0_jbfl3",
                "m.0gbm9tt",
                "m.0_jfm84",
                "m.0gbmbrc",
                "m.0_kfrmb",
                "m.01381b1q",
                "m.0gbm9nf",
                "m.0_hsxp8",
                "m.0_k0d1c",
                "m.0zjtymf",
                "m.0_7t9jk",
                "m.0_jy4lv",
                "m.0_6d6lm",
                "m.053wty",
                "m.0zxhrfq",
                "m.0_6dyl4",
                "m.0zl_97h",
                "m.0_kdtrr",
                "m.0gbm8zs",
                "m.0zxnwpv",
                "m.0sggpxq",
                "m.0_60q1h",
                "m.0gbm9sk",
                "m.0zxwzf0",
                "m.0_k3vd9",
                "m.0_hq905",
                "m.0zl8kw5",
                "m.0_7gzrq",
                "m.0_68qzd",
                "m.0_60czy",
                "m.0gbmbm9",
                "m.0_rn5wm",
                "m.0_jr4pp",
                "m.03cy8t5",
                "m.0f44r_",
                "m.0zknbxp",
                "m.0_k4z7f",
                "m.0_j42wt",
                "m.03cy92g",
                "m.0_kg5pr",
                "m.01248h9t",
                "m.03d7mtj",
                "m.0_75kkp",
                "m.0gbm9pj",
                "m.0_6f191",
                "m.0_hwd77",
                "m.0g2x01",
                "m.0gbm9ns",
                "m.0_6k3cr",
                "m.0bb3zh0",
                "m.0_jlbpm",
                "m.0_605jr",
                "m.010yk19g",
                "m.0_jy8nh",
                "m.0_j125r",
                "m.0zk27d5",
                "m.0_6gs5y",
                "m.0_7pmfh",
                "m.0gbm9gq",
                "m.0zj777b",
                "m.0gbm94l",
                "m.0gbm9z7",
                "m.0_7tsmn",
                "m.0zhfddr",
                "m.0_6vjgd",
                "m.0gbm8_7",
                "m.0zm4n6l",
                "m.0gbm8zb",
                "m.0_j93t2",
                "m.0zlkyst",
                "m.0zh8cfz",
                "m.0zlzpy2",
                "m.0_7tsqc",
                "m.06w5rgn",
                "m.0_jqdbr",
                "m.0gbm9rk",
                "m.0gbmbvm",
                "m.0zlrdgg",
                "m.0zjr1yc",
                "m.0_rk7bq",
                "m.0_kh_kk",
                "m.0gbmblp",
                "m.0gbmbmz",
                "m.0_6qhbw",
                "m.0gbm94t"
            ]
        ],
        "entity_linking": {
            "Claude Debussy": "m.01vvy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvy ns:music.composer.compositions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vvy')\na.add_fact('m.01vvy', 'music.composer.compositions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-740",
        "question": "who was selena gomez in barney and friends",
        "answer": [
            "m.0gx3b6x"
        ],
        "different_answer": [
            [
                "m.0gx3b6x"
            ],
            [
                "m.0gx3b6x"
            ],
            [
                "m.0gx3b6x"
            ],
            [
                "m.0gx3b6x"
            ],
            [
                "m.0gx3b6x"
            ],
            [
                "m.0gx3b6x"
            ]
        ],
        "entity_linking": {
            "Selena Gomez": "m.0gs6vr",
            "Barney & Friends - Season 7": "m.06xv1n1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gs6vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gs6vr ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.06xv1n1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gs6vr')\na.add_filter('x0', '!=', 'm.01f4yy')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'm.0gs6vr')\na.add_fact('m.01f4yy', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-741",
        "question": "who plays caesar flickerman in the hunger games",
        "answer": [
            "m.02bj6k"
        ],
        "different_answer": [
            [
                "m.02bj6k"
            ]
        ],
        "entity_linking": {
            "The Hunger Games": "m.0gkz15s",
            "Caesar Flickerman": "m.0gwc3bn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gkz15s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gkz15s ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gwc3bn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gwc3bn')\na.add_filter('x0', '!=', 'm.0gkz15s')\na.add_fact('x1', 'film.performance.character', 'm.0gwc3bn')\na.add_fact('m.0gkz15s', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-742",
        "question": "where did the gettysburg address",
        "answer": [
            "m.0dzs0"
        ],
        "different_answer": [
            [
                "m.0dzs0"
            ]
        ],
        "entity_linking": {
            "Gettysburg Address": "m.037yx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.037yx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.037yx ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.037yx')\na.add_fact('m.037yx', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-743",
        "question": "what was the name of jfk 's brothers",
        "answer": [
            "m.020t1x",
            "m.0194xc",
            "m.06hx2"
        ],
        "different_answer": [
            [
                "m.020t1x",
                "m.0194xc",
                "m.06hx2"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.0d3k14', 'people.person.sibling_s', 'x1')\na.add_fact('x1', 'people.sibling_relationship.sibling', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-744",
        "question": "who was tupac signed to",
        "answer": [
            "m.076702",
            "m.01trtc",
            "m.01n2m6"
        ],
        "different_answer": [
            [
                "m.076702",
                "m.01trtc",
                "m.01n2m6"
            ]
        ],
        "entity_linking": {
            "Tupac Shakur": "m.07pzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pzc ns:music.artist.label ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07pzc')\na.add_fact('m.07pzc', 'music.artist.label', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-745",
        "question": "what was augustus caesar famous for",
        "answer": [
            "m.0fj9f",
            "m.01g14w"
        ],
        "different_answer": [
            [
                "m.0fj9f",
                "m.01g14w"
            ]
        ],
        "entity_linking": {
            "Augustus": "m.0ngg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ngg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ngg ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ngg')\na.add_fact('m.0ngg', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-747",
        "question": "what language does colombia",
        "answer": [
            "m.02hwglw",
            "m.02hwl46",
            "m.02hwv8r",
            "m.02hxvjw",
            "m.02hwyr3",
            "m.05tnswp",
            "m.09gpqdh",
            "m.02hwvm1",
            "m.02hwh2x",
            "m.02hxb6s",
            "m.06nm1",
            "m.02hxds7",
            "m.02hxh5f",
            "m.02hwwxk",
            "m.02hwqrn",
            "m.02hxlpz",
            "m.03h0wpt",
            "m.02hxsy4",
            "m.01yppj",
            "m.02hwt3q",
            "m.02ppbb5",
            "m.02hxl2t",
            "m.02hwnpn",
            "m.02hwr84",
            "m.0b7mcv",
            "m.02hxz2z",
            "m.02ppbg9",
            "m.02hwxgh",
            "m.02hxb4m",
            "m.02hxs9_",
            "m.0km3ztb",
            "m.02hwl4_",
            "m.02hxssc",
            "m.02hxj6x",
            "m.02ppbnh",
            "m.02hxy6v",
            "m.02hx2q2",
            "m.02hxhrz",
            "m.02hxdd2",
            "m.02hxksk",
            "m.02hx2tn",
            "m.02hxs7q",
            "m.02hwrvb",
            "m.02hxswb",
            "m.02hxtwj",
            "m.085vdy",
            "m.02hw_7r",
            "m.02hxb1x",
            "m.09k4cp",
            "m.025syhx",
            "m.02hwv5q",
            "m.02hxnf6",
            "m.02hxxcv",
            "m.02pq8qn",
            "m.026wqvr",
            "m.02hxf1r",
            "m.07k4r10",
            "m.06gdhz",
            "m.02hx0bf",
            "m.02hx5w4",
            "m.02hwqww",
            "m.02hwnwm",
            "g.1q6h_1_4j",
            "m.02hwzgg",
            "m.02hwmth",
            "m.03w6b4",
            "m.02hxzv2",
            "m.02hxp1v",
            "m.02hwwlp",
            "m.02hwzdd",
            "m.02hxdfd",
            "m.02hxy04",
            "m.02hxv46",
            "m.08w0ky",
            "m.02hww1x",
            "m.02hwgnw",
            "m.02hwpxb",
            "m.02hwgxh",
            "m.02hx_dp",
            "m.02hxfkq",
            "m.02hxsz8",
            "m.02hx8nb",
            "m.0bm08x",
            "m.02hwqkg",
            "m.02hwzld",
            "m.02hwxg4"
        ],
        "different_answer": [
            [
                "m.02hwglw",
                "m.02hwl46",
                "m.02hwv8r",
                "m.02hxvjw",
                "m.02hwyr3",
                "m.05tnswp",
                "m.09gpqdh",
                "m.02hwvm1",
                "m.02hwh2x",
                "m.02hxb6s",
                "m.06nm1",
                "m.02hxds7",
                "m.02hxh5f",
                "m.02hwwxk",
                "m.02hwqrn",
                "m.02hxlpz",
                "m.03h0wpt",
                "m.02hxsy4",
                "m.01yppj",
                "m.02hwt3q",
                "m.02ppbb5",
                "m.02hxl2t",
                "m.02hwnpn",
                "m.02hwr84",
                "m.0b7mcv",
                "m.02hxz2z",
                "m.02ppbg9",
                "m.02hwxgh",
                "m.02hxb4m",
                "m.02hxs9_",
                "m.0km3ztb",
                "m.02hwl4_",
                "m.02hxssc",
                "m.02hxj6x",
                "m.02ppbnh",
                "m.02hxy6v",
                "m.02hx2q2",
                "m.02hxhrz",
                "m.02hxdd2",
                "m.02hxksk",
                "m.02hx2tn",
                "m.02hxs7q",
                "m.02hwrvb",
                "m.02hxswb",
                "m.02hxtwj",
                "m.085vdy",
                "m.02hw_7r",
                "m.02hxb1x",
                "m.09k4cp",
                "m.025syhx",
                "m.02hwv5q",
                "m.02hxnf6",
                "m.02hxxcv",
                "m.02pq8qn",
                "m.026wqvr",
                "m.02hxf1r",
                "m.07k4r10",
                "m.06gdhz",
                "m.02hx0bf",
                "m.02hx5w4",
                "m.02hwqww",
                "m.02hwnwm",
                "g.1q6h_1_4j",
                "m.02hwzgg",
                "m.02hwmth",
                "m.03w6b4",
                "m.02hxzv2",
                "m.02hxp1v",
                "m.02hwwlp",
                "m.02hwzdd",
                "m.02hxdfd",
                "m.02hxy04",
                "m.02hxv46",
                "m.08w0ky",
                "m.02hww1x",
                "m.02hwgnw",
                "m.02hwpxb",
                "m.02hwgxh",
                "m.02hx_dp",
                "m.02hxfkq",
                "m.02hxsz8",
                "m.02hx8nb",
                "m.0bm08x",
                "m.02hwqkg",
                "m.02hwzld",
                "m.02hwxg4"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Colombia": "m.01ls2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ls2')\na.add_fact('m.01ls2', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-748",
        "question": "what is the zip code for schenectady new york",
        "answer": [
            "m.020g9sv",
            "m.020g9r0",
            "m.02kxqvh",
            "m.020g9r_",
            "m.07nrp8x",
            "m.03dv1_1",
            "m.020g9vb",
            "m.03dv1zn",
            "m.03dv1_v",
            "m.07nrp93",
            "m.020g9yp"
        ],
        "different_answer": [
            [
                "m.020g9sv",
                "m.020g9r0",
                "m.02kxqvh",
                "m.020g9r_",
                "m.07nrp8x",
                "m.03dv1_1",
                "m.020g9vb",
                "m.03dv1zn",
                "m.03dv1_v",
                "m.07nrp93",
                "m.020g9yp"
            ]
        ],
        "entity_linking": {
            "Schenectady": "m.0fdpd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fdpd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fdpd ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fdpd')\na.add_fact('m.0fdpd', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-749",
        "question": "who was president in 1988 in the united states",
        "answer": [
            "m.06c0j"
        ],
        "different_answer": [
            [
                "m.06c0j"
            ]
        ],
        "entity_linking": {
            "President of the United States": "m.060d2",
            "1988-12-31": "\"1988-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1988-01-01": "\"1988-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060d2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060d2 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"1988-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"1988-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060d2')\na.add_fact('m.060d2', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"1988-12-31\"^^xsd:dateTime', '\"1988-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-751",
        "question": "who owns google 2012",
        "answer": [
            "m.05687l1",
            "m.0gjpq",
            "m.09v3lbs",
            "m.025v9nm",
            "m.04q1q10"
        ],
        "different_answer": [
            [
                "m.05687l1",
                "m.0gjpq",
                "m.09v3lbs",
                "m.025v9nm",
                "m.04q1q10"
            ]
        ],
        "entity_linking": {
            "Google": "m.045c7b",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:organization.organization.leadership ?y .\n?y ns:organization.leadership.person ?x .\nFILTER(NOT EXISTS {?y ns:organization.leadership.from ?sk0} || \nEXISTS {?y ns:organization.leadership.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.leadership.to ?sk2} || \nEXISTS {?y ns:organization.leadership.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045c7b')\na.add_fact('m.045c7b', 'organization.organization.leadership', 'x1')\na.add_time_constrain('x1', 'organization.leadership.from', 'organization.leadership.to', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'organization.leadership.person', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-752",
        "question": "what drink did john pemberton create",
        "answer": [
            "m.01yvs"
        ],
        "different_answer": [
            [
                "m.01yvs"
            ]
        ],
        "entity_linking": {
            "John Pemberton": "m.0h24w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h24w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h24w ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h24w')\na.add_fact('m.0h24w', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-753",
        "question": "what position did stanley matthews play",
        "answer": [
            "m.03qh1vd",
            "m.02nzb8",
            "m.02sdk9v"
        ],
        "different_answer": [
            [
                "m.03qh1vd",
                "m.02nzb8",
                "m.02sdk9v"
            ]
        ],
        "entity_linking": {
            "Sir Stanley Matthews": "m.013s6x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013s6x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013s6x ns:soccer.football_player.position_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013s6x')\na.add_fact('m.013s6x', 'soccer.football_player.position_s', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-755",
        "question": "what was bonnie prince charlie full name",
        "answer": [
            "m.0q2445b"
        ],
        "different_answer": [
            [
                "m.0q2445b"
            ]
        ],
        "entity_linking": {
            "Charles Edward Stuart": "m.0fssd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fssd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fssd ns:fictional_universe.person_in_fiction.representations_in_fiction ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fssd')\na.add_fact('m.0fssd', 'fictional_universe.person_in_fiction.representations_in_fiction', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-756",
        "question": "who makes the voice of stewie griffin",
        "answer": [
            "m.021yw7"
        ],
        "different_answer": [
            [
                "m.021yw7"
            ]
        ],
        "entity_linking": {
            "Stewie Griffin": "m.02m29p",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02m29p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02m29p ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.02m29p')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.02m29p', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-757",
        "question": "who is angelina jolie mom and dad",
        "answer": [
            "m.046qq",
            "m.01mqgf"
        ],
        "different_answer": [
            [
                "m.046qq",
                "m.01mqgf"
            ]
        ],
        "entity_linking": {
            "Angelina Jolie": "m.0f4vbz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f4vbz')\na.add_fact('m.0f4vbz', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-758",
        "question": "who is the governor of indiana 2009",
        "answer": [
            "m.048v04"
        ],
        "different_answer": [
            [
                "m.048v04"
            ]
        ],
        "entity_linking": {
            "Governor of Indiana": "m.04f_xd8",
            "2009-12-31": "\"2009-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2009-01-01": "\"2009-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04f_xd8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04f_xd8 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2009-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2009-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04f_xd8')\na.add_fact('m.04f_xd8', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2009-12-31\"^^xsd:dateTime', '\"2009-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-759",
        "question": "who brad pitt has dated",
        "answer": [
            "m.0hjxj",
            "m.02g0mx",
            "m.02cpb7",
            "m.0bblqk",
            "m.04j9sl"
        ],
        "different_answer": [
            [
                "m.0hjxj",
                "m.02g0mx",
                "m.02cpb7",
                "m.0bblqk",
                "m.04j9sl"
            ]
        ],
        "entity_linking": {
            "Brad Pitt": "m.0c6qh",
            "Dated": "m.02_7k44"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c6qh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c6qh ns:celebrities.celebrity.sexual_relationships ?y .\n?y ns:celebrities.romantic_relationship.celebrity ?x .\n?y ns:celebrities.romantic_relationship.relationship_type ns:m.02_7k44 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7k44')\na.add_filter('x0', '!=', 'm.0c6qh')\na.add_fact('x1', 'celebrities.romantic_relationship.relationship_type', 'm.02_7k44')\na.add_fact('m.0c6qh', 'celebrities.celebrity.sexual_relationships', 'x1')\na.add_fact('x1', 'celebrities.romantic_relationship.celebrity', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-760",
        "question": "what party does barack obama belong to",
        "answer": [
            "m.0d075m"
        ],
        "different_answer": [
            [
                "m.0d075m"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-761",
        "question": "what is san francisco zip code",
        "answer": [
            "m.01zn03_",
            "m.01zp0ds",
            "m.07nq087",
            "m.07nq068",
            "m.01zn0qt",
            "m.01zn0jc",
            "m.01zn0g6",
            "m.07nq061",
            "m.01zn2b4",
            "m.01zn0rn",
            "m.07nq049",
            "m.01znt3g",
            "m.01zn18q",
            "m.07nq06y",
            "m.07nq09b",
            "m.07nq09k",
            "m.01zn02t",
            "m.07nq03w",
            "m.07nq07l",
            "m.01zn0_v",
            "m.01zncnw",
            "m.07nq05m",
            "m.07nq080",
            "m.07nq04r",
            "m.07nq07t",
            "m.01zn37j",
            "m.01zn119",
            "m.01zn0dr",
            "m.07nq08g",
            "m.02hqwhk",
            "m.022r0__",
            "m.01zn1kn",
            "m.01zn0k5",
            "m.01zn1px",
            "m.07nq04j",
            "m.01zn01v",
            "m.02hqw2g",
            "m.07nq05v",
            "m.07nq055",
            "m.01zn6fx",
            "m.01zn177",
            "m.01zn15r",
            "m.0wrh466",
            "m.07nq05d",
            "m.07nq04z",
            "m.01zn6d7",
            "m.07nq06h",
            "m.07nq07c",
            "m.07nq08p",
            "m.01znttd",
            "m.01zn064",
            "m.07nq08x",
            "m.01zn4sl",
            "m.07nq093",
            "m.07nq042",
            "m.0gtjrnv",
            "m.01zn0z_",
            "m.03dnjw2",
            "m.01zn_8s",
            "m.07nq06q",
            "m.03dnjvp",
            "m.07nq074"
        ],
        "different_answer": [
            [
                "m.01zn03_",
                "m.01zp0ds",
                "m.07nq087",
                "m.07nq068",
                "m.01zn0qt",
                "m.01zn0jc",
                "m.01zn0g6",
                "m.07nq061",
                "m.01zn2b4",
                "m.01zn0rn",
                "m.07nq049",
                "m.01znt3g",
                "m.01zn18q",
                "m.07nq06y",
                "m.07nq09b",
                "m.07nq09k",
                "m.01zn02t",
                "m.07nq03w",
                "m.07nq07l",
                "m.01zn0_v",
                "m.01zncnw",
                "m.07nq05m",
                "m.07nq080",
                "m.07nq04r",
                "m.07nq07t",
                "m.01zn37j",
                "m.01zn119",
                "m.01zn0dr",
                "m.07nq08g",
                "m.02hqwhk",
                "m.022r0__",
                "m.01zn1kn",
                "m.01zn0k5",
                "m.01zn1px",
                "m.07nq04j",
                "m.01zn01v",
                "m.02hqw2g",
                "m.07nq05v",
                "m.07nq055",
                "m.01zn6fx",
                "m.01zn177",
                "m.01zn15r",
                "m.0wrh466",
                "m.07nq05d",
                "m.07nq04z",
                "m.01zn6d7",
                "m.07nq06h",
                "m.07nq07c",
                "m.07nq08p",
                "m.01znttd",
                "m.01zn064",
                "m.07nq08x",
                "m.01zn4sl",
                "m.07nq093",
                "m.07nq042",
                "m.0gtjrnv",
                "m.01zn0z_",
                "m.03dnjw2",
                "m.01zn_8s",
                "m.07nq06q",
                "m.03dnjvp",
                "m.07nq074"
            ]
        ],
        "entity_linking": {
            "San Francisco": "m.0d6lp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d6lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d6lp ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d6lp')\na.add_fact('m.0d6lp', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-762",
        "question": "who has stephen ireland played for",
        "answer": [
            "m.0bl8l"
        ],
        "different_answer": [
            [
                "m.0bl8l"
            ],
            [
                "m.0fvly",
                "m.0bl8l",
                "m.01634x",
                "m.01cwm1"
            ]
        ],
        "entity_linking": {
            "Stephen Ireland": "m.07_mj3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_mj3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_mj3 ns:base.schemastaging.athlete_extra.salary ?y .\n?y ns:base.schemastaging.athlete_salary.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_mj3')\na.add_fact('m.07_mj3', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-764",
        "question": "where did john mayer go to college",
        "answer": [
            "m.02g839"
        ],
        "different_answer": [
            [
                "m.02g839"
            ]
        ],
        "entity_linking": {
            "John Mayer": "m.01s21dg",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s21dg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s21dg ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01s21dg')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01s21dg', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-765",
        "question": "what celebrities has brody jenner dated",
        "answer": [
            "m.08wv1j",
            "m.0dq9wx",
            "m.0227vl",
            "m.0hhr1fv",
            "m.014v6x",
            "m.04nvm8f"
        ],
        "different_answer": [
            [
                "m.08wv1j",
                "m.0dq9wx",
                "m.0227vl",
                "m.0hhr1fv",
                "m.014v6x",
                "m.04nvm8f"
            ],
            [
                "m.022q32",
                "m.0dq9wx",
                "m.026c8yk"
            ]
        ],
        "entity_linking": {
            "Brody Jenner": "m.026_dq6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026_dq6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026_dq6 ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.026_dq6')\na.add_fact('m.026_dq6', 'base.popstra.celebrity.dated', 'x1')\na.add_fact('x1', 'base.popstra.dated.participant', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-766",
        "question": "what is malaysian currency",
        "answer": [
            "m.01_c9q"
        ],
        "different_answer": [
            [
                "m.01_c9q"
            ]
        ],
        "entity_linking": {
            "Malaysia": "m.09pmkv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09pmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09pmkv ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09pmkv')\na.add_fact('m.09pmkv', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-768",
        "question": "who owns volkswagen car company",
        "answer": [
            "m.07_zt"
        ],
        "different_answer": [
            [
                "m.07_zt"
            ]
        ],
        "entity_linking": {
            "Volkswagen Passenger Cars": "m.07ywl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ywl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ywl ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ywl')\na.add_fact('m.07ywl', 'organization.organization.parent', 'x1')\na.add_fact('x1', 'organization.organization_relationship.parent', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-769",
        "question": "which is the main train station in rome",
        "answer": [
            "m.02683tb"
        ],
        "different_answer": [
            [
                "m.02683tb"
            ]
        ],
        "entity_linking": {
            "Rome": "m.06c62",
            "Train": "m.07jdr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c62 ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:m.07jdr .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07jdr')\na.add_filter('x0', '!=', 'm.06c62')\na.add_fact('x1', 'travel.transportation.mode_of_transportation', 'm.07jdr')\na.add_fact('m.06c62', 'travel.travel_destination.how_to_get_here', 'x1')\na.add_fact('x1', 'travel.transportation.transport_terminus', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-770",
        "question": "what did steve mcnair died from",
        "answer": [
            "m.02qnd1b"
        ],
        "different_answer": [
            [
                "m.02qnd1b"
            ]
        ],
        "entity_linking": {
            "Steve McNair": "m.02zmx0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zmx0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zmx0 ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zmx0')\na.add_fact('m.02zmx0', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-771",
        "question": "who is the newly elected governor of california",
        "answer": [
            "m.0tc7"
        ],
        "different_answer": [
            [
                "m.0tc7"
            ]
        ],
        "entity_linking": {
            "California": "m.01n7q",
            "Governor": "m.0fkvn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n7q ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\n?y ns:government.government_position_held.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.01n7q')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.01n7q', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x2')\na.add_max('x2')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-772",
        "question": "who plays roxanne in ghost rider",
        "answer": [
            "m.03_x5t",
            "m.026ths5"
        ],
        "different_answer": [
            [
                "m.03_x5t",
                "m.026ths5"
            ]
        ],
        "entity_linking": {
            "Ghost Rider": "m.06yykb",
            "Roxanne Simpson": "m.02ph41w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06yykb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06yykb ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.02ph41w .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ph41w')\na.add_filter('x0', '!=', 'm.06yykb')\na.add_fact('x1', 'film.performance.character', 'm.02ph41w')\na.add_fact('m.06yykb', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-773",
        "question": "where is the sony ericsson company",
        "answer": [
            "m.024bqj"
        ],
        "different_answer": [
            [
                "m.024bqj"
            ]
        ],
        "entity_linking": {
            "Sony Mobile Communications": "m.01spxd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01spxd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01spxd ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01spxd')\na.add_fact('m.01spxd', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-774",
        "question": "what kind of currency does the dominican republic have",
        "answer": [
            "m.04lt7_"
        ],
        "different_answer": [
            [
                "m.04lt7_"
            ]
        ],
        "entity_linking": {
            "Dominican Republic": "m.027rn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rn ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027rn')\na.add_fact('m.027rn', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-775",
        "question": "what to do this weekend in manchester with kids",
        "answer": [
            "m.039s65",
            "m.03cwfv_",
            "m.02lv55",
            "m.039s6j",
            "m.0383g6",
            "m.0383jm",
            "m.041xlb",
            "m.03d5f9f",
            "m.0n4890m",
            "m.030lpl",
            "m.02w89p",
            "m.0gg7rlr",
            "m.0bm8swc"
        ],
        "different_answer": [
            [
                "m.039s65",
                "m.03cwfv_",
                "m.02lv55",
                "m.039s6j",
                "m.0383g6",
                "m.0383jm",
                "m.041xlb",
                "m.03d5f9f",
                "m.0n4890m",
                "m.030lpl",
                "m.02w89p",
                "m.0gg7rlr",
                "m.0bm8swc"
            ]
        ],
        "entity_linking": {
            "Manchester": "m.052bw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052bw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052bw ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.052bw')\na.add_fact('m.052bw', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-776",
        "question": "what sport is popular in italy",
        "answer": [
            "m.0f0tjt",
            "m.041bcz",
            "m.02x92lv",
            "m.02py_ct",
            "m.02z68lf",
            "m.06s6pr",
            "m.02wcqls",
            "m.02z136v",
            "m.03c622g",
            "m.02yjv4",
            "m.0f0vc8",
            "m.09zc0d",
            "m.02x8htg",
            "m.026r5sg",
            "m.06_8_s",
            "m.01_lhg",
            "m.04n2m87",
            "m.09bl55",
            "m.026pr5r",
            "m.04tgph",
            "m.026yzx0",
            "m.02yjwb",
            "m.0j289d9",
            "m.03y9nqh",
            "m.05yxjr",
            "m.03t962",
            "g.11x7vhqcx",
            "m.09d34d",
            "m.07v93_",
            "m.0746dd",
            "m.026xx_g",
            "m.0f0vk_",
            "m.02r4hv4",
            "m.07lwfq",
            "m.0b_2gr",
            "m.0bwf1x"
        ],
        "different_answer": [
            [
                "m.0f0tjt",
                "m.041bcz",
                "m.02x92lv",
                "m.02py_ct",
                "m.02z68lf",
                "m.06s6pr",
                "m.02wcqls",
                "m.02z136v",
                "m.03c622g",
                "m.02yjv4",
                "m.0f0vc8",
                "m.09zc0d",
                "m.02x8htg",
                "m.026r5sg",
                "m.06_8_s",
                "m.01_lhg",
                "m.04n2m87",
                "m.09bl55",
                "m.026pr5r",
                "m.04tgph",
                "m.026yzx0",
                "m.02yjwb",
                "m.0j289d9",
                "m.03y9nqh",
                "m.05yxjr",
                "m.03t962",
                "g.11x7vhqcx",
                "m.09d34d",
                "m.07v93_",
                "m.0746dd",
                "m.026xx_g",
                "m.0f0vk_",
                "m.02r4hv4",
                "m.07lwfq",
                "m.0b_2gr",
                "m.0bwf1x"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-777",
        "question": "where is the main headquarters of google",
        "answer": [
            "m.0r6c4"
        ],
        "different_answer": [
            [
                "m.0r6c4"
            ]
        ],
        "entity_linking": {
            "Google": "m.045c7b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045c7b')\na.add_fact('m.045c7b', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-778",
        "question": "what was jesse owens education",
        "answer": [
            "m.0fcddh",
            "m.05krk"
        ],
        "different_answer": [
            [
                "m.0fcddh",
                "m.05krk"
            ]
        ],
        "entity_linking": {
            "Jesse Owens": "m.0cmr3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cmr3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cmr3 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cmr3')\na.add_fact('m.0cmr3', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-779",
        "question": "where does carlos santana live",
        "answer": [
            "m.0d6lp",
            "m.0pswc",
            "m.01btyw"
        ],
        "different_answer": [
            [
                "m.0d6lp",
                "m.0pswc",
                "m.01btyw"
            ]
        ],
        "entity_linking": {
            "Carlos Santana": "m.01304j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01304j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01304j ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01304j')\na.add_fact('m.01304j', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-780",
        "question": "what is the new movie john carter about",
        "answer": [
            "m.01hmnh",
            "m.03k9fj",
            "m.06n90",
            "m.02kdv5l"
        ],
        "different_answer": [
            [
                "m.01hmnh",
                "m.03k9fj",
                "m.06n90",
                "m.02kdv5l"
            ]
        ],
        "entity_linking": {
            "John Carter": "m.03whyr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03whyr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03whyr ns:film.film.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03whyr')\na.add_fact('m.03whyr', 'film.film.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-782",
        "question": "what countries does nafta include",
        "answer": [
            "m.0b90_r",
            "m.09c7w0",
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.0b90_r",
                "m.09c7w0",
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "North American Free Trade Agreement": "m.05jj_",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05jj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05jj_ ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.05jj_')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.05jj_', 'organization.membership_organization.members', 'x1')\na.add_fact('x1', 'organization.organization_membership.member', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-783",
        "question": "what county is houston tx in",
        "answer": [
            "m.0fxwx"
        ],
        "different_answer": [
            [
                "m.0fxwx"
            ]
        ],
        "entity_linking": {
            "Houston": "m.03l2n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03l2n')\na.add_fact('m.03l2n', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-784",
        "question": "where do the seattle seahawks play",
        "answer": [
            "m.01db_j"
        ],
        "different_answer": [
            [
                "m.01db_j"
            ]
        ],
        "entity_linking": {
            "Seattle Seahawks": "m.070xg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.070xg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.070xg ns:sports.sports_team.arena_stadium ?x .\n?x ns:architecture.structure.opened ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.070xg')\na.add_fact('m.070xg', 'sports.sports_team.arena_stadium', 'x0')\na.add_fact('x0', 'architecture.structure.opened', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-785",
        "question": "who does michael keaton play in cars",
        "answer": [
            "m.0dtcs2"
        ],
        "different_answer": [
            [
                "m.0dtcs2"
            ],
            [
                "m.0dtcs2"
            ]
        ],
        "entity_linking": {
            "Michael Keaton": "m.01j5ws",
            "Cars": "m.03q0r1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j5ws)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j5ws ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.03q0r1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03q0r1')\na.add_filter('x0', '!=', 'm.01j5ws')\na.add_fact('x1', 'film.performance.film', 'm.03q0r1')\na.add_fact('m.01j5ws', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-787",
        "question": "where is the riviera casino",
        "answer": [
            "m.0cv3w"
        ],
        "different_answer": [
            [
                "m.0cv3w"
            ]
        ],
        "entity_linking": {
            "Riviera": "m.05vv6l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05vv6l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05vv6l ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05vv6l')\na.add_fact('m.05vv6l', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-788",
        "question": "what is the holy book of the buddhist religion",
        "answer": [
            "m.01r1g7",
            "m.01hnwm",
            "m.04k1b0",
            "m.04_13vt",
            "m.01nv3q",
            "m.02l3dj",
            "m.02k1bj",
            "m.05mwk22",
            "m.01rky9",
            "m.05_m24",
            "m.0c4pcl",
            "m.036z9c",
            "m.0c00_gk",
            "m.0fs6g7"
        ],
        "different_answer": [
            [
                "m.01r1g7",
                "m.01hnwm",
                "m.04k1b0",
                "m.04_13vt",
                "m.01nv3q",
                "m.02l3dj",
                "m.02k1bj",
                "m.05mwk22",
                "m.01rky9",
                "m.05_m24",
                "m.0c4pcl",
                "m.036z9c",
                "m.0c00_gk",
                "m.0fs6g7"
            ]
        ],
        "entity_linking": {
            "Buddhism": "m.092bf5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.092bf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.092bf5 ns:religion.religion.texts ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.092bf5')\na.add_fact('m.092bf5', 'religion.religion.texts', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-789",
        "question": "who became president when henry harrison died",
        "answer": [
            "m.042dk"
        ],
        "different_answer": [
            [
                "m.042dk"
            ]
        ],
        "entity_linking": {
            "William Henry Harrison": "m.0835q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0835q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0835q ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0835q')\na.add_fact('m.0835q', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-790",
        "question": "where did richard arkwright grow up",
        "answer": [
            "m.0m7dd"
        ],
        "different_answer": [
            [
                "m.0m7dd"
            ]
        ],
        "entity_linking": {
            "Richard Arkwright": "m.01tglh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tglh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tglh ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01tglh')\na.add_fact('m.01tglh', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-791",
        "question": "what other books did louis sachar write",
        "answer": [
            "m.04vzwf8",
            "m.04vk0f_",
            "m.04v_cdw",
            "m.04tx5kt",
            "m.04vk_0q",
            "m.04v_cdl",
            "m.04tx5n0",
            "m.04vfy9y",
            "m.04vk_60",
            "m.04vl09f",
            "m.04vfy2h",
            "m.04vk_8s",
            "m.04vk_80",
            "m.04tx5mk",
            "m.04vkj5z",
            "m.04vfybn",
            "m.04tx5k2",
            "m.04v09yr",
            "m.04v_kjh",
            "m.04v5xwx",
            "m.04vztrl",
            "m.04tx5h9",
            "m.04v09_5",
            "m.04vk0hr",
            "m.04vztvk",
            "m.04vztqt",
            "m.04vzwd7",
            "m.04vk_5s",
            "m.04vk_50",
            "m.04vk_4s",
            "m.04vk_26",
            "m.04tx5mb",
            "m.04tx5k9",
            "m.04v5xx4",
            "m.028xsvy",
            "m.04vztww",
            "m.04vkj5q",
            "m.04tx5m3",
            "m.04vk0jj",
            "m.04tx5gn",
            "m.04vfsfw",
            "m.04vztrv",
            "m.04vzwfv",
            "m.04vk_3p",
            "m.04vkj76",
            "m.04vk0gr",
            "m.04vztx4",
            "m.04vk_4h",
            "m.04vk_2z",
            "m.04vfmz4",
            "m.04tx5lg",
            "m.04vztw2",
            "m.04tx5jm",
            "m.028y9y6",
            "m.04tx5hj",
            "m.04tx5jw",
            "m.04vztq9",
            "m.04vkj6z",
            "m.04vfy3x",
            "m.04vztt1",
            "m.04tx5dp",
            "m.04vl080",
            "m.04vztq0",
            "m.04tx5lp",
            "m.04tx5h2",
            "m.04v09x5",
            "m.04vfy26",
            "m.04vk_68",
            "m.04vk_47",
            "m.04vztvv",
            "m.04vl08z",
            "m.04vk0hh",
            "m.04vkj8s",
            "m.04v09_n",
            "m.028y3lc",
            "m.04tx5l7",
            "m.04vkj5g",
            "m.04vfsh_",
            "m.04vk_71",
            "m.04vfyby",
            "m.04v_kj_",
            "m.04v09xp",
            "m.04w05b2",
            "m.04w059b",
            "m.04w059v",
            "m.04vztst",
            "m.04tx5kj",
            "m.04vk_58",
            "m.04v_kj0",
            "m.04w058k",
            "m.04vfy3m",
            "m.04vzts9",
            "m.04v5xxw",
            "m.04vkj56",
            "m.04vztt9",
            "m.04tx5hz",
            "m.04tx5jd",
            "m.04vfsh5",
            "m.04vk_6t",
            "m.04vztwl",
            "m.04v09zg",
            "m.04vl08h",
            "m.04vzwgy",
            "m.04v09wp",
            "m.04vzwg2",
            "m.04vk_6j",
            "m.04v09xy",
            "m.04vl07k",
            "m.04vzwhg",
            "m.04tx5f_",
            "m.028yqjw",
            "m.04vztwb",
            "m.04vk0g_",
            "m.04v09xf",
            "m.04vkj7g",
            "m.04vzwh6",
            "m.04vk_1f",
            "m.04vzttl",
            "m.04tx5gf",
            "m.04vk_1z",
            "m.04vk0h_",
            "m.04vzwdh",
            "m.04vztv9",
            "m.04tx5mt",
            "m.04tx5fk",
            "m.04vk_5j",
            "m.04v_kjr",
            "m.04vzwj8",
            "m.04vfsj7",
            "m.04vztv0"
        ],
        "different_answer": [
            [
                "m.04vzwf8",
                "m.04vk0f_",
                "m.04v_cdw",
                "m.04tx5kt",
                "m.04vk_0q",
                "m.04v_cdl",
                "m.04tx5n0",
                "m.04vfy9y",
                "m.04vk_60",
                "m.04vl09f",
                "m.04vfy2h",
                "m.04vk_8s",
                "m.04vk_80",
                "m.04tx5mk",
                "m.04vkj5z",
                "m.04vfybn",
                "m.04tx5k2",
                "m.04v09yr",
                "m.04v_kjh",
                "m.04v5xwx",
                "m.04vztrl",
                "m.04tx5h9",
                "m.04v09_5",
                "m.04vk0hr",
                "m.04vztvk",
                "m.04vztqt",
                "m.04vzwd7",
                "m.04vk_5s",
                "m.04vk_50",
                "m.04vk_4s",
                "m.04vk_26",
                "m.04tx5mb",
                "m.04tx5k9",
                "m.04v5xx4",
                "m.028xsvy",
                "m.04vztww",
                "m.04vkj5q",
                "m.04tx5m3",
                "m.04vk0jj",
                "m.04tx5gn",
                "m.04vfsfw",
                "m.04vztrv",
                "m.04vzwfv",
                "m.04vk_3p",
                "m.04vkj76",
                "m.04vk0gr",
                "m.04vztx4",
                "m.04vk_4h",
                "m.04vk_2z",
                "m.04vfmz4",
                "m.04tx5lg",
                "m.04vztw2",
                "m.04tx5jm",
                "m.028y9y6",
                "m.04tx5hj",
                "m.04tx5jw",
                "m.04vztq9",
                "m.04vkj6z",
                "m.04vfy3x",
                "m.04vztt1",
                "m.04tx5dp",
                "m.04vl080",
                "m.04vztq0",
                "m.04tx5lp",
                "m.04tx5h2",
                "m.04v09x5",
                "m.04vfy26",
                "m.04vk_68",
                "m.04vk_47",
                "m.04vztvv",
                "m.04vl08z",
                "m.04vk0hh",
                "m.04vkj8s",
                "m.04v09_n",
                "m.028y3lc",
                "m.04tx5l7",
                "m.04vkj5g",
                "m.04vfsh_",
                "m.04vk_71",
                "m.04vfyby",
                "m.04v_kj_",
                "m.04v09xp",
                "m.04w05b2",
                "m.04w059b",
                "m.04w059v",
                "m.04vztst",
                "m.04tx5kj",
                "m.04vk_58",
                "m.04v_kj0",
                "m.04w058k",
                "m.04vfy3m",
                "m.04vzts9",
                "m.04v5xxw",
                "m.04vkj56",
                "m.04vztt9",
                "m.04tx5hz",
                "m.04tx5jd",
                "m.04vfsh5",
                "m.04vk_6t",
                "m.04vztwl",
                "m.04v09zg",
                "m.04vl08h",
                "m.04vzwgy",
                "m.04v09wp",
                "m.04vzwg2",
                "m.04vk_6j",
                "m.04v09xy",
                "m.04vl07k",
                "m.04vzwhg",
                "m.04tx5f_",
                "m.028yqjw",
                "m.04vztwb",
                "m.04vk0g_",
                "m.04v09xf",
                "m.04vkj7g",
                "m.04vzwh6",
                "m.04vk_1f",
                "m.04vzttl",
                "m.04tx5gf",
                "m.04vk_1z",
                "m.04vk0h_",
                "m.04vzwdh",
                "m.04vztv9",
                "m.04tx5mt",
                "m.04tx5fk",
                "m.04vk_5j",
                "m.04v_kjr",
                "m.04vzwj8",
                "m.04vfsj7",
                "m.04vztv0"
            ],
            [
                "m.04t4867",
                "m.027by4_",
                "m.0fq08x0",
                "m.010r2x8r",
                "m.03tgtr",
                "m.04t4842",
                "m.0h0jhl",
                "g.1218f5g0",
                "m.04t485_",
                "m.09yl25",
                "m.06blrtc",
                "m.0f8d9g",
                "m.04t484_",
                "m.06tm95g",
                "m.067d3d8",
                "m.069nlkb",
                "m.04t486h",
                "m.06hhh6t",
                "m.04t484b",
                "m.010r3l0q",
                "m.027bxq6",
                "m.011brh75",
                "m.0dl1lt",
                "m.06dymp",
                "m.0dh2fh",
                "m.0cmt6c",
                "m.06ck0yg",
                "m.04t484l",
                "m.04t485h",
                "m.027bxn3",
                "m.027bxzt",
                "m.0f95rs"
            ]
        ],
        "entity_linking": {
            "Louis Sachar": "m.01bq8d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq8d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq8d ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bq8d')\na.add_fact('m.01bq8d', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-792",
        "question": "when did roth ira originate",
        "answer": [
            "m.023xsb"
        ],
        "different_answer": [
            [
                "m.023xsb"
            ]
        ],
        "entity_linking": {
            "Roth IRA": "m.023_lp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023_lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023_lp ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.023_lp')\na.add_fact('m.023_lp', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-794",
        "question": "who does the voice for darth vader",
        "answer": [
            "m.0b2l8f",
            "m.0f6_x",
            "m.0113l6zy",
            "m.0945y8",
            "m.06wm0z"
        ],
        "different_answer": [
            [
                "m.0b2l8f",
                "m.0f6_x",
                "m.0113l6zy",
                "m.0945y8",
                "m.06wm0z"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-796",
        "question": "what did thomas malthus do",
        "answer": [
            "m.06q2q",
            "m.03l_bhv",
            "m.04s2z",
            "m.0frz0"
        ],
        "different_answer": [
            [
                "m.06q2q",
                "m.03l_bhv",
                "m.04s2z",
                "m.0frz0"
            ]
        ],
        "entity_linking": {
            "Thomas Robert Malthus": "m.07r3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07r3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07r3d ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07r3d')\na.add_fact('m.07r3d', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-797",
        "question": "what is the zip code for newark california",
        "answer": [
            "m.01zjg6s"
        ],
        "different_answer": [
            [
                "m.01zjg6s"
            ]
        ],
        "entity_linking": {
            "Newark": "m.0qx_6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qx_6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qx_6 ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qx_6')\na.add_fact('m.0qx_6', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-798",
        "question": "what states share a border with tennessee",
        "answer": [
            "m.07z1m",
            "m.05fkf",
            "m.0gyh",
            "m.04tgp",
            "m.04ych",
            "m.0d0x8",
            "m.0vbk",
            "m.0498y"
        ],
        "different_answer": [
            [
                "m.07z1m",
                "m.05fkf",
                "m.0gyh",
                "m.04tgp",
                "m.04ych",
                "m.0d0x8",
                "m.0vbk",
                "m.0498y"
            ]
        ],
        "entity_linking": {
            "Tennessee": "m.07h34",
            "\"State\"": "\"State\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07h34)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07h34 ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07h34')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"State\"^^xsd:string')\na.add_fact('m.07h34', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-800",
        "question": "what war did the us lose the most soldiers",
        "answer": [
            "m.081pw"
        ],
        "different_answer": [
            [
                "m.081pw"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:military.military_combatant.casualties ?y .\n?y ns:military.casualties.military_conflict ?x .\n?y ns:military.casualties.lower_estimate ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'military.military_combatant.casualties', 'x1')\na.add_fact('x1', 'military.casualties.lower_estimate', 'x2')\na.add_max('x2')\na.add_fact('x1', 'military.casualties.military_conflict', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-801",
        "question": "what kind of government is egypt",
        "answer": [
            "m.02tz3y",
            "m.01dw03"
        ],
        "different_answer": [
            [
                "m.02tz3y",
                "m.01dw03"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-802",
        "question": "what musical instruments does justin bieber play",
        "answer": [
            "m.0290ngj"
        ],
        "different_answer": [
            [
                "m.0290ngj"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:music.artist.track_contributions ?y .\n?y ns:music.track_contribution.role ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w2sn5')\na.add_fact('m.06w2sn5', 'music.artist.track_contributions', 'x1')\na.add_fact('x1', 'music.track_contribution.role', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-805",
        "question": "where do john lennon die",
        "answer": [
            "m.02_286"
        ],
        "different_answer": [
            [
                "m.02_286"
            ]
        ],
        "entity_linking": {
            "John Lennon": "m.01vsl3_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vsl3_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vsl3_ ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vsl3_')\na.add_fact('m.01vsl3_', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-809",
        "question": "what is the current time in bangalore india",
        "answer": [
            "m.02k8gd"
        ],
        "different_answer": [
            [
                "m.02k8gd"
            ]
        ],
        "entity_linking": {
            "Bangalore": "m.09c17"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c17)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c17 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c17')\na.add_fact('m.09c17', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-810",
        "question": "what language do people from greece speak",
        "answer": [
            "m.012v8",
            "m.0349s"
        ],
        "different_answer": [
            [
                "m.012v8",
                "m.0349s"
            ],
            [
                "m.0349s"
            ]
        ],
        "entity_linking": {
            "Greece": "m.035qy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035qy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035qy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035qy')\na.add_fact('m.035qy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-811",
        "question": "where is the phillies spring training stadium",
        "answer": [
            "m.066c5m"
        ],
        "different_answer": [
            [
                "m.066c5m"
            ]
        ],
        "entity_linking": {
            "Philadelphia Phillies": "m.05xvj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05xvj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05xvj ns:base.schemastaging.sports_team_extra.training_ground ?y .\n?y ns:base.schemastaging.team_training_ground_relationship.facility ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05xvj')\na.add_fact('m.05xvj', 'base.schemastaging.sports_team_extra.training_ground', 'x1')\na.add_fact('x1', 'base.schemastaging.team_training_ground_relationship.facility', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-812",
        "question": "what movies does matt dallas play in",
        "answer": [
            "m.0h2kycm",
            "m.07kjjgx",
            "m.0crsyk2",
            "m.04yy0f",
            "m.05p309z",
            "m.0h2kydx",
            "m.0b3w04n",
            "m.0n_5c2p",
            "m.02phpqn",
            "m.0gx0043",
            "m.026jldh",
            "m.051x5f2",
            "m.0h2r0x7",
            "m.0h2ky9j",
            "m.04j1y3y"
        ],
        "different_answer": [
            [
                "m.0h2kycm",
                "m.07kjjgx",
                "m.0crsyk2",
                "m.04yy0f",
                "m.05p309z",
                "m.0h2kydx",
                "m.0b3w04n",
                "m.0n_5c2p",
                "m.02phpqn",
                "m.0gx0043",
                "m.026jldh",
                "m.051x5f2",
                "m.0h2r0x7",
                "m.0h2ky9j",
                "m.04j1y3y"
            ]
        ],
        "entity_linking": {
            "Matt Dallas": "m.0dfyw6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dfyw6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dfyw6 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dfyw6')\na.add_fact('m.0dfyw6', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-813",
        "question": "who was john f kennedy 's family",
        "answer": [
            "m.01qlg1",
            "m.020t1x",
            "m.06hx2",
            "m.04f1nm",
            "m.02shr7",
            "m.0j3218k",
            "m.01y603",
            "m.01kyns",
            "m.0bt9c",
            "m.04f1qs",
            "m.028qh_",
            "m.0150p7",
            "m.0194xc",
            "m.01x4d5"
        ],
        "different_answer": [
            [
                "m.01qlg1",
                "m.020t1x",
                "m.06hx2",
                "m.04f1nm",
                "m.02shr7",
                "m.0j3218k",
                "m.01y603",
                "m.01kyns",
                "m.0bt9c",
                "m.04f1qs",
                "m.028qh_",
                "m.0150p7",
                "m.0194xc",
                "m.01x4d5"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tFILTER (?x != ns:m.0d3k14)\n\t{ \n\t  # Parents\n\t  ns:m.0d3k14 ns:people.person.parents ?x .\n\t}\n\tUNION\n\t{\n\t  # Children\n\t  ns:m.0d3k14 ns:people.person.children ?x .\n\t}\n\tUNION\n\t{\n\t  # Siblings\n\t  ns:m.0d3k14 ns:people.person.sibling_s ?y .\n\t  ?y ns:people.sibling_relationship.sibling ?x .\n\t}\n\tUNION\n\t{\n\t  # Spouse\n\t  ns:m.0d3k14 ns:people.person.spouse_s ?y .\n\t  ?y ns:people.marriage.spouse ?x .\n\t  ?y ns:people.marriage.type_of_union ns:m.04ztj .\n\t  FILTER (NOT EXISTS {?y ns:people.marriage.to []})\n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-814",
        "question": "where is harley davidson corporate headquarters",
        "answer": [
            "m.0dyl9"
        ],
        "different_answer": [
            [
                "m.0dyl9"
            ]
        ],
        "entity_linking": {
            "Harley-Davidson Motor Company": "m.03ny2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ny2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ny2 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ny2')\na.add_fact('m.03ny2', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-818",
        "question": "where was the ottoman empire based",
        "answer": [
            "m.01ffbn"
        ],
        "different_answer": [
            [
                "m.01ffbn"
            ]
        ],
        "entity_linking": {
            "Ottoman Empire": "m.05kyr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kyr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kyr ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05kyr')\na.add_fact('m.05kyr', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-819",
        "question": "where was bin laden found and killed",
        "answer": [
            "m.011hs1"
        ],
        "different_answer": [
            [
                "m.011hs1"
            ]
        ],
        "entity_linking": {
            "Osama bin Laden": "m.05mg9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mg9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mg9 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05mg9')\na.add_fact('m.05mg9', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-820",
        "question": "what are the names of harry potter movies in order",
        "answer": [
            "m.031hcx",
            "m.03177r",
            "m.03hxsv",
            "m.03176f",
            "m.02pth35",
            "m.031786",
            "m.031778",
            "m.0gvsynb"
        ],
        "different_answer": [
            [
                "m.031hcx",
                "m.03177r",
                "m.03hxsv",
                "m.03176f",
                "m.02pth35",
                "m.031786",
                "m.031778",
                "m.0gvsynb"
            ]
        ],
        "entity_linking": {
            "Harry Potter": "m.02676m4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02676m4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02676m4 ns:film.film_series.films_in_series ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02676m4')\na.add_fact('m.02676m4', 'film.film_series.films_in_series', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-821",
        "question": "what did pamela courson die from",
        "answer": [
            "m.01tf_6",
            "m.02kp1qn"
        ],
        "different_answer": [
            [
                "m.01tf_6",
                "m.02kp1qn"
            ]
        ],
        "entity_linking": {
            "Pamela Courson": "m.07ms9g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ms9g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ms9g ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ms9g')\na.add_fact('m.07ms9g', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-822",
        "question": "what did dr jack kevorkian do",
        "answer": [
            "m.020f6w",
            "m.03bwz9y"
        ],
        "different_answer": [
            [
                "m.020f6w",
                "m.03bwz9y"
            ]
        ],
        "entity_linking": {
            "Jack Kevorkian": "m.01ctkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ctkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ctkj ns:base.activism.activist.area_of_activism ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ctkj')\na.add_fact('m.01ctkj', 'base.activism.activist.area_of_activism', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-823",
        "question": "what does bolivia border",
        "answer": [
            "m.05v10",
            "m.016wzw",
            "m.01p1v",
            "m.0jgd",
            "m.015fr"
        ],
        "different_answer": [
            [
                "m.05v10",
                "m.016wzw",
                "m.01p1v",
                "m.0jgd",
                "m.015fr"
            ]
        ],
        "entity_linking": {
            "Bolivia": "m.0165v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0165v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0165v ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0165v')\na.add_fact('m.0165v', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-825",
        "question": "who does nolan ryan play for",
        "answer": [
            "m.05kmnv1",
            "m.03m1n"
        ],
        "different_answer": [
            [
                "m.05kmnv1",
                "m.03m1n"
            ]
        ],
        "entity_linking": {
            "Nolan Ryan": "m.0hctb",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hctb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hctb ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hctb')\na.add_fact('m.0hctb', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-827",
        "question": "what country does justin bieber come from",
        "answer": [
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w2sn5')\na.add_fact('m.06w2sn5', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-828",
        "question": "what is the head judge of the supreme court called",
        "answer": [
            "m.07szk"
        ],
        "different_answer": [
            [
                "m.07szk"
            ]
        ],
        "entity_linking": {
            "Supreme Court of the United States": "m.07sz1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:government.governmental_body.offices_positions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07sz1')\na.add_fact('m.07sz1', 'government.governmental_body.offices_positions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-829",
        "question": "who was frida kahlo influenced by",
        "answer": [
            "m.0q2c2"
        ],
        "different_answer": [
            [
                "m.0q2c2"
            ]
        ],
        "entity_linking": {
            "Frida Kahlo": "m.015k04"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015k04)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015k04 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015k04')\na.add_fact('m.015k04', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-830",
        "question": "where is taylor swift from",
        "answer": [
            "m.0zlgm"
        ],
        "different_answer": [
            [
                "m.0zlgm"
            ]
        ],
        "entity_linking": {
            "Taylor Swift": "m.0dl567"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dl567)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dl567 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dl567')\na.add_fact('m.0dl567', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-831",
        "question": "what type of religion does argentina have",
        "answer": [
            "m.03_gx",
            "m.05sfs",
            "m.0c8wxp"
        ],
        "different_answer": [
            [
                "m.03_gx",
                "m.05sfs",
                "m.0c8wxp"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-832",
        "question": "when is the last time the giants won the world series",
        "answer": [
            "m.0117q3yz"
        ],
        "different_answer": [
            [
                "m.0117q3yz"
            ]
        ],
        "entity_linking": {
            "San Francisco Giants": "m.0713r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0713r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0713r ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0713r')\na.add_fact('m.0713r', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-833",
        "question": "what is the main language used in china",
        "answer": [
            "m.0653m"
        ],
        "different_answer": [
            [
                "m.0653m"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-834",
        "question": "where did the battle of waterloo occur",
        "answer": [
            "m.017qwy"
        ],
        "different_answer": [
            [
                "m.017qwy"
            ]
        ],
        "entity_linking": {
            "Battle of Waterloo": "m.01dcm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01dcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01dcm ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01dcm')\na.add_fact('m.01dcm', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-836",
        "question": "who did vladimir lenin marry",
        "answer": [
            "m.02c8zp"
        ],
        "different_answer": [
            [
                "m.02c8zp"
            ]
        ],
        "entity_linking": {
            "Vladimir Lenin": "m.05wh0sh",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05wh0sh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05wh0sh ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.05wh0sh')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.05wh0sh', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-837",
        "question": "what year did the baltimore ravens win superbowl",
        "answer": [
            "m.076yq",
            "m.0642vqv"
        ],
        "different_answer": [
            [
                "m.076yq",
                "m.0642vqv"
            ]
        ],
        "entity_linking": {
            "Baltimore Ravens": "m.01ct6",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ct6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ct6 ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.06x5s .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.01ct6')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.06x5s')\na.add_fact('m.01ct6', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-838",
        "question": "what team does cristiano ronaldo play for 2011",
        "answer": [
            "m.02rqxc",
            "m.06l22"
        ],
        "different_answer": [
            [
                "m.02rqxc",
                "m.06l22"
            ]
        ],
        "entity_linking": {
            "Cristiano Ronaldo": "m.02xt6q",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xt6q')\na.add_fact('m.02xt6q', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-841",
        "question": "what is money called in italy",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-843",
        "question": "where did theodor schwann study",
        "answer": [
            "m.03563j",
            "m.0m7yh",
            "m.01stzp"
        ],
        "different_answer": [
            [
                "m.03563j",
                "m.0m7yh",
                "m.01stzp"
            ]
        ],
        "entity_linking": {
            "Theodor Schwann": "m.040000"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040000)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040000 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.040000')\na.add_fact('m.040000', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-845",
        "question": "who are the virginia senators 2013",
        "answer": [
            "m.024mm1",
            "m.053f8h",
            "m.0574xy"
        ],
        "different_answer": [
            [
                "m.024mm1",
                "m.053f8h",
                "m.0574xy"
            ]
        ],
        "entity_linking": {
            "Virginia": "m.07z1m",
            "United States Senate": "m.07t58",
            "2013-12-31": "\"2013-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2013-01-01": "\"2013-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z1m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z1m ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t58')\na.add_filter('x0', '!=', 'm.07z1m')\na.add_fact('x1', 'government.government_position_held.governmental_body', 'm.07t58')\na.add_fact('m.07z1m', 'government.political_district.representatives', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2013-12-31\"^^xsd:dateTime', '\"2013-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-846",
        "question": "what was dr seuss 's real name",
        "answer": [
            "Theodor Seuss Geisel"
        ],
        "different_answer": [
            [
                "Theodor Seuss Geisel"
            ]
        ],
        "entity_linking": {
            "Theodore Lesieg": "m.02g3w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:base.schemastaging.context_name.official_name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02g3w')\na.add_fact('m.02g3w', 'base.schemastaging.context_name.official_name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-847",
        "question": "what countries are members of the security council",
        "answer": [
            "m.01crd5",
            "m.01699",
            "m.01pj7",
            "m.01p8s",
            "m.06bnz",
            "m.0d05w3",
            "m.09c7w0",
            "m.0f8l9c",
            "m.07ssc"
        ],
        "different_answer": [
            [
                "m.01crd5",
                "m.01699",
                "m.01pj7",
                "m.01p8s",
                "m.06bnz",
                "m.0d05w3",
                "m.09c7w0",
                "m.0f8l9c",
                "m.07ssc"
            ]
        ],
        "entity_linking": {
            "United Nations Security Council": "m.07vnr",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07vnr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07vnr ns:base.unitednations.united_nations_body.members ?y .\n?y ns:base.unitednations.united_nations_body_membership.member ?x .\nFILTER(NOT EXISTS {?y ns:base.unitednations.united_nations_body_membership.from ?sk0} || \nEXISTS {?y ns:base.unitednations.united_nations_body_membership.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:base.unitednations.united_nations_body_membership.to ?sk2} || \nEXISTS {?y ns:base.unitednations.united_nations_body_membership.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07vnr')\na.add_fact('m.07vnr', 'base.unitednations.united_nations_body.members', 'x1')\na.add_time_constrain('x1', 'base.unitednations.united_nations_body_membership.from', 'base.unitednations.united_nations_body_membership.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'base.unitednations.united_nations_body_membership.member', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-848",
        "question": "where are the nordic countries",
        "answer": [
            "m.05b4w",
            "m.02vzc",
            "m.014mxp",
            "m.0k6nt",
            "m.0d0vqn",
            "m.03rj0",
            "m.035v3",
            "m.02w9s"
        ],
        "different_answer": [
            [
                "m.05b4w",
                "m.02vzc",
                "m.014mxp",
                "m.0k6nt",
                "m.0d0vqn",
                "m.03rj0",
                "m.035v3",
                "m.02w9s"
            ]
        ],
        "entity_linking": {
            "Nordic countries": "m.0140mf",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0140mf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0140mf ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.0140mf')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.0140mf', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-849",
        "question": "what country sponsored ferdinand magellan",
        "answer": [
            "m.0285m87"
        ],
        "different_answer": [
            [
                "m.0285m87"
            ]
        ],
        "entity_linking": {
            "Ferdinand Magellan": "m.033ky"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033ky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033ky ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.033ky')\na.add_fact('m.033ky', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-850",
        "question": "what did vera ellen die from",
        "answer": [
            "m.0qcr0"
        ],
        "different_answer": [
            [
                "m.0qcr0"
            ]
        ],
        "entity_linking": {
            "Vera-Ellen": "m.022sm6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.022sm6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.022sm6 ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.022sm6')\na.add_fact('m.022sm6', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-851",
        "question": "what is the capital of modern day egypt",
        "answer": [
            "m.01w2v"
        ],
        "different_answer": [
            [
                "m.01w2v"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-852",
        "question": "what province is toronto in ( 7 letters )",
        "answer": [
            "m.05kr_"
        ],
        "different_answer": [
            [
                "m.05kr_"
            ],
            [
                "m.05kr_"
            ]
        ],
        "entity_linking": {
            "Toronto": "m.0h7h6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:base.biblioness.bibs_location.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7h6')\na.add_fact('m.0h7h6', 'base.biblioness.bibs_location.state', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-855",
        "question": "what is the currency of brazil now",
        "answer": [
            "m.03385m"
        ],
        "different_answer": [
            [
                "m.03385m"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-856",
        "question": "what types of art did andy warhol do",
        "answer": [
            "m.015r61",
            "m.0q4mn"
        ],
        "different_answer": [
            [
                "m.015r61",
                "m.0q4mn"
            ]
        ],
        "entity_linking": {
            "Andy Warhol": "m.0kc6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0kc6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0kc6 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kc6')\na.add_fact('m.0kc6', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-857",
        "question": "what other states border florida",
        "answer": [
            "m.0gyh",
            "m.0d0x8"
        ],
        "different_answer": [
            [
                "m.0gyh",
                "m.0d0x8"
            ]
        ],
        "entity_linking": {
            "Florida": "m.02xry",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xry ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.02xry')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.02xry', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-859",
        "question": "what are the predominant religions in russia",
        "answer": [
            "m.0flw86",
            "m.0b06q"
        ],
        "different_answer": [
            [
                "m.0flw86",
                "m.0b06q"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-861",
        "question": "who will coach carolina panthers in 2013",
        "answer": [
            "m.04g57l"
        ],
        "different_answer": [
            [
                "m.04g57l"
            ]
        ],
        "entity_linking": {
            "Carolina Panthers": "m.01y3c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y3c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y3c ns:american_football.football_team.current_head_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y3c')\na.add_fact('m.01y3c', 'american_football.football_team.current_head_coach', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-862",
        "question": "where did louis sachar grow up",
        "answer": [
            "m.0y277"
        ],
        "different_answer": [
            [
                "m.0y277"
            ]
        ],
        "entity_linking": {
            "Louis Sachar": "m.01bq8d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq8d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq8d ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bq8d')\na.add_fact('m.01bq8d', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-863",
        "question": "who plays marshall eriksen",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Marshall Eriksen": "m.02vkmj9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vkmj9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vkmj9 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vkmj9')\na.add_fact('m.02vkmj9', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-865",
        "question": "what to do for fun in houston",
        "answer": [
            "m.03ynr2",
            "m.01tx3t",
            "m.03c98h6",
            "m.019r17",
            "m.0dhl0g",
            "m.01v9bf",
            "m.05170t",
            "m.026fxz",
            "m.063g1w",
            "m.0fy56_",
            "m.0cfztb",
            "m.0cc7kjq",
            "m.076v_2",
            "m.02nqnj",
            "m.01_nc_",
            "m.09q54f",
            "m.09vjh0",
            "m.02z52c3",
            "m.0182y2",
            "m.0263t14",
            "m.03y8vk2"
        ],
        "different_answer": [
            [
                "m.03ynr2",
                "m.01tx3t",
                "m.03c98h6",
                "m.019r17",
                "m.0dhl0g",
                "m.01v9bf",
                "m.05170t",
                "m.026fxz",
                "m.063g1w",
                "m.0fy56_",
                "m.0cfztb",
                "m.0cc7kjq",
                "m.076v_2",
                "m.02nqnj",
                "m.01_nc_",
                "m.09q54f",
                "m.09vjh0",
                "m.02z52c3",
                "m.0182y2",
                "m.0263t14",
                "m.03y8vk2"
            ]
        ],
        "entity_linking": {
            "Houston": "m.03l2n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03l2n')\na.add_fact('m.03l2n', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-866",
        "question": "where did otto frank go to college",
        "answer": [
            "m.0bfyjl"
        ],
        "different_answer": [
            [
                "m.0bfyjl"
            ]
        ],
        "entity_linking": {
            "Otto Frank": "m.01c9j8",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01c9j8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01c9j8 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01c9j8')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01c9j8', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-867",
        "question": "what else has jennifer lawrence played in",
        "answer": [
            "m.0gkz15s",
            "m.0y4y7jj",
            "m.0ryt9m1",
            "m.0r8p2ll",
            "m.07cgsg_",
            "m.0gyn8bv",
            "m.093dqjy",
            "m.0ngvsvk",
            "m.0r3r5jz",
            "m.0gydg4g",
            "m.0h95927",
            "m.0n40qmp",
            "m.0bg9xm6",
            "m.0_4654w",
            "m.0ngvtb_",
            "m.0fpmrlv",
            "m.0yvm5dh",
            "m.09v71cj",
            "m.02vm7h8",
            "m.03grp5m",
            "m.03cqk46",
            "m.0cd2vh9",
            "m.010sqq_d",
            "m.0yvlk0t"
        ],
        "different_answer": [
            [
                "m.0gkz15s",
                "m.0y4y7jj",
                "m.0ryt9m1",
                "m.0r8p2ll",
                "m.07cgsg_",
                "m.0gyn8bv",
                "m.093dqjy",
                "m.0ngvsvk",
                "m.0r3r5jz",
                "m.0gydg4g",
                "m.0h95927",
                "m.0n40qmp",
                "m.0bg9xm6",
                "m.0_4654w",
                "m.0ngvtb_",
                "m.0fpmrlv",
                "m.0yvm5dh",
                "m.09v71cj",
                "m.02vm7h8",
                "m.03grp5m",
                "m.03cqk46",
                "m.0cd2vh9",
                "m.010sqq_d",
                "m.0yvlk0t"
            ]
        ],
        "entity_linking": {
            "Jennifer Lawrence": "m.02x0dzw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02x0dzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02x0dzw ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02x0dzw')\na.add_fact('m.02x0dzw', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-868",
        "question": "who is the governor of pennsylvania state now",
        "answer": [
            "m.0gx9n2"
        ],
        "different_answer": [
            [
                "m.0gx9n2"
            ]
        ],
        "entity_linking": {
            "Pennsylvania": "m.05tbn",
            "Governor": "m.0fkvn",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.05tbn')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.05tbn', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-869",
        "question": "where is ancient phoenician",
        "answer": [
            "m.04hqz"
        ],
        "different_answer": [
            [
                "m.04hqz"
            ]
        ],
        "entity_linking": {
            "Phoenicia": "m.0617q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0617q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0617q ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0617q')\na.add_fact('m.0617q', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-870",
        "question": "where does the celtics practice",
        "answer": [
            "m.05tbsj",
            "m.02hqj2"
        ],
        "different_answer": [
            [
                "m.05tbsj",
                "m.02hqj2"
            ]
        ],
        "entity_linking": {
            "Boston Celtics": "m.0bwjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwjj ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bwjj')\na.add_fact('m.0bwjj', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-872",
        "question": "where bin laden got killed",
        "answer": [
            "m.011hs1"
        ],
        "different_answer": [
            [
                "m.011hs1"
            ]
        ],
        "entity_linking": {
            "Osama bin Laden": "m.05mg9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mg9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mg9 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05mg9')\na.add_fact('m.05mg9', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-873",
        "question": "where does toronto get its water from",
        "answer": [
            "m.02vnl7x"
        ],
        "different_answer": [
            [
                "m.02vnl7x"
            ]
        ],
        "entity_linking": {
            "Toronto": "m.0h7h6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:base.infrastructure.infrastructural_municipality.sewage_treatment_plant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7h6')\na.add_fact('m.0h7h6', 'base.infrastructure.infrastructural_municipality.sewage_treatment_plant', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-874",
        "question": "what language do people from bosnia speak",
        "answer": [
            "m.0k0sb",
            "m.06x8y"
        ],
        "different_answer": [
            [
                "m.0k0sb",
                "m.06x8y"
            ],
            [
                "m.01841n",
                "m.0k0sv",
                "m.0k0sb"
            ]
        ],
        "entity_linking": {
            "Bosnia and Herzegovina": "m.0166b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0166b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0166b ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0166b')\na.add_fact('m.0166b', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-875",
        "question": "where did hugo chavez go to school",
        "answer": [
            "m.04fc47",
            "m.0467s09",
            "m.0467r_n",
            "m.08fk_z"
        ],
        "different_answer": [
            [
                "m.04fc47",
                "m.0467s09",
                "m.0467r_n",
                "m.08fk_z"
            ]
        ],
        "entity_linking": {
            "Hugo Ch\u00e1vez": "m.0d1b_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1b_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1b_ ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d1b_')\na.add_fact('m.0d1b_', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-876",
        "question": "who does japan import from",
        "answer": [
            "m.047t_",
            "m.0d060g",
            "m.06tw8",
            "m.07dzf",
            "m.09c7w0",
            "m.0ctw_b"
        ],
        "different_answer": [
            [
                "m.047t_",
                "m.0d060g",
                "m.06tw8",
                "m.07dzf",
                "m.09c7w0",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.statistical_region.places_imported_from ?y .\n?y ns:location.imports_and_exports.imported_from ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.statistical_region.places_imported_from', 'x1')\na.add_fact('x1', 'location.imports_and_exports.imported_from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-877",
        "question": "what is the name of sonia gandhi daughter",
        "answer": [
            "m.02n207"
        ],
        "different_answer": [
            [
                "m.02n207"
            ]
        ],
        "entity_linking": {
            "Sonia Gandhi": "m.016rwt",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016rwt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016rwt ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.016rwt')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.016rwt', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-878",
        "question": "who do islamic people pray to",
        "answer": [
            "m.055v4c",
            "m.0jfd",
            "m.0d05l6"
        ],
        "different_answer": [
            [
                "m.055v4c",
                "m.0jfd",
                "m.0d05l6"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.deities ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.deities', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-879",
        "question": "where was mary todd lincoln from",
        "answer": [
            "m.0d9y6"
        ],
        "different_answer": [
            [
                "m.0d9y6"
            ]
        ],
        "entity_linking": {
            "Mary Todd Lincoln": "m.01ypl0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ypl0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ypl0 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ypl0')\na.add_fact('m.01ypl0', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-880",
        "question": "where did charles darwin die",
        "answer": [
            "m.02_675"
        ],
        "different_answer": [
            [
                "m.02_675"
            ]
        ],
        "entity_linking": {
            "Charles Darwin": "m.01lwx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lwx')\na.add_fact('m.01lwx', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-881",
        "question": "what movies does nick cannon play in",
        "answer": [
            "m.04ybhxs",
            "m.0134yc8y",
            "m.031t2d",
            "m.09zg5d",
            "m.09flkf",
            "m.01yzvd",
            "m.02qzrt_",
            "m.07y9w5",
            "m.08_wh0",
            "m.0gj9fmj",
            "m.0c34n5",
            "m.08r4x3",
            "m.0ftc14",
            "m.0mzmnx4",
            "m.0464t_m",
            "m.07kjm8q",
            "m.07mj_0",
            "m.02rhxt_",
            "m.07pnlt",
            "m.08jml6",
            "m.043dz8"
        ],
        "different_answer": [
            [
                "m.04ybhxs",
                "m.0134yc8y",
                "m.031t2d",
                "m.09zg5d",
                "m.09flkf",
                "m.01yzvd",
                "m.02qzrt_",
                "m.07y9w5",
                "m.08_wh0",
                "m.0gj9fmj",
                "m.0c34n5",
                "m.08r4x3",
                "m.0ftc14",
                "m.0mzmnx4",
                "m.0464t_m",
                "m.07kjm8q",
                "m.07mj_0",
                "m.02rhxt_",
                "m.07pnlt",
                "m.08jml6",
                "m.043dz8"
            ]
        ],
        "entity_linking": {
            "Nick Cannon": "m.01d1st"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d1st)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d1st ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01d1st')\na.add_fact('m.01d1st', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-882",
        "question": "when did the big earthquake hit san francisco",
        "answer": [
            "1906-04-18T05:12:00-08:00"
        ],
        "different_answer": [
            [
                "1906-04-18T05:12:00-08:00"
            ]
        ],
        "entity_linking": {
            "1906 San Francisco earthquake": "m.01f6rm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f6rm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f6rm ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01f6rm')\na.add_fact('m.01f6rm', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-883",
        "question": "who was king george vi married to",
        "answer": [
            "m.0cm63"
        ],
        "different_answer": [
            [
                "m.0cm63"
            ]
        ],
        "entity_linking": {
            "George VI": "m.0cm83"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm83)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm83 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cm83')\na.add_fact('m.0cm83', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.to', 'x2')\na.add_max('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-884",
        "question": "where was jesus after he died on the cross",
        "answer": [
            "m.065sh7"
        ],
        "different_answer": [
            [
                "m.065sh7"
            ]
        ],
        "entity_linking": {
            "Jesus Christ": "m.045m1_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045m1_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045m1_ ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045m1_')\na.add_fact('m.045m1_', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-885",
        "question": "who is sir james dyson",
        "answer": [
            "m.02xhgy6",
            "m.01c979",
            "m.03sbb",
            "m.09j9h"
        ],
        "different_answer": [
            [
                "m.02xhgy6",
                "m.01c979",
                "m.03sbb",
                "m.09j9h"
            ]
        ],
        "entity_linking": {
            "James Dyson": "m.0209vm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0209vm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0209vm ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0209vm')\na.add_fact('m.0209vm', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-886",
        "question": "who voiced darth vader in the original star wars movies",
        "answer": [
            "m.0f6_x"
        ],
        "different_answer": [
            [
                "m.0f6_x"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Voice": "m.02nsjvf",
            "Star Wars": "m.0dtfn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n?y ns:film.performance.film ns:m.0dtfn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dtfn')\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.film', 'm.0dtfn')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-887",
        "question": "what high school did maya angelou go to",
        "answer": [
            "m.07kldk"
        ],
        "different_answer": [
            [
                "m.07kldk"
            ]
        ],
        "entity_linking": {
            "Maya Angelou": "m.01q9b9",
            "High school": "m.0bpgx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01q9b9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01q9b9 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.0bpgx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bpgx')\na.add_filter('x0', '!=', 'm.01q9b9')\na.add_fact('x1', 'education.education.degree', 'm.0bpgx')\na.add_fact('m.01q9b9', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-888",
        "question": "what 5 countries border switzerland",
        "answer": [
            "m.0345h",
            "m.0h7x",
            "m.03rjj",
            "m.04j53",
            "m.0f8l9c"
        ],
        "different_answer": [
            [
                "m.0345h",
                "m.0h7x",
                "m.03rjj",
                "m.04j53",
                "m.0f8l9c"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.06mzp', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-889",
        "question": "what country did benito mussolini govern",
        "answer": [
            "m.03rjj"
        ],
        "different_answer": [
            [
                "m.03rjj"
            ]
        ],
        "entity_linking": {
            "Benito Mussolini": "m.0177g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0177g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0177g ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0177g')\na.add_fact('m.0177g', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.jurisdiction_of_office', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-891",
        "question": "who was the leader of the first communist party of china",
        "answer": [
            "m.0n10q",
            "m.02d42c",
            "m.04xzm",
            "m.0dbk8"
        ],
        "different_answer": [
            [
                "m.0n10q",
                "m.02d42c",
                "m.04xzm",
                "m.0dbk8"
            ]
        ],
        "entity_linking": {
            "Communist Party of China": "m.02189"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02189)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02189 ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02189')\na.add_fact('m.02189', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-892",
        "question": "what did miles davis died of",
        "answer": [
            "m.02y0js",
            "m.019dmc",
            "m.0dq9p"
        ],
        "different_answer": [
            [
                "m.02y0js",
                "m.019dmc",
                "m.0dq9p"
            ]
        ],
        "entity_linking": {
            "Miles Davis": "m.053yx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.053yx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.053yx ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.053yx')\na.add_fact('m.053yx', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-893",
        "question": "what is the zip code for azle texas",
        "answer": [
            "m.07nqdl8",
            "m.020zj8h"
        ],
        "different_answer": [
            [
                "m.07nqdl8",
                "m.020zj8h"
            ]
        ],
        "entity_linking": {
            "Azle": "m.013n59"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013n59)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013n59 ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013n59')\na.add_fact('m.013n59', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-894",
        "question": "what date did sally pearson won gold",
        "answer": [
            "m.06sks6"
        ],
        "different_answer": [
            [
                "m.06sks6"
            ]
        ],
        "entity_linking": {
            "Sally Pearson": "m.0287hgn",
            "Gold medal": "m.02lpp7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0287hgn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0287hgn ns:olympics.olympic_athlete.medals_won ?y .\n?y ns:olympics.olympic_medal_honor.olympics ?x .\n?y ns:olympics.olympic_medal_honor.medal ns:m.02lpp7 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lpp7')\na.add_filter('x0', '!=', 'm.0287hgn')\na.add_fact('x1', 'olympics.olympic_medal_honor.medal', 'm.02lpp7')\na.add_fact('m.0287hgn', 'olympics.olympic_athlete.medals_won', 'x1')\na.add_fact('x1', 'olympics.olympic_medal_honor.olympics', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-895",
        "question": "when did the detroit pistons last win the championship",
        "answer": [
            "m.07p0zz"
        ],
        "different_answer": [
            [
                "m.07p0zz"
            ]
        ],
        "entity_linking": {
            "Detroit Pistons": "m.0jm8l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jm8l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jm8l ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jm8l')\na.add_fact('m.0jm8l', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-896",
        "question": "when did the philadelphia flyers win the cup",
        "answer": [
            "m.03by156",
            "m.03by14v"
        ],
        "different_answer": [
            [
                "m.03by156",
                "m.03by14v"
            ]
        ],
        "entity_linking": {
            "Philadelphia Flyers": "m.0hn2q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hn2q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hn2q ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hn2q')\na.add_fact('m.0hn2q', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-897",
        "question": "who is number 22 for the dallas cowboys",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Dallas Cowboys": "m.02896",
            "\"22\"": "\"22\"@en",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02896)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02896 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.number ?sk0 .\nFILTER (str(?sk0) = \"22\")\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk1} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk2 . \nFILTER(xsd:datetime(?sk2) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk3} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk4 . \nFILTER(xsd:datetime(?sk4) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02896')\na.add_fact('x1', 'sports.sports_team_roster.number', '\"22\"^^xsd:string')\na.add_fact('m.02896', 'sports.sports_team.roster', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.player', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-898",
        "question": "what county is st paul nc in",
        "answer": [
            "m.0n3s6"
        ],
        "different_answer": [
            [
                "m.0n3s6"
            ]
        ],
        "entity_linking": {
            "St. Pauls": "m.0yk9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yk9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yk9v ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0yk9v')\na.add_fact('m.0yk9v', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-899",
        "question": "where is olympic national park wa",
        "answer": [
            "m.081yw"
        ],
        "different_answer": [
            [
                "m.081yw"
            ],
            [
                "m.0mmqb",
                "m.081yw"
            ]
        ],
        "entity_linking": {
            "Olympic National Park": "m.015nrn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015nrn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015nrn ns:base.usnationalparks.us_national_park.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015nrn')\na.add_fact('m.015nrn', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-900",
        "question": "where did nat turner 1831 rebellion occur",
        "answer": [
            "m.0mn21"
        ],
        "different_answer": [
            [
                "m.0mn21"
            ]
        ],
        "entity_linking": {
            "Nat Turner's slave rebellion": "m.0h5d0t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h5d0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h5d0t ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h5d0t')\na.add_fact('m.0h5d0t', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-901",
        "question": "who would play luke skywalker",
        "answer": [
            "m.0154d7"
        ],
        "different_answer": [
            [
                "m.0154d7"
            ]
        ],
        "entity_linking": {
            "Luke Skywalker": "m.0f1bg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1bg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1bg ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f1bg')\na.add_fact('m.0f1bg', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-903",
        "question": "where turkish people originate",
        "answer": [
            "m.05b4w",
            "m.0jt3tjf",
            "m.01nx28",
            "m.015qh",
            "m.07ssc",
            "m.0h3y",
            "m.0d060g",
            "m.0345h",
            "m.059j2",
            "m.09c7w0",
            "m.0k6nt",
            "m.047lj",
            "m.06vbd",
            "m.0f8l9c",
            "m.0d0vqn",
            "m.04fh3",
            "m.0154j",
            "m.01znc_",
            "m.0166b",
            "m.0d05q4",
            "m.0jhd",
            "m.0h7x"
        ],
        "different_answer": [
            [
                "m.05b4w",
                "m.0jt3tjf",
                "m.01nx28",
                "m.015qh",
                "m.07ssc",
                "m.0h3y",
                "m.0d060g",
                "m.0345h",
                "m.059j2",
                "m.09c7w0",
                "m.0k6nt",
                "m.047lj",
                "m.06vbd",
                "m.0f8l9c",
                "m.0d0vqn",
                "m.04fh3",
                "m.0154j",
                "m.01znc_",
                "m.0166b",
                "m.0d05q4",
                "m.0jhd",
                "m.0h7x"
            ]
        ],
        "entity_linking": {
            "Turkish people": "m.0hb7h_z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hb7h_z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hb7h_z ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hb7h_z')\na.add_fact('m.0hb7h_z', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-904",
        "question": "what state is barack obama from",
        "answer": [
            "m.03gh4"
        ],
        "different_answer": [
            [
                "m.03gh4"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.02mjmr ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.0kpys4 .  #US State\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-905",
        "question": "what years did joe montana win super bowl",
        "answer": [
            "1990-01-28-08:00",
            "1982-01-24-08:00",
            "1989-01-22-08:00",
            "1985-01-20-08:00"
        ],
        "different_answer": [
            [
                "1990-01-28-08:00",
                "1982-01-24-08:00",
                "1989-01-22-08:00",
                "1985-01-20-08:00"
            ]
        ],
        "entity_linking": {
            "Joe Montana": "m.01r6hc"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?a\nWHERE {\n    ns:m.01r6hc ns:sports.pro_athlete.teams ?y .\n    ?y ns:sports.sports_team_roster.team ?x . #team\n    ?x ns:sports.sports_team.championships ?z . # super bowls\n    ?z ns:common.topic.notable_types ns:m.01xljv1 . #super bowl\n    ?z ns:sports.sports_championship_event.champion ?c .\n    ?z ns:time.event.start_date ?a .\n\n  # Check the time overlap\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \n             EXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \n             FILTER(xsd:datetime(?sk1) - xsd:datetime(?a) <= 0) })\n\n  FILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \n             EXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \n             FILTER(xsd:datetime(?sk3) - xsd:datetime(?a) >= 0 ) }) \n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-908",
        "question": "what awards gary paulsen won",
        "answer": [
            "m.04p1pmh",
            "m.027x4ws",
            "m.01cd7p",
            "m.09kkqzd",
            "m.0djddy",
            "m.0463dxd",
            "m.04p1pmd"
        ],
        "different_answer": [
            [
                "m.04p1pmh",
                "m.027x4ws",
                "m.01cd7p",
                "m.09kkqzd",
                "m.0djddy",
                "m.0463dxd",
                "m.04p1pmd"
            ]
        ],
        "entity_linking": {
            "Gary Paulsen": "m.04fpcx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04fpcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04fpcx ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04fpcx')\na.add_fact('m.04fpcx', 'award.award_winner.awards_won', 'x1')\na.add_fact('x1', 'award.award_honor.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-910",
        "question": "where did alexander graham bell die",
        "answer": [
            "m.08npx8"
        ],
        "different_answer": [
            [
                "m.08npx8"
            ]
        ],
        "entity_linking": {
            "Alexander Graham Bell": "m.0k70"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k70 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k70')\na.add_fact('m.0k70', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-911",
        "question": "what year did the golden state warriors win their first nba championship",
        "answer": [
            "m.0cs1bx"
        ],
        "different_answer": [
            [
                "m.0cs1bx"
            ]
        ],
        "entity_linking": {
            "Golden State Warriors": "m.0jmj7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jmj7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jmj7 ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jmj7')\na.add_fact('m.0jmj7', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-912",
        "question": "what currency should i take to turkey",
        "answer": [
            "m.04dq0w"
        ],
        "different_answer": [
            [
                "m.04dq0w"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-914",
        "question": "what countries are in the uk yahoo",
        "answer": [
            "m.02jx1",
            "m.05bcl",
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc",
            "UK constituent country": "m.0hzjlmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:m.0hzjlmp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzjlmp')\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('x0', 'base.aareas.schema.administrative_area.administrative_area_type', 'm.0hzjlmp')\na.add_fact('m.07ssc', 'base.aareas.schema.administrative_area.administrative_children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-915",
        "question": "what superbowl did the baltimore ravens win",
        "answer": [
            "m.0_gt_qt",
            "m.076yq",
            "m.0_gtz8t",
            "m.0642vqv"
        ],
        "different_answer": [
            [
                "m.0_gt_qt",
                "m.076yq",
                "m.0_gtz8t",
                "m.0642vqv"
            ]
        ],
        "entity_linking": {
            "Baltimore Ravens": "m.01ct6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ct6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ct6 ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ct6')\na.add_fact('m.01ct6', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-916",
        "question": "what is the language of russia s spoken",
        "answer": [
            "m.04xqkr",
            "m.06b_j",
            "m.02lpht",
            "m.02nbbh",
            "m.02gj5b",
            "m.03gn_0",
            "m.02mj1c",
            "m.0cjk9",
            "m.017dsl",
            "m.0264gxt",
            "m.03wt_j",
            "m.02x9lm",
            "m.020g7w",
            "m.01qyqy",
            "m.02q4t0g",
            "m.019yz7",
            "m.03f3f1",
            "m.091dr6",
            "m.054zyh",
            "m.049jrm",
            "m.05l6md",
            "m.0234zj",
            "m.03klw8",
            "m.037lmh",
            "m.04rxz0",
            "m.02mxzf",
            "m.02hwm9x",
            "m.027bj_4",
            "m.01y_vl",
            "m.0198z0",
            "m.01bcw_",
            "m.093gjw",
            "m.0880p",
            "m.037nfm",
            "m.06bw_x"
        ],
        "different_answer": [
            [
                "m.04xqkr",
                "m.06b_j",
                "m.02lpht",
                "m.02nbbh",
                "m.02gj5b",
                "m.03gn_0",
                "m.02mj1c",
                "m.0cjk9",
                "m.017dsl",
                "m.0264gxt",
                "m.03wt_j",
                "m.02x9lm",
                "m.020g7w",
                "m.01qyqy",
                "m.02q4t0g",
                "m.019yz7",
                "m.03f3f1",
                "m.091dr6",
                "m.054zyh",
                "m.049jrm",
                "m.05l6md",
                "m.0234zj",
                "m.03klw8",
                "m.037lmh",
                "m.04rxz0",
                "m.02mxzf",
                "m.02hwm9x",
                "m.027bj_4",
                "m.01y_vl",
                "m.0198z0",
                "m.01bcw_",
                "m.093gjw",
                "m.0880p",
                "m.037nfm",
                "m.06bw_x"
            ],
            [
                "m.06b_j"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-918",
        "question": "who is the king of cambodia now",
        "answer": [
            "m.0418zp"
        ],
        "different_answer": [
            [
                "m.0418zp"
            ]
        ],
        "entity_linking": {
            "Cambodia": "m.01xbgx",
            "King": "m.03w9bnr",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xbgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xbgx ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.03w9bnr .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03w9bnr')\na.add_filter('x0', '!=', 'm.01xbgx')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.03w9bnr')\na.add_fact('m.01xbgx', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-919",
        "question": "who are serena williams parents",
        "answer": [
            "m.05p91sl",
            "m.067rnv"
        ],
        "different_answer": [
            [
                "m.05p91sl",
                "m.067rnv"
            ]
        ],
        "entity_linking": {
            "Serena Williams": "m.015z4j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015z4j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015z4j ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015z4j')\na.add_fact('m.015z4j', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-920",
        "question": "what schools did sir isaac newton go to",
        "answer": [
            "m.0h37f2",
            "m.07tk7"
        ],
        "different_answer": [
            [
                "m.0h37f2",
                "m.07tk7"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('m.03s9v', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-921",
        "question": "what was the cause of death for huell howser",
        "answer": [
            "m.0m32h"
        ],
        "different_answer": [
            [
                "m.0m32h"
            ]
        ],
        "entity_linking": {
            "Huell Howser": "m.02kddt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kddt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kddt ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02kddt')\na.add_fact('m.02kddt', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-922",
        "question": "what books are written by suzanne collins",
        "answer": [
            "m.04vdhlv",
            "m.04v_xrh",
            "m.04yl5n0",
            "m.028y9ks",
            "m.04v_xsq",
            "m.028xx05",
            "m.04twzyz",
            "m.04vdhpk",
            "m.04twz_3",
            "m.028ydyx",
            "m.04vt74n",
            "m.04twzzg",
            "m.04v_xsz",
            "m.04v9qdx",
            "m.028x_pw",
            "m.04v_xwy",
            "m.04vdhnl",
            "m.04v_xt6",
            "m.04tw_12",
            "m.04v_xsg",
            "m.04vt79f",
            "m.04twzzx",
            "m.04vt75g",
            "m.04v8tq8",
            "m.04v_xvj"
        ],
        "different_answer": [
            [
                "m.04vdhlv",
                "m.04v_xrh",
                "m.04yl5n0",
                "m.028y9ks",
                "m.04v_xsq",
                "m.028xx05",
                "m.04twzyz",
                "m.04vdhpk",
                "m.04twz_3",
                "m.028ydyx",
                "m.04vt74n",
                "m.04twzzg",
                "m.04v_xsz",
                "m.04v9qdx",
                "m.028x_pw",
                "m.04v_xwy",
                "m.04vdhnl",
                "m.04v_xt6",
                "m.04tw_12",
                "m.04v_xsg",
                "m.04vt79f",
                "m.04twzzx",
                "m.04vt75g",
                "m.04v8tq8",
                "m.04v_xvj"
            ],
            [
                "m.0dsxbn",
                "m.0dsx8l",
                "m.0b6g0vh",
                "m.04t448h",
                "m.0pbrmvq",
                "m.0dsx98",
                "m.04t448r",
                "m.04t44bh",
                "m.04ydtzf",
                "m.04t448_",
                "m.0cqsxs",
                "m.05p6hh0"
            ]
        ],
        "entity_linking": {
            "Suzanne Collins": "m.0bpd5z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bpd5z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bpd5z ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bpd5z')\na.add_fact('m.0bpd5z', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-923",
        "question": "what countries does england border",
        "answer": [
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "England": "m.02jx1",
            "\"Country\"": "\"Country\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"Country\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02jx1')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"Country\"^^xsd:string')\na.add_fact('m.02jx1', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-924",
        "question": "what team did messi play for in 2010",
        "answer": [
            "m.0hvgt",
            "m.02bh_v"
        ],
        "different_answer": [
            [
                "m.0hvgt",
                "m.02bh_v"
            ]
        ],
        "entity_linking": {
            "Lionel Messi": "m.06qjgc",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06qjgc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06qjgc ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06qjgc')\na.add_fact('m.06qjgc', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-925",
        "question": "what time zone is greensburg indiana",
        "answer": [
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Greensburg": "m.0skw_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0skw_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0skw_ ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0skw_')\na.add_fact('m.0skw_', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-927",
        "question": "who plays voldemort",
        "answer": [
            "m.071yrz",
            "m.06_4v9",
            "m.04gw9xr",
            "m.0170qf",
            "m.0414vty"
        ],
        "different_answer": [
            [
                "m.071yrz",
                "m.06_4v9",
                "m.04gw9xr",
                "m.0170qf",
                "m.0414vty"
            ]
        ],
        "entity_linking": {
            "Lord Voldemort": "m.0c8lv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c8lv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c8lv ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c8lv')\na.add_fact('m.0c8lv', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-928",
        "question": "what colleges did harper lee attend",
        "answer": [
            "m.069vxk",
            "m.06fv_v",
            "m.07tgn",
            "m.01wdl3"
        ],
        "different_answer": [
            [
                "m.069vxk",
                "m.06fv_v",
                "m.07tgn",
                "m.01wdl3"
            ]
        ],
        "entity_linking": {
            "Harper Lee": "m.01bq7x",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq7x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01bq7x')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01bq7x', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-929",
        "question": "who founded the kkk",
        "answer": [
            "m.0wl1ptw",
            "m.0wl1pl9",
            "m.0wl1q51",
            "m.0wl1py6",
            "m.0wl1q81",
            "m.0wl1pzb"
        ],
        "different_answer": [
            [
                "m.0wl1ptw",
                "m.0wl1pl9",
                "m.0wl1q51",
                "m.0wl1py6",
                "m.0wl1q81",
                "m.0wl1pzb"
            ]
        ],
        "entity_linking": {
            "Ku Klux Klan": "m.048qr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.048qr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.048qr ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.048qr')\na.add_fact('m.048qr', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-931",
        "question": "what jobs did john adams have before he was president",
        "answer": [
            "m.080v2",
            "m.02q_kt_",
            "m.09ryhrh",
            "m.03hrvl"
        ],
        "different_answer": [
            [
                "m.080v2",
                "m.02q_kt_",
                "m.09ryhrh",
                "m.03hrvl"
            ]
        ],
        "entity_linking": {
            "John Adams": "m.03_js"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nns:m.03_js ns:government.politician.government_positions_held ?p .\n?p ns:government.government_position_held.office_position_or_title ns:m.060d2 .\n?p ns:government.government_position_held.from ?from .\nns:m.03_js ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.office_position_or_title ?x .\n?y ns:government.government_position_held.from ?z .\nfilter(xsd:datetime(?z) - xsd:datetime(?from) < 0)\n }",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-932",
        "question": "what year did super mario bros 2 come out",
        "answer": [
            "1988-10-08:00"
        ],
        "different_answer": [
            [
                "1988-10-08:00"
            ]
        ],
        "entity_linking": {
            "Super Mario Bros. 2": "m.011v_m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011v_m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011v_m ns:cvg.computer_videogame.release_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011v_m')\na.add_fact('m.011v_m', 'cvg.computer_videogame.release_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-933",
        "question": "what political party did andrew johnson belong to",
        "answer": [
            "m.0d075m",
            "m.07wbk",
            "m.0d9fdp"
        ],
        "different_answer": [
            [
                "m.0d075m",
                "m.07wbk",
                "m.0d9fdp"
            ]
        ],
        "entity_linking": {
            "Andrew Johnson": "m.0rmg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rmg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rmg ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0rmg')\na.add_fact('m.0rmg', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-935",
        "question": "where was osama bin laden killed",
        "answer": [
            "m.011hs1"
        ],
        "different_answer": [
            [
                "m.011hs1"
            ]
        ],
        "entity_linking": {
            "Osama bin Laden": "m.05mg9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mg9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mg9 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05mg9')\na.add_fact('m.05mg9', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-936",
        "question": "where were greek temples built",
        "answer": [
            "m.09lgkz",
            "m.04ygm3",
            "m.04f_hwc",
            "m.0n2z",
            "m.01swlf",
            "m.02p8r"
        ],
        "different_answer": [
            [
                "m.09lgkz",
                "m.04ygm3",
                "m.04f_hwc",
                "m.0n2z",
                "m.01swlf",
                "m.02p8r"
            ]
        ],
        "entity_linking": {
            "Ancient Greek temple": "m.03f34_"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.03f34_ ns:architecture.building_function.buildings ?y .\n\t?y ns:travel.tourist_attraction.near_travel_destination ?x .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-937",
        "question": "where are people who speak arabic from",
        "answer": [
            "m.035hr8",
            "m.047yc",
            "m.0697s",
            "m.04gqr",
            "m.0h3y",
            "m.0h44w",
            "m.04hqz",
            "m.03__y",
            "m.0d060g",
            "m.027jk",
            "m.03shp",
            "m.01z88t",
            "m.0161c",
            "m.0j1z8",
            "m.06vbd",
            "m.02z62v1",
            "m.02k54",
            "m.06tw8",
            "m.0hzlz",
            "m.03spz",
            "m.01znc_",
            "m.01z215",
            "m.0d05q4",
            "m.05l8y",
            "m.04vjh",
            "m.07dzf",
            "m.07fj_",
            "m.04wgh"
        ],
        "different_answer": [
            [
                "m.035hr8",
                "m.047yc",
                "m.0697s",
                "m.04gqr",
                "m.0h3y",
                "m.0h44w",
                "m.04hqz",
                "m.03__y",
                "m.0d060g",
                "m.027jk",
                "m.03shp",
                "m.01z88t",
                "m.0161c",
                "m.0j1z8",
                "m.06vbd",
                "m.02z62v1",
                "m.02k54",
                "m.06tw8",
                "m.0hzlz",
                "m.03spz",
                "m.01znc_",
                "m.01z215",
                "m.0d05q4",
                "m.05l8y",
                "m.04vjh",
                "m.07dzf",
                "m.07fj_",
                "m.04wgh"
            ],
            [
                "m.01z215",
                "m.07fj_",
                "m.01n6c",
                "m.02khs"
            ]
        ],
        "entity_linking": {
            "Arabic Language": "m.0jzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jzc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jzc')\na.add_fact('m.0jzc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-938",
        "question": "who was queen elizabeth ii mom",
        "answer": [
            "m.0cm63"
        ],
        "different_answer": [
            [
                "m.0cm63"
            ]
        ],
        "entity_linking": {
            "Elizabeth II": "m.0d1_f",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d1_f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d1_f ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.0d1_f')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.0d1_f', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-939",
        "question": "what type of art did pablo picasso paint",
        "answer": [
            "m.09ff3",
            "m.071bmq",
            "m.073_6",
            "m.072333",
            "m.07hm5p",
            "m.070vcg",
            "m.015r61",
            "m.07pcpz"
        ],
        "different_answer": [
            [
                "m.09ff3",
                "m.071bmq",
                "m.073_6",
                "m.072333",
                "m.07hm5p",
                "m.070vcg",
                "m.015r61",
                "m.07pcpz"
            ]
        ],
        "entity_linking": {
            "Pablo Picasso": "m.060_7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060_7 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060_7')\na.add_fact('m.060_7', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-941",
        "question": "what is ella fitzgerald parents name",
        "answer": [
            "m.0kcwjlw",
            "m.0kcwjlp"
        ],
        "different_answer": [
            [
                "m.0kcwjlw",
                "m.0kcwjlp"
            ]
        ],
        "entity_linking": {
            "Ella Fitzgerald": "m.0d9xq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d9xq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d9xq ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d9xq')\na.add_fact('m.0d9xq', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-942",
        "question": "who is anne hathaway parents",
        "answer": [
            "m.07ylp2d",
            "m.07ylp26"
        ],
        "different_answer": [
            [
                "m.07ylp2d",
                "m.07ylp26"
            ]
        ],
        "entity_linking": {
            "Anne Hathaway": "m.02vntj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vntj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vntj ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vntj')\na.add_fact('m.02vntj', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-943",
        "question": "who does don draper gets engaged to",
        "answer": [
            "m.04n3b2h"
        ],
        "different_answer": [
            [
                "m.04n3b2h"
            ]
        ],
        "entity_linking": {
            "Don Draper": "m.02s9q_4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02s9q_4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02s9q_4 ns:fictional_universe.fictional_character.married_to ?y .\n?y ns:fictional_universe.marriage_of_fictional_characters.spouses ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02s9q_4')\na.add_fact('m.02s9q_4', 'fictional_universe.fictional_character.married_to', 'x1')\na.add_fact('x1', 'fictional_universe.marriage_of_fictional_characters.spouses', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-944",
        "question": "what was van halen first album",
        "answer": [
            "m.0vs85p3"
        ],
        "different_answer": [
            [
                "m.0vs85p3"
            ]
        ],
        "entity_linking": {
            "Van Halen": "m.0ycfj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ycfj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ycfj ns:music.artist.album ?x .\n?x ns:music.album.release_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ycfj')\na.add_fact('m.0ycfj', 'music.artist.album', 'x0')\na.add_fact('x0', 'music.album.release_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-945",
        "question": "what political system did spain have",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5",
            "m.04szc"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5",
                "m.04szc"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-948",
        "question": "what are the supreme court cases",
        "answer": [
            "m.0cjmrn",
            "m.0flfst",
            "m.0c_yg7",
            "m.08lkv3",
            "m.0271zqt",
            "m.010hmy_z",
            "m.030_yf",
            "m.09sbs6",
            "m.027_dth",
            "m.0cqw9b",
            "m.06r0hv",
            "m.02vlh5s",
            "m.0b5r1c",
            "m.06109x",
            "m.011x02",
            "m.0hk56",
            "m.027qj6c",
            "m.05qf6s",
            "m.0d3lky",
            "m.0266j8r",
            "m.0bvxy1",
            "m.012n00",
            "m.03mb6y5",
            "m.02qh5l9",
            "m.026sj1l",
            "m.04zqlh",
            "m.03cnps8",
            "m.02px86f",
            "m.05qs02",
            "m.081vhm",
            "m.0cqhzq",
            "m.02pk6s6",
            "m.047b032",
            "m.0gv8gs",
            "m.0c85yh",
            "m.04zl_c",
            "m.078gl6",
            "m.0ghqbn",
            "m.03wdwc6",
            "m.01tsdc",
            "m.08tsfv",
            "m.04fzcs",
            "m.01p56y",
            "m.0d1cxy",
            "m.0c3mlk",
            "m.02prkpy",
            "m.035d4s",
            "m.0gvbfq",
            "m.093y57",
            "m.07yd3w",
            "m.016r12",
            "m.026kmc_",
            "m.03xhgq",
            "m.012my4",
            "m.0fjqb_",
            "m.016mz5",
            "m.08666x",
            "m.074w5s",
            "m.061zng",
            "m.026_hzg",
            "m.02wbcb",
            "m.03tjlw",
            "m.03crg1j",
            "m.0471ds",
            "m.04881q",
            "m.05h6g6",
            "m.012mtx",
            "m.0dvftc",
            "m.0cm79m",
            "m.08lf74",
            "m.02py8p6",
            "m.04n1vf",
            "m.01wqh0",
            "m.01sq41",
            "m.026zm2k",
            "m.05d232",
            "m.03cs54d",
            "m.026bn7x",
            "m.047qby2",
            "m.012m_b",
            "m.03cmgt_",
            "m.01447l",
            "m.089s5v",
            "m.085tr9",
            "m.0287vbz",
            "m.044njz",
            "m.0dgpxbh",
            "m.09cf40",
            "m.04jr9k_",
            "m.061jr4",
            "m.0h4pkx",
            "m.026r1w9",
            "m.01lklf",
            "m.08jq8q",
            "m.03v9t0",
            "m.05ctp7",
            "m.02zbrp",
            "m.05r90b",
            "m.0gdtsg",
            "m.02_y_w",
            "m.02823ys",
            "m.07m90c",
            "m.093908",
            "m.05qyvf",
            "m.01g1k_",
            "m.01_0hd",
            "m.026k55",
            "m.04k5fc",
            "m.07h23x",
            "m.03sv8s",
            "m.0_xc06k",
            "m.069xqj",
            "m.02qptq4",
            "m.065hwr",
            "m.0g5q0j",
            "m.0466b2b",
            "m.038gs8",
            "m.0dtnk_",
            "m.02przs9",
            "m.02rfs47",
            "m.05kkn5",
            "m.02qyhb9",
            "m.03_n2y",
            "m.04lw97",
            "m.06q2dk",
            "m.04117y4",
            "m.08gdzn",
            "m.08cqb7",
            "m.02fx04",
            "m.0c69vy",
            "m.0408d1v",
            "m.0ftcp7",
            "m.08hjff",
            "m.02rck6x",
            "m.02_6y5",
            "m.0cln5p",
            "m.08s84d",
            "m.0dzhxx",
            "m.07b5lr",
            "m.010f9y51",
            "m.03m725g",
            "m.02p_26q",
            "m.06txw0",
            "m.0gmcc7v",
            "m.04qmky",
            "m.02z6bgl",
            "m.052pgq",
            "m.08cqj0",
            "m.053d7b",
            "m.02qqb0r",
            "m.0cpyrq",
            "m.038b7t",
            "m.0h0rbc",
            "m.05vzbw",
            "m.02pml6p",
            "m.026z9f",
            "m.047rt5w",
            "m.028c0d9",
            "m.0c6vtw",
            "m.0465bjs",
            "m.05rkwk",
            "m.02qsr_g",
            "m.070l38",
            "m.03cs1md",
            "m.028b_p8",
            "m.04q7ry",
            "m.0hx5v",
            "m.06wf69",
            "m.05cvtg",
            "m.06qj4j",
            "m.02rctzz",
            "m.047bm02",
            "m.0crhht",
            "m.0gxdvn",
            "m.0421p6y",
            "m.0706sz",
            "m.026bn8y",
            "m.05tbxj",
            "m.03hkvp2",
            "m.04gp39",
            "m.027jhx3",
            "m.03c5qcc",
            "m.02qdj0v",
            "m.026kfh4",
            "m.02rl24w",
            "m.03wbj58",
            "m.02np73",
            "m.06d9fc",
            "m.0c_xx0",
            "m.0c5ks_",
            "m.04y17z",
            "m.0d59x2",
            "m.04182rw",
            "m.062jkm",
            "m.067v3b",
            "m.03clmp3",
            "m.02qmxhp",
            "m.0bx7l5",
            "m.06g8n6",
            "m.018_f5",
            "m.070x68",
            "m.02vvk5q",
            "m.016m_c",
            "m.07tfyl",
            "m.02psyk7",
            "m.05r94w",
            "m.097055",
            "m.02pjm4",
            "m.03s0jd",
            "m.06sgjh",
            "m.014v5p",
            "m.060vr1",
            "m.0cz1tc",
            "m.025wzd8",
            "m.01yvz4",
            "m.03crf8d",
            "m.01_gcl",
            "m.03pv50",
            "m.064tw5",
            "m.08_ddj",
            "m.05jv99",
            "m.06mtyn",
            "m.05jwnt",
            "m.05tc53",
            "m.05pxq5",
            "m.030r68",
            "m.07x70c",
            "m.025wz9w",
            "m.02rvn05",
            "m.02pk5tz",
            "m.02l68n",
            "m.070xzz",
            "m.09f38_",
            "m.03zb7_",
            "m.0266336",
            "m.0102pqly",
            "m.0fh15_",
            "m.01phxw",
            "m.083h19",
            "m.0f6svq",
            "m.08qt4c",
            "m.04y4zg",
            "m.03hly6",
            "m.02gqdj",
            "m.0f3bcm",
            "m.0fsx6l",
            "m.03csx0s",
            "m.0fq2x_3",
            "m.0704sv",
            "m.08p4tt",
            "m.0d2fpq",
            "m.02qn35k",
            "m.05q_pz",
            "m.02672vf",
            "m.03mf8pp",
            "m.022wzf",
            "m.03vfh3",
            "m.0bdkr",
            "m.05538m",
            "m.08qrpn",
            "m.01t5xb",
            "m.0c6v5m",
            "m.016m6_",
            "m.0btg_",
            "m.084t22",
            "m.01pj8w",
            "m.02781z2",
            "m.05vqg6",
            "m.05scwz",
            "m.0261451",
            "m.0f2dnv",
            "m.0g7fb_",
            "m.06__sw",
            "m.0g0884",
            "m.0c5rpr",
            "m.012mzj",
            "m.025y1cy",
            "m.02wcc37",
            "m.01_34p",
            "m.03hjn32",
            "m.0274wb0",
            "m.0d1c6j",
            "m.0cjqtm",
            "m.08fn7f",
            "m.06p3gn",
            "m.01nd5t",
            "m.0720vx",
            "m.05_y4r",
            "m.01t0zd",
            "m.08yqqm",
            "m.02621w4",
            "m.02qpct7",
            "m.037h7r",
            "m.047dfn9",
            "m.01111jln",
            "m.048t_f",
            "m.03tj4z",
            "m.09v7zp",
            "m.0fxw3r",
            "m.03cs20z",
            "m.071sqk",
            "m.0ccx_p",
            "m.0668mf",
            "m.06lt20",
            "m.0677yt",
            "m.03m7cj7",
            "m.02qslm",
            "m.082tn_",
            "m.026wbpg",
            "m.02qn0m0",
            "m.088rby",
            "m.03c4zfc",
            "m.0cnlck",
            "m.04xg61",
            "m.01477y",
            "m.0g86kh",
            "m.0616ts",
            "m.0b9svv",
            "m.060j90",
            "m.04t84s",
            "m.03cnqdy",
            "m.06ppg1",
            "m.02prm0k",
            "m.01kpzr",
            "m.071cmd",
            "m.025x08w",
            "m.02895v_",
            "m.06mxcc",
            "m.0gj2nn",
            "m.01swyn",
            "m.0bb05n",
            "m.02pkz3f",
            "m.02zx8g",
            "m.03r996",
            "m.04t897",
            "m.05hjtz",
            "m.087nbb",
            "m.022v7g",
            "m.0j7l53h",
            "m.0gh6lm",
            "m.027q6wx",
            "m.07lchr",
            "m.088rfq",
            "m.02pp08t",
            "m.0706bb",
            "m.0dlwpv",
            "m.05qf98",
            "m.0c4hys",
            "m.05r34d",
            "m.03qlf_5",
            "m.02qkgbb",
            "m.02x154z",
            "m.03ql0qd",
            "m.02qr5n_",
            "m.027kqw",
            "m.0b19x8",
            "m.05d1d7",
            "m.0264jx2",
            "m.085mv3",
            "m.02pmv4y",
            "m.02f6p8",
            "m.03c10gl",
            "m.01d1ws",
            "m.0czcs6",
            "m.04pkpj",
            "m.03cly1r",
            "m.050_q6",
            "m.04s_93",
            "m.02gf62",
            "m.03cs8r7",
            "m.0d79rv",
            "m.0grryw",
            "m.02r0q0z",
            "m.0c7vbb",
            "m.0dtntb",
            "m.05jtmv",
            "m.0b_rc8",
            "m.02x5_",
            "m.04d4d4",
            "m.016m_0",
            "m.026150l",
            "m.03gscy7",
            "m.05btq9",
            "m.042493",
            "m.0282sy8",
            "m.016m94",
            "m.02wzny5",
            "m.04jr9l2",
            "m.026jznl",
            "m.03crhff",
            "m.02r0r3y",
            "m.09p44_",
            "m.0h1bml",
            "m.03wgppk",
            "m.053nh_",
            "m.040ntz",
            "m.0610ll",
            "m.0qjlj",
            "m.0gqn8g",
            "m.016pz5",
            "m.020jnj",
            "m.06lx91",
            "m.03jdcz",
            "m.0942g4",
            "m.012pm7",
            "m.03jgvz",
            "m.05qff4",
            "m.06m4tj",
            "m.05cvcb",
            "m.02r3bdy",
            "m.03crn02",
            "m.02vkj6c",
            "m.038p5z",
            "m.0blxr7",
            "m.04hxfw",
            "m.0f1193",
            "m.066stq",
            "m.0cnk83",
            "m.02r1jp4",
            "m.04p9kp",
            "m.05bqlp",
            "m.03rsr5",
            "m.04vjfz",
            "m.09dp99",
            "m.02qy_6s",
            "m.0fzv9w",
            "m.09d1nt",
            "m.02qqbpw",
            "m.0k3p257",
            "m.01fjwt",
            "m.05k87b",
            "m.084tyb",
            "m.03hnkz3",
            "m.079ncs",
            "m.05b8pv",
            "m.05cwcm",
            "m.09v3zc",
            "m.016m83",
            "m.03wcmg8",
            "m.02pvrlk",
            "m.02vpk_h",
            "m.0c85cp",
            "m.0191lm",
            "m.098qmq",
            "m.03crdyr",
            "m.04bcvk",
            "m.016m7r",
            "m.0h6q2d",
            "m.04hqtx",
            "m.0d6pr3",
            "m.026jsjz",
            "m.074j51",
            "m.02q513r",
            "m.0bgx3l",
            "m.02x1qgp",
            "m.06v_lq",
            "m.09zybd",
            "m.09__jl",
            "m.0264q7y",
            "m.0793qk",
            "m.02wvncz",
            "m.0263qxp",
            "m.014tbj",
            "m.0d76b3",
            "m.0bml3r",
            "m.0f0cj2",
            "m.05r8k2",
            "m.0dcrpx",
            "m.0265xpn",
            "m.03smfr",
            "m.04d3t1",
            "m.0dc_19",
            "m.09q6sj",
            "m.02qqhv3",
            "m.0bhphy",
            "m.0dk71y",
            "m.0h39z8",
            "m.08wfzf",
            "m.0485j3",
            "m.03c5fpp",
            "m.05lmj3",
            "m.0c13b6",
            "m.01f4w6",
            "m.01tqqg",
            "m.01f4wk",
            "m.02603sk",
            "m.02pnb0d",
            "m.02dwt2",
            "m.022gtt",
            "m.04fndl",
            "m.027f48f",
            "m.016m8g",
            "m.03cqfvy",
            "m.03crfng",
            "m.06pqvw",
            "m.025zg5d",
            "m.026dsgh",
            "m.05jk1d",
            "m.02x79lj",
            "m.02d16t",
            "m.010f95gt",
            "m.0b8d5w",
            "m.05qfc0",
            "m.03cv5l4",
            "m.017n09",
            "m.03cnppj",
            "m.02v8rj",
            "m.05k1fp",
            "m.02vzkw",
            "m.06k81l",
            "m.03cnnlj",
            "m.06p8q0",
            "m.05jmsy",
            "m.0cj5c_",
            "m.0dh86m",
            "m.03cyh5q",
            "m.014nvd",
            "m.027b944",
            "m.024qns",
            "m.0c86p_",
            "m.02qyq63",
            "m.03c041f",
            "m.06z51g",
            "m.03crh3t",
            "m.0c4q2g",
            "m.0285wv_",
            "m.088rrs",
            "m.08_8d0",
            "m.026g4ln",
            "m.0428fm",
            "m.026js13",
            "m.0267ky1",
            "m.0273hn8",
            "m.02pmfxy",
            "m.0g9vtt",
            "m.02683dl",
            "m.027zryj",
            "m.047bb4h",
            "m.0fttj0",
            "m.02q064l",
            "m.03x_n0",
            "m.06_y4n",
            "m.0dhw5x",
            "m.0c9sd9",
            "m.01qyhs",
            "m.026wdxm",
            "m.02hfz7",
            "m.02pr7n6",
            "m.06dtg3",
            "m.0cj_by",
            "m.0610xf",
            "m.04cwj6b",
            "m.012n11",
            "m.0dfcml",
            "m.0cwfy0",
            "m.0113hp9g",
            "m.028pbj",
            "m.03cnjrb",
            "m.02qtlvw",
            "m.0fwm_7",
            "m.0dvm37",
            "m.01j9pl",
            "m.03qkk_k",
            "m.02yc8w",
            "m.02rz585",
            "m.0gcpwz",
            "m.02z4mm",
            "m.08gds6",
            "m.030p8b",
            "m.05hdkq",
            "m.03_rbb",
            "m.03qp5l_",
            "m.06dkxc",
            "m.04r2ck",
            "m.01xjkv",
            "m.01ph_4",
            "m.012pg6",
            "m.08gf14",
            "m.042jj3",
            "m.02qlbb4",
            "m.0d_d5q",
            "m.03t1xk",
            "m.047cs10",
            "m.026r7x5",
            "m.012myv",
            "m.0289jnk",
            "m.08dv_z",
            "m.026_fdl",
            "m.03d4s_",
            "m.02nvyq",
            "m.047n5t0",
            "m.047lgj5",
            "m.0c009f",
            "m.043r81t",
            "m.02qyg9n",
            "m.051_dc",
            "m.02qbl_5",
            "m.0172l5",
            "m.063mbs",
            "m.0bxtvx",
            "m.0gpfcb",
            "m.02w7ls9",
            "m.03xw5z",
            "m.05bq4l",
            "m.06s64c",
            "m.098p3l",
            "m.0gjsps",
            "m.02rh217",
            "m.097fyf",
            "m.0f3b1y",
            "m.05qr1v",
            "m.01kdjw",
            "m.02pndt3",
            "m.027ktg",
            "m.016mxn",
            "m.02qsz3l",
            "m.0c7b9v",
            "m.07sjj5",
            "m.0gdv5z",
            "m.045vqm",
            "m.02qyf_b",
            "m.0bq4rg",
            "m.02pj3qd",
            "m.03c5slw",
            "m.0dj1g5",
            "m.026q1vx",
            "m.037lcc",
            "m.046whn",
            "m.0b08gb",
            "m.05tfw1",
            "m.0f0xnq",
            "m.02vvqg",
            "m.05rndx",
            "m.0fts99",
            "m.039j7w",
            "m.06q29c",
            "m.03cs21_",
            "m.02qxz13",
            "m.0530q3",
            "m.028bnc0",
            "m.070y1t",
            "m.05qc1_",
            "m.0cplwc",
            "m.030_vs",
            "m.0cwlp1",
            "m.06pql3",
            "m.09hysk",
            "m.026g5df",
            "m.0h3kgj",
            "m.02qxdsq",
            "m.0623k8",
            "m.0264vlc",
            "m.027zr1_",
            "m.05jwgh",
            "m.03ns4m0",
            "m.02dh51",
            "m.03cqflb",
            "m.08qr05",
            "m.02z4z5t",
            "m.0269cqc",
            "m.02q2n5j",
            "m.07d9nr",
            "m.01w0bz",
            "m.014ydb",
            "m.02rzw0t",
            "m.03cs1xh",
            "m.084qrb",
            "m.08q113",
            "m.03gsmw9",
            "m.0cgvwx",
            "m.04jr9l5",
            "m.0ct1rq",
            "m.02_vwk",
            "m.01q228",
            "m.0cp002",
            "m.017n0_",
            "m.07k3yk",
            "m.03b8cv",
            "m.07rtw1",
            "m.0djdy6",
            "m.0fl58v",
            "m.02qx71g",
            "m.02vkj5_",
            "m.02pql14",
            "m.03w9g7y",
            "m.096wr1",
            "m.023nxw",
            "m.03m9xwp",
            "m.070nsh",
            "m.05gmjx",
            "m.02hgsw",
            "m.0dywn4",
            "m.02pm4d1",
            "m.02yxwv",
            "m.01vdp7",
            "m.0ct1d2",
            "m.0dj8mw",
            "m.03thfj",
            "m.0g8847",
            "m.05f7x2",
            "m.07xr00",
            "m.05b7nj",
            "m.02qxs3v",
            "m.0fhg8q",
            "m.05psg8",
            "m.02823mt",
            "m.013pzk",
            "m.014pv2",
            "m.02x6hrt",
            "m.026bs35",
            "m.0d51zf",
            "m.05sjq9",
            "m.0f0yn5",
            "m.08fm5l",
            "m.0dx3y2",
            "m.03cs1sc",
            "m.08gdx2",
            "m.0gg_7d",
            "m.026v29v",
            "m.01f4vw",
            "m.02q44r5",
            "m.054199",
            "m.06pqq8",
            "m.0c8gv9",
            "m.0bzw8q",
            "m.02z5dv6",
            "m.05mx0k",
            "m.01zcnx",
            "m.0gtz2v",
            "m.02621v3",
            "m.02266f",
            "m.0dzgtf",
            "m.09db0p",
            "m.02qygz8",
            "m.026g4w7",
            "m.09s89g",
            "m.04vjq_",
            "m.02r0pz6",
            "m.012n0c",
            "m.0g7v3l",
            "m.08cqnp",
            "m.03xj1q",
            "m.02wxfln",
            "m.06fwzr",
            "m.0c7yfy",
            "m.027qvgs",
            "m.027ywqd",
            "m.0f2w0d",
            "m.016n0d",
            "m.05jtyv",
            "m.0f0hcb",
            "m.03cs1j_",
            "m.07sj8v",
            "m.0h0834",
            "m.0bt2_z",
            "m.0dtc09",
            "m.0cp07r",
            "m.065nw8",
            "m.026qr2r",
            "m.0g8k1f",
            "m.03m6dvt",
            "m.0chfth",
            "m.027zghj",
            "m.0cz83m",
            "m.05qffh",
            "m.0f3m0f",
            "m.08_v5z",
            "m.02q_j5q",
            "m.0h13s9",
            "m.02q7gfg",
            "m.016m6n",
            "m.0c61c5",
            "m.05svbhn",
            "m.04jtxh",
            "m.0chw1s",
            "m.03mcssw",
            "m.0br8wv",
            "m.08vdfx",
            "m.086kr9",
            "m.04kkp9",
            "m.01zglh",
            "m.02xpr9",
            "m.027x16g",
            "m.05fxt6",
            "m.026f1s9",
            "m.02zwqx",
            "m.02wctty",
            "m.03yd_q2",
            "m.04tgzm",
            "m.014z9l",
            "m.0b5bz5",
            "m.05s0q9",
            "m.02904q",
            "m.028c670",
            "m.02qqnnn",
            "m.016b7f",
            "m.059wvf",
            "m.0fpn_s",
            "m.027yvbq",
            "m.0288p8w",
            "m.04h6y0",
            "m.06mtp7",
            "m.07shh1",
            "m.0cg83t",
            "m.02pvnw7",
            "m.0d9lbc",
            "m.0f0mt_",
            "m.022ct3",
            "m.0qjn1",
            "m.07wxm4",
            "m.052_5m",
            "m.03cqfqg",
            "m.0g3995",
            "m.05pr7_",
            "m.08rk28",
            "m.02q427c",
            "m.0dxjsz",
            "m.05p0d1",
            "m.06bhn_",
            "m.0cskb1",
            "m.02qvr4p",
            "m.0c6tdp",
            "m.0d5dyr",
            "m.027p67c",
            "m.027wf_x",
            "m.0281lk_",
            "m.084wjd",
            "m.0fr77q",
            "m.09v1_d",
            "m.031sqv",
            "m.02z1fjp",
            "m.012mz5",
            "m.04jr9lc",
            "m.01115s_f",
            "m.026ktk3",
            "m.0f2h0h",
            "m.06v9lj",
            "m.02x1k82",
            "m.02rwctt",
            "m.0276knv",
            "m.018_c5",
            "m.06h_br",
            "m.096ch0",
            "m.02rvrmr",
            "m.03mgh_y",
            "m.01sx06",
            "m.0260fdw",
            "m.02pm4cq",
            "m.05n_td",
            "m.047dx7t",
            "m.02qr2tk",
            "m.0287bgq",
            "m.05dqfl",
            "m.0d9qcp",
            "m.0dhpdt",
            "m.0281c_p",
            "m.04050tz",
            "m.026hxx7",
            "m.026085b",
            "m.0d2ngd",
            "m.056k5",
            "m.026lw3f",
            "m.06pv1p",
            "m.0bqrj0",
            "m.05km0j",
            "m.02z2sfn",
            "m.060ybd",
            "m.026fnyh",
            "m.03cs1lq",
            "m.0c5byl",
            "m.014tbw",
            "m.09bk3h",
            "m.03crfx0",
            "m.06vp4y",
            "m.01xsmr",
            "m.03_2jt",
            "m.02qjlsb",
            "m.035dvr",
            "m.094hxp",
            "m.0db_2_",
            "m.012mxt",
            "m.03qhgwz",
            "m.03y6jwp",
            "m.03cqltl",
            "m.0f6snr",
            "m.03c4zxh",
            "m.0d57br",
            "m.0cq5xy",
            "m.09702f",
            "m.04_rrk",
            "m.0cps0p",
            "m.02ry9gc",
            "m.0172kv",
            "m.020jrn",
            "m.03sxm0",
            "m.099x5t",
            "m.02rvw0g",
            "m.02wx2py",
            "m.02r2sbt",
            "m.03grhrj",
            "m.027s4hd",
            "m.0dl114",
            "m.02qr5m8",
            "m.02qhf75",
            "m.06vy3p",
            "m.017l0y",
            "m.047qyx9",
            "m.016n01",
            "m.06vzx7",
            "m.07v8gt",
            "m.05yny9",
            "m.070_74",
            "m.05v7c4",
            "m.03s4g4",
            "m.027msv4",
            "m.027sws7",
            "m.047smqs",
            "m.0h6x1k",
            "m.02wj09",
            "m.02rb431",
            "m.010hqgjj",
            "m.025vplq",
            "m.09yl8q",
            "m.0704mb",
            "m.026wpws",
            "m.0cly6s",
            "m.014p3v",
            "m.09l_l_",
            "m.0d_99m",
            "m.03cbb_1",
            "m.026d_m4",
            "m.03pk7r",
            "m.012m_p",
            "m.016r1v",
            "m.03d0g84",
            "m.06_x2s",
            "m.0bzyrw",
            "m.03cjxx2",
            "m.021wlq",
            "m.05rhbr",
            "m.04jr9l8",
            "m.016_ft",
            "m.0blntr",
            "m.02q8ymq",
            "m.05p_ly",
            "m.0c84xt",
            "m.04df5z",
            "m.05dyn0",
            "m.05153s",
            "m.0fp6lx",
            "m.02pprk1",
            "m.05cj74",
            "m.0ch10w",
            "m.01sx7v"
        ],
        "different_answer": [
            [
                "m.0cjmrn",
                "m.0flfst",
                "m.0c_yg7",
                "m.08lkv3",
                "m.0271zqt",
                "m.010hmy_z",
                "m.030_yf",
                "m.09sbs6",
                "m.027_dth",
                "m.0cqw9b",
                "m.06r0hv",
                "m.02vlh5s",
                "m.0b5r1c",
                "m.06109x",
                "m.011x02",
                "m.0hk56",
                "m.027qj6c",
                "m.05qf6s",
                "m.0d3lky",
                "m.0266j8r",
                "m.0bvxy1",
                "m.012n00",
                "m.03mb6y5",
                "m.02qh5l9",
                "m.026sj1l",
                "m.04zqlh",
                "m.03cnps8",
                "m.02px86f",
                "m.05qs02",
                "m.081vhm",
                "m.0cqhzq",
                "m.02pk6s6",
                "m.047b032",
                "m.0gv8gs",
                "m.0c85yh",
                "m.04zl_c",
                "m.078gl6",
                "m.0ghqbn",
                "m.03wdwc6",
                "m.01tsdc",
                "m.08tsfv",
                "m.04fzcs",
                "m.01p56y",
                "m.0d1cxy",
                "m.0c3mlk",
                "m.02prkpy",
                "m.035d4s",
                "m.0gvbfq",
                "m.093y57",
                "m.07yd3w",
                "m.016r12",
                "m.026kmc_",
                "m.03xhgq",
                "m.012my4",
                "m.0fjqb_",
                "m.016mz5",
                "m.08666x",
                "m.074w5s",
                "m.061zng",
                "m.026_hzg",
                "m.02wbcb",
                "m.03tjlw",
                "m.03crg1j",
                "m.0471ds",
                "m.04881q",
                "m.05h6g6",
                "m.012mtx",
                "m.0dvftc",
                "m.0cm79m",
                "m.08lf74",
                "m.02py8p6",
                "m.04n1vf",
                "m.01wqh0",
                "m.01sq41",
                "m.026zm2k",
                "m.05d232",
                "m.03cs54d",
                "m.026bn7x",
                "m.047qby2",
                "m.012m_b",
                "m.03cmgt_",
                "m.01447l",
                "m.089s5v",
                "m.085tr9",
                "m.0287vbz",
                "m.044njz",
                "m.0dgpxbh",
                "m.09cf40",
                "m.04jr9k_",
                "m.061jr4",
                "m.0h4pkx",
                "m.026r1w9",
                "m.01lklf",
                "m.08jq8q",
                "m.03v9t0",
                "m.05ctp7",
                "m.02zbrp",
                "m.05r90b",
                "m.0gdtsg",
                "m.02_y_w",
                "m.02823ys",
                "m.07m90c",
                "m.093908",
                "m.05qyvf",
                "m.01g1k_",
                "m.01_0hd",
                "m.026k55",
                "m.04k5fc",
                "m.07h23x",
                "m.03sv8s",
                "m.0_xc06k",
                "m.069xqj",
                "m.02qptq4",
                "m.065hwr",
                "m.0g5q0j",
                "m.0466b2b",
                "m.038gs8",
                "m.0dtnk_",
                "m.02przs9",
                "m.02rfs47",
                "m.05kkn5",
                "m.02qyhb9",
                "m.03_n2y",
                "m.04lw97",
                "m.06q2dk",
                "m.04117y4",
                "m.08gdzn",
                "m.08cqb7",
                "m.02fx04",
                "m.0c69vy",
                "m.0408d1v",
                "m.0ftcp7",
                "m.08hjff",
                "m.02rck6x",
                "m.02_6y5",
                "m.0cln5p",
                "m.08s84d",
                "m.0dzhxx",
                "m.07b5lr",
                "m.010f9y51",
                "m.03m725g",
                "m.02p_26q",
                "m.06txw0",
                "m.0gmcc7v",
                "m.04qmky",
                "m.02z6bgl",
                "m.052pgq",
                "m.08cqj0",
                "m.053d7b",
                "m.02qqb0r",
                "m.0cpyrq",
                "m.038b7t",
                "m.0h0rbc",
                "m.05vzbw",
                "m.02pml6p",
                "m.026z9f",
                "m.047rt5w",
                "m.028c0d9",
                "m.0c6vtw",
                "m.0465bjs",
                "m.05rkwk",
                "m.02qsr_g",
                "m.070l38",
                "m.03cs1md",
                "m.028b_p8",
                "m.04q7ry",
                "m.0hx5v",
                "m.06wf69",
                "m.05cvtg",
                "m.06qj4j",
                "m.02rctzz",
                "m.047bm02",
                "m.0crhht",
                "m.0gxdvn",
                "m.0421p6y",
                "m.0706sz",
                "m.026bn8y",
                "m.05tbxj",
                "m.03hkvp2",
                "m.04gp39",
                "m.027jhx3",
                "m.03c5qcc",
                "m.02qdj0v",
                "m.026kfh4",
                "m.02rl24w",
                "m.03wbj58",
                "m.02np73",
                "m.06d9fc",
                "m.0c_xx0",
                "m.0c5ks_",
                "m.04y17z",
                "m.0d59x2",
                "m.04182rw",
                "m.062jkm",
                "m.067v3b",
                "m.03clmp3",
                "m.02qmxhp",
                "m.0bx7l5",
                "m.06g8n6",
                "m.018_f5",
                "m.070x68",
                "m.02vvk5q",
                "m.016m_c",
                "m.07tfyl",
                "m.02psyk7",
                "m.05r94w",
                "m.097055",
                "m.02pjm4",
                "m.03s0jd",
                "m.06sgjh",
                "m.014v5p",
                "m.060vr1",
                "m.0cz1tc",
                "m.025wzd8",
                "m.01yvz4",
                "m.03crf8d",
                "m.01_gcl",
                "m.03pv50",
                "m.064tw5",
                "m.08_ddj",
                "m.05jv99",
                "m.06mtyn",
                "m.05jwnt",
                "m.05tc53",
                "m.05pxq5",
                "m.030r68",
                "m.07x70c",
                "m.025wz9w",
                "m.02rvn05",
                "m.02pk5tz",
                "m.02l68n",
                "m.070xzz",
                "m.09f38_",
                "m.03zb7_",
                "m.0266336",
                "m.0102pqly",
                "m.0fh15_",
                "m.01phxw",
                "m.083h19",
                "m.0f6svq",
                "m.08qt4c",
                "m.04y4zg",
                "m.03hly6",
                "m.02gqdj",
                "m.0f3bcm",
                "m.0fsx6l",
                "m.03csx0s",
                "m.0fq2x_3",
                "m.0704sv",
                "m.08p4tt",
                "m.0d2fpq",
                "m.02qn35k",
                "m.05q_pz",
                "m.02672vf",
                "m.03mf8pp",
                "m.022wzf",
                "m.03vfh3",
                "m.0bdkr",
                "m.05538m",
                "m.08qrpn",
                "m.01t5xb",
                "m.0c6v5m",
                "m.016m6_",
                "m.0btg_",
                "m.084t22",
                "m.01pj8w",
                "m.02781z2",
                "m.05vqg6",
                "m.05scwz",
                "m.0261451",
                "m.0f2dnv",
                "m.0g7fb_",
                "m.06__sw",
                "m.0g0884",
                "m.0c5rpr",
                "m.012mzj",
                "m.025y1cy",
                "m.02wcc37",
                "m.01_34p",
                "m.03hjn32",
                "m.0274wb0",
                "m.0d1c6j",
                "m.0cjqtm",
                "m.08fn7f",
                "m.06p3gn",
                "m.01nd5t",
                "m.0720vx",
                "m.05_y4r",
                "m.01t0zd",
                "m.08yqqm",
                "m.02621w4",
                "m.02qpct7",
                "m.037h7r",
                "m.047dfn9",
                "m.01111jln",
                "m.048t_f",
                "m.03tj4z",
                "m.09v7zp",
                "m.0fxw3r",
                "m.03cs20z",
                "m.071sqk",
                "m.0ccx_p",
                "m.0668mf",
                "m.06lt20",
                "m.0677yt",
                "m.03m7cj7",
                "m.02qslm",
                "m.082tn_",
                "m.026wbpg",
                "m.02qn0m0",
                "m.088rby",
                "m.03c4zfc",
                "m.0cnlck",
                "m.04xg61",
                "m.01477y",
                "m.0g86kh",
                "m.0616ts",
                "m.0b9svv",
                "m.060j90",
                "m.04t84s",
                "m.03cnqdy",
                "m.06ppg1",
                "m.02prm0k",
                "m.01kpzr",
                "m.071cmd",
                "m.025x08w",
                "m.02895v_",
                "m.06mxcc",
                "m.0gj2nn",
                "m.01swyn",
                "m.0bb05n",
                "m.02pkz3f",
                "m.02zx8g",
                "m.03r996",
                "m.04t897",
                "m.05hjtz",
                "m.087nbb",
                "m.022v7g",
                "m.0j7l53h",
                "m.0gh6lm",
                "m.027q6wx",
                "m.07lchr",
                "m.088rfq",
                "m.02pp08t",
                "m.0706bb",
                "m.0dlwpv",
                "m.05qf98",
                "m.0c4hys",
                "m.05r34d",
                "m.03qlf_5",
                "m.02qkgbb",
                "m.02x154z",
                "m.03ql0qd",
                "m.02qr5n_",
                "m.027kqw",
                "m.0b19x8",
                "m.05d1d7",
                "m.0264jx2",
                "m.085mv3",
                "m.02pmv4y",
                "m.02f6p8",
                "m.03c10gl",
                "m.01d1ws",
                "m.0czcs6",
                "m.04pkpj",
                "m.03cly1r",
                "m.050_q6",
                "m.04s_93",
                "m.02gf62",
                "m.03cs8r7",
                "m.0d79rv",
                "m.0grryw",
                "m.02r0q0z",
                "m.0c7vbb",
                "m.0dtntb",
                "m.05jtmv",
                "m.0b_rc8",
                "m.02x5_",
                "m.04d4d4",
                "m.016m_0",
                "m.026150l",
                "m.03gscy7",
                "m.05btq9",
                "m.042493",
                "m.0282sy8",
                "m.016m94",
                "m.02wzny5",
                "m.04jr9l2",
                "m.026jznl",
                "m.03crhff",
                "m.02r0r3y",
                "m.09p44_",
                "m.0h1bml",
                "m.03wgppk",
                "m.053nh_",
                "m.040ntz",
                "m.0610ll",
                "m.0qjlj",
                "m.0gqn8g",
                "m.016pz5",
                "m.020jnj",
                "m.06lx91",
                "m.03jdcz",
                "m.0942g4",
                "m.012pm7",
                "m.03jgvz",
                "m.05qff4",
                "m.06m4tj",
                "m.05cvcb",
                "m.02r3bdy",
                "m.03crn02",
                "m.02vkj6c",
                "m.038p5z",
                "m.0blxr7",
                "m.04hxfw",
                "m.0f1193",
                "m.066stq",
                "m.0cnk83",
                "m.02r1jp4",
                "m.04p9kp",
                "m.05bqlp",
                "m.03rsr5",
                "m.04vjfz",
                "m.09dp99",
                "m.02qy_6s",
                "m.0fzv9w",
                "m.09d1nt",
                "m.02qqbpw",
                "m.0k3p257",
                "m.01fjwt",
                "m.05k87b",
                "m.084tyb",
                "m.03hnkz3",
                "m.079ncs",
                "m.05b8pv",
                "m.05cwcm",
                "m.09v3zc",
                "m.016m83",
                "m.03wcmg8",
                "m.02pvrlk",
                "m.02vpk_h",
                "m.0c85cp",
                "m.0191lm",
                "m.098qmq",
                "m.03crdyr",
                "m.04bcvk",
                "m.016m7r",
                "m.0h6q2d",
                "m.04hqtx",
                "m.0d6pr3",
                "m.026jsjz",
                "m.074j51",
                "m.02q513r",
                "m.0bgx3l",
                "m.02x1qgp",
                "m.06v_lq",
                "m.09zybd",
                "m.09__jl",
                "m.0264q7y",
                "m.0793qk",
                "m.02wvncz",
                "m.0263qxp",
                "m.014tbj",
                "m.0d76b3",
                "m.0bml3r",
                "m.0f0cj2",
                "m.05r8k2",
                "m.0dcrpx",
                "m.0265xpn",
                "m.03smfr",
                "m.04d3t1",
                "m.0dc_19",
                "m.09q6sj",
                "m.02qqhv3",
                "m.0bhphy",
                "m.0dk71y",
                "m.0h39z8",
                "m.08wfzf",
                "m.0485j3",
                "m.03c5fpp",
                "m.05lmj3",
                "m.0c13b6",
                "m.01f4w6",
                "m.01tqqg",
                "m.01f4wk",
                "m.02603sk",
                "m.02pnb0d",
                "m.02dwt2",
                "m.022gtt",
                "m.04fndl",
                "m.027f48f",
                "m.016m8g",
                "m.03cqfvy",
                "m.03crfng",
                "m.06pqvw",
                "m.025zg5d",
                "m.026dsgh",
                "m.05jk1d",
                "m.02x79lj",
                "m.02d16t",
                "m.010f95gt",
                "m.0b8d5w",
                "m.05qfc0",
                "m.03cv5l4",
                "m.017n09",
                "m.03cnppj",
                "m.02v8rj",
                "m.05k1fp",
                "m.02vzkw",
                "m.06k81l",
                "m.03cnnlj",
                "m.06p8q0",
                "m.05jmsy",
                "m.0cj5c_",
                "m.0dh86m",
                "m.03cyh5q",
                "m.014nvd",
                "m.027b944",
                "m.024qns",
                "m.0c86p_",
                "m.02qyq63",
                "m.03c041f",
                "m.06z51g",
                "m.03crh3t",
                "m.0c4q2g",
                "m.0285wv_",
                "m.088rrs",
                "m.08_8d0",
                "m.026g4ln",
                "m.0428fm",
                "m.026js13",
                "m.0267ky1",
                "m.0273hn8",
                "m.02pmfxy",
                "m.0g9vtt",
                "m.02683dl",
                "m.027zryj",
                "m.047bb4h",
                "m.0fttj0",
                "m.02q064l",
                "m.03x_n0",
                "m.06_y4n",
                "m.0dhw5x",
                "m.0c9sd9",
                "m.01qyhs",
                "m.026wdxm",
                "m.02hfz7",
                "m.02pr7n6",
                "m.06dtg3",
                "m.0cj_by",
                "m.0610xf",
                "m.04cwj6b",
                "m.012n11",
                "m.0dfcml",
                "m.0cwfy0",
                "m.0113hp9g",
                "m.028pbj",
                "m.03cnjrb",
                "m.02qtlvw",
                "m.0fwm_7",
                "m.0dvm37",
                "m.01j9pl",
                "m.03qkk_k",
                "m.02yc8w",
                "m.02rz585",
                "m.0gcpwz",
                "m.02z4mm",
                "m.08gds6",
                "m.030p8b",
                "m.05hdkq",
                "m.03_rbb",
                "m.03qp5l_",
                "m.06dkxc",
                "m.04r2ck",
                "m.01xjkv",
                "m.01ph_4",
                "m.012pg6",
                "m.08gf14",
                "m.042jj3",
                "m.02qlbb4",
                "m.0d_d5q",
                "m.03t1xk",
                "m.047cs10",
                "m.026r7x5",
                "m.012myv",
                "m.0289jnk",
                "m.08dv_z",
                "m.026_fdl",
                "m.03d4s_",
                "m.02nvyq",
                "m.047n5t0",
                "m.047lgj5",
                "m.0c009f",
                "m.043r81t",
                "m.02qyg9n",
                "m.051_dc",
                "m.02qbl_5",
                "m.0172l5",
                "m.063mbs",
                "m.0bxtvx",
                "m.0gpfcb",
                "m.02w7ls9",
                "m.03xw5z",
                "m.05bq4l",
                "m.06s64c",
                "m.098p3l",
                "m.0gjsps",
                "m.02rh217",
                "m.097fyf",
                "m.0f3b1y",
                "m.05qr1v",
                "m.01kdjw",
                "m.02pndt3",
                "m.027ktg",
                "m.016mxn",
                "m.02qsz3l",
                "m.0c7b9v",
                "m.07sjj5",
                "m.0gdv5z",
                "m.045vqm",
                "m.02qyf_b",
                "m.0bq4rg",
                "m.02pj3qd",
                "m.03c5slw",
                "m.0dj1g5",
                "m.026q1vx",
                "m.037lcc",
                "m.046whn",
                "m.0b08gb",
                "m.05tfw1",
                "m.0f0xnq",
                "m.02vvqg",
                "m.05rndx",
                "m.0fts99",
                "m.039j7w",
                "m.06q29c",
                "m.03cs21_",
                "m.02qxz13",
                "m.0530q3",
                "m.028bnc0",
                "m.070y1t",
                "m.05qc1_",
                "m.0cplwc",
                "m.030_vs",
                "m.0cwlp1",
                "m.06pql3",
                "m.09hysk",
                "m.026g5df",
                "m.0h3kgj",
                "m.02qxdsq",
                "m.0623k8",
                "m.0264vlc",
                "m.027zr1_",
                "m.05jwgh",
                "m.03ns4m0",
                "m.02dh51",
                "m.03cqflb",
                "m.08qr05",
                "m.02z4z5t",
                "m.0269cqc",
                "m.02q2n5j",
                "m.07d9nr",
                "m.01w0bz",
                "m.014ydb",
                "m.02rzw0t",
                "m.03cs1xh",
                "m.084qrb",
                "m.08q113",
                "m.03gsmw9",
                "m.0cgvwx",
                "m.04jr9l5",
                "m.0ct1rq",
                "m.02_vwk",
                "m.01q228",
                "m.0cp002",
                "m.017n0_",
                "m.07k3yk",
                "m.03b8cv",
                "m.07rtw1",
                "m.0djdy6",
                "m.0fl58v",
                "m.02qx71g",
                "m.02vkj5_",
                "m.02pql14",
                "m.03w9g7y",
                "m.096wr1",
                "m.023nxw",
                "m.03m9xwp",
                "m.070nsh",
                "m.05gmjx",
                "m.02hgsw",
                "m.0dywn4",
                "m.02pm4d1",
                "m.02yxwv",
                "m.01vdp7",
                "m.0ct1d2",
                "m.0dj8mw",
                "m.03thfj",
                "m.0g8847",
                "m.05f7x2",
                "m.07xr00",
                "m.05b7nj",
                "m.02qxs3v",
                "m.0fhg8q",
                "m.05psg8",
                "m.02823mt",
                "m.013pzk",
                "m.014pv2",
                "m.02x6hrt",
                "m.026bs35",
                "m.0d51zf",
                "m.05sjq9",
                "m.0f0yn5",
                "m.08fm5l",
                "m.0dx3y2",
                "m.03cs1sc",
                "m.08gdx2",
                "m.0gg_7d",
                "m.026v29v",
                "m.01f4vw",
                "m.02q44r5",
                "m.054199",
                "m.06pqq8",
                "m.0c8gv9",
                "m.0bzw8q",
                "m.02z5dv6",
                "m.05mx0k",
                "m.01zcnx",
                "m.0gtz2v",
                "m.02621v3",
                "m.02266f",
                "m.0dzgtf",
                "m.09db0p",
                "m.02qygz8",
                "m.026g4w7",
                "m.09s89g",
                "m.04vjq_",
                "m.02r0pz6",
                "m.012n0c",
                "m.0g7v3l",
                "m.08cqnp",
                "m.03xj1q",
                "m.02wxfln",
                "m.06fwzr",
                "m.0c7yfy",
                "m.027qvgs",
                "m.027ywqd",
                "m.0f2w0d",
                "m.016n0d",
                "m.05jtyv",
                "m.0f0hcb",
                "m.03cs1j_",
                "m.07sj8v",
                "m.0h0834",
                "m.0bt2_z",
                "m.0dtc09",
                "m.0cp07r",
                "m.065nw8",
                "m.026qr2r",
                "m.0g8k1f",
                "m.03m6dvt",
                "m.0chfth",
                "m.027zghj",
                "m.0cz83m",
                "m.05qffh",
                "m.0f3m0f",
                "m.08_v5z",
                "m.02q_j5q",
                "m.0h13s9",
                "m.02q7gfg",
                "m.016m6n",
                "m.0c61c5",
                "m.05svbhn",
                "m.04jtxh",
                "m.0chw1s",
                "m.03mcssw",
                "m.0br8wv",
                "m.08vdfx",
                "m.086kr9",
                "m.04kkp9",
                "m.01zglh",
                "m.02xpr9",
                "m.027x16g",
                "m.05fxt6",
                "m.026f1s9",
                "m.02zwqx",
                "m.02wctty",
                "m.03yd_q2",
                "m.04tgzm",
                "m.014z9l",
                "m.0b5bz5",
                "m.05s0q9",
                "m.02904q",
                "m.028c670",
                "m.02qqnnn",
                "m.016b7f",
                "m.059wvf",
                "m.0fpn_s",
                "m.027yvbq",
                "m.0288p8w",
                "m.04h6y0",
                "m.06mtp7",
                "m.07shh1",
                "m.0cg83t",
                "m.02pvnw7",
                "m.0d9lbc",
                "m.0f0mt_",
                "m.022ct3",
                "m.0qjn1",
                "m.07wxm4",
                "m.052_5m",
                "m.03cqfqg",
                "m.0g3995",
                "m.05pr7_",
                "m.08rk28",
                "m.02q427c",
                "m.0dxjsz",
                "m.05p0d1",
                "m.06bhn_",
                "m.0cskb1",
                "m.02qvr4p",
                "m.0c6tdp",
                "m.0d5dyr",
                "m.027p67c",
                "m.027wf_x",
                "m.0281lk_",
                "m.084wjd",
                "m.0fr77q",
                "m.09v1_d",
                "m.031sqv",
                "m.02z1fjp",
                "m.012mz5",
                "m.04jr9lc",
                "m.01115s_f",
                "m.026ktk3",
                "m.0f2h0h",
                "m.06v9lj",
                "m.02x1k82",
                "m.02rwctt",
                "m.0276knv",
                "m.018_c5",
                "m.06h_br",
                "m.096ch0",
                "m.02rvrmr",
                "m.03mgh_y",
                "m.01sx06",
                "m.0260fdw",
                "m.02pm4cq",
                "m.05n_td",
                "m.047dx7t",
                "m.02qr2tk",
                "m.0287bgq",
                "m.05dqfl",
                "m.0d9qcp",
                "m.0dhpdt",
                "m.0281c_p",
                "m.04050tz",
                "m.026hxx7",
                "m.026085b",
                "m.0d2ngd",
                "m.056k5",
                "m.026lw3f",
                "m.06pv1p",
                "m.0bqrj0",
                "m.05km0j",
                "m.02z2sfn",
                "m.060ybd",
                "m.026fnyh",
                "m.03cs1lq",
                "m.0c5byl",
                "m.014tbw",
                "m.09bk3h",
                "m.03crfx0",
                "m.06vp4y",
                "m.01xsmr",
                "m.03_2jt",
                "m.02qjlsb",
                "m.035dvr",
                "m.094hxp",
                "m.0db_2_",
                "m.012mxt",
                "m.03qhgwz",
                "m.03y6jwp",
                "m.03cqltl",
                "m.0f6snr",
                "m.03c4zxh",
                "m.0d57br",
                "m.0cq5xy",
                "m.09702f",
                "m.04_rrk",
                "m.0cps0p",
                "m.02ry9gc",
                "m.0172kv",
                "m.020jrn",
                "m.03sxm0",
                "m.099x5t",
                "m.02rvw0g",
                "m.02wx2py",
                "m.02r2sbt",
                "m.03grhrj",
                "m.027s4hd",
                "m.0dl114",
                "m.02qr5m8",
                "m.02qhf75",
                "m.06vy3p",
                "m.017l0y",
                "m.047qyx9",
                "m.016n01",
                "m.06vzx7",
                "m.07v8gt",
                "m.05yny9",
                "m.070_74",
                "m.05v7c4",
                "m.03s4g4",
                "m.027msv4",
                "m.027sws7",
                "m.047smqs",
                "m.0h6x1k",
                "m.02wj09",
                "m.02rb431",
                "m.010hqgjj",
                "m.025vplq",
                "m.09yl8q",
                "m.0704mb",
                "m.026wpws",
                "m.0cly6s",
                "m.014p3v",
                "m.09l_l_",
                "m.0d_99m",
                "m.03cbb_1",
                "m.026d_m4",
                "m.03pk7r",
                "m.012m_p",
                "m.016r1v",
                "m.03d0g84",
                "m.06_x2s",
                "m.0bzyrw",
                "m.03cjxx2",
                "m.021wlq",
                "m.05rhbr",
                "m.04jr9l8",
                "m.016_ft",
                "m.0blntr",
                "m.02q8ymq",
                "m.05p_ly",
                "m.0c84xt",
                "m.04df5z",
                "m.05dyn0",
                "m.05153s",
                "m.0fp6lx",
                "m.02pprk1",
                "m.05cj74",
                "m.0ch10w",
                "m.01sx7v"
            ]
        ],
        "entity_linking": {
            "Supreme Court of the United States": "m.07sz1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:law.court.legal_cases ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07sz1')\na.add_fact('m.07sz1', 'law.court.legal_cases', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-949",
        "question": "what is penn state 's main campus",
        "answer": [
            "m.05hzb_"
        ],
        "different_answer": [
            [
                "m.05hzb_"
            ]
        ],
        "entity_linking": {
            "Pennsylvania State University": "m.04hgpt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04hgpt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04hgpt ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04hgpt')\na.add_fact('m.04hgpt', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-952",
        "question": "what country does alaska belong to",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ],
            [
                "m.09c7w0"
            ],
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Alaska": "m.0hjy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hjy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hjy ns:base.biblioness.bibs_location.country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hjy')\na.add_fact('m.0hjy', 'base.biblioness.bibs_location.country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-953",
        "question": "where is kansas city",
        "answer": [
            "m.0ndpz"
        ],
        "different_answer": [
            [
                "m.0ndpz"
            ]
        ],
        "entity_linking": {
            "Kansas City": "m.04f_d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04f_d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04f_d ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04f_d')\na.add_fact('m.04f_d', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-954",
        "question": "what was pink floyd 's first album",
        "answer": [
            "m.0h3bhb1"
        ],
        "different_answer": [
            [
                "m.0h3bhb1"
            ]
        ],
        "entity_linking": {
            "Pink Floyd": "m.01wv9xn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wv9xn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wv9xn ns:music.artist.album ?x .\n?x ns:music.album.release_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wv9xn')\na.add_fact('m.01wv9xn', 'music.artist.album', 'x0')\na.add_fact('x0', 'music.album.release_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-955",
        "question": "who did granville t. woods married",
        "answer": [
            "m.0j6f6kt"
        ],
        "different_answer": [
            [
                "m.0j6f6kt"
            ]
        ],
        "entity_linking": {
            "Granville Woods": "m.0236mx",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0236mx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0236mx ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0236mx')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0236mx', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-957",
        "question": "what language did the sioux indians speak",
        "answer": [
            "m.064_8sq",
            "m.02h40lc",
            "m.0565z6"
        ],
        "different_answer": [
            [
                "m.064_8sq",
                "m.02h40lc",
                "m.0565z6"
            ]
        ],
        "entity_linking": {
            "Sioux": "m.0fk3s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fk3s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fk3s ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fk3s')\na.add_fact('m.0fk3s', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-958",
        "question": "what are some famous people from el salvador",
        "answer": [
            "m.05zkrkw",
            "m.06y2q9",
            "m.04y963w",
            "m.02phhjj",
            "m.026xmgs",
            "m.0gck6d6",
            "m.0h1bw_6",
            "m.0knxpym",
            "m.0ds0ght",
            "m.04f4spb",
            "m.0dbk9r",
            "m.07bk65",
            "m.0h2lqh",
            "m.02qscbm",
            "m.02qsclj",
            "m.02pyjqw",
            "m.0j3y75j",
            "m.03chr1c",
            "m.0drw_42",
            "m.05zv1fd",
            "m.012_0d7s",
            "m.0ndx3dp",
            "m.03m4f_f",
            "m.03c5z5s",
            "m.0n484vf",
            "m.0yzmtry",
            "m.0gysvkq",
            "m.05b_737",
            "m.080bz0l",
            "m.04n3xqn",
            "m.0gx_9sj",
            "m.02vmtpg",
            "m.0dlnrmt",
            "m.011v5_6y",
            "m.010h0d8y",
            "m.03c250_",
            "m.06y1sn",
            "m.012_0fc_",
            "m.0k_fvt",
            "m.02v_3hr",
            "m.0j442fb",
            "m.03cblzx",
            "m.06y1tb",
            "m.0dd34w",
            "m.0v_3g3z",
            "m.0j9nts6",
            "m.0ktzqtz",
            "m.05yr4wm",
            "m.04lhqln",
            "m.09ggck_",
            "m.03chqtt",
            "m.07swd6",
            "m.03f4fxd",
            "m.04yfkr7",
            "m.0glt20_",
            "m.0cny39v",
            "m.09v1mhy",
            "m.0j9k7c7",
            "g.11b8058v7j",
            "m.04dyyg2",
            "m.0hr5tm9",
            "m.06y2kd",
            "m.08vz5d",
            "m.0kg2yh2",
            "m.013b7xby",
            "m.0131y42k",
            "m.0knmfg3",
            "m.011k0bpp",
            "m.05c2y_f",
            "m.0h8k38b",
            "m.0b_qjns",
            "m.0h1gfdk",
            "m.03hzxty",
            "m.03cfwyh",
            "m.06y25k",
            "m.06y1yv",
            "m.065thkd",
            "m.04cykvj",
            "m.03nxqf0",
            "m.0cc70k9",
            "m.03c9124",
            "m.0pmg_63",
            "m.06y2bv",
            "m.0h3cwk",
            "m.0h7mwf5",
            "m.06y2mv",
            "m.06w9_j6",
            "m.03ctvv4",
            "m.066127x",
            "m.05m3gg",
            "m.06y1yh",
            "m.02qsc86",
            "m.011k0bx8",
            "m.01311sns",
            "m.06y27b",
            "m.0h3vkz2",
            "m.02qgkkg",
            "m.02x5pqn",
            "m.06y2cw",
            "m.012z_6bb",
            "m.03ck2fb",
            "m.0cc8gnq",
            "m.0h5595b",
            "m.0gyr_2r",
            "m.07p8ps",
            "m.0hrgx45",
            "m.0kmy4yx",
            "m.04q8w4h",
            "m.03nxgl4",
            "m.0fbs00",
            "m.043ks6h",
            "m.0bm9y7c",
            "m.0b__gm3",
            "m.04f69lb",
            "m.0q200b9",
            "m.04_076h"
        ],
        "different_answer": [
            [
                "m.05zkrkw",
                "m.06y2q9",
                "m.04y963w",
                "m.02phhjj",
                "m.026xmgs",
                "m.0gck6d6",
                "m.0h1bw_6",
                "m.0knxpym",
                "m.0ds0ght",
                "m.04f4spb",
                "m.0dbk9r",
                "m.07bk65",
                "m.0h2lqh",
                "m.02qscbm",
                "m.02qsclj",
                "m.02pyjqw",
                "m.0j3y75j",
                "m.03chr1c",
                "m.0drw_42",
                "m.05zv1fd",
                "m.012_0d7s",
                "m.0ndx3dp",
                "m.03m4f_f",
                "m.03c5z5s",
                "m.0n484vf",
                "m.0yzmtry",
                "m.0gysvkq",
                "m.05b_737",
                "m.080bz0l",
                "m.04n3xqn",
                "m.0gx_9sj",
                "m.02vmtpg",
                "m.0dlnrmt",
                "m.011v5_6y",
                "m.010h0d8y",
                "m.03c250_",
                "m.06y1sn",
                "m.012_0fc_",
                "m.0k_fvt",
                "m.02v_3hr",
                "m.0j442fb",
                "m.03cblzx",
                "m.06y1tb",
                "m.0dd34w",
                "m.0v_3g3z",
                "m.0j9nts6",
                "m.0ktzqtz",
                "m.05yr4wm",
                "m.04lhqln",
                "m.09ggck_",
                "m.03chqtt",
                "m.07swd6",
                "m.03f4fxd",
                "m.04yfkr7",
                "m.0glt20_",
                "m.0cny39v",
                "m.09v1mhy",
                "m.0j9k7c7",
                "g.11b8058v7j",
                "m.04dyyg2",
                "m.0hr5tm9",
                "m.06y2kd",
                "m.08vz5d",
                "m.0kg2yh2",
                "m.013b7xby",
                "m.0131y42k",
                "m.0knmfg3",
                "m.011k0bpp",
                "m.05c2y_f",
                "m.0h8k38b",
                "m.0b_qjns",
                "m.0h1gfdk",
                "m.03hzxty",
                "m.03cfwyh",
                "m.06y25k",
                "m.06y1yv",
                "m.065thkd",
                "m.04cykvj",
                "m.03nxqf0",
                "m.0cc70k9",
                "m.03c9124",
                "m.0pmg_63",
                "m.06y2bv",
                "m.0h3cwk",
                "m.0h7mwf5",
                "m.06y2mv",
                "m.06w9_j6",
                "m.03ctvv4",
                "m.066127x",
                "m.05m3gg",
                "m.06y1yh",
                "m.02qsc86",
                "m.011k0bx8",
                "m.01311sns",
                "m.06y27b",
                "m.0h3vkz2",
                "m.02qgkkg",
                "m.02x5pqn",
                "m.06y2cw",
                "m.012z_6bb",
                "m.03ck2fb",
                "m.0cc8gnq",
                "m.0h5595b",
                "m.0gyr_2r",
                "m.07p8ps",
                "m.0hrgx45",
                "m.0kmy4yx",
                "m.04q8w4h",
                "m.03nxgl4",
                "m.0fbs00",
                "m.043ks6h",
                "m.0bm9y7c",
                "m.0b__gm3",
                "m.04f69lb",
                "m.0q200b9",
                "m.04_076h"
            ]
        ],
        "entity_linking": {
            "El Salvador": "m.02k8k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k8k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k8k ns:location.location.people_born_here ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k8k')\na.add_fact('m.02k8k', 'location.location.people_born_here', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-959",
        "question": "who did brett gardner play for in 2008",
        "answer": [
            "m.0cqt41"
        ],
        "different_answer": [
            [
                "m.0cqt41"
            ]
        ],
        "entity_linking": {
            "Brett Gardner": "m.02px3wt",
            "2008-12-31": "\"2008-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2008-01-01": "\"2008-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02px3wt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02px3wt ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2008-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2008-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02px3wt')\na.add_fact('m.02px3wt', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2008-12-31\"^^xsd:dateTime', '\"2008-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-960",
        "question": "who plays dwight in the office",
        "answer": [
            "m.083chw"
        ],
        "different_answer": [
            [
                "m.083chw"
            ]
        ],
        "entity_linking": {
            "The Office": "m.08jgk1",
            "Dwight Schrute": "m.089pwh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08jgk1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08jgk1 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.089pwh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.089pwh')\na.add_filter('x0', '!=', 'm.08jgk1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.089pwh')\na.add_fact('m.08jgk1', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-962",
        "question": "what county is san diego ca",
        "answer": [
            "m.0l2rj"
        ],
        "different_answer": [
            [
                "m.0l2rj"
            ]
        ],
        "entity_linking": {
            "San Diego": "m.071vr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071vr ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.071vr')\na.add_fact('m.071vr', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-963",
        "question": "who is the miami dolphins quarterback",
        "answer": [
            "m.04q9syl",
            "m.027n35s"
        ],
        "different_answer": [
            [
                "m.04q9syl",
                "m.027n35s"
            ]
        ],
        "entity_linking": {
            "Miami Dolphins": "m.04vn5",
            "Quarterback": "m.06b1q",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vn5 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.position ns:m.06b1q .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06b1q')\na.add_filter('x0', '!=', 'm.04vn5')\na.add_fact('x1', 'sports.sports_team_roster.position', 'm.06b1q')\na.add_fact('m.04vn5', 'sports.sports_team.roster', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.player', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-965",
        "question": "where did anne frank go to school",
        "answer": [
            "m.03wf8d8",
            "m.074600n"
        ],
        "different_answer": [
            [
                "m.03wf8d8",
                "m.074600n"
            ]
        ],
        "entity_linking": {
            "Anne Frank": "m.03d9rk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d9rk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d9rk ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03d9rk')\na.add_fact('m.03d9rk', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-966",
        "question": "what basketball player is married to monica",
        "answer": [
            "m.0f2zfl"
        ],
        "different_answer": [
            [
                "m.0f2zfl"
            ]
        ],
        "entity_linking": {
            "Monica": "m.01fs85",
            "Marriage": "m.04ztj",
            "Basketball player": "m.02h664x",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fs85)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fs85 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?x ns:people.person.profession ns:m.02h664x .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h664x')\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01fs85')\na.add_fact('x0', 'people.person.profession', 'm.02h664x')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01fs85', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-967",
        "question": "what did hitler use to kill himself",
        "answer": [
            "m.06z5s",
            "m.02qnd1b"
        ],
        "different_answer": [
            [
                "m.06z5s",
                "m.02qnd1b"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-968",
        "question": "what do people speak in germany",
        "answer": [
            "m.04306rv",
            "m.06d010",
            "m.04lmb2",
            "m.0140n_",
            "m.02nt2n"
        ],
        "different_answer": [
            [
                "m.04306rv",
                "m.06d010",
                "m.04lmb2",
                "m.0140n_",
                "m.02nt2n"
            ],
            [
                "m.02hxrs_",
                "m.04306rv"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-969",
        "question": "when is the last time the denver broncos won the superbowl",
        "answer": [
            "m.076y0"
        ],
        "different_answer": [
            [
                "m.076y0"
            ]
        ],
        "entity_linking": {
            "Denver Broncos": "m.0289q",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0289q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0289q ns:sports.sports_team.championships ?x .\n?x ns:time.event.instance_of_recurring_event ns:m.06x5s .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.0289q')\na.add_fact('x0', 'time.event.instance_of_recurring_event', 'm.06x5s')\na.add_fact('m.0289q', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-970",
        "question": "where was caesar when he was stabbed",
        "answer": [
            "m.05l4p5"
        ],
        "different_answer": [
            [
                "m.05l4p5"
            ]
        ],
        "entity_linking": {
            "Julius Caesar": "m.041wm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041wm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041wm ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.041wm')\na.add_fact('m.041wm', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-971",
        "question": "what style of music did bessie smith perform",
        "answer": [
            "m.03_d0",
            "m.0155w"
        ],
        "different_answer": [
            [
                "m.03_d0",
                "m.0155w"
            ]
        ],
        "entity_linking": {
            "Bessie Smith": "m.0dq47"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dq47)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dq47 ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dq47')\na.add_fact('m.0dq47', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-972",
        "question": "what team did jackie robinson",
        "answer": [
            "m.05fc8c9",
            "m.02_cjl",
            "m.03_wkh",
            "m.0413z4v",
            "m.0fbtm7"
        ],
        "different_answer": [
            [
                "m.05fc8c9",
                "m.02_cjl",
                "m.03_wkh",
                "m.0413z4v",
                "m.0fbtm7"
            ]
        ],
        "entity_linking": {
            "Jackie Robinson": "m.0443c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0443c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0443c ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0443c')\na.add_fact('m.0443c', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-973",
        "question": "what time zone is chicago in right now",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Chicago": "m.01_d4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_d4 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01_d4')\na.add_fact('m.01_d4', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-974",
        "question": "what two countries make up the dominican republic",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Dominican Republic": "m.027rn",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rn ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.027rn')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.027rn', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-975",
        "question": "who was the vice president under ronald reagan",
        "answer": [
            "m.034ls"
        ],
        "different_answer": [
            [
                "m.034ls"
            ]
        ],
        "entity_linking": {
            "Ronald Reagan": "m.06c0j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c0j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c0j ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06c0j')\na.add_fact('m.06c0j', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-976",
        "question": "where do the chicago white sox play home games",
        "answer": [
            "m.02yxpv",
            "m.02nwdt"
        ],
        "different_answer": [
            [
                "m.02yxpv",
                "m.02nwdt"
            ]
        ],
        "entity_linking": {
            "Chicago White Sox": "m.01slc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01slc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01slc ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01slc')\na.add_fact('m.01slc', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-977",
        "question": "what part did jeff conaway play in grease",
        "answer": [
            "m.0h5nhp7"
        ],
        "different_answer": [
            [
                "m.0h5nhp7"
            ],
            [
                "m.0h5nhp7"
            ]
        ],
        "entity_linking": {
            "Jeff Conaway": "m.026mzh",
            "Grease": "m.01xlqd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026mzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026mzh ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.01xlqd .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xlqd')\na.add_filter('x0', '!=', 'm.026mzh')\na.add_fact('x1', 'film.performance.film', 'm.01xlqd')\na.add_fact('m.026mzh', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-978",
        "question": "what book did benjamin franklin published",
        "answer": [
            "m.0c1t1h8",
            "m.04t1zn4",
            "m.0bhjdk2",
            "m.06dqc2w",
            "m.0y5sdds",
            "m.0bhjdkv",
            "m.0c1t1fz",
            "m.0bqqymr",
            "m.0c1t1hn",
            "m.04w5ynd",
            "m.0bhjdhz",
            "m.0c1t1hr",
            "m.0bqqymc",
            "m.0y5sdg1",
            "m.06m0y80",
            "m.0bqqyn2",
            "m.0bhjdjx",
            "m.06fl24x",
            "m.0bqqyml",
            "m.0bqqyn8",
            "m.0y5sd6w",
            "m.0bqqyns",
            "m.06n38yt",
            "m.0c1t1gb",
            "m.069v34p",
            "m.0bqqylh",
            "m.0bqqynk",
            "m.06n8wr1",
            "m.0bhjdll",
            "m.06bc5yn",
            "m.0c1t1gx",
            "m.05q9nw8",
            "m.04t1zmx",
            "m.03c67p8",
            "m.0c1t1gm",
            "m.04t1zmd",
            "m.0y5sd9c",
            "m.0bhjdky",
            "m.0bhjdkc",
            "m.0xptgyh",
            "m.0c1t1fp",
            "m.0c1t1gq",
            "m.0bqqyl_",
            "m.0y5sdbl",
            "m.0c1t1gt",
            "m.0c1t1fs",
            "m.06hvzsn",
            "m.0c1t1h5",
            "m.06spsy3",
            "m.0y5sdc8",
            "m.0bhjdk8",
            "m.0c1t1f0",
            "m.0c1t1fw",
            "m.0y5sd7_",
            "m.06q2529",
            "m.0bqqymg",
            "m.06thfrr",
            "m.06f96j7",
            "m.0dytg4y",
            "m.0bqqymy",
            "m.0y5sd3_",
            "m.0c1t1fd",
            "m.0c1t1gj",
            "m.01zwbg",
            "m.06lsf_m",
            "m.0y5sdgc",
            "m.0c1t1f6",
            "m.0bhjdk5",
            "m.0c1t1h2",
            "m.06jq4kg",
            "m.0bhjdl6",
            "m.0b28ym",
            "m.0bhjdl9",
            "m.0bhjdjt",
            "m.0bqqyld",
            "m.0y5sd7d",
            "m.066ymc6",
            "m.0y5sd9_",
            "m.0bqqymv",
            "m.0bhjdj7",
            "m.0c1t1fh",
            "m.0bhjdkk",
            "m.0638kh",
            "m.0bhjdld",
            "m.0bqqym2",
            "m.0bhjdl0",
            "m.0bhjdlh",
            "m.06gsgp3",
            "m.06l923t",
            "m.06ln9sy",
            "m.0bqqym6",
            "m.0y5sd60",
            "m.0bhjdj1",
            "m.0bqqyln",
            "m.0bqqylw",
            "m.0c1t1hg",
            "m.0c1t1hc",
            "m.0c1t1gf",
            "m.04t1zmn",
            "m.0c1t1f3",
            "m.0bhjdkn",
            "m.0c1t1f9",
            "m.06pnj_d",
            "m.0bhjdj_",
            "m.0bhjdjj",
            "m.0y5sdfb",
            "m.0c1t1g7",
            "m.0bhjdkg",
            "m.0bhjdj4",
            "m.0y5sdfp",
            "m.0c1t1g4",
            "m.0c1t1dy",
            "m.0c1t1fl",
            "m.06gw6_b",
            "m.05b22sd",
            "m.0bqqynp",
            "m.06j_wqp",
            "m.0c1t1g1",
            "m.0c1t1hk",
            "m.0bhjdjb",
            "m.0bhjdkr",
            "m.0f5j2d",
            "m.0bhjdjq"
        ],
        "different_answer": [
            [
                "m.0c1t1h8",
                "m.04t1zn4",
                "m.0bhjdk2",
                "m.06dqc2w",
                "m.0y5sdds",
                "m.0bhjdkv",
                "m.0c1t1fz",
                "m.0bqqymr",
                "m.0c1t1hn",
                "m.04w5ynd",
                "m.0bhjdhz",
                "m.0c1t1hr",
                "m.0bqqymc",
                "m.0y5sdg1",
                "m.06m0y80",
                "m.0bqqyn2",
                "m.0bhjdjx",
                "m.06fl24x",
                "m.0bqqyml",
                "m.0bqqyn8",
                "m.0y5sd6w",
                "m.0bqqyns",
                "m.06n38yt",
                "m.0c1t1gb",
                "m.069v34p",
                "m.0bqqylh",
                "m.0bqqynk",
                "m.06n8wr1",
                "m.0bhjdll",
                "m.06bc5yn",
                "m.0c1t1gx",
                "m.05q9nw8",
                "m.04t1zmx",
                "m.03c67p8",
                "m.0c1t1gm",
                "m.04t1zmd",
                "m.0y5sd9c",
                "m.0bhjdky",
                "m.0bhjdkc",
                "m.0xptgyh",
                "m.0c1t1fp",
                "m.0c1t1gq",
                "m.0bqqyl_",
                "m.0y5sdbl",
                "m.0c1t1gt",
                "m.0c1t1fs",
                "m.06hvzsn",
                "m.0c1t1h5",
                "m.06spsy3",
                "m.0y5sdc8",
                "m.0bhjdk8",
                "m.0c1t1f0",
                "m.0c1t1fw",
                "m.0y5sd7_",
                "m.06q2529",
                "m.0bqqymg",
                "m.06thfrr",
                "m.06f96j7",
                "m.0dytg4y",
                "m.0bqqymy",
                "m.0y5sd3_",
                "m.0c1t1fd",
                "m.0c1t1gj",
                "m.01zwbg",
                "m.06lsf_m",
                "m.0y5sdgc",
                "m.0c1t1f6",
                "m.0bhjdk5",
                "m.0c1t1h2",
                "m.06jq4kg",
                "m.0bhjdl6",
                "m.0b28ym",
                "m.0bhjdl9",
                "m.0bhjdjt",
                "m.0bqqyld",
                "m.0y5sd7d",
                "m.066ymc6",
                "m.0y5sd9_",
                "m.0bqqymv",
                "m.0bhjdj7",
                "m.0c1t1fh",
                "m.0bhjdkk",
                "m.0638kh",
                "m.0bhjdld",
                "m.0bqqym2",
                "m.0bhjdl0",
                "m.0bhjdlh",
                "m.06gsgp3",
                "m.06l923t",
                "m.06ln9sy",
                "m.0bqqym6",
                "m.0y5sd60",
                "m.0bhjdj1",
                "m.0bqqyln",
                "m.0bqqylw",
                "m.0c1t1hg",
                "m.0c1t1hc",
                "m.0c1t1gf",
                "m.04t1zmn",
                "m.0c1t1f3",
                "m.0bhjdkn",
                "m.0c1t1f9",
                "m.06pnj_d",
                "m.0bhjdj_",
                "m.0bhjdjj",
                "m.0y5sdfb",
                "m.0c1t1g7",
                "m.0bhjdkg",
                "m.0bhjdj4",
                "m.0y5sdfp",
                "m.0c1t1g4",
                "m.0c1t1dy",
                "m.0c1t1fl",
                "m.06gw6_b",
                "m.05b22sd",
                "m.0bqqynp",
                "m.06j_wqp",
                "m.0c1t1g1",
                "m.0c1t1hk",
                "m.0bhjdjb",
                "m.0bhjdkr",
                "m.0f5j2d",
                "m.0bhjdjq"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz",
            "Book": "m.01xryvm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:m.01xryvm .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xryvm')\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xryvm')\na.add_fact('m.019fz', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-979",
        "question": "what currency to take to barbados",
        "answer": [
            "m.05hy7p"
        ],
        "different_answer": [
            [
                "m.05hy7p"
            ]
        ],
        "entity_linking": {
            "Barbados": "m.0162v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0162v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0162v ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0162v')\na.add_fact('m.0162v', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-980",
        "question": "where did they get the name stanley cup",
        "answer": [
            "m.01q69p"
        ],
        "different_answer": [
            [
                "m.01q69p"
            ]
        ],
        "entity_linking": {
            "Stanley Cup": "m.0hn79"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hn79)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hn79 ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hn79')\na.add_fact('m.0hn79', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-982",
        "question": "what is the zip code of syracuse ny",
        "answer": [
            "m.03dv6mw",
            "m.03dv6s2",
            "m.020gbl7",
            "m.07nrnnn",
            "m.03dv6qx",
            "m.07nrnp9",
            "m.07nrnnf",
            "m.03dv6px",
            "m.020gbtz",
            "m.020gbj8",
            "m.020gbq8",
            "m.020gbhg",
            "m.07nrnnw",
            "m.07nrnn6",
            "m.020gbdx",
            "m.03dv6n8",
            "m.0h7bww4",
            "m.03dv6qh",
            "m.03dv6p2",
            "m.03dv6ph",
            "m.020gbfx",
            "m.07nrnmb",
            "m.07nrnm_",
            "m.07nrnp2",
            "m.03dv6rh",
            "m.07nrnms",
            "m.03dv6mg",
            "m.07nrnmk",
            "m.03dv6np"
        ],
        "different_answer": [
            [
                "m.03dv6mw",
                "m.03dv6s2",
                "m.020gbl7",
                "m.07nrnnn",
                "m.03dv6qx",
                "m.07nrnp9",
                "m.07nrnnf",
                "m.03dv6px",
                "m.020gbtz",
                "m.020gbj8",
                "m.020gbq8",
                "m.020gbhg",
                "m.07nrnnw",
                "m.07nrnn6",
                "m.020gbdx",
                "m.03dv6n8",
                "m.0h7bww4",
                "m.03dv6qh",
                "m.03dv6p2",
                "m.03dv6ph",
                "m.020gbfx",
                "m.07nrnmb",
                "m.07nrnm_",
                "m.07nrnp2",
                "m.03dv6rh",
                "m.07nrnms",
                "m.03dv6mg",
                "m.07nrnmk",
                "m.03dv6np"
            ]
        ],
        "entity_linking": {
            "Syracuse": "m.071cn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071cn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071cn ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.071cn')\na.add_fact('m.071cn', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-983",
        "question": "where did tennessee williams go to college",
        "answer": [
            "m.0g2jl",
            "m.01j_9c",
            "m.06thjt",
            "m.0187nd"
        ],
        "different_answer": [
            [
                "m.0g2jl",
                "m.01j_9c",
                "m.06thjt",
                "m.0187nd"
            ]
        ],
        "entity_linking": {
            "Tennessee Williams": "m.0c4y8",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c4y8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c4y8 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0c4y8')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0c4y8', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-984",
        "question": "what is the name of airport in new york",
        "answer": [
            "m.0p1l2"
        ],
        "different_answer": [
            [
                "m.0p1l2"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286",
            "Air travel": "m.025t3bg",
            "New York": "m.059rby"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?y ns:travel.transportation.mode_of_transportation ns:m.025t3bg .\n?x ns:location.location.containedby ns:m.059rby .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.059rby')\na.add_filter('x0', '!=', 'm.025t3bg')\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('x0', 'location.location.containedby', 'm.059rby')\na.add_fact('x1', 'travel.transportation.mode_of_transportation', 'm.025t3bg')\na.add_fact('m.02_286', 'travel.travel_destination.how_to_get_here', 'x1')\na.add_fact('x1', 'travel.transportation.transport_terminus', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-985",
        "question": "who was queen victoria 's husband",
        "answer": [
            "m.0k5z2"
        ],
        "different_answer": [
            [
                "m.0k5z2"
            ]
        ],
        "entity_linking": {
            "Queen Victoria": "m.0cw10",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cw10)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cw10 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0cw10')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0cw10', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-986",
        "question": "where did benjamin franklin work",
        "answer": [
            "m.0dcms",
            "m.0dw1k2",
            "m.040vjzl"
        ],
        "different_answer": [
            [
                "m.0dcms",
                "m.0dw1k2",
                "m.040vjzl"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'people.person.employment_history', 'x1')\na.add_fact('x1', 'business.employment_tenure.company', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-987",
        "question": "what does barbara bush do for work",
        "answer": [
            "m.01dz7z"
        ],
        "different_answer": [
            [
                "m.01dz7z"
            ],
            [
                "m.01dz7z"
            ]
        ],
        "entity_linking": {
            "Barbara Bush": "m.015nr6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015nr6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015nr6 ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015nr6')\na.add_fact('m.015nr6', 'people.person.employment_history', 'x1')\na.add_fact('x1', 'business.employment_tenure.title', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-988",
        "question": "who is jacob latimore",
        "answer": [
            "m.02hrh1q",
            "m.02h6p92",
            "m.09l65"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.02h6p92",
                "m.09l65"
            ]
        ],
        "entity_linking": {
            "Jacob Latimore": "m.0521dwp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0521dwp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0521dwp ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0521dwp')\na.add_fact('m.0521dwp', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-989",
        "question": "what happened to dunkirk during ww2",
        "answer": [
            "m.0jpb7",
            "m.03hm2pk"
        ],
        "different_answer": [
            [
                "m.0jpb7",
                "m.03hm2pk"
            ]
        ],
        "entity_linking": {
            "Dunkirk": "m.0md6f",
            "World War II": "m.081pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0md6f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0md6f ns:location.location.events ?x .\n?x ns:time.event.included_in_event ns:m.081pw .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081pw')\na.add_filter('x0', '!=', 'm.0md6f')\na.add_fact('x0', 'time.event.included_in_event', 'm.081pw')\na.add_fact('m.0md6f', 'location.location.events', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-990",
        "question": "what was scottie pippen good at",
        "answer": [
            "m.018w8"
        ],
        "different_answer": [
            [
                "m.018w8"
            ]
        ],
        "entity_linking": {
            "Scottie Pippen": "m.01vpgl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vpgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vpgl ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.sport ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vpgl')\na.add_fact('m.01vpgl', 'sports.pro_athlete.sports_played_professionally', 'x1')\na.add_fact('x1', 'sports.pro_sports_played.sport', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-991",
        "question": "who played donna on west wing",
        "answer": [
            "m.040t74"
        ],
        "different_answer": [
            [
                "m.040t74"
            ]
        ],
        "entity_linking": {
            "Donnatella Moss": "m.02kvknw",
            "The West Wing": "m.0g60z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kvknw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kvknw ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.0g60z .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g60z')\na.add_filter('x0', '!=', 'm.02kvknw')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.0g60z')\na.add_fact('m.02kvknw', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-993",
        "question": "who played meg in season 1 of family guy",
        "answer": [
            "m.02k4b2"
        ],
        "different_answer": [
            [
                "m.02k4b2"
            ]
        ],
        "entity_linking": {
            "Meg Griffin": "m.035szd",
            "Family Guy - Season 1": "m.027gynh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035szd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035szd ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.seasons ns:m.027gynh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027gynh')\na.add_filter('x0', '!=', 'm.035szd')\na.add_fact('x1', 'tv.regular_tv_appearance.seasons', 'm.027gynh')\na.add_fact('m.035szd', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-994",
        "question": "when was the last time the dallas cowboys won the superbowl",
        "answer": [
            "m.076wz"
        ],
        "different_answer": [
            [
                "m.076wz"
            ]
        ],
        "entity_linking": {
            "Dallas Cowboys": "m.02896",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02896)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02896 ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.06x5s .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.02896')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.06x5s')\na.add_fact('m.02896', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-996",
        "question": "where do ireland play rugby union",
        "answer": [
            "m.05h4fd2"
        ],
        "different_answer": [
            [
                "m.05h4fd2"
            ]
        ],
        "entity_linking": {
            "Ireland national rugby union team": "m.03t3zk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03t3zk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03t3zk ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03t3zk')\na.add_fact('m.03t3zk', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-997",
        "question": "who killed lee harvey oswald shot",
        "answer": [
            "m.044sb"
        ],
        "different_answer": [
            [
                "m.044sb"
            ]
        ],
        "entity_linking": {
            "Lee Harvey Oswald": "m.04gwy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gwy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gwy ns:user.alexander.misc.murdered_person.murdered_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04gwy')\na.add_fact('m.04gwy', 'user.alexander.misc.murdered_person.murdered_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-998",
        "question": "when was the last time knicks won the championship",
        "answer": [
            "m.0cs1kg"
        ],
        "different_answer": [
            [
                "m.0cs1kg"
            ]
        ],
        "entity_linking": {
            "New York Knicks": "m.0jm3v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jm3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jm3v ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jm3v')\na.add_fact('m.0jm3v', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-999",
        "question": "when did celtics win the championship",
        "answer": [
            "m.08x9zw",
            "m.08x9xt",
            "m.0cs2f4",
            "m.0cs2fv",
            "m.08x9wd",
            "m.0cs2n0",
            "m.09l8zn",
            "m.0cs1gb",
            "m.0403mzq",
            "m.0cs27l",
            "m.0cs266",
            "m.0cs2h6",
            "m.0cs24h",
            "m.0cs2hx",
            "m.0cs29b",
            "m.08dxfs",
            "m.0cs222"
        ],
        "different_answer": [
            [
                "m.08x9zw",
                "m.08x9xt",
                "m.0cs2f4",
                "m.0cs2fv",
                "m.08x9wd",
                "m.0cs2n0",
                "m.09l8zn",
                "m.0cs1gb",
                "m.0403mzq",
                "m.0cs27l",
                "m.0cs266",
                "m.0cs2h6",
                "m.0cs24h",
                "m.0cs2hx",
                "m.0cs29b",
                "m.08dxfs",
                "m.0cs222"
            ]
        ],
        "entity_linking": {
            "Boston Celtics": "m.0bwjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwjj ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bwjj')\na.add_fact('m.0bwjj', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1000",
        "question": "what countries included in oceania",
        "answer": [
            "m.03ryn",
            "m.047t_",
            "m.034tl",
            "m.04v6v",
            "m.05cnr",
            "m.01n8qg",
            "m.07z5n",
            "m.07fb6",
            "m.05c17",
            "m.020p1",
            "m.05qkp",
            "m.06s9y",
            "m.02wt0",
            "m.0chghy",
            "m.0ctw_b"
        ],
        "different_answer": [
            [
                "m.03ryn",
                "m.047t_",
                "m.034tl",
                "m.04v6v",
                "m.05cnr",
                "m.01n8qg",
                "m.07z5n",
                "m.07fb6",
                "m.05c17",
                "m.020p1",
                "m.05qkp",
                "m.06s9y",
                "m.02wt0",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "Oceania": "m.05nrg",
            "\"Country\"": "\"Country\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nrg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nrg ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"Country\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05nrg')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"Country\"^^xsd:string')\na.add_fact('m.05nrg', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1001",
        "question": "what country is nicki minaj from",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Nicki Minaj": "m.047sxrj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.047sxrj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.047sxrj ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.047sxrj')\na.add_fact('m.047sxrj', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1002",
        "question": "who played harry potter dumbledore actor",
        "answer": [
            "m.0g1gv_",
            "m.076xsqc",
            "m.010xjr",
            "m.015rkw"
        ],
        "different_answer": [
            [
                "m.0g1gv_",
                "m.076xsqc",
                "m.010xjr",
                "m.015rkw"
            ]
        ],
        "entity_linking": {
            "Professor Albus Dumbledore": "m.0cb2r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cb2r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cb2r ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cb2r')\na.add_fact('m.0cb2r', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1003",
        "question": "who was the prime minister of pakistan in 1999",
        "answer": [
            "m.020t62",
            "m.0364q1"
        ],
        "different_answer": [
            [
                "m.020t62",
                "m.0364q1"
            ]
        ],
        "entity_linking": {
            "Prime Minister of Pakistan": "m.02cd6_",
            "1999-12-31": "\"1999-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1999-01-01": "\"1999-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cd6_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cd6_ ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"1999-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"1999-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02cd6_')\na.add_fact('m.02cd6_', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"1999-12-31\"^^xsd:dateTime', '\"1999-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1004",
        "question": "what movies did christopher plummer play in",
        "answer": [
            "m.076xkps",
            "m.01jwxx",
            "m.0pmf3l5",
            "m.06vggv",
            "m.06zk4vw",
            "m.0jt2423",
            "m.011f26pr",
            "m.0ztkpk6",
            "m.03qj86j",
            "m.0crybp9",
            "m.02qy2zv",
            "m.03grp9d",
            "m.011yth",
            "m.02rn15c",
            "m.049mql",
            "m.0c3tmhs",
            "m.0c5fq4",
            "m.0bbmkh",
            "m.05zqyzp",
            "m.04j16jd",
            "m.083fl",
            "m.0r8w0dm",
            "m.051zdz6",
            "m.0v_pgt2",
            "m.02z7v8z",
            "m.0224yq",
            "m.0b44shh",
            "m.0cq7tx",
            "m.0x0gfps",
            "m.078sj4",
            "m.047myg9",
            "m.04j1_xc",
            "m.079f7l",
            "m.0czbcwb",
            "m.04j0f9m",
            "m.0fc8w8",
            "m.0b4gnw",
            "m.0k3ddp2",
            "m.04ynd_",
            "m.04g14gk",
            "m.02qqrpy",
            "m.03p_np",
            "m.03vp54",
            "m.0dgq_kn",
            "m.087623",
            "m.02qjg31",
            "m.04qgzk",
            "m.09v2wgp",
            "m.027r7k",
            "m.02w0_2l",
            "m.05zrzs1",
            "m.03y96y8",
            "m.0gh5_tc",
            "m.0rpfm51",
            "m.09db8r",
            "m.0ddgbq3",
            "m.05r1bb",
            "m.06zp5gf",
            "m.026n9yk",
            "m.09nl36",
            "m.02pgkdn",
            "m.07_7th",
            "m.0bnqf7",
            "m.065qhp",
            "m.04pmnt",
            "m.04j0ls5",
            "m.0dnn1j",
            "m.0520m52",
            "m.065tqqx",
            "m.02wz1ch",
            "m.09pyqc",
            "m.02z0nhq",
            "m.07dzb3",
            "m.010h352r",
            "m.01rwyq",
            "m.09m6kg",
            "m.0fdrns",
            "m.012wjtcf",
            "m.027c4mq",
            "m.0njcp_c",
            "m.04jdgq",
            "m.033srr",
            "m.0gzqzl",
            "m.069687",
            "m.04j0834",
            "m.04f6hpg",
            "m.03mddt9",
            "m.02r79_h",
            "m.03y8bw0",
            "m.0d6mrfb",
            "m.02z14lh",
            "m.0chdsfl",
            "m.02z0qgs",
            "m.05b5472",
            "m.0xnph63",
            "m.02xkm8r",
            "m.02q9_sn",
            "m.0crw6bn",
            "m.04gm93",
            "m.0df1tr",
            "m.05f05n",
            "m.03jsdr",
            "m.04jmkts",
            "m.0bg1bn",
            "m.0g0hgp",
            "m.04jh6fj",
            "m.02x983k",
            "m.03hhtw_",
            "m.0dgr9sj",
            "m.032xx4",
            "m.08fsq3",
            "m.0rpt56y",
            "m.0bhbwpw",
            "m.0b753df",
            "m.0bvpzw5",
            "m.08xvx8",
            "m.0b813t",
            "m.04j27vd",
            "m.0bbw1jk",
            "m.0hlpnhn",
            "m.068__1",
            "m.0bbr312",
            "m.04j1j4g",
            "m.015bpl",
            "m.07j6w",
            "m.04j2m2s",
            "m.0269yjk",
            "m.0b79dp9",
            "m.02rn00y"
        ],
        "different_answer": [
            [
                "m.076xkps",
                "m.01jwxx",
                "m.0pmf3l5",
                "m.06vggv",
                "m.06zk4vw",
                "m.0jt2423",
                "m.011f26pr",
                "m.0ztkpk6",
                "m.03qj86j",
                "m.0crybp9",
                "m.02qy2zv",
                "m.03grp9d",
                "m.011yth",
                "m.02rn15c",
                "m.049mql",
                "m.0c3tmhs",
                "m.0c5fq4",
                "m.0bbmkh",
                "m.05zqyzp",
                "m.04j16jd",
                "m.083fl",
                "m.0r8w0dm",
                "m.051zdz6",
                "m.0v_pgt2",
                "m.02z7v8z",
                "m.0224yq",
                "m.0b44shh",
                "m.0cq7tx",
                "m.0x0gfps",
                "m.078sj4",
                "m.047myg9",
                "m.04j1_xc",
                "m.079f7l",
                "m.0czbcwb",
                "m.04j0f9m",
                "m.0fc8w8",
                "m.0b4gnw",
                "m.0k3ddp2",
                "m.04ynd_",
                "m.04g14gk",
                "m.02qqrpy",
                "m.03p_np",
                "m.03vp54",
                "m.0dgq_kn",
                "m.087623",
                "m.02qjg31",
                "m.04qgzk",
                "m.09v2wgp",
                "m.027r7k",
                "m.02w0_2l",
                "m.05zrzs1",
                "m.03y96y8",
                "m.0gh5_tc",
                "m.0rpfm51",
                "m.09db8r",
                "m.0ddgbq3",
                "m.05r1bb",
                "m.06zp5gf",
                "m.026n9yk",
                "m.09nl36",
                "m.02pgkdn",
                "m.07_7th",
                "m.0bnqf7",
                "m.065qhp",
                "m.04pmnt",
                "m.04j0ls5",
                "m.0dnn1j",
                "m.0520m52",
                "m.065tqqx",
                "m.02wz1ch",
                "m.09pyqc",
                "m.02z0nhq",
                "m.07dzb3",
                "m.010h352r",
                "m.01rwyq",
                "m.09m6kg",
                "m.0fdrns",
                "m.012wjtcf",
                "m.027c4mq",
                "m.0njcp_c",
                "m.04jdgq",
                "m.033srr",
                "m.0gzqzl",
                "m.069687",
                "m.04j0834",
                "m.04f6hpg",
                "m.03mddt9",
                "m.02r79_h",
                "m.03y8bw0",
                "m.0d6mrfb",
                "m.02z14lh",
                "m.0chdsfl",
                "m.02z0qgs",
                "m.05b5472",
                "m.0xnph63",
                "m.02xkm8r",
                "m.02q9_sn",
                "m.0crw6bn",
                "m.04gm93",
                "m.0df1tr",
                "m.05f05n",
                "m.03jsdr",
                "m.04jmkts",
                "m.0bg1bn",
                "m.0g0hgp",
                "m.04jh6fj",
                "m.02x983k",
                "m.03hhtw_",
                "m.0dgr9sj",
                "m.032xx4",
                "m.08fsq3",
                "m.0rpt56y",
                "m.0bhbwpw",
                "m.0b753df",
                "m.0bvpzw5",
                "m.08xvx8",
                "m.0b813t",
                "m.04j27vd",
                "m.0bbw1jk",
                "m.0hlpnhn",
                "m.068__1",
                "m.0bbr312",
                "m.04j1j4g",
                "m.015bpl",
                "m.07j6w",
                "m.04j2m2s",
                "m.0269yjk",
                "m.0b79dp9",
                "m.02rn00y"
            ]
        ],
        "entity_linking": {
            "Christopher Plummer": "m.01ycbq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ycbq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ycbq ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ycbq')\na.add_fact('m.01ycbq', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1005",
        "question": "what is capital city of morocco",
        "answer": [
            "m.0fs44"
        ],
        "different_answer": [
            [
                "m.0fs44"
            ]
        ],
        "entity_linking": {
            "Morocco": "m.04wgh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wgh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wgh ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04wgh')\na.add_fact('m.04wgh', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1006",
        "question": "what movies is omar epps in",
        "answer": [
            "m.02v5_g",
            "m.04j0jtp",
            "m.040btp",
            "m.08tw1f",
            "m.06q_hx",
            "m.03820v",
            "m.04jdgq",
            "m.09fgyt",
            "m.0cvcdtm",
            "m.08w51z",
            "m.033gkt",
            "m.08zjv6",
            "m.08r27j",
            "m.08487v",
            "m.05pr8b",
            "m.0456zg",
            "m.04zx33c",
            "m.03qhxn_",
            "m.08yf3q",
            "m.04j2hqm",
            "m.0c5dgvg",
            "m.09glbk",
            "m.06zl2q4"
        ],
        "different_answer": [
            [
                "m.02v5_g",
                "m.04j0jtp",
                "m.040btp",
                "m.08tw1f",
                "m.06q_hx",
                "m.03820v",
                "m.04jdgq",
                "m.09fgyt",
                "m.0cvcdtm",
                "m.08w51z",
                "m.033gkt",
                "m.08zjv6",
                "m.08r27j",
                "m.08487v",
                "m.05pr8b",
                "m.0456zg",
                "m.04zx33c",
                "m.03qhxn_",
                "m.08yf3q",
                "m.04j2hqm",
                "m.0c5dgvg",
                "m.09glbk",
                "m.06zl2q4"
            ]
        ],
        "entity_linking": {
            "Omar Epps": "m.02_tv5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_tv5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_tv5 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_tv5')\na.add_fact('m.02_tv5', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1007",
        "question": "what district does nancy pelosi represent",
        "answer": [
            "m.09d70l",
            "m.0b10j3"
        ],
        "different_answer": [
            [
                "m.09d70l",
                "m.0b10j3"
            ],
            [
                "m.09d70l",
                "m.0b10j3",
                "m.0dv6yz"
            ]
        ],
        "entity_linking": {
            "Nancy Pelosi": "m.012v1t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012v1t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012v1t ns:base.government2.elected_official.elected_positions_held ?y .\n?y ns:base.government2.elected_government_positions_held.district_represented ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012v1t')\na.add_fact('m.012v1t', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.district_represented', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1008",
        "question": "where is walton indiana",
        "answer": [
            "m.03chrxx",
            "m.03v1s",
            "m.0ntm1",
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.03chrxx",
                "m.03v1s",
                "m.0ntm1",
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Walton": "m.0skd2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0skd2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0skd2 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0skd2')\na.add_fact('m.0skd2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1009",
        "question": "where did george herbert walker bush go to college",
        "answer": [
            "m.08815"
        ],
        "different_answer": [
            [
                "m.08815"
            ]
        ],
        "entity_linking": {
            "George H. W. Bush": "m.034ls",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034ls)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034ls ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.034ls')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.034ls', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1010",
        "question": "what did bruce jenner win gold medal for",
        "answer": [
            "m.07ygntp"
        ],
        "different_answer": [
            [
                "m.07ygntp"
            ]
        ],
        "entity_linking": {
            "Caitlyn Jenner": "m.03bbdn",
            "Gold medal": "m.02lpp7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03bbdn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03bbdn ns:olympics.olympic_athlete.medals_won ?y .\n?y ns:olympics.olympic_medal_honor.event ?x .\n?y ns:olympics.olympic_medal_honor.medal ns:m.02lpp7 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lpp7')\na.add_filter('x0', '!=', 'm.03bbdn')\na.add_fact('x1', 'olympics.olympic_medal_honor.medal', 'm.02lpp7')\na.add_fact('m.03bbdn', 'olympics.olympic_athlete.medals_won', 'x1')\na.add_fact('x1', 'olympics.olympic_medal_honor.event', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1011",
        "question": "where do they speak tibetan",
        "answer": [
            "m.0f8nf",
            "m.0d05w3"
        ],
        "different_answer": [
            [
                "m.0f8nf",
                "m.0d05w3"
            ]
        ],
        "entity_linking": {
            "Standard Tibetan": "m.064r7fk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064r7fk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064r7fk ns:language.human_language.main_country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.064r7fk')\na.add_fact('m.064r7fk', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1012",
        "question": "what to do in hollywood ca this weekend",
        "answer": [
            "m.02_4ml",
            "m.031dp8",
            "m.02hksn",
            "m.0qjfl",
            "m.05qsy8",
            "m.025shr0",
            "m.029x2z",
            "m.04n2h_",
            "m.07_dsf",
            "m.050ctv"
        ],
        "different_answer": [
            [
                "m.02_4ml",
                "m.031dp8",
                "m.02hksn",
                "m.0qjfl",
                "m.05qsy8",
                "m.025shr0",
                "m.029x2z",
                "m.04n2h_",
                "m.07_dsf",
                "m.050ctv"
            ]
        ],
        "entity_linking": {
            "Hollywood": "m.0f2wj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2wj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2wj ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f2wj')\na.add_fact('m.0f2wj', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1014",
        "question": "where did kim kardashian come from",
        "answer": [
            "m.030qb3t"
        ],
        "different_answer": [
            [
                "m.030qb3t"
            ]
        ],
        "entity_linking": {
            "Kim Kardashian": "m.0261x8t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0261x8t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0261x8t ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0261x8t')\na.add_fact('m.0261x8t', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1015",
        "question": "what town did justin bieber grew up in",
        "answer": [
            "m.01gc9t",
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.01gc9t",
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w2sn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w2sn5 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w2sn5')\na.add_fact('m.06w2sn5', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1017",
        "question": "who plays charlie in the santa clause movies",
        "answer": [
            "m.0d7whx"
        ],
        "different_answer": [
            [
                "m.0d7whx"
            ]
        ],
        "entity_linking": {
            "The Santa Clause": "m.0129g2",
            "Charlie Calvin": "m.0dlsybb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0129g2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0129g2 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0dlsybb .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dlsybb')\na.add_filter('x0', '!=', 'm.0129g2')\na.add_fact('x1', 'film.performance.character', 'm.0dlsybb')\na.add_fact('m.0129g2', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1020",
        "question": "what highschool did r. kelly attend",
        "answer": [
            "m.012vtjc5"
        ],
        "different_answer": [
            [
                "m.012vtjc5"
            ]
        ],
        "entity_linking": {
            "R. Kelly": "m.0ffgh",
            "High school": "m.0bpgx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ffgh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ffgh ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:m.0bpgx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bpgx')\na.add_filter('x0', '!=', 'm.0ffgh')\na.add_fact('x0', 'education.educational_institution.school_type', 'm.0bpgx')\na.add_fact('m.0ffgh', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1021",
        "question": "what happened at benghazi",
        "answer": [
            "m.0gg5z_1",
            "m.0gj8wbw",
            "m.0136_03w",
            "m.0w1f1vz",
            "m.0m1x86k",
            "m.0n4bfmd",
            "m.0136zn1t"
        ],
        "different_answer": [
            [
                "m.0gg5z_1",
                "m.0gj8wbw",
                "m.0136_03w",
                "m.0w1f1vz",
                "m.0m1x86k",
                "m.0n4bfmd",
                "m.0136zn1t"
            ]
        ],
        "entity_linking": {
            "Benghazi": "m.01czt9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01czt9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01czt9 ns:location.location.events ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01czt9')\na.add_fact('m.01czt9', 'location.location.events', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1022",
        "question": "what country is nike based in",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Nike, Inc.": "m.0lwkh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lwkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lwkh ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lwkh')\na.add_fact('m.0lwkh', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.country', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1024",
        "question": "what kind of money do i bring to mexico",
        "answer": [
            "m.012ts8"
        ],
        "different_answer": [
            [
                "m.012ts8"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1025",
        "question": "who did steve spurrier play pro football for",
        "answer": [
            "m.07l24",
            "m.06rny"
        ],
        "different_answer": [
            [
                "m.07l24",
                "m.06rny"
            ]
        ],
        "entity_linking": {
            "Steve Spurrier": "m.03yx01",
            "Professional Sports Team": "m.044801x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03yx01)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03yx01 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:common.topic.notable_types ns:m.044801x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.044801x')\na.add_filter('x0', '!=', 'm.03yx01')\na.add_fact('x0', 'common.topic.notable_types', 'm.044801x')\na.add_fact('m.03yx01', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1027",
        "question": "where do the blackhawks play",
        "answer": [
            "m.02nshs"
        ],
        "different_answer": [
            [
                "m.02nshs"
            ]
        ],
        "entity_linking": {
            "Chicago Blackhawks": "m.0jnlm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jnlm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jnlm ns:sports.sports_team.arena_stadium ?x .\n?x ns:architecture.structure.opened ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jnlm')\na.add_fact('m.0jnlm', 'sports.sports_team.arena_stadium', 'x0')\na.add_fact('x0', 'architecture.structure.opened', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1028",
        "question": "who plays john connor",
        "answer": [
            "m.0dc87cw",
            "m.02mylf",
            "m.01wy5m",
            "m.03nnb_y",
            "m.059s7d"
        ],
        "different_answer": [
            [
                "m.0dc87cw",
                "m.02mylf",
                "m.01wy5m",
                "m.03nnb_y",
                "m.059s7d"
            ]
        ],
        "entity_linking": {
            "John Connor": "m.06nsv4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06nsv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06nsv4 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06nsv4')\na.add_fact('m.06nsv4', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1029",
        "question": "what is the main language spoken in mexico",
        "answer": [
            "m.02hxcxw",
            "m.02hwrvs",
            "m.02hwy5n",
            "m.0czdxk",
            "m.05hjc",
            "m.0h54_g",
            "m.02hww6w",
            "m.02hxp72",
            "m.04h3z9",
            "m.02hxyc2",
            "m.026cthd",
            "m.02hw_kw",
            "m.02hxls_",
            "m.02hxtxy",
            "m.0431w7",
            "m.026kljv",
            "m.0h2bky",
            "m.02hwt81",
            "m.03vsxc",
            "m.02hxsxz",
            "m.09r_m7",
            "m.0ct7sh",
            "m.0gnknr",
            "m.02hxvwd",
            "m.02hxx7m",
            "m.026rbw2",
            "m.02hxqk4",
            "m.0ct88h",
            "m.02hx1c7",
            "m.0dg033",
            "m.0h3_l3",
            "m.04n9hn",
            "m.06nm1",
            "m.02hxzhl",
            "m.02hx6hm",
            "m.0fx0n6",
            "m.0cd3rq",
            "m.0c_30_",
            "m.02hwfv0",
            "m.03525r",
            "m.02bjrlw",
            "m.02hxcp6",
            "m.02hxq91",
            "m.02hx45z",
            "m.02mz30",
            "m.01_0ct",
            "m.0952_d",
            "m.025_3fs",
            "m.026klts",
            "m.026cttd",
            "m.02hwjvf",
            "m.02hx7z3",
            "m.04h3_d",
            "m.027s7fc",
            "m.0265vht",
            "m.06yvsp",
            "m.08z862",
            "m.027mp4j"
        ],
        "different_answer": [
            [
                "m.02hxcxw",
                "m.02hwrvs",
                "m.02hwy5n",
                "m.0czdxk",
                "m.05hjc",
                "m.0h54_g",
                "m.02hww6w",
                "m.02hxp72",
                "m.04h3z9",
                "m.02hxyc2",
                "m.026cthd",
                "m.02hw_kw",
                "m.02hxls_",
                "m.02hxtxy",
                "m.0431w7",
                "m.026kljv",
                "m.0h2bky",
                "m.02hwt81",
                "m.03vsxc",
                "m.02hxsxz",
                "m.09r_m7",
                "m.0ct7sh",
                "m.0gnknr",
                "m.02hxvwd",
                "m.02hxx7m",
                "m.026rbw2",
                "m.02hxqk4",
                "m.0ct88h",
                "m.02hx1c7",
                "m.0dg033",
                "m.0h3_l3",
                "m.04n9hn",
                "m.06nm1",
                "m.02hxzhl",
                "m.02hx6hm",
                "m.0fx0n6",
                "m.0cd3rq",
                "m.0c_30_",
                "m.02hwfv0",
                "m.03525r",
                "m.02bjrlw",
                "m.02hxcp6",
                "m.02hxq91",
                "m.02hx45z",
                "m.02mz30",
                "m.01_0ct",
                "m.0952_d",
                "m.025_3fs",
                "m.026klts",
                "m.026cttd",
                "m.02hwjvf",
                "m.02hx7z3",
                "m.04h3_d",
                "m.027s7fc",
                "m.0265vht",
                "m.06yvsp",
                "m.08z862",
                "m.027mp4j"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1030",
        "question": "what are italians classified as",
        "answer": [
            "m.043_yvy",
            "m.03rkmh"
        ],
        "different_answer": [
            [
                "m.043_yvy",
                "m.03rkmh"
            ]
        ],
        "entity_linking": {
            "Italian people": "m.0222qb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0222qb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0222qb ns:people.ethnicity.included_in_group ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0222qb')\na.add_fact('m.0222qb', 'people.ethnicity.included_in_group', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1031",
        "question": "what has angelina jolie accomplished",
        "answer": [
            "m.02hrh1q",
            "m.0dxtg",
            "m.0d1pc",
            "m.02jknp",
            "m.01d_h8",
            "m.0np9r",
            "m.0kyk",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.0dxtg",
                "m.0d1pc",
                "m.02jknp",
                "m.01d_h8",
                "m.0np9r",
                "m.0kyk",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Angelina Jolie": "m.0f4vbz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f4vbz')\na.add_fact('m.0f4vbz', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1032",
        "question": "who played captain kirk in star trek movie",
        "answer": [
            "m.084m3"
        ],
        "different_answer": [
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ],
            [
                "m.084m3"
            ]
        ],
        "entity_linking": {
            "James T. Kirk": "m.0crtw",
            "Star Trek Generations": "m.06qyw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crtw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crtw ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.06qyw .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06qyw')\na.add_filter('x0', '!=', 'm.0crtw')\na.add_fact('x1', 'film.performance.film', 'm.06qyw')\na.add_fact('m.0crtw', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1033",
        "question": "who played dana scully in x files",
        "answer": [
            "m.03d_w3h"
        ],
        "different_answer": [
            [
                "m.03d_w3h"
            ]
        ],
        "entity_linking": {
            "Dana Scully": "m.022jb6",
            "The X-Files": "m.0443v1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.022jb6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.022jb6 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0443v1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0443v1')\na.add_filter('x0', '!=', 'm.022jb6')\na.add_fact('x1', 'film.performance.film', 'm.0443v1')\na.add_fact('m.022jb6', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1035",
        "question": "what was f. scott fitzgerald",
        "answer": [
            "m.0cbd2",
            "m.02xhgwq",
            "m.05z96"
        ],
        "different_answer": [
            [
                "m.0cbd2",
                "m.02xhgwq",
                "m.05z96"
            ]
        ],
        "entity_linking": {
            "F. Scott Fitzgerald": "m.02zjd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zjd ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zjd')\na.add_fact('m.02zjd', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1036",
        "question": "what is the dominant language spoken in jamaica",
        "answer": [
            "m.01428y"
        ],
        "different_answer": [
            [
                "m.01428y"
            ]
        ],
        "entity_linking": {
            "Jamaica": "m.03_r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_r3')\na.add_fact('m.03_r3', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1037",
        "question": "who is the coach for the new york knicks",
        "answer": [
            "m.04lvwk"
        ],
        "different_answer": [
            [
                "m.04lvwk"
            ]
        ],
        "entity_linking": {
            "New York Knicks": "m.0jm3v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jm3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jm3v ns:basketball.basketball_team.head_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jm3v')\na.add_fact('m.0jm3v', 'basketball.basketball_team.head_coach', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1038",
        "question": "who was wesley snipes",
        "answer": [
            "m.02hrh1q",
            "m.02wszfz",
            "m.01d_h8",
            "m.012t_z",
            "m.09l65",
            "m.02h6p92"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.02wszfz",
                "m.01d_h8",
                "m.012t_z",
                "m.09l65",
                "m.02h6p92"
            ]
        ],
        "entity_linking": {
            "Wesley Snipes": "m.02lymt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lymt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lymt ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lymt')\na.add_fact('m.02lymt', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1039",
        "question": "where does sherrod brown live",
        "answer": [
            "m.0yzw7",
            "m.0z18v"
        ],
        "different_answer": [
            [
                "m.0yzw7",
                "m.0z18v"
            ]
        ],
        "entity_linking": {
            "Sherrod Brown": "m.034s80",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034s80)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034s80 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034s80')\na.add_fact('m.034s80', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1040",
        "question": "what kind of language does colombia speak",
        "answer": [
            "m.02hwglw",
            "m.02hwl46",
            "m.02hwv8r",
            "m.02hxvjw",
            "m.02hwyr3",
            "m.05tnswp",
            "m.09gpqdh",
            "m.02hwvm1",
            "m.02hwh2x",
            "m.02hxb6s",
            "m.06nm1",
            "m.02hxds7",
            "m.02hxh5f",
            "m.02hwwxk",
            "m.02hwqrn",
            "m.02hxlpz",
            "m.03h0wpt",
            "m.02hxsy4",
            "m.01yppj",
            "m.02hwt3q",
            "m.02ppbb5",
            "m.02hxl2t",
            "m.02hwnpn",
            "m.02hwr84",
            "m.0b7mcv",
            "m.02hxz2z",
            "m.02ppbg9",
            "m.02hwxgh",
            "m.02hxb4m",
            "m.02hxs9_",
            "m.0km3ztb",
            "m.02hwl4_",
            "m.02hxssc",
            "m.02hxj6x",
            "m.02ppbnh",
            "m.02hxy6v",
            "m.02hx2q2",
            "m.02hxhrz",
            "m.02hxdd2",
            "m.02hxksk",
            "m.02hx2tn",
            "m.02hxs7q",
            "m.02hwrvb",
            "m.02hxswb",
            "m.02hxtwj",
            "m.085vdy",
            "m.02hw_7r",
            "m.02hxb1x",
            "m.09k4cp",
            "m.025syhx",
            "m.02hwv5q",
            "m.02hxnf6",
            "m.02hxxcv",
            "m.02pq8qn",
            "m.026wqvr",
            "m.02hxf1r",
            "m.07k4r10",
            "m.06gdhz",
            "m.02hx0bf",
            "m.02hx5w4",
            "m.02hwqww",
            "m.02hwnwm",
            "g.1q6h_1_4j",
            "m.02hwzgg",
            "m.02hwmth",
            "m.03w6b4",
            "m.02hxzv2",
            "m.02hxp1v",
            "m.02hwwlp",
            "m.02hwzdd",
            "m.02hxdfd",
            "m.02hxy04",
            "m.02hxv46",
            "m.08w0ky",
            "m.02hww1x",
            "m.02hwgnw",
            "m.02hwpxb",
            "m.02hwgxh",
            "m.02hx_dp",
            "m.02hxfkq",
            "m.02hxsz8",
            "m.02hx8nb",
            "m.0bm08x",
            "m.02hwqkg",
            "m.02hwzld",
            "m.02hwxg4"
        ],
        "different_answer": [
            [
                "m.02hwglw",
                "m.02hwl46",
                "m.02hwv8r",
                "m.02hxvjw",
                "m.02hwyr3",
                "m.05tnswp",
                "m.09gpqdh",
                "m.02hwvm1",
                "m.02hwh2x",
                "m.02hxb6s",
                "m.06nm1",
                "m.02hxds7",
                "m.02hxh5f",
                "m.02hwwxk",
                "m.02hwqrn",
                "m.02hxlpz",
                "m.03h0wpt",
                "m.02hxsy4",
                "m.01yppj",
                "m.02hwt3q",
                "m.02ppbb5",
                "m.02hxl2t",
                "m.02hwnpn",
                "m.02hwr84",
                "m.0b7mcv",
                "m.02hxz2z",
                "m.02ppbg9",
                "m.02hwxgh",
                "m.02hxb4m",
                "m.02hxs9_",
                "m.0km3ztb",
                "m.02hwl4_",
                "m.02hxssc",
                "m.02hxj6x",
                "m.02ppbnh",
                "m.02hxy6v",
                "m.02hx2q2",
                "m.02hxhrz",
                "m.02hxdd2",
                "m.02hxksk",
                "m.02hx2tn",
                "m.02hxs7q",
                "m.02hwrvb",
                "m.02hxswb",
                "m.02hxtwj",
                "m.085vdy",
                "m.02hw_7r",
                "m.02hxb1x",
                "m.09k4cp",
                "m.025syhx",
                "m.02hwv5q",
                "m.02hxnf6",
                "m.02hxxcv",
                "m.02pq8qn",
                "m.026wqvr",
                "m.02hxf1r",
                "m.07k4r10",
                "m.06gdhz",
                "m.02hx0bf",
                "m.02hx5w4",
                "m.02hwqww",
                "m.02hwnwm",
                "g.1q6h_1_4j",
                "m.02hwzgg",
                "m.02hwmth",
                "m.03w6b4",
                "m.02hxzv2",
                "m.02hxp1v",
                "m.02hwwlp",
                "m.02hwzdd",
                "m.02hxdfd",
                "m.02hxy04",
                "m.02hxv46",
                "m.08w0ky",
                "m.02hww1x",
                "m.02hwgnw",
                "m.02hwpxb",
                "m.02hwgxh",
                "m.02hx_dp",
                "m.02hxfkq",
                "m.02hxsz8",
                "m.02hx8nb",
                "m.0bm08x",
                "m.02hwqkg",
                "m.02hwzld",
                "m.02hwxg4"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Colombia": "m.01ls2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ls2')\na.add_fact('m.01ls2', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1041",
        "question": "what currency does england use now",
        "answer": [
            "m.01nv4h"
        ],
        "different_answer": [
            [
                "m.01nv4h"
            ],
            [
                "m.01nv4h"
            ]
        ],
        "entity_linking": {
            "England": "m.02jx1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02jx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02jx1 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02jx1')\na.add_fact('m.02jx1', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1042",
        "question": "who was the original voice of meg griffin on family guy",
        "answer": [
            "m.02k4b2"
        ],
        "different_answer": [
            [
                "m.02k4b2"
            ]
        ],
        "entity_linking": {
            "Meg Griffin": "m.035szd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035szd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035szd ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035szd')\na.add_fact('m.035szd', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1043",
        "question": "what kind of government is mali",
        "answer": [
            "m.01fpfn",
            "m.01dw03",
            "m.06cx9"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01dw03",
                "m.06cx9"
            ]
        ],
        "entity_linking": {
            "Mali": "m.04v09"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v09)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v09 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04v09')\na.add_fact('m.04v09', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1044",
        "question": "who did cristiano ronaldo play for in 2010",
        "answer": [
            "m.02rqxc",
            "m.06l22"
        ],
        "different_answer": [
            [
                "m.02rqxc",
                "m.06l22"
            ]
        ],
        "entity_linking": {
            "Cristiano Ronaldo": "m.02xt6q",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xt6q')\na.add_fact('m.02xt6q', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1045",
        "question": "what is the zip code for morgantown wv",
        "answer": [
            "m.021l1w6",
            "m.07nr9t2",
            "m.03dz41r",
            "m.07nr9tj",
            "m.07nr9sw",
            "m.03dz42b",
            "m.07nr9t9"
        ],
        "different_answer": [
            [
                "m.021l1w6",
                "m.07nr9t2",
                "m.03dz41r",
                "m.07nr9tj",
                "m.07nr9sw",
                "m.03dz42b",
                "m.07nr9t9"
            ]
        ],
        "entity_linking": {
            "Morgantown": "m.010y34"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010y34)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010y34 ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.010y34')\na.add_fact('m.010y34', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1046",
        "question": "what is jacksonville fl timezone",
        "answer": [
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Jacksonville": "m.0ggh3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ggh3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ggh3 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ggh3')\na.add_fact('m.0ggh3', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1047",
        "question": "who does amy stiller play in dodgeball",
        "answer": [
            "m.0h5kk2x"
        ],
        "different_answer": [
            [
                "m.0h5kk2x"
            ],
            [
                "m.0h5kk2x"
            ]
        ],
        "entity_linking": {
            "Amy Stiller": "m.0194r1",
            "DodgeBall: A True Underdog Story": "m.034qrh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0194r1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0194r1 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.034qrh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034qrh')\na.add_filter('x0', '!=', 'm.0194r1')\na.add_fact('x1', 'film.performance.film', 'm.034qrh')\na.add_fact('m.0194r1', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1048",
        "question": "who were king henry vii children",
        "answer": [
            "m.04_p57",
            "m.0btnbg",
            "m.0c3yxg0",
            "m.0183g3",
            "m.02p4twb",
            "m.04yss8",
            "m.03p77",
            "m.0j8jc",
            "m.05c8kk",
            "m.0j83d"
        ],
        "different_answer": [
            [
                "m.04_p57",
                "m.0btnbg",
                "m.0c3yxg0",
                "m.0183g3",
                "m.02p4twb",
                "m.04yss8",
                "m.03p77",
                "m.0j8jc",
                "m.05c8kk",
                "m.0j83d"
            ]
        ],
        "entity_linking": {
            "Henry VII of England": "m.03p6r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p6r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p6r ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03p6r')\na.add_fact('m.03p6r', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1050",
        "question": "who does mila kunis play on family guy",
        "answer": [
            "m.035szd"
        ],
        "different_answer": [
            [
                "m.035szd"
            ]
        ],
        "entity_linking": {
            "Family Guy": "m.019nnl",
            "Mila Kunis": "m.023v4_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019nnl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019nnl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:m.023v4_ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.023v4_')\na.add_filter('x0', '!=', 'm.019nnl')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'm.023v4_')\na.add_fact('m.019nnl', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1051",
        "question": "when did the san francisco earthquake occur",
        "answer": [
            "1906-04-18T05:12:00-08:00"
        ],
        "different_answer": [
            [
                "1906-04-18T05:12:00-08:00"
            ]
        ],
        "entity_linking": {
            "1906 San Francisco earthquake": "m.01f6rm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f6rm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f6rm ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01f6rm')\na.add_fact('m.01f6rm', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1052",
        "question": "who played damien in the omen 2006",
        "answer": [
            "m.05h9v7d",
            "m.0dcshy"
        ],
        "different_answer": [
            [
                "m.05h9v7d",
                "m.0dcshy"
            ]
        ],
        "entity_linking": {
            "The Omen": "m.07c5kt",
            "Damien Thorn": "m.09s4pt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07c5kt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07c5kt ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.09s4pt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09s4pt')\na.add_filter('x0', '!=', 'm.07c5kt')\na.add_fact('x1', 'film.performance.character', 'm.09s4pt')\na.add_fact('m.07c5kt', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1054",
        "question": "who played denver in four christmases",
        "answer": [
            "m.01twdk"
        ],
        "different_answer": [
            [
                "m.01twdk"
            ]
        ],
        "entity_linking": {
            "Four Christmases": "m.03gttvn",
            "Denver": "m.0zw3029"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gttvn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gttvn ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0zw3029 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0zw3029')\na.add_filter('x0', '!=', 'm.03gttvn')\na.add_fact('x1', 'film.performance.character', 'm.0zw3029')\na.add_fact('m.03gttvn', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1055",
        "question": "what to do with kids in essex",
        "answer": [
            "m.0v3bszv",
            "m.04g1431",
            "m.0fyfyd",
            "m.05zjnd",
            "m.0ff9kn",
            "m.0k6f1nc",
            "m.0k5wwrf",
            "m.0k6f1nr",
            "m.0k6f1n4",
            "m.0k6f1p1"
        ],
        "different_answer": [
            [
                "m.0v3bszv",
                "m.04g1431",
                "m.0fyfyd",
                "m.05zjnd",
                "m.0ff9kn",
                "m.0k6f1nc",
                "m.0k5wwrf",
                "m.0k6f1nr",
                "m.0k6f1n4",
                "m.0k6f1p1"
            ]
        ],
        "entity_linking": {
            "Essex": "m.02ly_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ly_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ly_ ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ly_')\na.add_fact('m.02ly_', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1056",
        "question": "who did the cleveland cavaliers draft",
        "answer": [
            "m.04bmkq",
            "m.0k0wkgy",
            "m.0f2zfl",
            "m.0kg2hkr",
            "m.03cfvqd",
            "m.0hnd33n",
            "m.01jz6d"
        ],
        "different_answer": [
            [
                "m.04bmkq",
                "m.0k0wkgy",
                "m.0f2zfl",
                "m.0kg2hkr",
                "m.03cfvqd",
                "m.0hnd33n",
                "m.01jz6d"
            ]
        ],
        "entity_linking": {
            "Cleveland Cavaliers": "m.0jm7n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jm7n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jm7n ns:sports.professional_sports_team.draft_picks ?y .\n?y ns:sports.sports_league_draft_pick.player ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jm7n')\na.add_fact('m.0jm7n', 'sports.professional_sports_team.draft_picks', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.player', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1057",
        "question": "what concentration camp did anne frank died in",
        "answer": [
            "m.0139dh"
        ],
        "different_answer": [
            [
                "m.0139dh"
            ]
        ],
        "entity_linking": {
            "Anne Frank": "m.03d9rk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d9rk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d9rk ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03d9rk')\na.add_fact('m.03d9rk', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1059",
        "question": "what language does east timor speak",
        "answer": [
            "m.03xwkt",
            "m.02h40lc",
            "m.0kc98sf",
            "m.0kc98sn",
            "m.02hwtzw",
            "m.02hxwg_",
            "m.02hxz87",
            "m.0k97dfx",
            "m.02hwsld",
            "m.097kp",
            "m.05zjd",
            "m.025t0jp",
            "m.0kc98sr",
            "m.0kc98sk",
            "m.02hxpqk",
            "m.0dss2",
            "m.02hxv_x",
            "m.063xlx",
            "m.02hwv54",
            "m.0bvt6k"
        ],
        "different_answer": [
            [
                "m.03xwkt",
                "m.02h40lc",
                "m.0kc98sf",
                "m.0kc98sn",
                "m.02hwtzw",
                "m.02hxwg_",
                "m.02hxz87",
                "m.0k97dfx",
                "m.02hwsld",
                "m.097kp",
                "m.05zjd",
                "m.025t0jp",
                "m.0kc98sr",
                "m.0kc98sk",
                "m.02hxpqk",
                "m.0dss2",
                "m.02hxv_x",
                "m.063xlx",
                "m.02hwv54",
                "m.0bvt6k"
            ],
            [
                "m.05zjd",
                "m.0dss2"
            ]
        ],
        "entity_linking": {
            "Timor-Leste": "m.02lx0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lx0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lx0 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lx0')\na.add_fact('m.02lx0', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1060",
        "question": "what is the currency in italy",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1061",
        "question": "where does greek language come from",
        "answer": [
            "m.05tk2xx"
        ],
        "different_answer": [
            [
                "m.05tk2xx"
            ]
        ],
        "entity_linking": {
            "Greek Language": "m.0349s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0349s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0349s ns:base.rosetta.languoid.parent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0349s')\na.add_fact('m.0349s', 'base.rosetta.languoid.parent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1062",
        "question": "what is the name of the currency used in italy",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1063",
        "question": "where is audrey hepburn from",
        "answer": [
            "m.06nz8h"
        ],
        "different_answer": [
            [
                "m.06nz8h"
            ]
        ],
        "entity_linking": {
            "Audrey Hepburn": "m.0dqcm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dqcm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dqcm ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dqcm')\na.add_fact('m.0dqcm', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1065",
        "question": "who does darth vaders voice",
        "answer": [
            "m.0b2l8f",
            "m.0f6_x",
            "m.0113l6zy",
            "m.0945y8",
            "m.06wm0z"
        ],
        "different_answer": [
            [
                "m.0b2l8f",
                "m.0f6_x",
                "m.0113l6zy",
                "m.0945y8",
                "m.06wm0z"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1067",
        "question": "what school did douglas macarthur go to",
        "answer": [
            "m.07x4c",
            "m.05chz5"
        ],
        "different_answer": [
            [
                "m.07x4c",
                "m.05chz5"
            ]
        ],
        "entity_linking": {
            "Douglas MacArthur": "m.0c_jc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_jc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_jc ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c_jc')\na.add_fact('m.0c_jc', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1068",
        "question": "what famous people are from barbados",
        "answer": [
            "m.0jw0s15",
            "m.010q8lnv",
            "m.052bx2",
            "m.08pv1p",
            "m.0h5b5d",
            "m.02q7q0v",
            "m.01sx302",
            "m.0kr_sj",
            "m.07bgh9",
            "m.0131l5ld",
            "m.0j3fw23",
            "m.0rqgsp0",
            "m.0gtt10v",
            "m.05vbn23",
            "m.0k8h3k5",
            "m.0j5bygf",
            "m.0j5bzrl",
            "m.03c5cr8",
            "m.0404cm7",
            "m.04qj3s",
            "g.11b7k2x4z9",
            "m.0b4rkl",
            "m.0j5bzr6",
            "m.010q858j",
            "m.010944fr",
            "m.02q3vwy",
            "m.01m_td",
            "m.0k8g_zx",
            "m.0120_tpt",
            "m.025tkwd",
            "m.0j3yfky",
            "m.04mzc8r",
            "m.0b5pgq",
            "m.0gtvcmt",
            "m.0dllk5h",
            "m.0gmdwcb",
            "m.04cwrys",
            "m.08wk6h",
            "m.01vr2hw",
            "m.04ljlgb",
            "m.0b6kq0",
            "m.0c4nk4",
            "m.0f5cw7",
            "m.0jw0g75",
            "m.03cd2zh",
            "m.0k8h3jx",
            "m.0gg3_l",
            "m.05yp45f",
            "m.0642g82",
            "m.0fhhp9",
            "m.043nldb",
            "m.0h30zg_",
            "m.0j5byh5",
            "m.0cm98yx",
            "m.0z3sh5m",
            "m.0jkx8sh",
            "m.0j3yfjg",
            "m.0s9q0ly",
            "m.087fwn",
            "m.0ch4swd",
            "m.03m5gpf",
            "m.0gc1y3",
            "m.026yx_5",
            "m.0gtxh22",
            "m.02z2pb2",
            "m.0108fxhy",
            "m.0b4pgk",
            "m.05zqm30",
            "m.026_1p7",
            "m.0k0l4zp",
            "m.08dgms",
            "m.0j5byhk",
            "m.0rqgsfc",
            "m.07mpb5",
            "m.0j5bzsb",
            "m.0bm48p",
            "m.02vwvpy",
            "m.026xq_7",
            "m.05st_5s",
            "m.02w9x1g",
            "m.0zs4kpg",
            "m.0r8q19f",
            "m.0j3yfk6",
            "m.01n9gcl",
            "m.0j5byg1",
            "m.05p12q",
            "m.07zxk1",
            "m.0_g9k3x",
            "m.05b_1p_",
            "m.04mh9r",
            "m.04y7h9y",
            "m.027m7rb",
            "m.012hswmw",
            "m.034vf3",
            "m.0kt9r7",
            "m.0gc9rb0",
            "m.05b1nny",
            "m.0d282g",
            "m.011v8dhb",
            "m.02pv7kl",
            "m.05693hn",
            "m.02rct77",
            "m.03rtck",
            "m.09zmg_",
            "m.0vn2wtq",
            "m.0h0wgc",
            "m.043jyyl",
            "m.03m73t1",
            "m.0j3yfd8",
            "m.0107zsh2",
            "m.04117kf",
            "m.0893kc",
            "m.03ypd7",
            "m.010qxhv6",
            "m.02x05p0",
            "m.09_thk",
            "m.0zb3j8s",
            "m.0rfdtlc",
            "m.04n4k80",
            "m.02qbst5",
            "m.010qdk6m",
            "m.02wz40d",
            "m.0j5b_89",
            "m.0g9cp88",
            "m.0j3yfh1",
            "m.02w111v",
            "m.011v9695",
            "m.0bgkmm",
            "m.0j3yfhr",
            "m.09gfmbm",
            "m.010r2yzx",
            "m.02qq4b0",
            "m.012fnq_t",
            "m.0cny4yb",
            "m.080k9x",
            "m.0b4ptg",
            "m.0j3yfdz",
            "m.011v60p4",
            "m.0j5byhy",
            "m.026_9br",
            "m.0pl24lc",
            "m.02qx5n1",
            "m.0rqgshn",
            "m.0c3v54p",
            "m.05x9ntq",
            "m.0j9q6zl",
            "m.05p94m0",
            "m.0b7xfc",
            "m.02r19k7",
            "m.047qgtj",
            "m.0j3wxb7",
            "m.05xcwdm",
            "m.026_9fv",
            "m.0j5byj9",
            "m.0nb45x5",
            "m.0d7lc1",
            "m.010qdlf6",
            "m.026tz62",
            "m.012fbp3v",
            "m.0gl7xv",
            "m.09rt08y",
            "m.0q3zvll",
            "m.0j3wx9s",
            "m.05zyb9w",
            "m.0wbkng2",
            "m.056yxj6",
            "m.0j4nmrl",
            "m.0j5bygt",
            "m.0xpdtfn",
            "m.08nk77",
            "m.03c9nv4",
            "m.0g8mmz",
            "m.0c7wb4",
            "m.026vzz_",
            "m.0ql6xn8",
            "m.010q998q",
            "m.0j5bzsq",
            "m.0dtr9d",
            "m.0gcbl8x",
            "m.0j5bzqv",
            "m.0j3yflp",
            "m.06z_b2",
            "m.02rs2md",
            "m.047q1c6",
            "m.09g74xf",
            "m.0w2f3c3",
            "m.0w0k1cm",
            "m.0ks4sy",
            "m.0w5vltx",
            "m.09gdd5t",
            "m.028bj87",
            "m.0j9pl_l",
            "m.05vbn2b",
            "m.026vyy9",
            "m.0131804q",
            "m.07sbtf6",
            "m.07r45s",
            "m.0gyrytx",
            "m.04zy_n7",
            "m.0j5byl5",
            "m.0j5bzt2",
            "m.02plmkt",
            "m.0j5bzrz",
            "m.0h30zh5",
            "m.0cc5g7x",
            "m.03y1rjj",
            "m.0cp0yg6",
            "m.0gnjlj",
            "m.0rqgsb9",
            "m.09n9zw",
            "m.09nb1m",
            "m.012zwmn9",
            "m.0108k30n",
            "m.02wxfxz",
            "m.065__bc",
            "m.0j3yfgl",
            "m.06yqvq",
            "m.010r2ym6",
            "m.0230n8",
            "m.011v9y2t",
            "m.07kfdb6",
            "m.047g6p6",
            "m.0j3yfm4",
            "m.0h7ml7x",
            "m.010qy9tk",
            "m.0gvs5vx",
            "m.012ccfhn",
            "m.09pdvm",
            "m.0j3yfg3",
            "m.043ld4n",
            "m.0gyty25",
            "m.08k_fp"
        ],
        "different_answer": [
            [
                "m.0jw0s15",
                "m.010q8lnv",
                "m.052bx2",
                "m.08pv1p",
                "m.0h5b5d",
                "m.02q7q0v",
                "m.01sx302",
                "m.0kr_sj",
                "m.07bgh9",
                "m.0131l5ld",
                "m.0j3fw23",
                "m.0rqgsp0",
                "m.0gtt10v",
                "m.05vbn23",
                "m.0k8h3k5",
                "m.0j5bygf",
                "m.0j5bzrl",
                "m.03c5cr8",
                "m.0404cm7",
                "m.04qj3s",
                "g.11b7k2x4z9",
                "m.0b4rkl",
                "m.0j5bzr6",
                "m.010q858j",
                "m.010944fr",
                "m.02q3vwy",
                "m.01m_td",
                "m.0k8g_zx",
                "m.0120_tpt",
                "m.025tkwd",
                "m.0j3yfky",
                "m.04mzc8r",
                "m.0b5pgq",
                "m.0gtvcmt",
                "m.0dllk5h",
                "m.0gmdwcb",
                "m.04cwrys",
                "m.08wk6h",
                "m.01vr2hw",
                "m.04ljlgb",
                "m.0b6kq0",
                "m.0c4nk4",
                "m.0f5cw7",
                "m.0jw0g75",
                "m.03cd2zh",
                "m.0k8h3jx",
                "m.0gg3_l",
                "m.05yp45f",
                "m.0642g82",
                "m.0fhhp9",
                "m.043nldb",
                "m.0h30zg_",
                "m.0j5byh5",
                "m.0cm98yx",
                "m.0z3sh5m",
                "m.0jkx8sh",
                "m.0j3yfjg",
                "m.0s9q0ly",
                "m.087fwn",
                "m.0ch4swd",
                "m.03m5gpf",
                "m.0gc1y3",
                "m.026yx_5",
                "m.0gtxh22",
                "m.02z2pb2",
                "m.0108fxhy",
                "m.0b4pgk",
                "m.05zqm30",
                "m.026_1p7",
                "m.0k0l4zp",
                "m.08dgms",
                "m.0j5byhk",
                "m.0rqgsfc",
                "m.07mpb5",
                "m.0j5bzsb",
                "m.0bm48p",
                "m.02vwvpy",
                "m.026xq_7",
                "m.05st_5s",
                "m.02w9x1g",
                "m.0zs4kpg",
                "m.0r8q19f",
                "m.0j3yfk6",
                "m.01n9gcl",
                "m.0j5byg1",
                "m.05p12q",
                "m.07zxk1",
                "m.0_g9k3x",
                "m.05b_1p_",
                "m.04mh9r",
                "m.04y7h9y",
                "m.027m7rb",
                "m.012hswmw",
                "m.034vf3",
                "m.0kt9r7",
                "m.0gc9rb0",
                "m.05b1nny",
                "m.0d282g",
                "m.011v8dhb",
                "m.02pv7kl",
                "m.05693hn",
                "m.02rct77",
                "m.03rtck",
                "m.09zmg_",
                "m.0vn2wtq",
                "m.0h0wgc",
                "m.043jyyl",
                "m.03m73t1",
                "m.0j3yfd8",
                "m.0107zsh2",
                "m.04117kf",
                "m.0893kc",
                "m.03ypd7",
                "m.010qxhv6",
                "m.02x05p0",
                "m.09_thk",
                "m.0zb3j8s",
                "m.0rfdtlc",
                "m.04n4k80",
                "m.02qbst5",
                "m.010qdk6m",
                "m.02wz40d",
                "m.0j5b_89",
                "m.0g9cp88",
                "m.0j3yfh1",
                "m.02w111v",
                "m.011v9695",
                "m.0bgkmm",
                "m.0j3yfhr",
                "m.09gfmbm",
                "m.010r2yzx",
                "m.02qq4b0",
                "m.012fnq_t",
                "m.0cny4yb",
                "m.080k9x",
                "m.0b4ptg",
                "m.0j3yfdz",
                "m.011v60p4",
                "m.0j5byhy",
                "m.026_9br",
                "m.0pl24lc",
                "m.02qx5n1",
                "m.0rqgshn",
                "m.0c3v54p",
                "m.05x9ntq",
                "m.0j9q6zl",
                "m.05p94m0",
                "m.0b7xfc",
                "m.02r19k7",
                "m.047qgtj",
                "m.0j3wxb7",
                "m.05xcwdm",
                "m.026_9fv",
                "m.0j5byj9",
                "m.0nb45x5",
                "m.0d7lc1",
                "m.010qdlf6",
                "m.026tz62",
                "m.012fbp3v",
                "m.0gl7xv",
                "m.09rt08y",
                "m.0q3zvll",
                "m.0j3wx9s",
                "m.05zyb9w",
                "m.0wbkng2",
                "m.056yxj6",
                "m.0j4nmrl",
                "m.0j5bygt",
                "m.0xpdtfn",
                "m.08nk77",
                "m.03c9nv4",
                "m.0g8mmz",
                "m.0c7wb4",
                "m.026vzz_",
                "m.0ql6xn8",
                "m.010q998q",
                "m.0j5bzsq",
                "m.0dtr9d",
                "m.0gcbl8x",
                "m.0j5bzqv",
                "m.0j3yflp",
                "m.06z_b2",
                "m.02rs2md",
                "m.047q1c6",
                "m.09g74xf",
                "m.0w2f3c3",
                "m.0w0k1cm",
                "m.0ks4sy",
                "m.0w5vltx",
                "m.09gdd5t",
                "m.028bj87",
                "m.0j9pl_l",
                "m.05vbn2b",
                "m.026vyy9",
                "m.0131804q",
                "m.07sbtf6",
                "m.07r45s",
                "m.0gyrytx",
                "m.04zy_n7",
                "m.0j5byl5",
                "m.0j5bzt2",
                "m.02plmkt",
                "m.0j5bzrz",
                "m.0h30zh5",
                "m.0cc5g7x",
                "m.03y1rjj",
                "m.0cp0yg6",
                "m.0gnjlj",
                "m.0rqgsb9",
                "m.09n9zw",
                "m.09nb1m",
                "m.012zwmn9",
                "m.0108k30n",
                "m.02wxfxz",
                "m.065__bc",
                "m.0j3yfgl",
                "m.06yqvq",
                "m.010r2ym6",
                "m.0230n8",
                "m.011v9y2t",
                "m.07kfdb6",
                "m.047g6p6",
                "m.0j3yfm4",
                "m.0h7ml7x",
                "m.010qy9tk",
                "m.0gvs5vx",
                "m.012ccfhn",
                "m.09pdvm",
                "m.0j3yfg3",
                "m.043ld4n",
                "m.0gyty25",
                "m.08k_fp"
            ]
        ],
        "entity_linking": {
            "Barbados": "m.0162v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0162v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0162v ns:location.location.people_born_here ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0162v')\na.add_fact('m.0162v', 'location.location.people_born_here', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1069",
        "question": "what is the name of the currency used in china",
        "answer": [
            "m.0hn4_"
        ],
        "different_answer": [
            [
                "m.0hn4_"
            ]
        ],
        "entity_linking": {
            "China": "m.0d05w3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05w3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05w3 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05w3')\na.add_fact('m.0d05w3', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1070",
        "question": "what are the names of michael jackson 's 3 children",
        "answer": [
            "m.065qbyj",
            "m.0598rmb",
            "m.0598rm4"
        ],
        "different_answer": [
            [
                "m.065qbyj",
                "m.0598rmb",
                "m.0598rm4"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1072",
        "question": "who is the current governor of arizona 2010",
        "answer": [
            "m.02pkb1c"
        ],
        "different_answer": [
            [
                "m.02pkb1c"
            ]
        ],
        "entity_linking": {
            "Arizona": "m.0vmt",
            "Governor": "m.0fkvn",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.0vmt')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.0vmt', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1074",
        "question": "who is lamar odom playing for this year",
        "answer": [
            "m.0jmcv",
            "m.0jmk7",
            "m.0jm3v",
            "m.0jmjr",
            "m.05s9mb"
        ],
        "different_answer": [
            [
                "m.0jmcv",
                "m.0jmk7",
                "m.0jm3v",
                "m.0jmjr",
                "m.05s9mb"
            ]
        ],
        "entity_linking": {
            "Lamar Odom": "m.02_nkp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_nkp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_nkp ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_nkp')\na.add_fact('m.02_nkp', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1075",
        "question": "where were the great pyramids of giza built",
        "answer": [
            "m.06bkmh"
        ],
        "different_answer": [
            [
                "m.06bkmh"
            ],
            [
                "m.06bkmh"
            ]
        ],
        "entity_linking": {
            "Great Pyramid of Giza": "m.036mk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036mk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036mk ns:architecture.building.building_complex ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.036mk')\na.add_fact('m.036mk', 'base.ancientegypt.pyramid.site', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1077",
        "question": "what language do the russian speak",
        "answer": [
            "m.04xqkr",
            "m.06b_j",
            "m.02lpht",
            "m.02nbbh",
            "m.02gj5b",
            "m.03gn_0",
            "m.02mj1c",
            "m.0cjk9",
            "m.017dsl",
            "m.0264gxt",
            "m.03wt_j",
            "m.02x9lm",
            "m.020g7w",
            "m.01qyqy",
            "m.02q4t0g",
            "m.019yz7",
            "m.03f3f1",
            "m.091dr6",
            "m.054zyh",
            "m.049jrm",
            "m.05l6md",
            "m.0234zj",
            "m.03klw8",
            "m.037lmh",
            "m.04rxz0",
            "m.02mxzf",
            "m.02hwm9x",
            "m.027bj_4",
            "m.01y_vl",
            "m.0198z0",
            "m.01bcw_",
            "m.093gjw",
            "m.0880p",
            "m.037nfm",
            "m.06bw_x"
        ],
        "different_answer": [
            [
                "m.04xqkr",
                "m.06b_j",
                "m.02lpht",
                "m.02nbbh",
                "m.02gj5b",
                "m.03gn_0",
                "m.02mj1c",
                "m.0cjk9",
                "m.017dsl",
                "m.0264gxt",
                "m.03wt_j",
                "m.02x9lm",
                "m.020g7w",
                "m.01qyqy",
                "m.02q4t0g",
                "m.019yz7",
                "m.03f3f1",
                "m.091dr6",
                "m.054zyh",
                "m.049jrm",
                "m.05l6md",
                "m.0234zj",
                "m.03klw8",
                "m.037lmh",
                "m.04rxz0",
                "m.02mxzf",
                "m.02hwm9x",
                "m.027bj_4",
                "m.01y_vl",
                "m.0198z0",
                "m.01bcw_",
                "m.093gjw",
                "m.0880p",
                "m.037nfm",
                "m.06bw_x"
            ],
            [
                "m.06b_j"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1078",
        "question": "what language do australia people speak",
        "answer": [
            "m.04gd7",
            "m.02jcw",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.04gd7",
                "m.02jcw",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1079",
        "question": "what country was king tut 's tomb found",
        "answer": [
            "m.02k54"
        ],
        "different_answer": [
            [
                "m.02k54"
            ]
        ],
        "entity_linking": {
            "KV62": "m.01qg6m",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qg6m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qg6m ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.01qg6m')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.01qg6m', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1080",
        "question": "where did abraham and his descendants live",
        "answer": [
            "m.0524v",
            "m.0d9f2"
        ],
        "different_answer": [
            [
                "m.0524v",
                "m.0d9f2"
            ]
        ],
        "entity_linking": {
            "Abraham": "m.0pwb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pwb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pwb ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0pwb')\na.add_fact('m.0pwb', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1081",
        "question": "where did george washington carver go to collage",
        "answer": [
            "m.03v6t",
            "m.01xssh"
        ],
        "different_answer": [
            [
                "m.03v6t",
                "m.01xssh"
            ]
        ],
        "entity_linking": {
            "George Washington Carver": "m.03djm",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03djm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03djm ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03djm')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03djm', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1082",
        "question": "what are the sports in spain",
        "answer": [
            "m.0b7611s",
            "m.08dv_k",
            "m.0dl843",
            "m.04lhy9w",
            "m.07kfw9h",
            "m.093fgz",
            "m.05s9mb",
            "m.0bklw1",
            "m.026p7n3",
            "m.03d3f5r",
            "m.0bkk7d",
            "m.03d3y56",
            "m.02w64f",
            "m.0ddl_r",
            "m.0bkln2",
            "m.03c1fqp",
            "m.08_r59",
            "m.09ctgt",
            "m.04lht1r",
            "m.0fbjwn",
            "m.0bklzm",
            "m.06w8y2x",
            "m.051zfgq"
        ],
        "different_answer": [
            [
                "m.0b7611s",
                "m.08dv_k",
                "m.0dl843",
                "m.04lhy9w",
                "m.07kfw9h",
                "m.093fgz",
                "m.05s9mb",
                "m.0bklw1",
                "m.026p7n3",
                "m.03d3f5r",
                "m.0bkk7d",
                "m.03d3y56",
                "m.02w64f",
                "m.0ddl_r",
                "m.0bkln2",
                "m.03c1fqp",
                "m.08_r59",
                "m.09ctgt",
                "m.04lht1r",
                "m.0fbjwn",
                "m.0bklzm",
                "m.06w8y2x",
                "m.051zfgq"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1083",
        "question": "where president obama was born",
        "answer": [
            "m.02hrh0_"
        ],
        "different_answer": [
            [
                "m.02hrh0_"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1084",
        "question": "what sports do people play in poland",
        "answer": [
            "m.026prdm",
            "m.025wfz7",
            "m.0dd9mps",
            "m.051zxkk",
            "m.02r6q5w",
            "m.03b6j8",
            "m.03gv21b",
            "m.037p7l",
            "m.026xnhs",
            "m.037ph0",
            "m.037p8c",
            "m.047d9d5"
        ],
        "different_answer": [
            [
                "m.026prdm",
                "m.025wfz7",
                "m.0dd9mps",
                "m.051zxkk",
                "m.02r6q5w",
                "m.03b6j8",
                "m.03gv21b",
                "m.037p7l",
                "m.026xnhs",
                "m.037ph0",
                "m.037p8c",
                "m.047d9d5"
            ]
        ],
        "entity_linking": {
            "Poland": "m.05qhw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qhw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qhw ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qhw')\na.add_fact('m.05qhw', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1085",
        "question": "who was demi lovato dating",
        "answer": [
            "m.03cg2rv",
            "m.0cq3wn",
            "m.04cr6qv"
        ],
        "different_answer": [
            [
                "m.03cg2rv",
                "m.0cq3wn",
                "m.04cr6qv"
            ],
            [
                "m.02hhtj",
                "m.04cr6qv"
            ]
        ],
        "entity_linking": {
            "Demi Lovato": "m.02wb6yq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wb6yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wb6yq ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02wb6yq')\na.add_fact('m.02wb6yq', 'base.popstra.celebrity.dated', 'x1')\na.add_fact('x1', 'base.popstra.dated.participant', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1087",
        "question": "what films has scarlett johansson been in",
        "answer": [
            "m.0g4nxzt",
            "m.03t6l4",
            "m.0125zrjx",
            "m.0dy575",
            "m.0ds1glg",
            "m.0lq6fb5",
            "m.02vdw6",
            "m.0hz07jj",
            "m.03vfr_",
            "m.0435vm",
            "m.033g39",
            "m.0fldjy",
            "m.0110nff9",
            "m.0gxbjgn",
            "m.04j1zl8",
            "m.03bzjpm",
            "m.0w1rtg8",
            "m.0jzt8tx",
            "m.0g1vcm",
            "m.0n15g8q",
            "m.0c0rz3",
            "m.01n30p",
            "m.033s0w",
            "m.06gjk9",
            "m.0gyy53",
            "m.0kd0k5k",
            "m.0w36vqd",
            "m.062zm5h",
            "m.05fmsx",
            "m.03rtz1",
            "m.0fgpvf",
            "m.04fvch",
            "m.084302",
            "m.0693hm",
            "m.02qpt1w",
            "m.05qbckf",
            "m.02rq3jq",
            "m.09jcj6",
            "m.07z6xs",
            "m.04gcw8",
            "m.01jzyf",
            "m.07l5v6",
            "m.0209xj"
        ],
        "different_answer": [
            [
                "m.0g4nxzt",
                "m.03t6l4",
                "m.0125zrjx",
                "m.0dy575",
                "m.0ds1glg",
                "m.0lq6fb5",
                "m.02vdw6",
                "m.0hz07jj",
                "m.03vfr_",
                "m.0435vm",
                "m.033g39",
                "m.0fldjy",
                "m.0110nff9",
                "m.0gxbjgn",
                "m.04j1zl8",
                "m.03bzjpm",
                "m.0w1rtg8",
                "m.0jzt8tx",
                "m.0g1vcm",
                "m.0n15g8q",
                "m.0c0rz3",
                "m.01n30p",
                "m.033s0w",
                "m.06gjk9",
                "m.0gyy53",
                "m.0kd0k5k",
                "m.0w36vqd",
                "m.062zm5h",
                "m.05fmsx",
                "m.03rtz1",
                "m.0fgpvf",
                "m.04fvch",
                "m.084302",
                "m.0693hm",
                "m.02qpt1w",
                "m.05qbckf",
                "m.02rq3jq",
                "m.09jcj6",
                "m.07z6xs",
                "m.04gcw8",
                "m.01jzyf",
                "m.07l5v6",
                "m.0209xj"
            ]
        ],
        "entity_linking": {
            "Scarlett Johansson": "m.02114t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02114t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02114t ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02114t')\na.add_fact('m.02114t', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1088",
        "question": "who originally voiced meg on family guy",
        "answer": [
            "m.02k4b2"
        ],
        "different_answer": [
            [
                "m.02k4b2"
            ]
        ],
        "entity_linking": {
            "Family Guy": "m.019nnl",
            "Meg Griffin": "m.035szd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019nnl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019nnl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.035szd .\n?y ns:tv.regular_tv_appearance.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035szd')\na.add_filter('x0', '!=', 'm.019nnl')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.035szd')\na.add_fact('m.019nnl', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1089",
        "question": "who played amy squirrel in bad teacher",
        "answer": [
            "m.025__x2"
        ],
        "different_answer": [
            [
                "m.025__x2"
            ]
        ],
        "entity_linking": {
            "Bad Teacher": "m.0cp0ph6",
            "Amy Squirrel": "m.0glzmqc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cp0ph6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cp0ph6 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0glzmqc .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0glzmqc')\na.add_filter('x0', '!=', 'm.0cp0ph6')\na.add_fact('x1', 'film.performance.character', 'm.0glzmqc')\na.add_fact('m.0cp0ph6', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1090",
        "question": "where are boeing headquarters",
        "answer": [
            "m.01_d4"
        ],
        "different_answer": [
            [
                "m.01_d4"
            ]
        ],
        "entity_linking": {
            "Boeing": "m.0178g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0178g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0178g ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0178g')\na.add_fact('m.0178g', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1091",
        "question": "what type of religions are in the united states",
        "answer": [
            "m.0kpl",
            "m.03j6c",
            "m.01lp8",
            "m.0flw86",
            "m.03_gx",
            "m.092bf5",
            "m.07w8f"
        ],
        "different_answer": [
            [
                "m.0kpl",
                "m.03j6c",
                "m.01lp8",
                "m.0flw86",
                "m.03_gx",
                "m.092bf5",
                "m.07w8f"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1092",
        "question": "who did viggo mortensen play in lord of the rings",
        "answer": [
            "m.0gwlg"
        ],
        "different_answer": [
            [
                "m.0gwlg"
            ],
            [
                "m.0gwlg"
            ],
            [
                "m.0gwlg"
            ],
            [
                "m.0gwlg"
            ],
            [
                "m.0gwlg"
            ]
        ],
        "entity_linking": {
            "Viggo Mortensen": "m.01ps2h8",
            "The Lord of the Rings: The Fellowship of the Ring": "m.017gl1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ps2h8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ps2h8 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.017gl1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.017gl1')\na.add_filter('x0', '!=', 'm.01ps2h8')\na.add_fact('x1', 'film.performance.film', 'm.017gl1')\na.add_fact('m.01ps2h8', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1094",
        "question": "who was isaac newton and what did he do",
        "answer": [
            "m.05snw",
            "m.0h9c",
            "m.06q2q",
            "m.02h6fbs",
            "m.04s2z",
            "m.01pxg"
        ],
        "different_answer": [
            [
                "m.05snw",
                "m.0h9c",
                "m.06q2q",
                "m.02h6fbs",
                "m.04s2z",
                "m.01pxg"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('m.03s9v', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1095",
        "question": "who did william shakespeare marry",
        "answer": [
            "m.03mzbg"
        ],
        "different_answer": [
            [
                "m.03mzbg"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.081k8', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1096",
        "question": "what movies queen latifah is in",
        "answer": [
            "m.03c3vl6",
            "m.016f62",
            "m.06_wqk4",
            "m.05p46dv",
            "m.0cs85c7",
            "m.0j72nq9",
            "m.027j9wd",
            "m.0j24hls",
            "m.02b5v3",
            "m.0bm2nq",
            "m.04rncw",
            "m.010p_crb",
            "m.07kbj2s",
            "m.0crw75p",
            "m.03l6q0",
            "m.0crv_pd",
            "m.0cs2r3l",
            "m.0gym9j6",
            "m.0729rh",
            "m.01yzjg",
            "m.0cs45fr",
            "g.11bc95kg2q",
            "m.054vql",
            "m.06n95j",
            "m.06fwns",
            "m.0ds27b",
            "m.0crvchf",
            "m.08w51z",
            "m.0crt91p",
            "m.02wc6sp",
            "m.02z84b3",
            "m.060p1m",
            "m.05zynv8",
            "m.03cljvq",
            "m.0fpgp26",
            "m.0v_w91n",
            "m.02ntj8",
            "m.08qsz2",
            "m.05rkmv",
            "m.01370796",
            "m.0bt3j9",
            "m.02rg6sm",
            "m.0bvpwc6",
            "m.0crxknq",
            "m.07_3vm",
            "m.0crvfd7",
            "m.0g54bw9",
            "m.0cryhb4",
            "m.01345yx_",
            "m.05bzxn0",
            "m.04f9bz6",
            "m.01cmp9",
            "m.0crw1rn",
            "m.0c3_662",
            "m.06bks2",
            "m.0kvh49",
            "m.032knp",
            "m.07nt4j",
            "m.0569lx"
        ],
        "different_answer": [
            [
                "m.03c3vl6",
                "m.016f62",
                "m.06_wqk4",
                "m.05p46dv",
                "m.0cs85c7",
                "m.0j72nq9",
                "m.027j9wd",
                "m.0j24hls",
                "m.02b5v3",
                "m.0bm2nq",
                "m.04rncw",
                "m.010p_crb",
                "m.07kbj2s",
                "m.0crw75p",
                "m.03l6q0",
                "m.0crv_pd",
                "m.0cs2r3l",
                "m.0gym9j6",
                "m.0729rh",
                "m.01yzjg",
                "m.0cs45fr",
                "g.11bc95kg2q",
                "m.054vql",
                "m.06n95j",
                "m.06fwns",
                "m.0ds27b",
                "m.0crvchf",
                "m.08w51z",
                "m.0crt91p",
                "m.02wc6sp",
                "m.02z84b3",
                "m.060p1m",
                "m.05zynv8",
                "m.03cljvq",
                "m.0fpgp26",
                "m.0v_w91n",
                "m.02ntj8",
                "m.08qsz2",
                "m.05rkmv",
                "m.01370796",
                "m.0bt3j9",
                "m.02rg6sm",
                "m.0bvpwc6",
                "m.0crxknq",
                "m.07_3vm",
                "m.0crvfd7",
                "m.0g54bw9",
                "m.0cryhb4",
                "m.01345yx_",
                "m.05bzxn0",
                "m.04f9bz6",
                "m.01cmp9",
                "m.0crw1rn",
                "m.0c3_662",
                "m.06bks2",
                "m.0kvh49",
                "m.032knp",
                "m.07nt4j",
                "m.0569lx"
            ]
        ],
        "entity_linking": {
            "Queen Latifah": "m.01wgcvn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wgcvn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wgcvn ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wgcvn')\na.add_fact('m.01wgcvn', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1097",
        "question": "where did michelle obama graduated from",
        "answer": [
            "m.05zl0",
            "m.014zws",
            "m.09rs7mx"
        ],
        "different_answer": [
            [
                "m.05zl0",
                "m.014zws",
                "m.09rs7mx"
            ]
        ],
        "entity_linking": {
            "Michelle Obama": "m.025s5v9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025s5v9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025s5v9 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025s5v9')\na.add_fact('m.025s5v9', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1098",
        "question": "what kind of music did franz liszt compose",
        "answer": [
            "m.05lls",
            "m.0ggq0m",
            "m.06q6jz",
            "m.06gk7",
            "m.0l8gh"
        ],
        "different_answer": [
            [
                "m.05lls",
                "m.0ggq0m",
                "m.06q6jz",
                "m.06gk7",
                "m.0l8gh"
            ]
        ],
        "entity_linking": {
            "Life of Franz Liszt": "m.0hqgp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqgp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqgp ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hqgp')\na.add_fact('m.0hqgp', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1099",
        "question": "what country does david luiz play for",
        "answer": [
            "m.01352_"
        ],
        "different_answer": [
            [
                "m.01352_"
            ]
        ],
        "entity_linking": {
            "David Luiz": "m.02822jq",
            "1958 FIFA World Cup": "m.0gk7g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02822jq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02822jq ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.championships ns:m.0gk7g .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gk7g')\na.add_filter('x0', '!=', 'm.02822jq')\na.add_fact('x0', 'sports.sports_team.championships', 'm.0gk7g')\na.add_fact('m.02822jq', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1100",
        "question": "what document did thomas jefferson wrote",
        "answer": [
            "m.0bhjg15",
            "m.0dv645v",
            "m.04gmpp9",
            "m.02fr4l",
            "m.06c59dv",
            "m.0c1t86c",
            "m.06gkkmm",
            "m.0c1t84p",
            "m.04t1mb3",
            "m.0c1t84s",
            "m.0dv6qxd",
            "m.0dvfqr9",
            "m.0bhjg1k",
            "m.068lc9q",
            "m.0dqzq_0",
            "m.0bhjg1v",
            "m.04t1md3",
            "m.067c9t_",
            "m.06jxy__",
            "m.06hjlhq",
            "m.04t1mdc",
            "m.0dq_qp6",
            "m.0dqvywd",
            "m.0dv8d4y",
            "m.0c1t85x",
            "m.0bqq_tq",
            "m.069qggp",
            "m.04wgv0d",
            "m.0dv6rp_",
            "m.0bqq_v2",
            "m.0dr0sf8",
            "m.0dv67qs",
            "m.06kj19r",
            "m.0dqp34k",
            "m.06fych1",
            "m.0c1t85_",
            "m.0c1t84w",
            "m.0dr13bb",
            "m.06dqc9v",
            "m.0dr1cyf",
            "m.06rmrff",
            "m.06m36qp",
            "m.06jwkq_",
            "m.0dvbxfp",
            "m.0dq_gp3",
            "m.04t1mbw",
            "m.0c1t849",
            "m.0dqt433",
            "m.0dr0vl9",
            "m.0dqzzvp",
            "m.0dv65fd",
            "m.0bhjg1y",
            "m.0c1t868",
            "m.06lq9c0",
            "m.06ltbsx",
            "m.06pqntr",
            "m.0c1t857",
            "m.06mf9v0",
            "m.04t1mcm",
            "m.0dv5_62",
            "m.0bhjg1n",
            "m.0dqzhwf",
            "m.0bhjg23",
            "m.06n7twm",
            "m.0dv6xp5",
            "m.06tvl87",
            "m.0c1t854",
            "m.06f211z",
            "m.04t1m8w",
            "m.0c1t85q",
            "m.04t1m9c",
            "m.0c1t84l",
            "m.04t1mcc",
            "m.06cmgnx",
            "m.010rzrdd",
            "m.0bhjg20",
            "m.07v5q",
            "m.0bhjg1r",
            "m.0bhjg1g",
            "m.0dr19fq",
            "m.0c1t851",
            "m.0dv9vp3",
            "m.010rn1pv",
            "m.0dv6lrt",
            "m.0c1t85m",
            "m.0bhjg0_",
            "m.04t1mbc",
            "m.04t1mcw",
            "m.010ss8d1",
            "m.0676qtd",
            "m.0dqsxfc",
            "m.06c59fv",
            "m.010r2w1j",
            "m.0bhjg18",
            "m.06m_41v",
            "m.067w8c2",
            "m.06drjxx",
            "m.06cn8cl",
            "m.06bnn32",
            "m.0c1t84z",
            "m.0dr0cgb",
            "m.0dqtgf6",
            "m.0dq_zgd",
            "m.0dr0kqv",
            "m.0c1t85b",
            "m.0dvfqrl",
            "m.0dv69pn",
            "m.06msb9t",
            "m.06bk56g",
            "m.06kq3qc",
            "m.0dqt4s1",
            "m.0c1t865",
            "m.0dq_53k",
            "m.0crw0k",
            "m.0c1t862",
            "m.0bhjg1c",
            "m.06sw8b5",
            "m.06s38_y",
            "m.0c1t85f",
            "m.0dv6ght",
            "m.0dqyfz8",
            "m.0_l_szn",
            "m.0bqq_ty",
            "m.06ng0dy",
            "m.06c3483",
            "m.0dr0pfw",
            "m.0dv5xvy",
            "m.0dqt99b",
            "m.06pr64t",
            "m.06vtcxw",
            "m.0dqz3y6",
            "m.0692hsh",
            "m.0dqx7xz",
            "m.0c1t85j",
            "m.0dvf493",
            "m.04t1mbm",
            "m.055wjd3",
            "m.06fn7pj",
            "m.06p5bnb"
        ],
        "different_answer": [
            [
                "m.0bhjg15",
                "m.0dv645v",
                "m.04gmpp9",
                "m.02fr4l",
                "m.06c59dv",
                "m.0c1t86c",
                "m.06gkkmm",
                "m.0c1t84p",
                "m.04t1mb3",
                "m.0c1t84s",
                "m.0dv6qxd",
                "m.0dvfqr9",
                "m.0bhjg1k",
                "m.068lc9q",
                "m.0dqzq_0",
                "m.0bhjg1v",
                "m.04t1md3",
                "m.067c9t_",
                "m.06jxy__",
                "m.06hjlhq",
                "m.04t1mdc",
                "m.0dq_qp6",
                "m.0dqvywd",
                "m.0dv8d4y",
                "m.0c1t85x",
                "m.0bqq_tq",
                "m.069qggp",
                "m.04wgv0d",
                "m.0dv6rp_",
                "m.0bqq_v2",
                "m.0dr0sf8",
                "m.0dv67qs",
                "m.06kj19r",
                "m.0dqp34k",
                "m.06fych1",
                "m.0c1t85_",
                "m.0c1t84w",
                "m.0dr13bb",
                "m.06dqc9v",
                "m.0dr1cyf",
                "m.06rmrff",
                "m.06m36qp",
                "m.06jwkq_",
                "m.0dvbxfp",
                "m.0dq_gp3",
                "m.04t1mbw",
                "m.0c1t849",
                "m.0dqt433",
                "m.0dr0vl9",
                "m.0dqzzvp",
                "m.0dv65fd",
                "m.0bhjg1y",
                "m.0c1t868",
                "m.06lq9c0",
                "m.06ltbsx",
                "m.06pqntr",
                "m.0c1t857",
                "m.06mf9v0",
                "m.04t1mcm",
                "m.0dv5_62",
                "m.0bhjg1n",
                "m.0dqzhwf",
                "m.0bhjg23",
                "m.06n7twm",
                "m.0dv6xp5",
                "m.06tvl87",
                "m.0c1t854",
                "m.06f211z",
                "m.04t1m8w",
                "m.0c1t85q",
                "m.04t1m9c",
                "m.0c1t84l",
                "m.04t1mcc",
                "m.06cmgnx",
                "m.010rzrdd",
                "m.0bhjg20",
                "m.07v5q",
                "m.0bhjg1r",
                "m.0bhjg1g",
                "m.0dr19fq",
                "m.0c1t851",
                "m.0dv9vp3",
                "m.010rn1pv",
                "m.0dv6lrt",
                "m.0c1t85m",
                "m.0bhjg0_",
                "m.04t1mbc",
                "m.04t1mcw",
                "m.010ss8d1",
                "m.0676qtd",
                "m.0dqsxfc",
                "m.06c59fv",
                "m.010r2w1j",
                "m.0bhjg18",
                "m.06m_41v",
                "m.067w8c2",
                "m.06drjxx",
                "m.06cn8cl",
                "m.06bnn32",
                "m.0c1t84z",
                "m.0dr0cgb",
                "m.0dqtgf6",
                "m.0dq_zgd",
                "m.0dr0kqv",
                "m.0c1t85b",
                "m.0dvfqrl",
                "m.0dv69pn",
                "m.06msb9t",
                "m.06bk56g",
                "m.06kq3qc",
                "m.0dqt4s1",
                "m.0c1t865",
                "m.0dq_53k",
                "m.0crw0k",
                "m.0c1t862",
                "m.0bhjg1c",
                "m.06sw8b5",
                "m.06s38_y",
                "m.0c1t85f",
                "m.0dv6ght",
                "m.0dqyfz8",
                "m.0_l_szn",
                "m.0bqq_ty",
                "m.06ng0dy",
                "m.06c3483",
                "m.0dr0pfw",
                "m.0dv5xvy",
                "m.0dqt99b",
                "m.06pr64t",
                "m.06vtcxw",
                "m.0dqz3y6",
                "m.0692hsh",
                "m.0dqx7xz",
                "m.0c1t85j",
                "m.0dvf493",
                "m.04t1mbm",
                "m.055wjd3",
                "m.06fn7pj",
                "m.06p5bnb"
            ]
        ],
        "entity_linking": {
            "Thomas Jefferson": "m.07cbs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07cbs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07cbs ns:book.author.works_written ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07cbs')\na.add_fact('m.07cbs', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1101",
        "question": "who is martin luther king jr facts",
        "answer": [
            "m.065qmpf",
            "m.0377kt",
            "m.0db79",
            "m.01fhsb",
            "m.010b8yqs",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.065qmpf",
                "m.0377kt",
                "m.0db79",
                "m.01fhsb",
                "m.010b8yqs",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1102",
        "question": "where is victoria british columbia",
        "answer": [
            "m.015jr",
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.015jr",
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "Victoria": "m.07ypt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ypt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ypt ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ypt')\na.add_fact('m.07ypt', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1103",
        "question": "how many mary mary sisters",
        "answer": [
            "m.05bw51f",
            "m.05bw51n"
        ],
        "different_answer": [
            [
                "m.05bw51f",
                "m.05bw51n"
            ]
        ],
        "entity_linking": {
            "Mary Mary": "m.01kq11t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kq11t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kq11t ns:music.musical_group.member ?y .\n?y ns:music.group_membership.member ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01kq11t')\na.add_fact('m.01kq11t', 'music.musical_group.member', 'x1')\na.add_fact('x1', 'music.group_membership.member', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1104",
        "question": "what do we call the currency of france",
        "answer": [
            "m.01qyjx",
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.01qyjx",
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1106",
        "question": "what team does david beckham play for in 2012",
        "answer": [
            "m.01k2yr"
        ],
        "different_answer": [
            [
                "m.01k2yr"
            ]
        ],
        "entity_linking": {
            "David Beckham": "m.02d9k",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02d9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02d9k ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2012-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2012-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02d9k')\na.add_fact('m.02d9k', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1107",
        "question": "what movies did nick cannon star in",
        "answer": [
            "m.04ybhxs",
            "m.0134yc8y",
            "m.031t2d",
            "m.09zg5d",
            "m.09flkf",
            "m.01yzvd",
            "m.02qzrt_",
            "m.07y9w5",
            "m.08_wh0",
            "m.0gj9fmj",
            "m.0c34n5",
            "m.08r4x3",
            "m.0ftc14",
            "m.0mzmnx4",
            "m.0464t_m",
            "m.07kjm8q",
            "m.07mj_0",
            "m.02rhxt_",
            "m.07pnlt",
            "m.08jml6",
            "m.043dz8"
        ],
        "different_answer": [
            [
                "m.04ybhxs",
                "m.0134yc8y",
                "m.031t2d",
                "m.09zg5d",
                "m.09flkf",
                "m.01yzvd",
                "m.02qzrt_",
                "m.07y9w5",
                "m.08_wh0",
                "m.0gj9fmj",
                "m.0c34n5",
                "m.08r4x3",
                "m.0ftc14",
                "m.0mzmnx4",
                "m.0464t_m",
                "m.07kjm8q",
                "m.07mj_0",
                "m.02rhxt_",
                "m.07pnlt",
                "m.08jml6",
                "m.043dz8"
            ]
        ],
        "entity_linking": {
            "Nick Cannon": "m.01d1st"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d1st)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d1st ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01d1st')\na.add_fact('m.01d1st', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1108",
        "question": "what radio station is npr on in nyc",
        "answer": [
            "m.01_3by"
        ],
        "different_answer": [
            [
                "m.01_3by"
            ]
        ],
        "entity_linking": {
            "NPR": "m.0c0sl",
            "New York City": "m.02_286"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0sl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0sl ns:broadcast.radio_network.affiliates ?y .\n?y ns:broadcast.radio_affiliation_duration.station ?x .\n?x ns:broadcast.broadcast.area_served ns:m.02_286 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_286')\na.add_filter('x0', '!=', 'm.0c0sl')\na.add_fact('x0', 'broadcast.broadcast.area_served', 'm.02_286')\na.add_fact('m.0c0sl', 'broadcast.radio_network.affiliates', 'x1')\na.add_fact('x1', 'broadcast.radio_affiliation_duration.station', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1109",
        "question": "who did tom landry play for",
        "answer": [
            "m.07342k",
            "m.05gg4",
            "m.0118b5s5"
        ],
        "different_answer": [
            [
                "m.07342k",
                "m.05gg4",
                "m.0118b5s5"
            ]
        ],
        "entity_linking": {
            "Tom Landry": "m.019_p3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019_p3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019_p3 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019_p3')\na.add_fact('m.019_p3', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1110",
        "question": "where was john jay born",
        "answer": [
            "m.02_286"
        ],
        "different_answer": [
            [
                "m.02_286"
            ]
        ],
        "entity_linking": {
            "John Jay": "m.046cp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.046cp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.046cp ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.046cp')\na.add_fact('m.046cp', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1111",
        "question": "where is mount fuji located",
        "answer": [
            "m.0gqgy",
            "m.0j0k",
            "m.03_3d",
            "m.02hf4r",
            "m.0g3bw"
        ],
        "different_answer": [
            [
                "m.0gqgy",
                "m.0j0k",
                "m.03_3d",
                "m.02hf4r",
                "m.0g3bw"
            ]
        ],
        "entity_linking": {
            "Mount Fuji": "m.0cks0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cks0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cks0 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cks0')\na.add_fact('m.0cks0', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1113",
        "question": "where was toussaint l'ouverture born",
        "answer": [
            "m.01f5d8"
        ],
        "different_answer": [
            [
                "m.01f5d8"
            ]
        ],
        "entity_linking": {
            "Toussaint Louverture": "m.011wgw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011wgw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011wgw ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011wgw')\na.add_fact('m.011wgw', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1114",
        "question": "what countries makes up the uk",
        "answer": [
            "m.02jx1",
            "m.05bcl",
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc",
            "UK constituent country": "m.0hzjlmp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:base.aareas.schema.administrative_area.administrative_area_type ns:m.0hzjlmp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzjlmp')\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('x0', 'base.aareas.schema.administrative_area.administrative_area_type', 'm.0hzjlmp')\na.add_fact('m.07ssc', 'base.aareas.schema.administrative_area.administrative_children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1115",
        "question": "what is lawton ok zip code",
        "answer": [
            "m.020qj55",
            "m.020qj5_",
            "m.07nqg4t",
            "m.07nqg50",
            "m.020qj4c"
        ],
        "different_answer": [
            [
                "m.020qj55",
                "m.020qj5_",
                "m.07nqg4t",
                "m.07nqg50",
                "m.020qj4c"
            ]
        ],
        "entity_linking": {
            "Lawton": "m.0z53k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0z53k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0z53k ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0z53k')\na.add_fact('m.0z53k', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1116",
        "question": "what is the capital city of spain wiki answers",
        "answer": [
            "m.056_y"
        ],
        "different_answer": [
            [
                "m.056_y"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1117",
        "question": "where do they speak german",
        "answer": [
            "m.03f2w",
            "m.01mjq",
            "m.0d060g",
            "m.0345h",
            "m.082fr",
            "m.01ppq",
            "m.07ytt",
            "m.0h7x",
            "m.04j53",
            "m.0k6nt",
            "m.06mzp",
            "m.03pn9",
            "m.0hzlz",
            "m.04g61",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.03f2w",
                "m.01mjq",
                "m.0d060g",
                "m.0345h",
                "m.082fr",
                "m.01ppq",
                "m.07ytt",
                "m.0h7x",
                "m.04j53",
                "m.0k6nt",
                "m.06mzp",
                "m.03pn9",
                "m.0hzlz",
                "m.04g61",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "German Language": "m.04306rv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04306rv')\na.add_fact('m.04306rv', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1118",
        "question": "when did mark mcgwire retired",
        "answer": [
            "m.02h7sdf"
        ],
        "different_answer": [
            [
                "m.02h7sdf"
            ],
            [
                "m.02h7sdf"
            ]
        ],
        "entity_linking": {
            "Mark McGwire": "m.0550x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0550x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0550x ns:baseball.baseball_player.lifetime_batting_statistics ?y .\n?y ns:baseball.lifetime_batting_statistics.ending_season ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0550x')\na.add_fact('m.0550x', 'baseball.baseball_player.lifetime_batting_statistics', 'x1')\na.add_fact('x1', 'baseball.lifetime_batting_statistics.ending_season', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1119",
        "question": "what is colorado technical university",
        "answer": [
            "m.01y2hnl"
        ],
        "different_answer": [
            [
                "m.01y2hnl"
            ]
        ],
        "entity_linking": {
            "Colorado Technical University": "m.0c_5g9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_5g9 ns:common.topic.notable_types ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c_5g9')\na.add_fact('m.0c_5g9', 'common.topic.notable_types', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1120",
        "question": "what was the currency used in france before the euro",
        "answer": [
            "m.01m4tk",
            "m.0298sr"
        ],
        "different_answer": [
            [
                "m.01m4tk",
                "m.0298sr"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.currency_formerly_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.country.currency_formerly_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1121",
        "question": "what is kentucky state slogan",
        "answer": [
            "m.0b0jhz"
        ],
        "different_answer": [
            [
                "m.0b0jhz"
            ]
        ],
        "entity_linking": {
            "Kentucky": "m.0498y",
            "Motto": "m.0j749"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0498y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0498y ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.0j749 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j749')\na.add_filter('x0', '!=', 'm.0498y')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.0j749')\na.add_fact('m.0498y', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1124",
        "question": "who played samantha stephens in bewitched",
        "answer": [
            "m.01x3b8"
        ],
        "different_answer": [
            [
                "m.01x3b8"
            ]
        ],
        "entity_linking": {
            "Bewitched": "m.023ny6",
            "Samantha": "m.02nrqnw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023ny6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023ny6 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.02nrqnw .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nrqnw')\na.add_filter('x0', '!=', 'm.023ny6')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.02nrqnw')\na.add_fact('m.023ny6', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1125",
        "question": "what area of science did sir isaac newton study",
        "answer": [
            "m.05snw",
            "m.0h9c",
            "m.06q2q",
            "m.02h6fbs",
            "m.04s2z",
            "m.01pxg"
        ],
        "different_answer": [
            [
                "m.05snw",
                "m.0h9c",
                "m.06q2q",
                "m.02h6fbs",
                "m.04s2z",
                "m.01pxg"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('m.03s9v', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1126",
        "question": "what county is san diego in",
        "answer": [
            "m.0l2rj"
        ],
        "different_answer": [
            [
                "m.0l2rj"
            ],
            [
                "m.0l2rj"
            ]
        ],
        "entity_linking": {
            "San Diego": "m.071vr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.071vr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.071vr ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.071vr')\na.add_fact('m.071vr', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1127",
        "question": "which country in north america is divided into provinces",
        "answer": [
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "North America": "m.059g4"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\n    ns:m.059g4 ns:location.location.contains ?x .  # North America\n    ?x ns:common.topic.notable_types ns:m.01mp . # Country\n    ?x ns:location.location.contains ?y .\n    ?y ns:common.topic.notable_types ?t . \n# All the possible \"province\" type\nFILTER ((?t = ns:m.01nm) ||\n(?t = ns:m.02_1y_9) ||\n(?t = ns:m.02_3ny_) ||\n(?t = ns:m.02_3phk) ||\n(?t = ns:m.02_3r2r) ||\n(?t = ns:m.02_3rt3) ||\n(?t = ns:m.02_3zf4) ||\n(?t = ns:m.02_40h1) ||\n(?t = ns:m.02_96lm) ||\n(?t = ns:m.02yxk5c) ||\n(?t = ns:m.02zd6yn) ||\n(?t = ns:m.03z96kq) ||\n(?t = ns:m.04g7rg9) ||\n(?t = ns:m.04js0h5) ||\n(?t = ns:m.065rjpr) ||\n(?t = ns:m.078_8dm) ||\n(?t = ns:m.0hzcb3l) ||\n(?t = ns:m.0hzcb5p) ||\n(?t = ns:m.0hzcb69) ||\n(?t = ns:m.0hzcb7p) ||\n(?t = ns:m.0hzcd76) ||\n(?t = ns:m.0hzcd7v) ||\n(?t = ns:m.0hzcdb0) ||\n(?t = ns:m.0hzcdd6) ||\n(?t = ns:m.0hzcdlq) ||\n(?t = ns:m.0hzcdmg) ||\n(?t = ns:m.0hzcdrj) ||\n(?t = ns:m.0hzcdzg) ||\n(?t = ns:m.0hzcdzv) ||\n(?t = ns:m.0hzcf4d) ||\n(?t = ns:m.0hzcf50) ||\n(?t = ns:m.0hzcfdx) ||\n(?t = ns:m.0hzcffv) ||\n(?t = ns:m.0hzcfgg) ||\n(?t = ns:m.0hzcfj0) ||\n(?t = ns:m.0hzcfm2) ||\n(?t = ns:m.0hzcfpz) ||\n(?t = ns:m.0hzcfsv) ||\n(?t = ns:m.0hzcfyb) ||\n(?t = ns:m.0hzcg20) ||\n(?t = ns:m.0hzcg90) ||\n(?t = ns:m.0hzcgdz) ||\n(?t = ns:m.0hzcgfl) ||\n(?t = ns:m.0hzcggv) ||\n(?t = ns:m.0hzcgj2) ||\n(?t = ns:m.0hzcgk4) ||\n(?t = ns:m.0hzcgny) ||\n(?t = ns:m.0hzcgqt) ||\n(?t = ns:m.0hzcgsp) ||\n(?t = ns:m.0hzcgvh) ||\n(?t = ns:m.0hzcgvw) ||\n(?t = ns:m.0hzcgxf) ||\n(?t = ns:m.0hzcjv6) ||\n(?t = ns:m.0hzcjvv) ||\n(?t = ns:m.0hzcjxq) ||\n(?t = ns:m.0hzck_1) ||\n(?t = ns:m.0hzck1r) ||\n(?t = ns:m.0hzck47) ||\n(?t = ns:m.0hzck7p) ||\n(?t = ns:m.0hzckbh) ||\n(?t = ns:m.0hzckgc) ||\n(?t = ns:m.0hzcklh) ||\n(?t = ns:m.0hzckv_) ||\n(?t = ns:m.0hzckvp) ||\n(?t = ns:m.0hzckwy) ||\n(?t = ns:m.0hzcl1k) ||\n(?t = ns:m.0hzcl2t) ||\n(?t = ns:m.0hzfxh6) ||\n(?t = ns:m.0hzfxjh) ||\n(?t = ns:m.0hzfxny) ||\n(?t = ns:m.0hzfxv1) ||\n(?t = ns:m.0hzfxx7) ||\n(?t = ns:m.0hzfxzs) ||\n(?t = ns:m.0hzfy0d) ||\n(?t = ns:m.0hz_gjz) ||\n(?t = ns:m.0hzjldq) ||\n(?t = ns:m.0hzjm9b) ||\n(?t = ns:m.0hzjmf9) ||\n(?t = ns:m.0hzjmjf) ||\n(?t = ns:m.0hzjmlj) ||\n(?t = ns:m.0hzjmm6) ||\n(?t = ns:m.0hzjmmx) ||\n(?t = ns:m.0j1zd59) ||\n(?t = ns:m.0j1zd5w) )\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1130",
        "question": "what is real name of santa claus",
        "answer": [
            "m.0f9q7"
        ],
        "different_answer": [
            [
                "m.0f9q7"
            ]
        ],
        "entity_linking": {
            "Santa Claus": "m.027g6wt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027g6wt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027g6wt ns:fictional_universe.fictional_character.based_on ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027g6wt')\na.add_fact('m.027g6wt', 'fictional_universe.fictional_character.based_on', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1131",
        "question": "when did kelly slater go pro",
        "answer": [
            "1990-08:00"
        ],
        "different_answer": [
            [
                "1990-08:00"
            ]
        ],
        "entity_linking": {
            "Kelly Slater": "m.028nb1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.028nb1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.028nb1 ns:sports.pro_athlete.sports_played_professionally ?y .\n?y ns:sports.pro_sports_played.career_start ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.028nb1')\na.add_fact('m.028nb1', 'sports.pro_athlete.sports_played_professionally', 'x1')\na.add_fact('x1', 'sports.pro_sports_played.career_start', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1132",
        "question": "what did coretta scott king died from",
        "answer": [
            "m.019dmc"
        ],
        "different_answer": [
            [
                "m.019dmc"
            ]
        ],
        "entity_linking": {
            "Coretta Scott King": "m.0289jv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0289jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0289jv ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0289jv')\na.add_fact('m.0289jv', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1133",
        "question": "what does wh smith stand for",
        "answer": [
            "m.013_kt"
        ],
        "different_answer": [
            [
                "m.013_kt"
            ]
        ],
        "entity_linking": {
            "William Henry Smith": "m.04sxlr"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ?x ns:common.topic.alias \"W H Smith\"@en .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1135",
        "question": "who was vp for nixon",
        "answer": [
            "m.09r62",
            "m.0c_md_"
        ],
        "different_answer": [
            [
                "m.09r62",
                "m.0c_md_"
            ]
        ],
        "entity_linking": {
            "Richard Nixon": "m.06c97"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06c97')\na.add_fact('m.06c97', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1136",
        "question": "what religion did adolf hitler follow",
        "answer": [
            "m.0c8wxp",
            "m.01lp8"
        ],
        "different_answer": [
            [
                "m.0c8wxp",
                "m.01lp8"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.person.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'people.person.religion', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1137",
        "question": "where is the illinois river on a map",
        "answer": [
            "m.059g4",
            "m.03v0t",
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.059g4",
                "m.03v0t",
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Illinois River": "m.0j1qb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j1qb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j1qb ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j1qb')\na.add_fact('m.0j1qb', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1138",
        "question": "where honduras in the world",
        "answer": [
            "m.059g4",
            "m.04pnx",
            "m.07c5l",
            "m.01tzh"
        ],
        "different_answer": [
            [
                "m.059g4",
                "m.04pnx",
                "m.07c5l",
                "m.01tzh"
            ]
        ],
        "entity_linking": {
            "Honduras": "m.03h2c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h2c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h2c ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03h2c')\na.add_fact('m.03h2c', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1142",
        "question": "who does ronaldinho play for now 2011",
        "answer": [
            "m.019lty",
            "m.01352_"
        ],
        "different_answer": [
            [
                "m.019lty",
                "m.01352_"
            ]
        ],
        "entity_linking": {
            "Ronaldinho": "m.02lfw5",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lfw5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lfw5 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lfw5')\na.add_fact('m.02lfw5', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1143",
        "question": "what galileo galilei was famous for",
        "answer": [
            "m.06p5g",
            "m.0hggs",
            "m.01kf8z"
        ],
        "different_answer": [
            [
                "m.06p5g",
                "m.0hggs",
                "m.01kf8z"
            ]
        ],
        "entity_linking": {
            "Galileo Galilei": "m.034ks"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034ks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034ks ns:user.lindenb.default_domain.scientist.known_for ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034ks')\na.add_fact('m.034ks', 'user.lindenb.default_domain.scientist.known_for', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1144",
        "question": "what are the major trading partners of germany",
        "answer": [
            "m.07fsv",
            "m.016zwt",
            "m.06q1r",
            "m.0l3h",
            "m.0jdx",
            "m.04sj3",
            "m.0jdd",
            "m.09c7w0",
            "m.07dzf",
            "m.0h3y"
        ],
        "different_answer": [
            [
                "m.07fsv",
                "m.016zwt",
                "m.06q1r",
                "m.0l3h",
                "m.0jdx",
                "m.04sj3",
                "m.0jdd",
                "m.09c7w0",
                "m.07dzf",
                "m.0h3y"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\n\tFILTER (?x != ns:m.0345h)\n\t{ \n\t  ns:m.0345h ns:location.statistical_region.places_exported_to ?y .\n\t  ?y ns:location.imports_and_exports.exported_to ?x . \n\t}\n\tUNION\n\t{\n\t  ns:m.0345h ns:location.statistical_region.places_imported_from ?y .\n\t  ?y ns:location.imports_and_exports.imported_from ?x . \n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1145",
        "question": "where did romney graduated college",
        "answer": [
            "m.0l2tk"
        ],
        "different_answer": [
            [
                "m.0l2tk"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s",
            "Bachelor of Arts": "m.014mlp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.014mlp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014mlp')\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('x1', 'education.education.degree', 'm.014mlp')\na.add_fact('m.0271_s', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1146",
        "question": "who did johnny depp play in corpse bride",
        "answer": [
            "m.04fllb9"
        ],
        "different_answer": [
            [
                "m.04fllb9"
            ],
            [
                "m.04fllb9"
            ]
        ],
        "entity_linking": {
            "Johnny Depp": "m.0jfx1",
            "Corpse Bride": "m.050xxm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jfx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jfx1 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.050xxm .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.050xxm')\na.add_filter('x0', '!=', 'm.0jfx1')\na.add_fact('x1', 'film.performance.film', 'm.050xxm')\na.add_fact('m.0jfx1', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1147",
        "question": "what is the zip code for jonesboro ar",
        "answer": [
            "m.01z45mm",
            "m.01z4426",
            "m.01z4433",
            "m.07nqgrr"
        ],
        "different_answer": [
            [
                "m.01z45mm",
                "m.01z4426",
                "m.01z4433",
                "m.07nqgrr"
            ]
        ],
        "entity_linking": {
            "Jonesboro": "m.0qskp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qskp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qskp ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qskp')\na.add_fact('m.0qskp', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1148",
        "question": "what college did se hinton go",
        "answer": [
            "m.07w3r"
        ],
        "different_answer": [
            [
                "m.07w3r"
            ]
        ],
        "entity_linking": {
            "S. E. Hinton": "m.01_fz1",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_fz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_fz1 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01_fz1')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01_fz1', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1149",
        "question": "when was taylor swift fearless tour",
        "answer": [
            "2009-04-23-08:00"
        ],
        "different_answer": [
            [
                "2009-04-23-08:00"
            ]
        ],
        "entity_linking": {
            "Fearless Tour": "m.06w493d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06w493d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06w493d ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06w493d')\na.add_fact('m.06w493d', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1151",
        "question": "where did charles darwin and his wife live",
        "answer": [
            "m.02jx1",
            "m.0235n9",
            "m.030r7l4",
            "m.04jpl"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.0235n9",
                "m.030r7l4",
                "m.04jpl"
            ]
        ],
        "entity_linking": {
            "Charles Darwin": "m.01lwx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01lwx')\na.add_fact('m.01lwx', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1152",
        "question": "who is the voice of kitt",
        "answer": [
            "m.0309r1"
        ],
        "different_answer": [
            [
                "m.0309r1"
            ]
        ],
        "entity_linking": {
            "KITT": "m.05_bhx",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_bhx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_bhx ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.05_bhx')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.05_bhx', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1153",
        "question": "what is eminem 's real full name",
        "answer": [
            "Marshall Bruce Mathers III"
        ],
        "different_answer": [
            [
                "Marshall Bruce Mathers III"
            ]
        ],
        "entity_linking": {
            "Eminem": "m.01vsgrn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vsgrn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vsgrn ns:base.schemastaging.context_name.official_name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vsgrn')\na.add_fact('m.01vsgrn', 'base.schemastaging.context_name.official_name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1154",
        "question": "who is amy grant 's first husband",
        "answer": [
            "m.01m4rtc"
        ],
        "different_answer": [
            [
                "m.01m4rtc"
            ]
        ],
        "entity_linking": {
            "Amy Grant": "m.010hn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010hn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010hn ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.010hn')\na.add_fact('m.010hn', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1155",
        "question": "what are the seven nations of central america",
        "answer": [
            "m.0345_",
            "m.0dkz7x",
            "m.01p8s",
            "m.03h2c",
            "m.05qx1",
            "m.02k8k",
            "m.0164b"
        ],
        "different_answer": [
            [
                "m.0345_",
                "m.0dkz7x",
                "m.01p8s",
                "m.03h2c",
                "m.05qx1",
                "m.02k8k",
                "m.0164b"
            ]
        ],
        "entity_linking": {
            "Central America": "m.01tzh",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tzh ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.01tzh')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.01tzh', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1156",
        "question": "what is jamie spears baby name",
        "answer": [
            "m.07zq7jk"
        ],
        "different_answer": [
            [
                "m.07zq7jk"
            ]
        ],
        "entity_linking": {
            "Jamie Lynn Spears": "m.0p52s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p52s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p52s ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0p52s')\na.add_fact('m.0p52s', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1160",
        "question": "who is the mother of prince michael jackson",
        "answer": [
            "m.0524pr"
        ],
        "different_answer": [
            [
                "m.0524pr"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.09889g', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1161",
        "question": "what is the clemson mascot name",
        "answer": [
            "m.05h9xpr",
            "m.02nv3yz"
        ],
        "different_answer": [
            [
                "m.05h9xpr",
                "m.02nv3yz"
            ]
        ],
        "entity_linking": {
            "Clemson University": "m.012vwb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012vwb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012vwb ns:education.educational_institution.mascot ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012vwb')\na.add_fact('m.012vwb', 'education.educational_institution.mascot', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1163",
        "question": "what rainforest is in south america",
        "answer": [
            "m.0cx4p"
        ],
        "different_answer": [
            [
                "m.0cx4p"
            ]
        ],
        "entity_linking": {
            "South America": "m.06n3y",
            "Forest": "m.02zr8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06n3y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06n3y ns:location.location.contains ?x .\n?x ns:geography.geographical_feature.category ns:m.02zr8 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zr8')\na.add_filter('x0', '!=', 'm.06n3y')\na.add_fact('x0', 'geography.geographical_feature.category', 'm.02zr8')\na.add_fact('m.06n3y', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1164",
        "question": "what type of art does claude monet do",
        "answer": [
            "m.015r61",
            "m.03xj1"
        ],
        "different_answer": [
            [
                "m.015r61",
                "m.03xj1"
            ]
        ],
        "entity_linking": {
            "Claude Monet": "m.01xnj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01xnj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01xnj ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xnj')\na.add_fact('m.01xnj', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1166",
        "question": "when did we start war with iraq",
        "answer": [
            "2003-03-20-08:00"
        ],
        "different_answer": [
            [
                "2003-03-20-08:00"
            ]
        ],
        "entity_linking": {
            "Iraq War": "m.0d06vc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d06vc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d06vc ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d06vc')\na.add_fact('m.0d06vc', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1168",
        "question": "what guitar did kurt cobain",
        "answer": [
            "m.047q4j"
        ],
        "different_answer": [
            [
                "m.047q4j"
            ]
        ],
        "entity_linking": {
            "Kurt Cobain": "m.0484q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0484q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0484q ns:music.guitarist.guitars_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0484q')\na.add_fact('m.0484q', 'music.guitarist.guitars_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1169",
        "question": "who did jennifer lawrence play in x men",
        "answer": [
            "m.01jf3m"
        ],
        "different_answer": [
            [
                "m.01jf3m"
            ]
        ],
        "entity_linking": {
            "Jennifer Lawrence": "m.02x0dzw",
            "X-Men: Days of Future Past": "m.0r3r5jz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02x0dzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02x0dzw ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0r3r5jz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0r3r5jz')\na.add_filter('x0', '!=', 'm.02x0dzw')\na.add_fact('x1', 'film.performance.film', 'm.0r3r5jz')\na.add_fact('m.02x0dzw', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1170",
        "question": "who is the governor of virginia 2011",
        "answer": [
            "m.09dvvy"
        ],
        "different_answer": [
            [
                "m.09dvvy"
            ]
        ],
        "entity_linking": {
            "Virginia": "m.07z1m",
            "Governor": "m.0fkvn",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07z1m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07z1m ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.07z1m')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.07z1m', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1171",
        "question": "who did darth vaders voice",
        "answer": [
            "m.0b2l8f",
            "m.0f6_x",
            "m.0113l6zy",
            "m.0945y8",
            "m.06wm0z"
        ],
        "different_answer": [
            [
                "m.0b2l8f",
                "m.0f6_x",
                "m.0113l6zy",
                "m.0945y8",
                "m.06wm0z"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1173",
        "question": "where is walton county ga",
        "answer": [
            "m.0d0x8",
            "m.06kt1_8"
        ],
        "different_answer": [
            [
                "m.0d0x8",
                "m.06kt1_8"
            ]
        ],
        "entity_linking": {
            "Walton County": "m.0nym5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nym5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nym5 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0nym5')\na.add_fact('m.0nym5', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1174",
        "question": "what cancer did jackie kennedy die of",
        "answer": [
            "m.0jdk0"
        ],
        "different_answer": [
            [
                "m.0jdk0"
            ]
        ],
        "entity_linking": {
            "Jacqueline Kennedy Onassis": "m.0h6mq",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h6mq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h6mq ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.0h6mq')\na.add_fact('x0', 'medicine.disease.parent_disease', 'm.0qcr0')\na.add_fact('m.0h6mq', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1175",
        "question": "what does lauren conrad major in",
        "answer": [
            "m.02qqd4n"
        ],
        "different_answer": [
            [
                "m.02qqd4n"
            ]
        ],
        "entity_linking": {
            "Lauren Conrad": "m.0dq9wx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dq9wx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dq9wx ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dq9wx')\na.add_fact('m.0dq9wx', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.major_field_of_study', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1176",
        "question": "what time zone is pennsylvania in right now",
        "answer": [
            "m.02_37z",
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02_37z",
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Pennsylvania": "m.05tbn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05tbn')\na.add_fact('m.05tbn', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1177",
        "question": "where did mario lopez go to school",
        "answer": [
            "m.0h0sx6"
        ],
        "different_answer": [
            [
                "m.0h0sx6"
            ]
        ],
        "entity_linking": {
            "Mario Lopez": "m.02w5q6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02w5q6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02w5q6 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02w5q6')\na.add_fact('m.02w5q6', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1178",
        "question": "where is tupac from originally",
        "answer": [
            "m.02cx_2"
        ],
        "different_answer": [
            [
                "m.02cx_2"
            ]
        ],
        "entity_linking": {
            "Tupac Shakur": "m.07pzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07pzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07pzc ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07pzc')\na.add_fact('m.07pzc', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1179",
        "question": "what role did george lucas play in star wars",
        "answer": [
            "m.02nwmq1"
        ],
        "different_answer": [
            [
                "m.02nwmq1"
            ]
        ],
        "entity_linking": {
            "George Lucas": "m.0343h",
            "Star Wars Episode III: Revenge of the Sith": "m.0fdv3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0343h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0343h ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0fdv3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fdv3')\na.add_filter('x0', '!=', 'm.0343h')\na.add_fact('x1', 'film.performance.film', 'm.0fdv3')\na.add_fact('m.0343h', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1180",
        "question": "what sarah dessen books are movies",
        "answer": [
            "m.04y364"
        ],
        "different_answer": [
            [
                "m.04y364"
            ]
        ],
        "entity_linking": {
            "Sarah Dessen": "m.052s_8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052s_8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052s_8 ns:film.film_story_contributor.film_story_credits ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.052s_8')\na.add_fact('m.052s_8', 'film.film_story_contributor.film_story_credits', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1181",
        "question": "what is the current time in kauai hawaii",
        "answer": [
            "m.02lctm"
        ],
        "different_answer": [
            [
                "m.02lctm"
            ],
            [
                "m.02lctm"
            ],
            [
                "m.02lctm"
            ],
            [
                "m.02lctm"
            ],
            [
                "m.02lctm"
            ]
        ],
        "entity_linking": {
            "Hawaii": "m.03gh4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gh4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gh4 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03gh4')\na.add_fact('m.03gh4', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1183",
        "question": "where was farrah fawcett buried",
        "answer": [
            "m.018mm4"
        ],
        "different_answer": [
            [
                "m.018mm4"
            ]
        ],
        "entity_linking": {
            "Farrah Fawcett": "m.01j851"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01j851)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01j851 ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01j851')\na.add_fact('m.01j851', 'people.deceased_person.place_of_burial', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1185",
        "question": "what inspired steinbeck",
        "answer": [
            "m.023jy9",
            "m.07jrh",
            "m.084w8",
            "m.09482"
        ],
        "different_answer": [
            [
                "m.023jy9",
                "m.07jrh",
                "m.084w8",
                "m.09482"
            ]
        ],
        "entity_linking": {
            "John Steinbeck": "m.04107"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04107)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04107 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04107')\na.add_fact('m.04107', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1186",
        "question": "what kind of government does cuba have today",
        "answer": [
            "m.01fpfn",
            "m.01dw03",
            "m.025tbxf",
            "m.06cx9"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01dw03",
                "m.025tbxf",
                "m.06cx9"
            ]
        ],
        "entity_linking": {
            "Cuba": "m.0d04z6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d04z6')\na.add_fact('m.0d04z6', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1187",
        "question": "where are english speakers distributed",
        "answer": [
            "m.01nln",
            "m.06ryl",
            "m.06t2t",
            "m.065skb",
            "m.07fsv",
            "m.019rg5",
            "m.06m_5",
            "m.0l3h",
            "m.04hhv",
            "m.027nb",
            "m.06dfg",
            "m.035dk",
            "m.0164b",
            "m.04hvw",
            "m.09wfqp",
            "m.04v6v",
            "m.0d05w3",
            "m.03h2c",
            "m.0165b",
            "m.05qkp",
            "m.02lx0",
            "m.03rt9",
            "m.03rk0",
            "m.07dzf",
            "m.034tl",
            "m.05v8c",
            "m.088q4",
            "m.0hdx8",
            "m.07tp2",
            "m.07ytt",
            "m.0rdr4",
            "m.04v3q",
            "m.0160w",
            "m.047t_",
            "m.03__y",
            "m.05sb1",
            "m.035yg",
            "m.020p1",
            "m.01k0p4",
            "m.05bmq",
            "m.06s0l",
            "m.035hm",
            "m.06s9y",
            "m.026wtlf",
            "m.0j5g9",
            "m.04wcf",
            "m.02wt0",
            "m.0ctw_b",
            "m.0167v",
            "m.03t1s",
            "m.0162b",
            "m.07ssc",
            "m.05r7t",
            "m.06v36",
            "m.03_3d",
            "m.02jx1",
            "m.03ryn",
            "m.04hzj",
            "m.06s6l",
            "m.06tw8",
            "m.09pmkv",
            "m.03spz",
            "m.01nty",
            "m.019pcs",
            "m.01ppq",
            "m.0hbgh",
            "m.035hr8",
            "m.05br2",
            "m.0697s",
            "m.034m8",
            "m.07z5n",
            "m.0h44w",
            "m.0166v",
            "m.0d060g",
            "m.07fr_",
            "m.0162v",
            "m.016p5p",
            "m.03_xj",
            "m.06s_2",
            "m.0chghy",
            "m.088vb",
            "m.05cgv",
            "m.03h64",
            "m.0hzlz",
            "m.07f9q"
        ],
        "different_answer": [
            [
                "m.01nln",
                "m.06ryl",
                "m.06t2t",
                "m.065skb",
                "m.07fsv",
                "m.019rg5",
                "m.06m_5",
                "m.0l3h",
                "m.04hhv",
                "m.027nb",
                "m.06dfg",
                "m.035dk",
                "m.0164b",
                "m.04hvw",
                "m.09wfqp",
                "m.04v6v",
                "m.0d05w3",
                "m.03h2c",
                "m.0165b",
                "m.05qkp",
                "m.02lx0",
                "m.03rt9",
                "m.03rk0",
                "m.07dzf",
                "m.034tl",
                "m.05v8c",
                "m.088q4",
                "m.0hdx8",
                "m.07tp2",
                "m.07ytt",
                "m.0rdr4",
                "m.04v3q",
                "m.0160w",
                "m.047t_",
                "m.03__y",
                "m.05sb1",
                "m.035yg",
                "m.020p1",
                "m.01k0p4",
                "m.05bmq",
                "m.06s0l",
                "m.035hm",
                "m.06s9y",
                "m.026wtlf",
                "m.0j5g9",
                "m.04wcf",
                "m.02wt0",
                "m.0ctw_b",
                "m.0167v",
                "m.03t1s",
                "m.0162b",
                "m.07ssc",
                "m.05r7t",
                "m.06v36",
                "m.03_3d",
                "m.02jx1",
                "m.03ryn",
                "m.04hzj",
                "m.06s6l",
                "m.06tw8",
                "m.09pmkv",
                "m.03spz",
                "m.01nty",
                "m.019pcs",
                "m.01ppq",
                "m.0hbgh",
                "m.035hr8",
                "m.05br2",
                "m.0697s",
                "m.034m8",
                "m.07z5n",
                "m.0h44w",
                "m.0166v",
                "m.0d060g",
                "m.07fr_",
                "m.0162v",
                "m.016p5p",
                "m.03_xj",
                "m.06s_2",
                "m.0chghy",
                "m.088vb",
                "m.05cgv",
                "m.03h64",
                "m.0hzlz",
                "m.07f9q"
            ],
            [
                "m.0d060g",
                "m.03rt9",
                "m.09c7w0",
                "m.014tss",
                "m.07ssc",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1189",
        "question": "what is the capital of italy today",
        "answer": [
            "m.06c62"
        ],
        "different_answer": [
            [
                "m.06c62"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1191",
        "question": "what language do people speak in the bahamas",
        "answer": [
            "m.026qjbs",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.026qjbs",
                "m.02h40lc"
            ],
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Bahamas": "m.0160w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0160w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0160w ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0160w')\na.add_fact('m.0160w', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1192",
        "question": "where did george michael go to school",
        "answer": [
            "m.0dhpcf"
        ],
        "different_answer": [
            [
                "m.0dhpcf"
            ]
        ],
        "entity_linking": {
            "George Michael": "m.01vvyfh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvyfh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvyfh ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vvyfh')\na.add_fact('m.01vvyfh', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1194",
        "question": "what club does cristiano ronaldo play for in 2010",
        "answer": [
            "m.02rqxc",
            "m.06l22"
        ],
        "different_answer": [
            [
                "m.02rqxc",
                "m.06l22"
            ]
        ],
        "entity_linking": {
            "Cristiano Ronaldo": "m.02xt6q",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xt6q')\na.add_fact('m.02xt6q', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1195",
        "question": "what time zone is in the bahamas",
        "answer": [
            "m.02_37z",
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02_37z",
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Bahamas": "m.0160w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0160w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0160w ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0160w')\na.add_fact('m.0160w', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1197",
        "question": "what language do people speak in brazil",
        "answer": [
            "m.05zjd",
            "m.02bjrlw",
            "m.02zj58"
        ],
        "different_answer": [
            [
                "m.05zjd",
                "m.02bjrlw",
                "m.02zj58"
            ],
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1198",
        "question": "who influenced samuel taylor coleridge",
        "answer": [
            "m.0448r",
            "m.017m4j",
            "m.09482",
            "m.0182w0",
            "m.03sbs",
            "m.081k8",
            "m.0nld",
            "m.015n8",
            "m.015_hb",
            "m.01gnng"
        ],
        "different_answer": [
            [
                "m.0448r",
                "m.017m4j",
                "m.09482",
                "m.0182w0",
                "m.03sbs",
                "m.081k8",
                "m.0nld",
                "m.015n8",
                "m.015_hb",
                "m.01gnng"
            ]
        ],
        "entity_linking": {
            "Samuel Taylor Coleridge": "m.078w2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.078w2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.078w2 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.078w2')\na.add_fact('m.078w2', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1199",
        "question": "what does kim kardashian work as",
        "answer": [
            "m.02hrh1q",
            "m.03gkb0",
            "m.0d1pc",
            "m.02hqyhw",
            "m.0dypbr",
            "m.03gjzk",
            "m.012t_z",
            "m.09x_r"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.03gkb0",
                "m.0d1pc",
                "m.02hqyhw",
                "m.0dypbr",
                "m.03gjzk",
                "m.012t_z",
                "m.09x_r"
            ]
        ],
        "entity_linking": {
            "Kim Kardashian": "m.0261x8t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0261x8t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0261x8t ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0261x8t')\na.add_fact('m.0261x8t', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1200",
        "question": "where did the mississippi river end",
        "answer": [
            "m.03f_9"
        ],
        "different_answer": [
            [
                "m.03f_9"
            ]
        ],
        "entity_linking": {
            "Mississippi River": "m.04yf_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04yf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04yf_ ns:geography.river.mouth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04yf_')\na.add_fact('m.04yf_', 'geography.river.mouth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1201",
        "question": "who played carlton lassiter on psych",
        "answer": [
            "m.0f8yw1"
        ],
        "different_answer": [
            [
                "m.0f8yw1"
            ]
        ],
        "entity_linking": {
            "Psych": "m.0ds5jv",
            "Carlton Lassiter": "m.0fdxxb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ds5jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ds5jv ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0fdxxb .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fdxxb')\na.add_filter('x0', '!=', 'm.0ds5jv')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.0fdxxb')\na.add_fact('m.0ds5jv', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1203",
        "question": "who is president of israel",
        "answer": [
            "m.074knq"
        ],
        "different_answer": [
            [
                "m.074knq"
            ]
        ],
        "entity_linking": {
            "Israel": "m.03spz",
            "President": "m.060c4",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03spz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03spz ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060c4')\na.add_filter('x0', '!=', 'm.03spz')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060c4')\na.add_fact('m.03spz', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1204",
        "question": "where did the anasazi indians live",
        "answer": [
            "m.027v6g"
        ],
        "different_answer": [
            [
                "m.027v6g"
            ]
        ],
        "entity_linking": {
            "Ancestral Puebloans": "m.0lyq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lyq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lyq ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lyq')\na.add_fact('m.0lyq', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1205",
        "question": "who plays harley quinn",
        "answer": [
            "m.032m91",
            "m.07vqwg",
            "m.08nvh9"
        ],
        "different_answer": [
            [
                "m.032m91",
                "m.07vqwg",
                "m.08nvh9"
            ]
        ],
        "entity_linking": {
            "Harley Quinn": "m.01t93k"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01t93k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01t93k ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01t93k')\na.add_fact('m.01t93k', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1206",
        "question": "what was francis bacon contributions",
        "answer": [
            "m.06q2q",
            "m.02h6fbs",
            "m.0kyk",
            "m.016fc2",
            "g.125_hzb47"
        ],
        "different_answer": [
            [
                "m.06q2q",
                "m.02h6fbs",
                "m.0kyk",
                "m.016fc2",
                "g.125_hzb47"
            ]
        ],
        "entity_linking": {
            "Francis Bacon": "m.030dr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030dr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030dr ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.030dr')\na.add_fact('m.030dr', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1208",
        "question": "who is ruling libya",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Libya": "m.04gqr",
            "Chairman": "m.09d6p2",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.09d6p2 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09d6p2')\na.add_filter('x0', '!=', 'm.04gqr')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.09d6p2')\na.add_fact('m.04gqr', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1209",
        "question": "when does ziva start on ncis",
        "answer": [
            "m.05df6zw"
        ],
        "different_answer": [
            [
                "m.05df6zw"
            ]
        ],
        "entity_linking": {
            "NCIS": "m.03m8sg",
            "Mossad Agent Ziva David": "m.093xn8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03m8sg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03m8sg ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.seasons ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.093xn8 .\n?x ns:tv.tv_series_season.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.093xn8')\na.add_filter('x0', '!=', 'm.03m8sg')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.093xn8')\na.add_fact('m.03m8sg', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.seasons', 'x0')\na.add_fact('x0', 'tv.tv_series_season.from', 'x2')\na.add_min('x2')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1210",
        "question": "what is the name of the national anthem of canada ( 2 words )",
        "answer": [
            "m.05mtn"
        ],
        "different_answer": [
            [
                "m.05mtn"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:location.country.national_anthem ?y .\n?y ns:government.national_anthem_of_a_country.anthem ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('m.0d060g', 'location.country.national_anthem', 'x1')\na.add_fact('x1', 'government.national_anthem_of_a_country.anthem', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1212",
        "question": "what did mark zuckerberg study",
        "answer": [
            "m.01mkq",
            "m.01mf_",
            "m.05qfh"
        ],
        "different_answer": [
            [
                "m.01mkq",
                "m.01mf_",
                "m.05qfh"
            ]
        ],
        "entity_linking": {
            "Mark Zuckerberg": "m.086dny"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.086dny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.086dny ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.086dny')\na.add_fact('m.086dny', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.major_field_of_study', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1213",
        "question": "which country was michael jackson born",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.09889g ns:people.person.place_of_birth ?y .\n\t?y ns:location.location.containedby ?x .\n\t?x ns:common.topic.notable_types ns:m.01mp .  #Country\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1215",
        "question": "who was stephen r covey",
        "answer": [
            "m.02n9jv",
            "m.047vnfs",
            "m.016fly",
            "m.0kyk",
            "m.05kb8h",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.02n9jv",
                "m.047vnfs",
                "m.016fly",
                "m.0kyk",
                "m.05kb8h",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Stephen Covey": "m.01jtkg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jtkg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jtkg ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01jtkg')\na.add_fact('m.01jtkg', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1216",
        "question": "what country was stalin in charge of",
        "answer": [
            "m.05vz3zq"
        ],
        "different_answer": [
            [
                "m.05vz3zq"
            ]
        ],
        "entity_linking": {
            "Joseph Stalin": "m.03_lf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_lf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_lf ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.jurisdiction_of_office ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_lf')\na.add_fact('m.03_lf', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.jurisdiction_of_office', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1217",
        "question": "what is monta ellis career high points",
        "answer": [
            "m.06js8m"
        ],
        "different_answer": [
            [
                "m.06js8m"
            ]
        ],
        "entity_linking": {
            "Monta Ellis": "m.06rsnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rsnl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rsnl ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.award ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06rsnl')\na.add_fact('m.06rsnl', 'sports.sports_award_winner.awards', 'x1')\na.add_fact('x1', 'sports.sports_award.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1219",
        "question": "what nationality is rihanna",
        "answer": [
            "m.0162v"
        ],
        "different_answer": [
            [
                "m.0162v"
            ]
        ],
        "entity_linking": {
            "Rihanna": "m.06mt91"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mt91')\na.add_fact('m.06mt91', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1220",
        "question": "what has shannen doherty played in",
        "answer": [
            "m.04q1w97",
            "g.12214l9tm",
            "m.03m3j",
            "m.0w66b4r",
            "m.02mh4b",
            "m.08rczt",
            "m.0bhccky",
            "m.0dg3g14",
            "m.04jvls",
            "m.05dkr3l",
            "m.02pynz",
            "m.04q8njq",
            "m.04j2ff5",
            "m.02vl04p",
            "m.0prrm",
            "m.04yhc6q",
            "m.04q8bmc",
            "m.03h5yly",
            "m.02vykg0",
            "m.0crttzw",
            "m.04j2rgh",
            "m.04q3m0j",
            "m.04ycptv",
            "m.0v1zdx4",
            "m.06r7r1",
            "m.04q9znk",
            "m.0gks9h_",
            "m.04q7c_s",
            "m.0408ch5",
            "m.04y6khs",
            "m.01jc1h",
            "m.04q0k5p",
            "m.04q37f6"
        ],
        "different_answer": [
            [
                "m.04q1w97",
                "g.12214l9tm",
                "m.03m3j",
                "m.0w66b4r",
                "m.02mh4b",
                "m.08rczt",
                "m.0bhccky",
                "m.0dg3g14",
                "m.04jvls",
                "m.05dkr3l",
                "m.02pynz",
                "m.04q8njq",
                "m.04j2ff5",
                "m.02vl04p",
                "m.0prrm",
                "m.04yhc6q",
                "m.04q8bmc",
                "m.03h5yly",
                "m.02vykg0",
                "m.0crttzw",
                "m.04j2rgh",
                "m.04q3m0j",
                "m.04ycptv",
                "m.0v1zdx4",
                "m.06r7r1",
                "m.04q9znk",
                "m.0gks9h_",
                "m.04q7c_s",
                "m.0408ch5",
                "m.04y6khs",
                "m.01jc1h",
                "m.04q0k5p",
                "m.04q37f6"
            ]
        ],
        "entity_linking": {
            "Shannen Doherty": "m.039crh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039crh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039crh ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.039crh')\na.add_fact('m.039crh', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1221",
        "question": "what college did joakim noah",
        "answer": [
            "m.0j_sncb"
        ],
        "different_answer": [
            [
                "m.0j_sncb"
            ]
        ],
        "entity_linking": {
            "Joakim Noah": "m.0c2yrf",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c2yrf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c2yrf ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0c2yrf')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0c2yrf', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1223",
        "question": "who plays billy elliot",
        "answer": [
            "m.04g81j",
            "m.051zd1n"
        ],
        "different_answer": [
            [
                "m.04g81j",
                "m.051zd1n"
            ]
        ],
        "entity_linking": {
            "Billy Elliot": "m.0by43z3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016mhd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016mhd ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0by43z3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0by43z3')\na.add_filter('x0', '!=', 'm.016mhd')\na.add_fact('x1', 'film.performance.character', 'm.0by43z3')\na.add_fact('m.016mhd', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1225",
        "question": "what kourtney kardashian boyfriends name",
        "answer": [
            "m.0crfmmg"
        ],
        "different_answer": [
            [
                "m.0crfmmg"
            ]
        ],
        "entity_linking": {
            "Kourtney Kardashian": "m.043ttm7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043ttm7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043ttm7 ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.043ttm7')\na.add_fact('m.043ttm7', 'base.popstra.celebrity.dated', 'x1')\na.add_fact('x1', 'base.popstra.dated.participant', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1226",
        "question": "what form of government does australia use",
        "answer": [
            "m.01q20",
            "m.018wl5",
            "m.0g3y9q"
        ],
        "different_answer": [
            [
                "m.01q20",
                "m.018wl5",
                "m.0g3y9q"
            ]
        ],
        "entity_linking": {
            "Australia": "m.0chghy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0chghy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0chghy ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0chghy')\na.add_fact('m.0chghy', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1227",
        "question": "what team did howie long",
        "answer": [
            "m.0crj6pn",
            "m.05l71"
        ],
        "different_answer": [
            [
                "m.0crj6pn",
                "m.05l71"
            ]
        ],
        "entity_linking": {
            "Howie Long": "m.04jg88"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jg88)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jg88 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04jg88')\na.add_fact('m.04jg88', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1228",
        "question": "where did the greek alphabet come from",
        "answer": [
            "m.0j59b"
        ],
        "different_answer": [
            [
                "m.0j59b"
            ]
        ],
        "entity_linking": {
            "Greek alphabet": "m.0358gm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0358gm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0358gm ns:language.language_writing_system.parent_writing_systems ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0358gm')\na.add_fact('m.0358gm', 'language.language_writing_system.parent_writing_systems', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1229",
        "question": "what timezone is elizabethtown kentucky",
        "answer": [
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Elizabethtown": "m.0tdxc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tdxc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tdxc ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0tdxc')\na.add_fact('m.0tdxc', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1230",
        "question": "what to see in christchurch new zealand",
        "answer": [
            "m.05zrshr",
            "m.04bgpr",
            "m.06drcd",
            "m.0gh8h3s",
            "m.02qld5z",
            "m.061hdn",
            "m.06nnvz",
            "m.03vzw6",
            "m.06srm9",
            "m.0d902k"
        ],
        "different_answer": [
            [
                "m.05zrshr",
                "m.04bgpr",
                "m.06drcd",
                "m.0gh8h3s",
                "m.02qld5z",
                "m.061hdn",
                "m.06nnvz",
                "m.03vzw6",
                "m.06srm9",
                "m.0d902k"
            ]
        ],
        "entity_linking": {
            "Christchurch": "m.02yc5b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02yc5b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02yc5b ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02yc5b')\na.add_fact('m.02yc5b', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1231",
        "question": "where is chris paul from",
        "answer": [
            "m.09c7w0"
        ],
        "different_answer": [
            [
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Chris Paul": "m.0cymln"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cymln)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cymln ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cymln')\na.add_fact('m.0cymln', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1232",
        "question": "what year was albert pujols rookie year",
        "answer": [
            "m.02h7sdf"
        ],
        "different_answer": [
            [
                "m.02h7sdf"
            ]
        ],
        "entity_linking": {
            "Albert Pujols": "m.035gcb",
            "National League Rookie of the Year": "m.04yny9t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035gcb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035gcb ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.04yny9t .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04yny9t')\na.add_filter('x0', '!=', 'm.035gcb')\na.add_fact('x1', 'sports.sports_award.award', 'm.04yny9t')\na.add_fact('m.035gcb', 'sports.sports_award_winner.awards', 'x1')\na.add_fact('x1', 'sports.sports_award.season', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1233",
        "question": "what are the colors of the ny giants",
        "answer": [
            "m.06fvc",
            "m.036k5h",
            "m.083jv",
            "m.01g5v"
        ],
        "different_answer": [
            [
                "m.06fvc",
                "m.036k5h",
                "m.083jv",
                "m.01g5v"
            ]
        ],
        "entity_linking": {
            "New York Giants": "m.05gg4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05gg4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05gg4 ns:sports.sports_team.colors ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05gg4')\na.add_fact('m.05gg4', 'sports.sports_team.colors', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1234",
        "question": "what business did andrew carnegie dominate",
        "answer": [
            "steel",
            "financier"
        ],
        "different_answer": [
            [
                "steel",
                "financier"
            ]
        ],
        "entity_linking": {
            "Andrew Carnegie": "m.0vdk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vdk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vdk ns:base.kwebbase.kwtopic.disciplines ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0vdk')\na.add_fact('m.0vdk', 'base.kwebbase.kwtopic.disciplines', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1235",
        "question": "what was sir isaac newton 's inventions",
        "answer": [
            "m.079vqm",
            "m.01nhc9"
        ],
        "different_answer": [
            [
                "m.079vqm",
                "m.01nhc9"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('m.03s9v', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1237",
        "question": "who did shaq first play for",
        "answer": [
            "m.0jm4b"
        ],
        "different_answer": [
            [
                "m.0jm4b"
            ]
        ],
        "entity_linking": {
            "Shaquille O'Neal": "m.012xdf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012xdf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012xdf ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012xdf')\na.add_fact('m.012xdf', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1238",
        "question": "who was the artist of mickey mouse",
        "answer": [
            "m.081nh",
            "m.0f2ml"
        ],
        "different_answer": [
            [
                "m.081nh",
                "m.0f2ml"
            ]
        ],
        "entity_linking": {
            "Mickey Mouse": "m.057ph"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.057ph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.057ph ns:fictional_universe.fictional_character.character_created_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.057ph')\na.add_fact('m.057ph', 'fictional_universe.fictional_character.character_created_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1239",
        "question": "what is the zip code for concord",
        "answer": [
            "m.01zcwkm",
            "m.01zcvrz",
            "m.01zcvv5",
            "m.07np_pf",
            "m.07np_pw",
            "m.01zcw0h",
            "m.07np_n_",
            "m.07np_pn"
        ],
        "different_answer": [
            [
                "m.01zcwkm",
                "m.01zcvrz",
                "m.01zcvv5",
                "m.07np_pf",
                "m.07np_pw",
                "m.01zcw0h",
                "m.07np_n_",
                "m.07np_pn"
            ]
        ],
        "entity_linking": {
            "Concord": "m.0qymv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qymv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qymv ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qymv')\na.add_fact('m.0qymv', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1240",
        "question": "what football team is michael vick on",
        "answer": [
            "m.05g49"
        ],
        "different_answer": [
            [
                "m.05g49"
            ]
        ],
        "entity_linking": {
            "Michael Vick": "m.027f42",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027f42)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027f42 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027f42')\na.add_fact('m.027f42', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1241",
        "question": "where does the columbia river start",
        "answer": [
            "m.02r8kvz"
        ],
        "different_answer": [
            [
                "m.02r8kvz"
            ]
        ],
        "entity_linking": {
            "Columbia River": "m.01n86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n86 ns:geography.river.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01n86')\na.add_fact('m.01n86', 'geography.river.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1242",
        "question": "what are all the names of the harry potter books",
        "answer": [
            "m.03bkkv",
            "m.01lr1g",
            "m.014jst",
            "m.015pln",
            "m.0c_vk",
            "m.06_rf9",
            "m.01m5g_"
        ],
        "different_answer": [
            [
                "m.03bkkv",
                "m.01lr1g",
                "m.014jst",
                "m.015pln",
                "m.0c_vk",
                "m.06_rf9",
                "m.01m5g_"
            ]
        ],
        "entity_linking": {
            "Harry Potter": "m.03647x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03647x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03647x ns:book.book_character.appears_in_book ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03647x')\na.add_fact('m.03647x', 'book.book_character.appears_in_book', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1244",
        "question": "who was sir walter raleigh and what did he do",
        "answer": [
            "m.05z96",
            "m.01h3_3",
            "m.099md",
            "m.0cbd2",
            "m.016wtf"
        ],
        "different_answer": [
            [
                "m.05z96",
                "m.01h3_3",
                "m.099md",
                "m.0cbd2",
                "m.016wtf"
            ]
        ],
        "entity_linking": {
            "Walter Raleigh": "m.084t6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.084t6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.084t6 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.084t6')\na.add_fact('m.084t6', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1245",
        "question": "what countries are in the euro dollar",
        "answer": [
            "m.088q4",
            "m.04w58",
            "m.06sff",
            "m.0bwhs8r",
            "m.04dfw1",
            "m.07ytt",
            "m.03rjj",
            "m.04g5k",
            "m.04v3q",
            "m.04vws",
            "m.04vg8",
            "m.06mkj",
            "m.037nm",
            "m.02vzc",
            "m.06s4c",
            "m.0345h",
            "m.04gzd",
            "m.02kmm",
            "m.059j2",
            "m.02phy_9",
            "m.06npd",
            "m.014mxp",
            "m.049nq",
            "m.06t8v",
            "m.0hg5",
            "m.0h7f9",
            "m.0f8l9c",
            "m.04fh3",
            "m.04g61",
            "m.0154j",
            "m.05r4w",
            "m.0ggt2",
            "m.01ppq",
            "m.0h7x",
            "m.03rt9",
            "m.035qy",
            "m.056vv"
        ],
        "different_answer": [
            [
                "m.088q4",
                "m.04w58",
                "m.06sff",
                "m.0bwhs8r",
                "m.04dfw1",
                "m.07ytt",
                "m.03rjj",
                "m.04g5k",
                "m.04v3q",
                "m.04vws",
                "m.04vg8",
                "m.06mkj",
                "m.037nm",
                "m.02vzc",
                "m.06s4c",
                "m.0345h",
                "m.04gzd",
                "m.02kmm",
                "m.059j2",
                "m.02phy_9",
                "m.06npd",
                "m.014mxp",
                "m.049nq",
                "m.06t8v",
                "m.0hg5",
                "m.0h7f9",
                "m.0f8l9c",
                "m.04fh3",
                "m.04g61",
                "m.0154j",
                "m.05r4w",
                "m.0ggt2",
                "m.01ppq",
                "m.0h7x",
                "m.03rt9",
                "m.035qy",
                "m.056vv"
            ]
        ],
        "entity_linking": {
            "Euro": "m.02l6h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02l6h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02l6h ns:finance.currency.countries_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02l6h')\na.add_fact('m.02l6h', 'finance.currency.countries_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1246",
        "question": "what currency can you use in barbados",
        "answer": [
            "m.05hy7p"
        ],
        "different_answer": [
            [
                "m.05hy7p"
            ]
        ],
        "entity_linking": {
            "Barbados": "m.0162v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0162v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0162v ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0162v')\na.add_fact('m.0162v', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1247",
        "question": "who is angelina jolie",
        "answer": [
            "m.02hrh1q",
            "m.0dxtg",
            "m.0d1pc",
            "m.02jknp",
            "m.01d_h8",
            "m.0np9r",
            "m.0kyk",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.02hrh1q",
                "m.0dxtg",
                "m.0d1pc",
                "m.02jknp",
                "m.01d_h8",
                "m.0np9r",
                "m.0kyk",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Angelina Jolie": "m.0f4vbz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f4vbz')\na.add_fact('m.0f4vbz', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1248",
        "question": "where is nineveh city",
        "answer": [
            "m.0d05q4",
            "m.01chdh"
        ],
        "different_answer": [
            [
                "m.0d05q4",
                "m.01chdh"
            ]
        ],
        "entity_linking": {
            "Nineveh": "m.05fym"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fym)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fym ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05fym')\na.add_fact('m.05fym', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1249",
        "question": "what is the state flower of new mexico",
        "answer": [
            "m.0hzbf1c"
        ],
        "different_answer": [
            [
                "m.0hzbf1c"
            ]
        ],
        "entity_linking": {
            "New Mexico": "m.05fjy",
            "State flower": "m.04627gn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fjy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fjy ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627gn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04627gn')\na.add_filter('x0', '!=', 'm.05fjy')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.04627gn')\na.add_fact('m.05fjy', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1250",
        "question": "where is the national ffa foundation located today",
        "answer": [
            "m.013h9"
        ],
        "different_answer": [
            [
                "m.013h9"
            ]
        ],
        "entity_linking": {
            "National FFA Organization": "m.0158y6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0158y6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0158y6 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0158y6')\na.add_fact('m.0158y6', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1251",
        "question": "which countries speak germanic languages",
        "answer": [
            "m.03f2w",
            "m.0345h",
            "m.0h7x",
            "m.04j53",
            "m.06mzp",
            "m.04g61",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.03f2w",
                "m.0345h",
                "m.0h7x",
                "m.04j53",
                "m.06mzp",
                "m.04g61",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "German Language": "m.04306rv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04306rv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04306rv ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.04306rv .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04306rv')\na.add_filter('x0', '!=', 'm.04306rv')\na.add_fact('x0', 'location.country.official_language', 'm.04306rv')\na.add_fact('m.04306rv', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1252",
        "question": "who plays eowyn in lord of the rings",
        "answer": [
            "m.0294fd"
        ],
        "different_answer": [
            [
                "m.0294fd"
            ]
        ],
        "entity_linking": {
            "The Lord of the Rings: The Return of the King": "m.017jd9",
            "\u00c9owyn": "m.0gynx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017jd9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017jd9 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gynx .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gynx')\na.add_filter('x0', '!=', 'm.017jd9')\na.add_fact('x1', 'film.performance.character', 'm.0gynx')\na.add_fact('m.017jd9', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1254",
        "question": "where is augusta masters 2012",
        "answer": [
            "m.04tk4bp"
        ],
        "different_answer": [
            [
                "m.04tk4bp"
            ]
        ],
        "entity_linking": {
            "2012 Masters Tournament": "m.0hrf6ww"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hrf6ww)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hrf6ww ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hrf6ww')\na.add_fact('m.0hrf6ww', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1255",
        "question": "what type of cancer did eva peron die from",
        "answer": [
            "m.0d_bk",
            "m.0qcr0"
        ],
        "different_answer": [
            [
                "m.0d_bk",
                "m.0qcr0"
            ]
        ],
        "entity_linking": {
            "Eva Per\u00f3n": "m.0dltj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dltj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dltj ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dltj')\na.add_fact('m.0dltj', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1256",
        "question": "who did terrell owens play for in 2010",
        "answer": [
            "m.068tx8",
            "m.01y49",
            "m.01c_d"
        ],
        "different_answer": [
            [
                "m.068tx8",
                "m.01y49",
                "m.01c_d"
            ]
        ],
        "entity_linking": {
            "Terrell Owens": "m.027ddp",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027ddp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027ddp ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027ddp')\na.add_fact('m.027ddp', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1257",
        "question": "where is denmark south carolina",
        "answer": [
            "m.0mw39"
        ],
        "different_answer": [
            [
                "m.0mw39"
            ],
            [
                "m.0mw39",
                "m.06yxd",
                "m.09c7w0"
            ]
        ],
        "entity_linking": {
            "Denmark": "m.0_kl9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_kl9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_kl9 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0_kl9')\na.add_fact('m.0_kl9', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1259",
        "question": "what books did ernest hemingway write",
        "answer": [
            "m.04trgtg",
            "m.04vx86y",
            "m.04vjm84",
            "m.04v94y7",
            "m.04v2yl3",
            "m.04trgx5",
            "m.04v_b2r",
            "m.04vx76j",
            "m.04vb733",
            "m.04vb70g",
            "m.04vgn47",
            "m.04vb78r",
            "m.04vxbwz",
            "m.04t_zyl",
            "m.04vx75r",
            "m.04v_b4k",
            "m.04vf6np",
            "m.04trgv5",
            "m.04vgc4q",
            "m.04vx84q",
            "m.04vx80b",
            "m.04v96g7",
            "m.04vjqdn",
            "m.04vgny5",
            "m.04v96hr",
            "m.04vkvws",
            "m.04t_zxj",
            "m.04vf0f2",
            "m.04vf3cd",
            "m.04vkvzk",
            "m.04yqglk",
            "m.04v01lh",
            "m.04vxctq",
            "m.04v94yj",
            "m.04vjm8f",
            "m.04vxd27",
            "m.04vxbzw",
            "m.04vjptv",
            "m.04vgc4_",
            "m.04vgp44",
            "m.04vxbz0",
            "m.028yb72",
            "m.04vjjwq",
            "m.04vb71p",
            "m.04vf7jd",
            "m.04vkvz1",
            "m.04v01nf",
            "m.04trgvm",
            "m.04vgc4f",
            "m.04vx85f",
            "m.04vjjxy",
            "m.04trgqk",
            "m.04vky3k",
            "m.04vxb_d",
            "m.04vkvxj",
            "m.04vf6kh",
            "m.04vxd0d",
            "m.04vkvvv",
            "m.028y3t3",
            "m.04t_zwb",
            "m.04v2ykl",
            "m.04vf0ft",
            "m.04vjqf7",
            "m.04v94zq",
            "m.04vnwz8",
            "m.04vf0gh",
            "m.04vxbyj",
            "m.04vf6nd",
            "m.04yq7pm",
            "m.04trgrw",
            "m.04vky29",
            "m.04vx823",
            "m.04v01md",
            "m.04t_zy2",
            "m.04v01n5",
            "m.04vnw_y",
            "m.028yg96",
            "m.04v94z_",
            "m.04yq0pg",
            "m.04vgnyy",
            "m.04vdkzk",
            "m.04trgq3",
            "m.04vgc45",
            "m.04vxb_3",
            "m.04vxbzf",
            "m.04vc94n",
            "m.04vgc8p",
            "m.04vf6l7",
            "m.04v96h7",
            "m.04t_zxv",
            "m.059bzht",
            "m.04trgrf",
            "m.04vx72b",
            "m.04vjpws",
            "m.04vx75_",
            "m.04vjlng",
            "m.04trgpd",
            "m.04trgt0",
            "m.04v2yjl",
            "m.04trgnz",
            "m.04v01p5",
            "m.028xtjw",
            "m.04vgn23",
            "m.04vx74k",
            "m.04t_zyv",
            "m.04vkvx1",
            "m.04vkvz9",
            "m.028ygp0",
            "m.04vgn2x",
            "m.04vf6k0",
            "m.04vc96g",
            "m.04vb71y",
            "m.04vx85p",
            "m.04vxd0n",
            "m.04vgcst",
            "m.059brtw",
            "m.04vf261",
            "m.04vxcxb",
            "m.04vjqdy",
            "m.04vxcz7",
            "m.04vky40",
            "m.04vjlm3",
            "m.04v2ylj",
            "m.04yq0p0",
            "m.04vxbxg",
            "m.04t_zyb",
            "m.04vf6mc",
            "m.04vb72w",
            "m.04trgn2",
            "m.04vjptb",
            "m.04vf227",
            "m.04vjpvt",
            "m.04vdkz8",
            "m.04vf6ly",
            "m.04vjm7p",
            "m.04vx82l",
            "m.04vgnxm",
            "m.04vdkyt",
            "m.04vf6j0",
            "m.04vgnyn",
            "m.04trgpv",
            "m.04vxbvp",
            "m.04vb715",
            "m.04vx86p",
            "m.04vgn69",
            "m.04trgw1",
            "m.04vgc3y",
            "m.04vky4l",
            "m.04vxcs_",
            "m.04trgsl",
            "m.04vf0h6",
            "m.04vx83_",
            "m.04t_zx1",
            "m.04vgcbk",
            "m.04trgks",
            "m.04trgq_",
            "m.04vkvyt",
            "m.04v_b1z",
            "m.04trglx",
            "m.04v2yhn",
            "m.04v94tm",
            "m.04v_b38",
            "m.04vxby8",
            "m.04vf258",
            "m.04vnxd1",
            "m.04vc94y",
            "m.04vx876",
            "m.04vjptl",
            "m.04vx77z",
            "m.04vf6ln",
            "m.04trgwr",
            "m.04vjpvk",
            "m.04v2yj3",
            "m.04vnx8p",
            "m.04vb72c",
            "m.04vf26j",
            "m.04v_b41",
            "m.04vgn3s",
            "m.04v94w3",
            "m.04vgc7y",
            "m.04vjm66",
            "m.04vf6mm",
            "m.04vjm8w",
            "m.04vky52",
            "m.04yq7q1",
            "m.04trglg",
            "m.04vf6kz",
            "m.04v96j6",
            "m.04v_b3j",
            "m.04vdk_9",
            "m.04vjqfk",
            "m.04v2ykb",
            "m.04vxd1z",
            "m.04trgmt",
            "m.04vx75h",
            "m.04vgnz5",
            "m.04v01mw",
            "m.04vgcth",
            "m.04vc956",
            "m.04vf24t",
            "m.04vf6p4",
            "m.04vgn15",
            "m.04vjpwb",
            "m.04vxcvf",
            "m.04trgs9",
            "m.04trgwh",
            "m.04v96jz",
            "m.04v_b3s",
            "m.04v_b49",
            "m.04vf25s",
            "m.04vjpw1",
            "m.04vf0fc",
            "m.04v9zny",
            "m.04vjm6y",
            "m.04vx767",
            "m.04vb71f",
            "m.04vjpv9",
            "m.04trgtx",
            "m.04v94zg",
            "m.04v96g_",
            "m.04vnx0d",
            "m.04vx86d",
            "m.04trgnj",
            "m.04trgmb"
        ],
        "different_answer": [
            [
                "m.04trgtg",
                "m.04vx86y",
                "m.04vjm84",
                "m.04v94y7",
                "m.04v2yl3",
                "m.04trgx5",
                "m.04v_b2r",
                "m.04vx76j",
                "m.04vb733",
                "m.04vb70g",
                "m.04vgn47",
                "m.04vb78r",
                "m.04vxbwz",
                "m.04t_zyl",
                "m.04vx75r",
                "m.04v_b4k",
                "m.04vf6np",
                "m.04trgv5",
                "m.04vgc4q",
                "m.04vx84q",
                "m.04vx80b",
                "m.04v96g7",
                "m.04vjqdn",
                "m.04vgny5",
                "m.04v96hr",
                "m.04vkvws",
                "m.04t_zxj",
                "m.04vf0f2",
                "m.04vf3cd",
                "m.04vkvzk",
                "m.04yqglk",
                "m.04v01lh",
                "m.04vxctq",
                "m.04v94yj",
                "m.04vjm8f",
                "m.04vxd27",
                "m.04vxbzw",
                "m.04vjptv",
                "m.04vgc4_",
                "m.04vgp44",
                "m.04vxbz0",
                "m.028yb72",
                "m.04vjjwq",
                "m.04vb71p",
                "m.04vf7jd",
                "m.04vkvz1",
                "m.04v01nf",
                "m.04trgvm",
                "m.04vgc4f",
                "m.04vx85f",
                "m.04vjjxy",
                "m.04trgqk",
                "m.04vky3k",
                "m.04vxb_d",
                "m.04vkvxj",
                "m.04vf6kh",
                "m.04vxd0d",
                "m.04vkvvv",
                "m.028y3t3",
                "m.04t_zwb",
                "m.04v2ykl",
                "m.04vf0ft",
                "m.04vjqf7",
                "m.04v94zq",
                "m.04vnwz8",
                "m.04vf0gh",
                "m.04vxbyj",
                "m.04vf6nd",
                "m.04yq7pm",
                "m.04trgrw",
                "m.04vky29",
                "m.04vx823",
                "m.04v01md",
                "m.04t_zy2",
                "m.04v01n5",
                "m.04vnw_y",
                "m.028yg96",
                "m.04v94z_",
                "m.04yq0pg",
                "m.04vgnyy",
                "m.04vdkzk",
                "m.04trgq3",
                "m.04vgc45",
                "m.04vxb_3",
                "m.04vxbzf",
                "m.04vc94n",
                "m.04vgc8p",
                "m.04vf6l7",
                "m.04v96h7",
                "m.04t_zxv",
                "m.059bzht",
                "m.04trgrf",
                "m.04vx72b",
                "m.04vjpws",
                "m.04vx75_",
                "m.04vjlng",
                "m.04trgpd",
                "m.04trgt0",
                "m.04v2yjl",
                "m.04trgnz",
                "m.04v01p5",
                "m.028xtjw",
                "m.04vgn23",
                "m.04vx74k",
                "m.04t_zyv",
                "m.04vkvx1",
                "m.04vkvz9",
                "m.028ygp0",
                "m.04vgn2x",
                "m.04vf6k0",
                "m.04vc96g",
                "m.04vb71y",
                "m.04vx85p",
                "m.04vxd0n",
                "m.04vgcst",
                "m.059brtw",
                "m.04vf261",
                "m.04vxcxb",
                "m.04vjqdy",
                "m.04vxcz7",
                "m.04vky40",
                "m.04vjlm3",
                "m.04v2ylj",
                "m.04yq0p0",
                "m.04vxbxg",
                "m.04t_zyb",
                "m.04vf6mc",
                "m.04vb72w",
                "m.04trgn2",
                "m.04vjptb",
                "m.04vf227",
                "m.04vjpvt",
                "m.04vdkz8",
                "m.04vf6ly",
                "m.04vjm7p",
                "m.04vx82l",
                "m.04vgnxm",
                "m.04vdkyt",
                "m.04vf6j0",
                "m.04vgnyn",
                "m.04trgpv",
                "m.04vxbvp",
                "m.04vb715",
                "m.04vx86p",
                "m.04vgn69",
                "m.04trgw1",
                "m.04vgc3y",
                "m.04vky4l",
                "m.04vxcs_",
                "m.04trgsl",
                "m.04vf0h6",
                "m.04vx83_",
                "m.04t_zx1",
                "m.04vgcbk",
                "m.04trgks",
                "m.04trgq_",
                "m.04vkvyt",
                "m.04v_b1z",
                "m.04trglx",
                "m.04v2yhn",
                "m.04v94tm",
                "m.04v_b38",
                "m.04vxby8",
                "m.04vf258",
                "m.04vnxd1",
                "m.04vc94y",
                "m.04vx876",
                "m.04vjptl",
                "m.04vx77z",
                "m.04vf6ln",
                "m.04trgwr",
                "m.04vjpvk",
                "m.04v2yj3",
                "m.04vnx8p",
                "m.04vb72c",
                "m.04vf26j",
                "m.04v_b41",
                "m.04vgn3s",
                "m.04v94w3",
                "m.04vgc7y",
                "m.04vjm66",
                "m.04vf6mm",
                "m.04vjm8w",
                "m.04vky52",
                "m.04yq7q1",
                "m.04trglg",
                "m.04vf6kz",
                "m.04v96j6",
                "m.04v_b3j",
                "m.04vdk_9",
                "m.04vjqfk",
                "m.04v2ykb",
                "m.04vxd1z",
                "m.04trgmt",
                "m.04vx75h",
                "m.04vgnz5",
                "m.04v01mw",
                "m.04vgcth",
                "m.04vc956",
                "m.04vf24t",
                "m.04vf6p4",
                "m.04vgn15",
                "m.04vjpwb",
                "m.04vxcvf",
                "m.04trgs9",
                "m.04trgwh",
                "m.04v96jz",
                "m.04v_b3s",
                "m.04v_b49",
                "m.04vf25s",
                "m.04vjpw1",
                "m.04vf0fc",
                "m.04v9zny",
                "m.04vjm6y",
                "m.04vx767",
                "m.04vb71f",
                "m.04vjpv9",
                "m.04trgtx",
                "m.04v94zg",
                "m.04v96g_",
                "m.04vnx0d",
                "m.04vx86d",
                "m.04trgnj",
                "m.04trgmb"
            ],
            [
                "m.04t1hv1",
                "m.0ds_dd",
                "m.0bhjf0z",
                "m.04v6z_",
                "m.067qvcx",
                "m.06v5l32",
                "m.0bhjd_v",
                "m.0bhjf14",
                "m.01k80h",
                "m.06njwzs",
                "m.0kb7d",
                "m.04cs1hp",
                "m.0bqqz1w",
                "m.0bhjf1b",
                "m.06s2v57",
                "m.04181rm",
                "g.1ym_l5zt2",
                "m.0579h1",
                "m.0bhjd_c",
                "m.01_c2p",
                "m.06jjm99",
                "m.0509fw",
                "m.06vhy99",
                "m.0c1t2cv",
                "m.06ftrrz",
                "m.06f93yb",
                "m.069nf2l",
                "m.06hpx2m",
                "m.0bhjd_n",
                "m.06jnx96",
                "m.0jwr1qy",
                "m.0w1d4ws",
                "m.06myfm9",
                "m.06m7dmg",
                "m.06gmm2b",
                "m.07699t",
                "m.04t1hvt",
                "m.0c1t2f1",
                "m.06gpgw8",
                "m.0bqqz1h",
                "m.03c05cs",
                "m.05f74lj",
                "m.06lgm3t",
                "m.06gp6r_",
                "m.0bhjf0d",
                "m.07697c",
                "m.06tf795",
                "m.0hzfc4t",
                "m.06n25zh",
                "m.0hnc93h",
                "m.06k32nl",
                "m.0bhjf0w",
                "m.0bhjf1f",
                "m.02vrgk9",
                "m.06q24y8",
                "m.06l2400",
                "m.0d19b6",
                "m.0bhjd_y",
                "m.0bhjf0s",
                "m.0ll4p24",
                "m.052hf6",
                "m.0c1t2c9",
                "m.02rfs69",
                "m.06hdq7v",
                "m.03mjgh",
                "m.0bhjf0h",
                "m.06c3j50",
                "m.03pwdt",
                "m.06qcrzf",
                "m.0bqqz1l",
                "m.0c1t2c6",
                "m.0bqqz1p",
                "m.0bhjf06",
                "m.0bhjd_r",
                "m.04t1hv9",
                "m.0bhjf00",
                "m.06s1fbh",
                "m.06941ry",
                "m.0c1t2d6",
                "m.06qf3_s",
                "m.068pgt9",
                "m.010qzsnh",
                "m.03h1k5b",
                "m.06m0b59",
                "m.0bhjd_g",
                "m.0bqqz14",
                "m.0c1t2cd",
                "g.11b6s8f7gb",
                "m.06401xd",
                "m.06m09qr",
                "m.04t1htt",
                "m.0bl_px",
                "m.0b6df39",
                "m.07690z",
                "m.06csdd4",
                "m.052gwd",
                "m.04181s9",
                "m.0gkw2",
                "m.06hgrx3",
                "m.06fc_v6",
                "m.02g4fj",
                "m.026119x",
                "m.06ptxc1",
                "m.0bqqz1b",
                "m.0w0pgxc",
                "m.0c1t2dd",
                "m.0bhjf09",
                "m.06g5mrh",
                "m.06jlg49",
                "m.06nv4z2",
                "m.0bhjf0l",
                "m.06kpcky",
                "m.0dgg1j",
                "m.068q0kw",
                "m.0c1t2d9",
                "m.0bhjf0p",
                "m.04yb4v",
                "m.06lhfrz",
                "m.06q7x14",
                "m.0bhjf1j",
                "m.0w0plzp",
                "m.06qng3r",
                "m.0bhjd_k",
                "m.05cv59",
                "m.06vtvjb",
                "m.05jnjm",
                "m.06ncx9_",
                "m.0bhjf03",
                "m.0bhjf11",
                "m.06l0xn_",
                "m.0jyd_bf",
                "m.015dlb",
                "m.03xjsb",
                "g.121c531b",
                "m.06nk5sh",
                "m.06gbwd5",
                "m.062g62",
                "m.05f3bch",
                "m.05f9qt0",
                "m.06sxj1q",
                "m.06k4ddm",
                "m.06jzxd9",
                "m.05ry39",
                "m.03_mv1",
                "m.06j6yr6",
                "m.07bhr8",
                "m.0bhjf17",
                "m.026bd0",
                "m.06f86m6",
                "m.076945",
                "m.07bj8y",
                "m.0c1t2dw",
                "m.066tbv9",
                "m.06lt8hz",
                "m.02672ny",
                "m.0769lx",
                "m.0c1t2c3",
                "m.02vv56s"
            ]
        ],
        "entity_linking": {
            "Ernest Hemingway": "m.02kz_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02kz_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02kz_ ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02kz_')\na.add_fact('m.02kz_', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1260",
        "question": "what year did baltimore ravens win super bowl",
        "answer": [
            "m.076yq"
        ],
        "different_answer": [
            [
                "m.076yq"
            ]
        ],
        "entity_linking": {
            "Baltimore Ravens": "m.01ct6",
            "Super bowl": "m.01xljv1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ct6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ct6 ns:sports.sports_team.championships ?x .\n?x ns:common.topic.notable_types ns:m.01xljv1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xljv1')\na.add_filter('x0', '!=', 'm.01ct6')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xljv1')\na.add_fact('m.01ct6', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1261",
        "question": "where did the battle of passchendaele happen",
        "answer": [
            "m.02pb6l5",
            "m.02y4t"
        ],
        "different_answer": [
            [
                "m.02pb6l5",
                "m.02y4t"
            ]
        ],
        "entity_linking": {
            "Battle of Passchendaele": "m.0c3mz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c3mz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c3mz ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c3mz')\na.add_fact('m.0c3mz', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1262",
        "question": "what part of the country is ohio considered",
        "answer": [
            "m.03pzys",
            "m.0q76g"
        ],
        "different_answer": [
            [
                "m.03pzys",
                "m.0q76g"
            ]
        ],
        "entity_linking": {
            "Ohio": "m.05kkh",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kkh ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.05kkh')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.05kkh', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1263",
        "question": "what team is cristiano ronaldo play for",
        "answer": [
            "m.02rqxc",
            "m.06l22"
        ],
        "different_answer": [
            [
                "m.02rqxc",
                "m.06l22"
            ]
        ],
        "entity_linking": {
            "Cristiano Ronaldo": "m.02xt6q",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xt6q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xt6q ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xt6q')\na.add_fact('m.02xt6q', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1264",
        "question": "what standard time is michigan",
        "answer": [
            "m.02_37z",
            "m.02hcv8",
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02_37z",
                "m.02hcv8",
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Michigan": "m.04rrx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04rrx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04rrx ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04rrx')\na.add_fact('m.04rrx', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1265",
        "question": "what was john tyler",
        "answer": [
            "m.01xljv7"
        ],
        "different_answer": [
            [
                "m.01xljv7"
            ]
        ],
        "entity_linking": {
            "John Tyler": "m.042dk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.042dk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.042dk ns:common.topic.notable_types ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.042dk')\na.add_fact('m.042dk', 'common.topic.notable_types', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1266",
        "question": "what did romo do",
        "answer": [
            "m.02h664g"
        ],
        "different_answer": [
            [
                "m.02h664g"
            ]
        ],
        "entity_linking": {
            "Sergio Romo": "m.04cyz8g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04cyz8g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04cyz8g ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04cyz8g')\na.add_fact('m.04cyz8g', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1267",
        "question": "what currency can you use in jamaica",
        "answer": [
            "m.04xc2m"
        ],
        "different_answer": [
            [
                "m.04xc2m"
            ]
        ],
        "entity_linking": {
            "Jamaica": "m.03_r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_r3')\na.add_fact('m.03_r3', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1268",
        "question": "where did jay moriarty die",
        "answer": [
            "m.04ty8"
        ],
        "different_answer": [
            [
                "m.04ty8"
            ]
        ],
        "entity_linking": {
            "Jay Moriarty": "m.04jswm8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jswm8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jswm8 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04jswm8')\na.add_fact('m.04jswm8', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1269",
        "question": "where was the boston tea party 1773",
        "answer": [
            "m.04n7kgz"
        ],
        "different_answer": [
            [
                "m.04n7kgz"
            ]
        ],
        "entity_linking": {
            "Boston Tea Party": "m.0ccd96"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ccd96)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ccd96 ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ccd96')\na.add_fact('m.0ccd96', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1270",
        "question": "what drugs lindsay lohan abuse",
        "answer": [
            "m.0256b",
            "m.012mj"
        ],
        "different_answer": [
            [
                "m.0256b",
                "m.012mj"
            ]
        ],
        "entity_linking": {
            "Lindsay Lohan": "m.01pgzn_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pgzn_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pgzn_ ns:base.popstra.celebrity.substance_abuse ?y .\n?y ns:base.popstra.substance_abuse.substance ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01pgzn_')\na.add_fact('m.01pgzn_', 'base.popstra.celebrity.substance_abuse', 'x1')\na.add_fact('x1', 'base.popstra.substance_abuse.substance', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1271",
        "question": "when did carolina panthers go to superbowl",
        "answer": [
            "m.0277y8"
        ],
        "different_answer": [
            [
                "m.0277y8"
            ]
        ],
        "entity_linking": {
            "Carolina Panthers": "m.01y3c"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.06x5s ns:time.recurring_event.instances ?x . # Super Bowl instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.01y3c . # (Carolina Panthers) \n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.01y3c . # (Carolina Panthers) \n  }\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1272",
        "question": "when did the burma cyclone happen",
        "answer": [
            "2008-04-27-08:00"
        ],
        "different_answer": [
            [
                "2008-04-27-08:00"
            ]
        ],
        "entity_linking": {
            "Cyclone Nargis": "m.041l08b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041l08b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041l08b ns:meteorology.tropical_cyclone.formed ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.041l08b')\na.add_fact('m.041l08b', 'meteorology.tropical_cyclone.formed', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1274",
        "question": "who won the governor election in texas",
        "answer": [
            "m.059rqc",
            "m.03x_db",
            "m.037f5r",
            "m.059ryt",
            "m.02py7s",
            "m.01lwx3",
            "m.059rx2",
            "m.037_45",
            "m.02r_7k",
            "m.02pv3w",
            "m.03d1sj",
            "m.04sm5m",
            "m.02wv_6",
            "m.059rsh",
            "m.059ryg",
            "m.0gbjz",
            "m.04tcb9",
            "m.03yvp9",
            "m.03848l",
            "m.03clnj",
            "m.059rty",
            "m.09b6zr",
            "m.03ccjj",
            "m.03htx7",
            "m.02rv0t",
            "m.04p5r8",
            "m.02nlj_",
            "m.059rvp",
            "m.032j8w",
            "m.03frg9",
            "m.01v2r2",
            "m.059rv9",
            "m.03vhjr",
            "m.03r03b",
            "m.04g54r",
            "m.059rnw",
            "m.04kn2s",
            "m.01rtbd",
            "m.03xxmq",
            "m.03bbm8",
            "m.059rxf",
            "m.059rw1",
            "m.01lwvz",
            "m.0364z4",
            "m.02r_g_"
        ],
        "different_answer": [
            [
                "m.059rqc",
                "m.03x_db",
                "m.037f5r",
                "m.059ryt",
                "m.02py7s",
                "m.01lwx3",
                "m.059rx2",
                "m.037_45",
                "m.02r_7k",
                "m.02pv3w",
                "m.03d1sj",
                "m.04sm5m",
                "m.02wv_6",
                "m.059rsh",
                "m.059ryg",
                "m.0gbjz",
                "m.04tcb9",
                "m.03yvp9",
                "m.03848l",
                "m.03clnj",
                "m.059rty",
                "m.09b6zr",
                "m.03ccjj",
                "m.03htx7",
                "m.02rv0t",
                "m.04p5r8",
                "m.02nlj_",
                "m.059rvp",
                "m.032j8w",
                "m.03frg9",
                "m.01v2r2",
                "m.059rv9",
                "m.03vhjr",
                "m.03r03b",
                "m.04g54r",
                "m.059rnw",
                "m.04kn2s",
                "m.01rtbd",
                "m.03xxmq",
                "m.03bbm8",
                "m.059rxf",
                "m.059rw1",
                "m.01lwvz",
                "m.0364z4",
                "m.02r_g_"
            ]
        ],
        "entity_linking": {
            "Texas": "m.07b_l",
            "Governor": "m.0fkvn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07b_l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07b_l ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.07b_l')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.07b_l', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1275",
        "question": "what does helen flanagan do",
        "answer": [
            "m.02hrh1q"
        ],
        "different_answer": [
            [
                "m.02hrh1q"
            ]
        ],
        "entity_linking": {
            "Helen Flanagan": "m.087k1_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.087k1_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.087k1_ ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.087k1_')\na.add_fact('m.087k1_', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1276",
        "question": "when are the summer and winter olympics held",
        "answer": [
            "m.04q0_4f"
        ],
        "different_answer": [
            [
                "m.04q0_4f"
            ]
        ],
        "entity_linking": {
            "Olympic Games": "m.05nd_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05nd_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05nd_ ns:time.recurring_event.current_frequency ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05nd_')\na.add_fact('m.05nd_', 'time.recurring_event.current_frequency', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1277",
        "question": "where is tennessee river",
        "answer": [
            "m.0gyh",
            "m.0498y",
            "m.04tgp",
            "m.07h34"
        ],
        "different_answer": [
            [
                "m.0gyh",
                "m.0498y",
                "m.04tgp",
                "m.07h34"
            ]
        ],
        "entity_linking": {
            "Tennessee River": "m.01spb0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01spb0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01spb0 ns:location.location.partially_containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01spb0')\na.add_fact('m.01spb0', 'location.location.partially_containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1278",
        "question": "what are some major events in venezuela",
        "answer": [
            "m.080bblj",
            "m.0_s2b74",
            "m.0cnymms",
            "m.010pvsz8",
            "m.02r0mx4",
            "m.0gys1lh",
            "m.0ryskwc",
            "m.01082t0z",
            "m.0c0349z",
            "m.011sm70c",
            "m.0461c3",
            "m.0dgqgqf",
            "g.122dshgz",
            "m.02qlx__",
            "m.0_yl8cs",
            "m.02rf6lc",
            "m.011nwg_8",
            "m.02qb83",
            "m.0ggbq0x"
        ],
        "different_answer": [
            [
                "m.080bblj",
                "m.0_s2b74",
                "m.0cnymms",
                "m.010pvsz8",
                "m.02r0mx4",
                "m.0gys1lh",
                "m.0ryskwc",
                "m.01082t0z",
                "m.0c0349z",
                "m.011sm70c",
                "m.0461c3",
                "m.0dgqgqf",
                "g.122dshgz",
                "m.02qlx__",
                "m.0_yl8cs",
                "m.02rf6lc",
                "m.011nwg_8",
                "m.02qb83",
                "m.0ggbq0x"
            ]
        ],
        "entity_linking": {
            "Venezuela": "m.07ylj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ylj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ylj ns:location.location.events ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ylj')\na.add_fact('m.07ylj', 'location.location.events', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1279",
        "question": "what guitar does corey taylor play",
        "answer": [
            "m.018vs"
        ],
        "different_answer": [
            [
                "m.018vs"
            ]
        ],
        "entity_linking": {
            "Corey Taylor": "m.01ttvxc",
            "Guitar": "m.0342h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ttvxc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ttvxc ns:music.group_member.instruments_played ?x .\n?x ns:music.instrument.family ns:m.0342h .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0342h')\na.add_filter('x0', '!=', 'm.01ttvxc')\na.add_fact('x0', 'music.instrument.family', 'm.0342h')\na.add_fact('m.01ttvxc', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1280",
        "question": "who was president after franklin d. roosevelt",
        "answer": [
            "m.09bg4l"
        ],
        "different_answer": [
            [
                "m.09bg4l"
            ]
        ],
        "entity_linking": {
            "Franklin D. Roosevelt": "m.02yy8"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT  ?x\nWHERE {\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y1 .  # President of the United States\n  ?y1 ns:government.government_position_held.office_holder ns:m.02yy8 ; # Franklin D. Roosevelt\n      ns:government.government_position_held.to ?to .\n\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y2 .  # President of the United States\n  ?y2 ns:government.government_position_held.office_holder ?x ;\n      ns:government.government_position_held.to ?from .\n  \n  FILTER(xsd:dateTime(?from) - xsd:dateTime(?to) > 0)\n}\nORDER BY xsd:dateTime(?from)\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1281",
        "question": "where did kate gosselin grew up",
        "answer": [
            "m.0dclg"
        ],
        "different_answer": [
            [
                "m.0dclg"
            ]
        ],
        "entity_linking": {
            "Kate Gosselin": "m.05qbc_9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qbc_9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qbc_9 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qbc_9')\na.add_fact('m.05qbc_9', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1282",
        "question": "under what political system does the united states government operate",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1284",
        "question": "what to do in paris in 1 day",
        "answer": [
            "m.04s_s9l",
            "m.02qtwx",
            "m.04cj6k",
            "m.0zv_",
            "m.0kx9d",
            "m.01vgd5",
            "m.03q9jq",
            "m.07kb30y",
            "m.0jd4j",
            "m.04kshc3",
            "m.01q_np",
            "m.02j81",
            "m.0f3b9",
            "m.0dt3ml",
            "m.02gms9",
            "m.0f32p",
            "m.042x0k",
            "m.0dmnx6",
            "m.01sp2r",
            "m.0gsp5",
            "m.0m6_0",
            "m.04gdr",
            "m.0281qh",
            "m.08dswn",
            "m.04695xf",
            "m.0gxqj",
            "m.0383f3",
            "m.03ydrj",
            "m.0k3xf",
            "m.0gtxh",
            "m.0k0kz"
        ],
        "different_answer": [
            [
                "m.04s_s9l",
                "m.02qtwx",
                "m.04cj6k",
                "m.0zv_",
                "m.0kx9d",
                "m.01vgd5",
                "m.03q9jq",
                "m.07kb30y",
                "m.0jd4j",
                "m.04kshc3",
                "m.01q_np",
                "m.02j81",
                "m.0f3b9",
                "m.0dt3ml",
                "m.02gms9",
                "m.0f32p",
                "m.042x0k",
                "m.0dmnx6",
                "m.01sp2r",
                "m.0gsp5",
                "m.0m6_0",
                "m.04gdr",
                "m.0281qh",
                "m.08dswn",
                "m.04695xf",
                "m.0gxqj",
                "m.0383f3",
                "m.03ydrj",
                "m.0k3xf",
                "m.0gtxh",
                "m.0k0kz"
            ]
        ],
        "entity_linking": {
            "Paris": "m.05qtj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qtj')\na.add_fact('m.05qtj', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1285",
        "question": "what city is mt lassen in",
        "answer": [
            "m.0l30v",
            "m.01ymnm",
            "m.01n7q",
            "m.059g4",
            "m.09c7w0",
            "m.0k3nk"
        ],
        "different_answer": [
            [
                "m.0l30v",
                "m.01ymnm",
                "m.01n7q",
                "m.059g4",
                "m.09c7w0",
                "m.0k3nk"
            ]
        ],
        "entity_linking": {
            "Lassen Peak": "m.01ymq1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ymq1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ymq1 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ymq1')\na.add_fact('m.01ymq1', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1287",
        "question": "what is the state motto of ohio",
        "answer": [
            "m.08y6vd"
        ],
        "different_answer": [
            [
                "m.08y6vd"
            ]
        ],
        "entity_linking": {
            "Ohio": "m.05kkh",
            "Motto": "m.0j749"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kkh ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.0j749 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j749')\na.add_filter('x0', '!=', 'm.05kkh')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.0j749')\na.add_fact('m.05kkh', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1289",
        "question": "what type of music did mozart composed",
        "answer": [
            "m.05lls",
            "m.021dvj",
            "m.0ggq0m",
            "m.06q6jz",
            "m.0l8gh"
        ],
        "different_answer": [
            [
                "m.05lls",
                "m.021dvj",
                "m.0ggq0m",
                "m.06q6jz",
                "m.0l8gh"
            ]
        ],
        "entity_linking": {
            "Wolfgang Amadeus Mozart": "m.082db"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.082db)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.082db ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.082db')\na.add_fact('m.082db', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1291",
        "question": "how many kids were there in the kennedy family",
        "answer": [
            "m.0d3k14",
            "m.06hx2",
            "m.020t1x",
            "m.04f1nm",
            "m.01kyns",
            "m.0bt9c",
            "m.04f1qs",
            "m.028qh_",
            "m.0194xc"
        ],
        "different_answer": [
            [
                "m.0d3k14",
                "m.06hx2",
                "m.020t1x",
                "m.04f1nm",
                "m.01kyns",
                "m.0bt9c",
                "m.04f1qs",
                "m.028qh_",
                "m.0194xc"
            ]
        ],
        "entity_linking": {
            "Joseph P. Kennedy, Sr.": "m.01qlg1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qlg1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qlg1 ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01qlg1')\na.add_fact('m.01qlg1', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1292",
        "question": "which barcelona airport is closest to the port",
        "answer": [
            "m.013q7r"
        ],
        "different_answer": [
            [
                "m.013q7r"
            ]
        ],
        "entity_linking": {
            "Barcelona": "m.01f62"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f62 ns:location.location.nearby_airports ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01f62')\na.add_fact('m.01f62', 'location.location.nearby_airports', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1293",
        "question": "where has the english language evolved from",
        "answer": [
            "m.082j1s",
            "m.0140qt",
            "m.03v09"
        ],
        "different_answer": [
            [
                "m.082j1s",
                "m.0140qt",
                "m.03v09"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.language_family ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.language_family', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1294",
        "question": "what country did hitler invade that started ww2",
        "answer": [
            "m.0gmbk71"
        ],
        "different_answer": [
            [
                "m.0gmbk71"
            ]
        ],
        "entity_linking": {
            "World War II": "m.081pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081pw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081pw ns:time.event.includes_event ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081pw')\na.add_fact('m.081pw', 'time.event.includes_event', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1295",
        "question": "what does matt damon play in",
        "answer": [
            "m.078sj4",
            "m.02qzh2",
            "m.03s6l2",
            "m.09gdh6k",
            "m.06hq4s",
            "m.0pd6bpq",
            "m.04zm1f",
            "m.04z257",
            "m.0ds1glg",
            "m.034c5l",
            "m.0p9lw",
            "m.0cp1_1",
            "m.03k8th",
            "m.01149vs4",
            "m.03qbfb",
            "m.0v2vjxh",
            "m.07_466",
            "m.0c030yv",
            "m.0114bqb3",
            "m.07dtx3",
            "m.07t7246",
            "m.043tz0c",
            "m.0prrm",
            "m.057__d",
            "m.02hvyj",
            "m.0b_w98s",
            "m.04dnhc_",
            "m.0dgnwwr",
            "m.0fkf28",
            "m.01dw49",
            "m.06z8s_",
            "m.0ctnxn",
            "m.0t51n95",
            "m.07yk1xz",
            "m.0ds_wq",
            "m.095yw_",
            "m.04vr_f",
            "m.01j5ql",
            "m.04t46v",
            "m.01b195",
            "m.02mpyh",
            "m.07yd9z",
            "m.07024",
            "m.06zjsc_",
            "m.0gd92",
            "m.0b73_1d",
            "m.02b5wk",
            "m.09rvvpm",
            "m.0418wg",
            "m.037j_8",
            "m.0c_3nd",
            "m.02q88q8",
            "m.04ldj71",
            "m.01s1wm",
            "m.02x3y41",
            "m.01295z79",
            "m.061681",
            "m.0djb3zw",
            "m.03twd6",
            "m.0ndx3rt",
            "m.0mzjx5c",
            "m.07nxvj",
            "m.0crw8cx",
            "m.011ypx",
            "m.0n5tytm",
            "m.0dvdmg",
            "m.06lsnn",
            "m.09xbpt",
            "m.0gwm_wy",
            "m.0yzp8"
        ],
        "different_answer": [
            [
                "m.078sj4",
                "m.02qzh2",
                "m.03s6l2",
                "m.09gdh6k",
                "m.06hq4s",
                "m.0pd6bpq",
                "m.04zm1f",
                "m.04z257",
                "m.0ds1glg",
                "m.034c5l",
                "m.0p9lw",
                "m.0cp1_1",
                "m.03k8th",
                "m.01149vs4",
                "m.03qbfb",
                "m.0v2vjxh",
                "m.07_466",
                "m.0c030yv",
                "m.0114bqb3",
                "m.07dtx3",
                "m.07t7246",
                "m.043tz0c",
                "m.0prrm",
                "m.057__d",
                "m.02hvyj",
                "m.0b_w98s",
                "m.04dnhc_",
                "m.0dgnwwr",
                "m.0fkf28",
                "m.01dw49",
                "m.06z8s_",
                "m.0ctnxn",
                "m.0t51n95",
                "m.07yk1xz",
                "m.0ds_wq",
                "m.095yw_",
                "m.04vr_f",
                "m.01j5ql",
                "m.04t46v",
                "m.01b195",
                "m.02mpyh",
                "m.07yd9z",
                "m.07024",
                "m.06zjsc_",
                "m.0gd92",
                "m.0b73_1d",
                "m.02b5wk",
                "m.09rvvpm",
                "m.0418wg",
                "m.037j_8",
                "m.0c_3nd",
                "m.02q88q8",
                "m.04ldj71",
                "m.01s1wm",
                "m.02x3y41",
                "m.01295z79",
                "m.061681",
                "m.0djb3zw",
                "m.03twd6",
                "m.0ndx3rt",
                "m.0mzjx5c",
                "m.07nxvj",
                "m.0crw8cx",
                "m.011ypx",
                "m.0n5tytm",
                "m.0dvdmg",
                "m.06lsnn",
                "m.09xbpt",
                "m.0gwm_wy",
                "m.0yzp8"
            ]
        ],
        "entity_linking": {
            "Matt Damon": "m.0169dl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0169dl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0169dl ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0169dl')\na.add_fact('m.0169dl', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1296",
        "question": "what was scottie pippen known for",
        "answer": [
            "m.02h664x",
            "m.02hrh1q"
        ],
        "different_answer": [
            [
                "m.02h664x",
                "m.02hrh1q"
            ]
        ],
        "entity_linking": {
            "Scottie Pippen": "m.01vpgl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vpgl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vpgl ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vpgl')\na.add_fact('m.01vpgl', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1297",
        "question": "what continent does canada belong to",
        "answer": [
            "m.059g4"
        ],
        "different_answer": [
            [
                "m.059g4"
            ],
            [
                "m.059g4",
                "m.07c5l"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('m.0d060g', 'base.locations.countries.continent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1298",
        "question": "what does george wilson do for a living",
        "answer": [
            "m.02h665k"
        ],
        "different_answer": [
            [
                "m.02h665k"
            ]
        ],
        "entity_linking": {
            "George Wilson": "m.0gmk9p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gmk9p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gmk9p ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gmk9p')\na.add_fact('m.0gmk9p', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1300",
        "question": "what city does fulham play in",
        "answer": [
            "m.0126hc"
        ],
        "different_answer": [
            [
                "m.0126hc"
            ]
        ],
        "entity_linking": {
            "Fulham F.C.": "m.02_lt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_lt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_lt ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_lt')\na.add_fact('m.02_lt', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1301",
        "question": "what are fun things to do in sacramento ca",
        "answer": [
            "m.0k4wq0k",
            "m.03mdd2l",
            "m.0d7nnr",
            "m.0bgv0p",
            "m.0crhh7y",
            "m.065yn2d",
            "m.07skv9",
            "m.0962d",
            "m.03v4j7",
            "m.03v4nl",
            "m.0b7727"
        ],
        "different_answer": [
            [
                "m.0k4wq0k",
                "m.03mdd2l",
                "m.0d7nnr",
                "m.0bgv0p",
                "m.0crhh7y",
                "m.065yn2d",
                "m.07skv9",
                "m.0962d",
                "m.03v4j7",
                "m.03v4nl",
                "m.0b7727"
            ]
        ],
        "entity_linking": {
            "Sacramento": "m.07bcn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bcn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bcn ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07bcn')\na.add_fact('m.07bcn', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1303",
        "question": "what other movies is josh hutcherson in",
        "answer": [
            "m.0gkz15s",
            "g.11b7k0v3hq",
            "m.04j0_gm",
            "m.09w6br",
            "m.07y296",
            "m.0hhgh69",
            "m.0dzz6g",
            "m.0135_65p",
            "m.09tqkv2",
            "m.047qh9b",
            "m.026gt8b",
            "m.0ngvsvk",
            "m.02q02ql",
            "m.07sbq6c",
            "m.05spvb",
            "m.0gy8kv2",
            "m.0gkp_k",
            "m.04f8ttb",
            "m.0n40qmp",
            "m.0ds2_k2",
            "m.09v9dsq",
            "m.0ngvtb_",
            "m.04j1phy",
            "m.04j1g18",
            "m.02qd6h2",
            "m.0x1xc_w",
            "m.0270k40",
            "m.0g4tknw",
            "m.09qs_s",
            "m.0crnh6",
            "m.0bcs_f",
            "m.0gy8kqb"
        ],
        "different_answer": [
            [
                "m.0gkz15s",
                "g.11b7k0v3hq",
                "m.04j0_gm",
                "m.09w6br",
                "m.07y296",
                "m.0hhgh69",
                "m.0dzz6g",
                "m.0135_65p",
                "m.09tqkv2",
                "m.047qh9b",
                "m.026gt8b",
                "m.0ngvsvk",
                "m.02q02ql",
                "m.07sbq6c",
                "m.05spvb",
                "m.0gy8kv2",
                "m.0gkp_k",
                "m.04f8ttb",
                "m.0n40qmp",
                "m.0ds2_k2",
                "m.09v9dsq",
                "m.0ngvtb_",
                "m.04j1phy",
                "m.04j1g18",
                "m.02qd6h2",
                "m.0x1xc_w",
                "m.0270k40",
                "m.0g4tknw",
                "m.09qs_s",
                "m.0crnh6",
                "m.0bcs_f",
                "m.0gy8kqb"
            ]
        ],
        "entity_linking": {
            "Josh Hutchersonm": "m.08wjf4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08wjf4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08wjf4 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08wjf4')\na.add_fact('m.08wjf4', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1304",
        "question": "what was hitler the leader of",
        "answer": [
            "m.05g9h",
            "m.0f6ck",
            "m.01c73n",
            "m.06qmk",
            "m.082x5",
            "m.03cqs",
            "m.03w7xf",
            "m.082mc"
        ],
        "different_answer": [
            [
                "m.05g9h",
                "m.0f6ck",
                "m.01c73n",
                "m.06qmk",
                "m.082x5",
                "m.03cqs",
                "m.03w7xf",
                "m.082mc"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:organization.organization_founder.organizations_founded ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'organization.organization_founder.organizations_founded', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1305",
        "question": "what awards did marilyn monroe won",
        "answer": [
            "m.02kgb7",
            "m.019f6s",
            "m.0c1fs8r",
            "m.0l_d69j"
        ],
        "different_answer": [
            [
                "m.02kgb7",
                "m.019f6s",
                "m.0c1fs8r",
                "m.0l_d69j"
            ]
        ],
        "entity_linking": {
            "Marilyn Monroe": "m.04wqr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wqr ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04wqr')\na.add_fact('m.04wqr', 'award.award_winner.awards_won', 'x1')\na.add_fact('x1', 'award.award_honor.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1306",
        "question": "what kind of government does iran have after 1979",
        "answer": [
            "m.01d9r3",
            "m.018wl5",
            "m.01fgl7",
            "m.01fpfn",
            "m.07lg6"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.018wl5",
                "m.01fgl7",
                "m.01fpfn",
                "m.07lg6"
            ]
        ],
        "entity_linking": {
            "Iran": "m.03shp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03shp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03shp ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03shp')\na.add_fact('m.03shp', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1307",
        "question": "where did harper lee attend high school",
        "answer": [
            "m.0crdc8g"
        ],
        "different_answer": [
            [
                "m.0crdc8g"
            ]
        ],
        "entity_linking": {
            "Harper Lee": "m.01bq7x",
            "School": "m.01y2hn6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq7x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq7x ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hn6 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hn6')\na.add_filter('x0', '!=', 'm.01bq7x')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hn6')\na.add_fact('m.01bq7x', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1308",
        "question": "what college did jrr tolkien go to",
        "answer": [
            "m.0ylvj",
            "m.07tgn"
        ],
        "different_answer": [
            [
                "m.0ylvj",
                "m.07tgn"
            ]
        ],
        "entity_linking": {
            "J. R. R. Tolkien": "m.041h0",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041h0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041h0 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.041h0')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.041h0', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1309",
        "question": "what art did wassily kandinsky do",
        "answer": [
            "m.05qdh"
        ],
        "different_answer": [
            [
                "m.05qdh"
            ]
        ],
        "entity_linking": {
            "Wassily Kandinsky": "m.0856z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0856z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0856z ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0856z')\na.add_fact('m.0856z', 'visual_art.visual_artist.art_forms', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1310",
        "question": "who won the league cup in 2002",
        "answer": [
            "m.04ltf"
        ],
        "different_answer": [
            [
                "m.04ltf"
            ]
        ],
        "entity_linking": {
            "Football League Cup": "m.012dbw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012dbw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012dbw ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012dbw')\na.add_fact('m.012dbw', 'sports.sports_award_type.winners', 'x1')\na.add_fact('x1', 'sports.sports_award.award_winner', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1311",
        "question": "what was antoni gaudi inspired by",
        "answer": [
            "m.08304",
            "m.02mpv"
        ],
        "different_answer": [
            [
                "m.08304",
                "m.02mpv"
            ]
        ],
        "entity_linking": {
            "Antoni Gaud\u00ed": "m.0yb0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yb0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yb0 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0yb0')\na.add_fact('m.0yb0', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1312",
        "question": "in what country do people speak danish",
        "answer": [
            "m.0k6nt"
        ],
        "different_answer": [
            [
                "m.0k6nt"
            ]
        ],
        "entity_linking": {
            "Danish Language": "m.0295r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0295r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0295r ns:language.human_language.main_country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0295r')\na.add_fact('m.0295r', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1313",
        "question": "who were demeter 's siblings",
        "answer": [
            "m.0bbvfjz"
        ],
        "different_answer": [
            [
                "m.0bbvfjz"
            ]
        ],
        "entity_linking": {
            "Demeter": "m.0296l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0296l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0296l ns:fictional_universe.fictional_character.siblings ?y .\n?y ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0296l')\na.add_fact('m.0296l', 'fictional_universe.fictional_character.siblings', 'x1')\na.add_fact('x1', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1314",
        "question": "where should a family stay in paris",
        "answer": [
            "m.056n81",
            "m.04fcxl"
        ],
        "different_answer": [
            [
                "m.056n81",
                "m.04fcxl"
            ]
        ],
        "entity_linking": {
            "Paris": "m.05qtj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.accommodation ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qtj')\na.add_fact('m.05qtj', 'travel.travel_destination.accommodation', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1316",
        "question": "what was the name of benjamin franklin wife",
        "answer": [
            "m.0b15_0"
        ],
        "different_answer": [
            [
                "m.0b15_0"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz",
            "Common-law marriage": "m.01bl8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.01bl8s .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bl8s')\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.01bl8s')\na.add_fact('m.019fz', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1317",
        "question": "what the largest city in spain",
        "answer": [
            "m.01zv_"
        ],
        "different_answer": [
            [
                "m.01zv_"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj",
            "\"City\"": "\"City\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.location.contains ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"City\")\n?x ns:topic_server.population_number ?sk1 .\n}\nORDER BY DESC(xsd:float(?sk1))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"City\"^^xsd:string')\na.add_fact('m.06mkj', 'location.location.contains', 'x0')\na.add_fact('x0', 'topic_server.population_number', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1319",
        "question": "who has pudge rodriguez played for",
        "answer": [
            "m.02d02",
            "m.07l8x",
            "m.02__x"
        ],
        "different_answer": [
            [
                "m.02d02",
                "m.07l8x",
                "m.02__x"
            ]
        ],
        "entity_linking": {
            "Iv\u00e1n Rodr\u00edguez": "m.02p6g7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p6g7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p6g7 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02p6g7')\na.add_fact('m.02p6g7', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1320",
        "question": "what is the milwaukee brewers stadium called",
        "answer": [
            "m.038br5"
        ],
        "different_answer": [
            [
                "m.038br5"
            ]
        ],
        "entity_linking": {
            "Milwaukee Brewers": "m.051vz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051vz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051vz ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051vz')\na.add_fact('m.051vz', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1321",
        "question": "where did the gallipoli war take place",
        "answer": [
            "m.03czv"
        ],
        "different_answer": [
            [
                "m.03czv"
            ]
        ],
        "entity_linking": {
            "Gallipoli Campaign": "m.01fc7p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fc7p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fc7p ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01fc7p')\na.add_fact('m.01fc7p', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1322",
        "question": "what other movies has tom hardy played in",
        "answer": [
            "m.0b62y7",
            "m.012vy2c1",
            "m.0ggbhy7",
            "m.0gx8_b7",
            "m.0bpm4yw",
            "m.03tyb3",
            "m.02vvwqg",
            "m.02w90vl",
            "m.0661ql3",
            "m.010b8p1w",
            "m.03g_b58",
            "m.03m6sts",
            "m.0d6_8r",
            "m.0h4ymqz",
            "m.0gfh84d",
            "m.05szl93",
            "m.0gp4pz",
            "m.04j0l1s",
            "m.0413tm",
            "m.0681f6",
            "m.0nh514x",
            "m.02852xd",
            "m.0qm8b",
            "m.0vv7fv2",
            "m.0dll_t2",
            "m.0f_j1n",
            "m.04cwpt9",
            "m.0v3gp6q",
            "m.0gxmc0c",
            "m.04j1_st",
            "m.07yvsn",
            "m.02d3wv",
            "m.014lc_",
            "m.0tkj5w3",
            "m.010s_rgr",
            "m.0w7ptqf",
            "m.04z_tyl",
            "m.04f2_t4",
            "m.0ck3fq1",
            "m.05t1gh"
        ],
        "different_answer": [
            [
                "m.0b62y7",
                "m.012vy2c1",
                "m.0ggbhy7",
                "m.0gx8_b7",
                "m.0bpm4yw",
                "m.03tyb3",
                "m.02vvwqg",
                "m.02w90vl",
                "m.0661ql3",
                "m.010b8p1w",
                "m.03g_b58",
                "m.03m6sts",
                "m.0d6_8r",
                "m.0h4ymqz",
                "m.0gfh84d",
                "m.05szl93",
                "m.0gp4pz",
                "m.04j0l1s",
                "m.0413tm",
                "m.0681f6",
                "m.0nh514x",
                "m.02852xd",
                "m.0qm8b",
                "m.0vv7fv2",
                "m.0dll_t2",
                "m.0f_j1n",
                "m.04cwpt9",
                "m.0v3gp6q",
                "m.0gxmc0c",
                "m.04j1_st",
                "m.07yvsn",
                "m.02d3wv",
                "m.014lc_",
                "m.0tkj5w3",
                "m.010s_rgr",
                "m.0w7ptqf",
                "m.04z_tyl",
                "m.04f2_t4",
                "m.0ck3fq1",
                "m.05t1gh"
            ]
        ],
        "entity_linking": {
            "Tom Hardy": "m.05xf75"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05xf75)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05xf75 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05xf75')\na.add_fact('m.05xf75', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1323",
        "question": "what to visit in atlanta",
        "answer": [
            "m.039xmp",
            "m.03xrf5",
            "m.04d135",
            "m.03l1zc",
            "m.04htb5",
            "m.033h7k",
            "m.02wl1b",
            "m.03wm34",
            "m.03spbl",
            "m.0j28sdt",
            "m.027r6hr",
            "m.050n0y",
            "m.03cspcp",
            "m.020fp1",
            "m.050mtz",
            "m.0130ft",
            "m.0b5g4p",
            "m.05c25f2",
            "m.03sm22",
            "m.050m_5",
            "m.02xmrp",
            "m.04qrhq",
            "m.02jnft",
            "m.027t71h",
            "m.06bxs4",
            "m.03q1hw",
            "m.038gvs",
            "m.04jny9",
            "m.050my1",
            "m.038bv6",
            "m.0gln9p",
            "m.04_mbv",
            "m.0fpmfg",
            "m.029fnx",
            "m.030pkm",
            "m.0c3cp2"
        ],
        "different_answer": [
            [
                "m.039xmp",
                "m.03xrf5",
                "m.04d135",
                "m.03l1zc",
                "m.04htb5",
                "m.033h7k",
                "m.02wl1b",
                "m.03wm34",
                "m.03spbl",
                "m.0j28sdt",
                "m.027r6hr",
                "m.050n0y",
                "m.03cspcp",
                "m.020fp1",
                "m.050mtz",
                "m.0130ft",
                "m.0b5g4p",
                "m.05c25f2",
                "m.03sm22",
                "m.050m_5",
                "m.02xmrp",
                "m.04qrhq",
                "m.02jnft",
                "m.027t71h",
                "m.06bxs4",
                "m.03q1hw",
                "m.038gvs",
                "m.04jny9",
                "m.050my1",
                "m.038bv6",
                "m.0gln9p",
                "m.04_mbv",
                "m.0fpmfg",
                "m.029fnx",
                "m.030pkm",
                "m.0c3cp2"
            ]
        ],
        "entity_linking": {
            "Atlanta": "m.013yq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013yq ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013yq')\na.add_fact('m.013yq', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1324",
        "question": "what college did john nash go to",
        "answer": [
            "m.01q2sk",
            "m.05zl0"
        ],
        "different_answer": [
            [
                "m.01q2sk",
                "m.05zl0"
            ]
        ],
        "entity_linking": {
            "John Forbes Nash, Jr.": "m.0pyqh",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pyqh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pyqh ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0pyqh')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0pyqh', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1325",
        "question": "what language do maltese speak",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ],
            [
                "m.04t3_",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Malta": "m.04v3q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v3q ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04v3q')\na.add_fact('m.04v3q', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1326",
        "question": "what did thomas edison do for the world",
        "answer": [
            "m.0xrxw",
            "m.0cpk7",
            "m.02r0w8q",
            "m.03q9w5j",
            "m.01cbh9",
            "m.0505x",
            "m.0d9fkw",
            "m.063md"
        ],
        "different_answer": [
            [
                "m.0xrxw",
                "m.0cpk7",
                "m.02r0w8q",
                "m.03q9w5j",
                "m.01cbh9",
                "m.0505x",
                "m.0d9fkw",
                "m.063md"
            ]
        ],
        "entity_linking": {
            "Thomas Edison": "m.07bty"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bty ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07bty')\na.add_fact('m.07bty', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1327",
        "question": "where is shakira from",
        "answer": [
            "m.01ls2"
        ],
        "different_answer": [
            [
                "m.01ls2"
            ],
            [
                "m.01ls2"
            ]
        ],
        "entity_linking": {
            "Shakira": "m.01wj18h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wj18h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wj18h ns:music.artist.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wj18h')\na.add_fact('m.01wj18h', 'music.artist.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1328",
        "question": "what did hayes do",
        "answer": [
            "m.01xljv7"
        ],
        "different_answer": [
            [
                "m.01xljv7"
            ]
        ],
        "entity_linking": {
            "Rutherford B. Hayes": "m.06g42"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06g42)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06g42 ns:common.topic.notable_for ?y .\n?y ns:common.notable_for.object ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06g42')\na.add_fact('m.06g42', 'common.topic.notable_for', 'x1')\na.add_fact('x1', 'common.notable_for.object', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1329",
        "question": "who played bilbo in the fellowship of the ring",
        "answer": [
            "m.016zp5"
        ],
        "different_answer": [
            [
                "m.016zp5"
            ],
            [
                "m.016zp5"
            ]
        ],
        "entity_linking": {
            "The Lord of the Rings: The Fellowship of the Ring": "m.017gl1",
            "Old Bilbo": "m.0g6z1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017gl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017gl1 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0g6z1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g6z1')\na.add_filter('x0', '!=', 'm.017gl1')\na.add_fact('x1', 'film.performance.character', 'm.0g6z1')\na.add_fact('m.017gl1', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1330",
        "question": "what is the most populated state in united states",
        "answer": [
            "m.059rby"
        ],
        "different_answer": [
            [
                "m.059rby"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:base.aareas.schema.administrative_area.administrative_children ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'base.aareas.schema.administrative_area.administrative_children', 'x0')\na.add_fact('x0', 'topic_server.population_number', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1331",
        "question": "who is my state senator arizona",
        "answer": [
            "m.024p7j",
            "m.04dt8k",
            "m.02rzt9",
            "m.0bymv",
            "m.01y0mp",
            "m.03mchy",
            "m.07s4f1",
            "m.07sgkx",
            "m.03l8kj",
            "m.07sckt",
            "m.01j6t"
        ],
        "different_answer": [
            [
                "m.024p7j",
                "m.04dt8k",
                "m.02rzt9",
                "m.0bymv",
                "m.01y0mp",
                "m.03mchy",
                "m.07s4f1",
                "m.07sgkx",
                "m.03l8kj",
                "m.07sckt",
                "m.01j6t"
            ]
        ],
        "entity_linking": {
            "Arizona": "m.0vmt",
            "United States Senator": "m.02_7l8y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7l8y')\na.add_filter('x0', '!=', 'm.0vmt')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.02_7l8y')\na.add_fact('m.0vmt', 'government.political_district.representatives', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1332",
        "question": "when does the vietnam war end",
        "answer": [
            "1975-04-30-08:00"
        ],
        "different_answer": [
            [
                "1975-04-30-08:00"
            ]
        ],
        "entity_linking": {
            "Vietnam War": "m.07_nf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_nf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_nf ns:time.event.end_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_nf')\na.add_fact('m.07_nf', 'time.event.end_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1333",
        "question": "where does the tennessee river go",
        "answer": [
            "m.05lx3"
        ],
        "different_answer": [
            [
                "m.05lx3"
            ]
        ],
        "entity_linking": {
            "Tennessee River": "m.01spb0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01spb0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01spb0 ns:geography.river.mouth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01spb0')\na.add_fact('m.01spb0', 'geography.river.mouth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1334",
        "question": "who did tom hanks play in apollo 13",
        "answer": [
            "m.02nw821"
        ],
        "different_answer": [
            [
                "m.02nw821"
            ],
            [
                "m.02nw821"
            ]
        ],
        "entity_linking": {
            "Tom Hanks": "m.0bxtg",
            "Apollo 13": "m.011yd2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bxtg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bxtg ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.011yd2 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011yd2')\na.add_filter('x0', '!=', 'm.0bxtg')\na.add_fact('x1', 'film.performance.film', 'm.011yd2')\na.add_fact('m.0bxtg', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1335",
        "question": "what language do they in ghana",
        "answer": [
            "m.02h40lc",
            "m.02j199",
            "m.05n7jk",
            "m.01_lfh",
            "m.02vkpsr",
            "m.02hx8z6",
            "m.04wm85",
            "m.02hw_03",
            "m.02hwm3m",
            "m.01kphj",
            "m.05781j",
            "m.08r4hf"
        ],
        "different_answer": [
            [
                "m.02h40lc",
                "m.02j199",
                "m.05n7jk",
                "m.01_lfh",
                "m.02vkpsr",
                "m.02hx8z6",
                "m.04wm85",
                "m.02hw_03",
                "m.02hwm3m",
                "m.01kphj",
                "m.05781j",
                "m.08r4hf"
            ],
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Ghana": "m.035dk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035dk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035dk ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035dk')\na.add_fact('m.035dk', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1336",
        "question": "what is utah 's state capitol",
        "answer": [
            "m.0f2r6"
        ],
        "different_answer": [
            [
                "m.0f2r6"
            ],
            [
                "m.0f2r6"
            ],
            [
                "m.0f2r6"
            ],
            [
                "m.0f2r6"
            ]
        ],
        "entity_linking": {
            "Utah State Capitol": "m.09b86q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09b86q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09b86q ns:location.location.street_address ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07srw')\na.add_fact('m.07srw', 'location.us_state.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1337",
        "question": "what all did ben franklin invent",
        "answer": [
            "m.013cqs",
            "m.01zh8g",
            "m.0135nr",
            "m.029mmz"
        ],
        "different_answer": [
            [
                "m.013cqs",
                "m.01zh8g",
                "m.0135nr",
                "m.029mmz"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1339",
        "question": "what team does jeremy lin play for 2013",
        "answer": [
            "m.0jmfb"
        ],
        "different_answer": [
            [
                "m.0jmfb"
            ]
        ],
        "entity_linking": {
            "Jeremy Lin": "m.09k72lh",
            "2013-12-31": "\"2013-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2013-01-01": "\"2013-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09k72lh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09k72lh ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2013-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2013-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09k72lh')\na.add_fact('m.09k72lh', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2013-12-31\"^^xsd:dateTime', '\"2013-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1340",
        "question": "what is steve nash nationality",
        "answer": [
            "m.07ssc",
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.07ssc",
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "Steve Nash": "m.01yqrk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yqrk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yqrk ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01yqrk')\na.add_fact('m.01yqrk', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1341",
        "question": "who are the u s senators of pennsylvania",
        "answer": [
            "m.0245tw",
            "m.08npc4",
            "m.08pzc9",
            "m.08pkdz",
            "m.043p20",
            "m.08r3tg",
            "m.047ymw",
            "m.08nl9z",
            "m.01fgd3",
            "m.08r3f5",
            "m.01hh_b",
            "m.02_kk7",
            "m.08nlgl",
            "m.0478p7",
            "m.038445",
            "m.08pjx4",
            "m.05fc78g",
            "m.05ygxh",
            "m.02d56c",
            "m.0293z9",
            "m.08nlt0",
            "m.08pkx2",
            "m.037rgj",
            "m.06q523",
            "m.08nng2",
            "m.024pf4",
            "m.08r2xf",
            "m.060v2g",
            "m.03ww2x",
            "m.039myb",
            "m.020xvj",
            "m.033l_z",
            "m.08pllp",
            "m.0204ym",
            "m.042fk",
            "m.05hr3x",
            "m.01h4lz",
            "m.08p_3q",
            "m.0293dd",
            "m.03wt_5",
            "m.08pj__",
            "m.08pdhc",
            "m.07qs7m",
            "m.08nnqk",
            "m.0285_t",
            "m.01p369",
            "m.0m89b"
        ],
        "different_answer": [
            [
                "m.0245tw",
                "m.08npc4",
                "m.08pzc9",
                "m.08pkdz",
                "m.043p20",
                "m.08r3tg",
                "m.047ymw",
                "m.08nl9z",
                "m.01fgd3",
                "m.08r3f5",
                "m.01hh_b",
                "m.02_kk7",
                "m.08nlgl",
                "m.0478p7",
                "m.038445",
                "m.08pjx4",
                "m.05fc78g",
                "m.05ygxh",
                "m.02d56c",
                "m.0293z9",
                "m.08nlt0",
                "m.08pkx2",
                "m.037rgj",
                "m.06q523",
                "m.08nng2",
                "m.024pf4",
                "m.08r2xf",
                "m.060v2g",
                "m.03ww2x",
                "m.039myb",
                "m.020xvj",
                "m.033l_z",
                "m.08pllp",
                "m.0204ym",
                "m.042fk",
                "m.05hr3x",
                "m.01h4lz",
                "m.08p_3q",
                "m.0293dd",
                "m.03wt_5",
                "m.08pj__",
                "m.08pdhc",
                "m.07qs7m",
                "m.08nnqk",
                "m.0285_t",
                "m.01p369",
                "m.0m89b"
            ]
        ],
        "entity_linking": {
            "Pennsylvania": "m.05tbn",
            "United States Senator": "m.02_7l8y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7l8y')\na.add_filter('x0', '!=', 'm.05tbn')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.02_7l8y')\na.add_fact('m.05tbn', 'government.political_district.representatives', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1342",
        "question": "what kind of language does france speak",
        "answer": [
            "m.064_8sq"
        ],
        "different_answer": [
            [
                "m.064_8sq"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1343",
        "question": "what degree did martin luther king earn",
        "answer": [
            "m.014mlp",
            "m.04zx3q1",
            "m.079h0",
            "m.05vjnk"
        ],
        "different_answer": [
            [
                "m.014mlp",
                "m.04zx3q1",
                "m.079h0",
                "m.05vjnk"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.degree', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1344",
        "question": "what two states is st louis in",
        "answer": [
            "m.04ych"
        ],
        "different_answer": [
            [
                "m.04ych"
            ]
        ],
        "entity_linking": {
            "St. Louis": "m.06wxw",
            "\"State\"": "\"State\"@en"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06wxw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06wxw ns:location.location.containedby ?x .\n?x ns:base.biblioness.bibs_location.loc_type ?sk0 .\nFILTER (str(?sk0) = \"State\")\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06wxw')\na.add_fact('x0', 'base.biblioness.bibs_location.loc_type', '\"State\"^^xsd:string')\na.add_fact('m.06wxw', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1348",
        "question": "what team did peyton manning 's dad play for",
        "answer": [
            "m.03gqb0k",
            "m.04nmxtk",
            "m.05g3v",
            "m.051q5"
        ],
        "different_answer": [
            [
                "m.03gqb0k",
                "m.04nmxtk",
                "m.05g3v",
                "m.051q5"
            ]
        ],
        "entity_linking": {
            "Peyton Manning": "m.027jv8"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nns:m.027jv8 ns:people.person.parents ?y .\n?y ns:people.person.gender ns:m.05zppz . #Male\n?y ns:sports.pro_athlete.teams ?z .\n?z ns:sports.sports_team_roster.team ?x .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1350",
        "question": "what did jesse owens won",
        "answer": [
            "m.04kc5dv"
        ],
        "different_answer": [
            [
                "m.04kc5dv"
            ]
        ],
        "entity_linking": {
            "Jesse Owens": "m.0cmr3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cmr3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cmr3 ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cmr3')\na.add_fact('m.0cmr3', 'award.award_winner.awards_won', 'x1')\na.add_fact('x1', 'award.award_honor.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1351",
        "question": "what is the name of the currency used in peru",
        "answer": [
            "m.0b423v"
        ],
        "different_answer": [
            [
                "m.0b423v"
            ]
        ],
        "entity_linking": {
            "Peru": "m.016wzw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016wzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016wzw ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016wzw')\na.add_fact('m.016wzw', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1353",
        "question": "what are the four nations of the united kingdom",
        "answer": [
            "m.02jx1",
            "m.05bcl",
            "m.06q1r",
            "m.0j5g9"
        ],
        "different_answer": [
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ],
            [
                "m.02jx1",
                "m.05bcl",
                "m.06q1r",
                "m.0j5g9"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:base.aareas.schema.administrative_area.administrative_children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.first_level_divisions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1354",
        "question": "who is judy garland father",
        "answer": [
            "m.0gyhn8m"
        ],
        "different_answer": [
            [
                "m.0gyhn8m"
            ]
        ],
        "entity_linking": {
            "Judy Garland": "m.0g10g",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g10g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g10g ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0g10g')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.0g10g', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1355",
        "question": "what school did robert f kennedy go to",
        "answer": [
            "m.01mpwj",
            "m.02h45k",
            "m.05qgd9",
            "m.03ksy",
            "m.0g8rj",
            "m.01vc5m"
        ],
        "different_answer": [
            [
                "m.01mpwj",
                "m.02h45k",
                "m.05qgd9",
                "m.03ksy",
                "m.0g8rj",
                "m.01vc5m"
            ]
        ],
        "entity_linking": {
            "Robert F. Kennedy": "m.06hx2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hx2 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06hx2')\na.add_fact('m.06hx2', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1356",
        "question": "what drug killed marilyn monroe",
        "answer": [
            "m.0bwj2gf"
        ],
        "different_answer": [
            [
                "m.0bwj2gf"
            ]
        ],
        "entity_linking": {
            "Marilyn Monroe": "m.04wqr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04wqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04wqr ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04wqr')\na.add_fact('m.04wqr', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1357",
        "question": "where is the fukushima daiichi nuclear power station",
        "answer": [
            "m.03_3d",
            "m.03k_g5"
        ],
        "different_answer": [
            [
                "m.03_3d",
                "m.03k_g5"
            ]
        ],
        "entity_linking": {
            "Fukushima Daiichi Nuclear Power Plant": "m.02vkzy2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vkzy2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vkzy2 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vkzy2')\na.add_fact('m.02vkzy2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1358",
        "question": "what is los angeles california time zone",
        "answer": [
            "m.02lcqs"
        ],
        "different_answer": [
            [
                "m.02lcqs"
            ]
        ],
        "entity_linking": {
            "Los Angeles": "m.030qb3t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030qb3t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030qb3t ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.030qb3t')\na.add_fact('m.030qb3t', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1359",
        "question": "what did nicolas cage name his son",
        "answer": [
            "m.03jnwc9",
            "m.0gfhlgk"
        ],
        "different_answer": [
            [
                "m.03jnwc9",
                "m.0gfhlgk"
            ]
        ],
        "entity_linking": {
            "Nicolas Cage": "m.01vvb4m",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvb4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvb4m ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.01vvb4m')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.01vvb4m', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1361",
        "question": "what currency should take to mexico",
        "answer": [
            "m.012ts8"
        ],
        "different_answer": [
            [
                "m.012ts8"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1362",
        "question": "who is the state governor of florida",
        "answer": [
            "m.0btx2g"
        ],
        "different_answer": [
            [
                "m.0btx2g"
            ]
        ],
        "entity_linking": {
            "Florida": "m.02xry",
            "Governor": "m.0fkvn",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xry ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.02xry')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.02xry', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1363",
        "question": "who was jessica simpson married too",
        "answer": [
            "m.039bpc",
            "m.081g6c"
        ],
        "different_answer": [
            [
                "m.039bpc",
                "m.081g6c"
            ]
        ],
        "entity_linking": {
            "Jessica Simpson": "m.0c7xjb",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c7xjb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c7xjb ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0c7xjb')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0c7xjb', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1364",
        "question": "what do they speak in scotland",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Scotland": "m.06q1r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06q1r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06q1r ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06q1r')\na.add_fact('m.06q1r', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1365",
        "question": "what did john dalton study",
        "answer": [
            "m.01pxg",
            "m.05snw"
        ],
        "different_answer": [
            [
                "m.01pxg",
                "m.05snw"
            ]
        ],
        "entity_linking": {
            "John Dalton": "m.0c0x7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c0x7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c0x7 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c0x7')\na.add_fact('m.0c0x7', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1366",
        "question": "what songs do zac brown band sing",
        "answer": [
            "m.0gdvdtx",
            "m.0nnmggw",
            "m.010dlzg4",
            "m.01c_gtt",
            "m.0fw70rr",
            "m.01c_gtc",
            "m.0101zq_h",
            "m.0nl_0rw",
            "m.0101zp_w",
            "m.0f546tn",
            "m.0rkq_kx",
            "m.0gdwbml",
            "m.0135grb1",
            "m.0f8f7n9",
            "m.01c_fz7",
            "m.01c_fy4",
            "m.0gdwblr",
            "m.0nl0nzx",
            "m.0129tkdd",
            "m.0g7f2_n",
            "m.0jygrln",
            "m.0jygrn1",
            "m.0rflt4f",
            "m.0jygrp6",
            "m.0f519n5",
            "m.0dx4njy",
            "m.01c_gvp",
            "m.0nmhzrm",
            "m.0135rcs7",
            "m.0rkj2tb",
            "m.0dsqtqv",
            "m.0ftsth6",
            "m.0fzd6b6",
            "m.0f9fvzw",
            "m.0dzf4v0",
            "m.0nljcpm",
            "m.01c_fyc",
            "m.0fc_m88",
            "m.0fzd6bj",
            "m.0gdw364",
            "m.0fw2_fj",
            "m.0g7lp5z",
            "m.0dmtg8s",
            "m.0rgm1w_",
            "m.0dpchd7",
            "m.0jygrny",
            "m.0jygrmh",
            "m.0jygrlc",
            "m.01360k_d",
            "m.0fx_q4h",
            "m.0f519lr",
            "m.0fy6wky",
            "m.0rj79yx",
            "m.01c_gwb",
            "m.0135ws4y",
            "m.013509h7",
            "m.0d_mfq5",
            "m.0rk75ff",
            "m.0101zz44",
            "m.01c_fyl",
            "m.0135gtfr",
            "m.01360nfn",
            "m.01c_gvx",
            "m.0136d2pm",
            "m.0fyhhqg",
            "m.0fslpfw",
            "m.01021ttn",
            "m.01c_gw3",
            "m.0gdvms4",
            "m.0dxggbb",
            "m.0ftqgfj",
            "m.0gdwbmr",
            "m.0dvb_cx",
            "m.01369q9_",
            "m.01351pp0",
            "m.0fz92xg",
            "m.0jygrnb",
            "m.0fc5s9q",
            "m.0fslxtz",
            "m.0dtkwc_",
            "m.0f519p6",
            "m.0y634f2",
            "m.01c_fyt",
            "m.0rk7n_b",
            "m.01c_fxy",
            "m.0dmp4kx",
            "m.01c_gv0",
            "m.0fzd6bf",
            "m.01361s7v",
            "m.0gdwbm7",
            "m.013559hm",
            "m.0jygrm6",
            "m.012yn0y1",
            "m.01c_fzp",
            "m.0f5mxtc",
            "m.0x71lq_",
            "m.0fzd69_",
            "m.0f8_qkn",
            "m.0fc_mwv",
            "m.0gdwbmv",
            "m.0fwhdsl",
            "m.0nl5fws",
            "m.0nlj4bx",
            "m.0fc_mtr",
            "m.0gdwblx",
            "m.0fzd6bm",
            "m.01c_fxh",
            "m.0gdwbm3",
            "m.0rhg50s",
            "m.0g7lp6b",
            "m.0dr0yx1",
            "m.0f69fsx",
            "m.0gdwbl_",
            "m.0f519j1",
            "m.0136czmp",
            "m.0fzd6c2",
            "m.01c_gv7",
            "m.0jygrms",
            "m.01c_gvg",
            "m.0gdwbln",
            "m.0nlqjc_",
            "m.0g6qq13",
            "m.0fx0ts3",
            "m.0fzd6bx",
            "m.01c_fz0",
            "m.0fr1z61",
            "m.01c_fxq",
            "m.0w02f5g",
            "m.0fyj03x",
            "m.01354z96",
            "m.0f0dxlb",
            "m.0135jp4g",
            "m.0jygrnn",
            "m.0fbt2dw",
            "m.0nnbldf",
            "m.0dvw2yv",
            "m.0fxc8k8",
            "m.0rftjxf",
            "m.0jygrly",
            "m.01c_fzg",
            "m.0dnjgk1",
            "m.01c_gtl"
        ],
        "different_answer": [
            [
                "m.0gdvdtx",
                "m.0nnmggw",
                "m.010dlzg4",
                "m.01c_gtt",
                "m.0fw70rr",
                "m.01c_gtc",
                "m.0101zq_h",
                "m.0nl_0rw",
                "m.0101zp_w",
                "m.0f546tn",
                "m.0rkq_kx",
                "m.0gdwbml",
                "m.0135grb1",
                "m.0f8f7n9",
                "m.01c_fz7",
                "m.01c_fy4",
                "m.0gdwblr",
                "m.0nl0nzx",
                "m.0129tkdd",
                "m.0g7f2_n",
                "m.0jygrln",
                "m.0jygrn1",
                "m.0rflt4f",
                "m.0jygrp6",
                "m.0f519n5",
                "m.0dx4njy",
                "m.01c_gvp",
                "m.0nmhzrm",
                "m.0135rcs7",
                "m.0rkj2tb",
                "m.0dsqtqv",
                "m.0ftsth6",
                "m.0fzd6b6",
                "m.0f9fvzw",
                "m.0dzf4v0",
                "m.0nljcpm",
                "m.01c_fyc",
                "m.0fc_m88",
                "m.0fzd6bj",
                "m.0gdw364",
                "m.0fw2_fj",
                "m.0g7lp5z",
                "m.0dmtg8s",
                "m.0rgm1w_",
                "m.0dpchd7",
                "m.0jygrny",
                "m.0jygrmh",
                "m.0jygrlc",
                "m.01360k_d",
                "m.0fx_q4h",
                "m.0f519lr",
                "m.0fy6wky",
                "m.0rj79yx",
                "m.01c_gwb",
                "m.0135ws4y",
                "m.013509h7",
                "m.0d_mfq5",
                "m.0rk75ff",
                "m.0101zz44",
                "m.01c_fyl",
                "m.0135gtfr",
                "m.01360nfn",
                "m.01c_gvx",
                "m.0136d2pm",
                "m.0fyhhqg",
                "m.0fslpfw",
                "m.01021ttn",
                "m.01c_gw3",
                "m.0gdvms4",
                "m.0dxggbb",
                "m.0ftqgfj",
                "m.0gdwbmr",
                "m.0dvb_cx",
                "m.01369q9_",
                "m.01351pp0",
                "m.0fz92xg",
                "m.0jygrnb",
                "m.0fc5s9q",
                "m.0fslxtz",
                "m.0dtkwc_",
                "m.0f519p6",
                "m.0y634f2",
                "m.01c_fyt",
                "m.0rk7n_b",
                "m.01c_fxy",
                "m.0dmp4kx",
                "m.01c_gv0",
                "m.0fzd6bf",
                "m.01361s7v",
                "m.0gdwbm7",
                "m.013559hm",
                "m.0jygrm6",
                "m.012yn0y1",
                "m.01c_fzp",
                "m.0f5mxtc",
                "m.0x71lq_",
                "m.0fzd69_",
                "m.0f8_qkn",
                "m.0fc_mwv",
                "m.0gdwbmv",
                "m.0fwhdsl",
                "m.0nl5fws",
                "m.0nlj4bx",
                "m.0fc_mtr",
                "m.0gdwblx",
                "m.0fzd6bm",
                "m.01c_fxh",
                "m.0gdwbm3",
                "m.0rhg50s",
                "m.0g7lp6b",
                "m.0dr0yx1",
                "m.0f69fsx",
                "m.0gdwbl_",
                "m.0f519j1",
                "m.0136czmp",
                "m.0fzd6c2",
                "m.01c_gv7",
                "m.0jygrms",
                "m.01c_gvg",
                "m.0gdwbln",
                "m.0nlqjc_",
                "m.0g6qq13",
                "m.0fx0ts3",
                "m.0fzd6bx",
                "m.01c_fz0",
                "m.0fr1z61",
                "m.01c_fxq",
                "m.0w02f5g",
                "m.0fyj03x",
                "m.01354z96",
                "m.0f0dxlb",
                "m.0135jp4g",
                "m.0jygrnn",
                "m.0fbt2dw",
                "m.0nnbldf",
                "m.0dvw2yv",
                "m.0fxc8k8",
                "m.0rftjxf",
                "m.0jygrly",
                "m.01c_fzg",
                "m.0dnjgk1",
                "m.01c_gtl"
            ]
        ],
        "entity_linking": {
            "Zac Brown Band": "m.0408z4w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0408z4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0408z4w ns:music.artist.track ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0408z4w')\na.add_fact('m.0408z4w', 'music.artist.track', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1367",
        "question": "where is glastonbury england",
        "answer": [
            "m.07ssc",
            "m.01pgbg"
        ],
        "different_answer": [
            [
                "m.07ssc",
                "m.01pgbg"
            ]
        ],
        "entity_linking": {
            "Glastonbury": "m.0g78h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g78h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g78h ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g78h')\na.add_fact('m.0g78h', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1368",
        "question": "who formed the american federation of labor",
        "answer": [
            "m.01w91b"
        ],
        "different_answer": [
            [
                "m.01w91b"
            ]
        ],
        "entity_linking": {
            "American Federation of Labor": "m.01z4fn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z4fn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z4fn ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01z4fn')\na.add_fact('m.01z4fn', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1369",
        "question": "what to visit in denver",
        "answer": [
            "m.08yrqf",
            "m.08hnyb",
            "m.06k4_1",
            "m.0cvztr",
            "m.0j1z2v4",
            "m.05tf81",
            "m.04cs6m",
            "m.05f5ywb",
            "m.049q_0",
            "m.04j9vvm",
            "m.052lxk_",
            "m.052lxk7",
            "m.0cp03nr",
            "m.0j1z2ts",
            "m.02bjgd",
            "m.05zt_ds"
        ],
        "different_answer": [
            [
                "m.08yrqf",
                "m.08hnyb",
                "m.06k4_1",
                "m.0cvztr",
                "m.0j1z2v4",
                "m.05tf81",
                "m.04cs6m",
                "m.05f5ywb",
                "m.049q_0",
                "m.04j9vvm",
                "m.052lxk_",
                "m.052lxk7",
                "m.0cp03nr",
                "m.0j1z2ts",
                "m.02bjgd",
                "m.05zt_ds"
            ]
        ],
        "entity_linking": {
            "Denver": "m.02cl1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02cl1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02cl1 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02cl1')\na.add_fact('m.02cl1', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1370",
        "question": "where did thomas hobbes live",
        "answer": [
            "m.05qtj"
        ],
        "different_answer": [
            [
                "m.05qtj"
            ]
        ],
        "entity_linking": {
            "Thomas Hobbes": "m.07c37"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07c37)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07c37 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07c37')\na.add_fact('m.07c37', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1373",
        "question": "where was john f kennedy when he got shot",
        "answer": [
            "m.0f2rq"
        ],
        "different_answer": [
            [
                "m.0f2rq"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('m.0d3k14', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1374",
        "question": "what type of government does italy have 2011",
        "answer": [
            "m.01fpfn",
            "m.0c9rw5",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.0c9rw5",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Italy": "m.03rjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rjj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rjj ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rjj')\na.add_fact('m.03rjj', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1376",
        "question": "what province is montreal canada located",
        "answer": [
            "m.0694j"
        ],
        "different_answer": [
            [
                "m.0694j"
            ],
            [
                "m.0694j"
            ]
        ],
        "entity_linking": {
            "Montreal": "m.052p7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.052p7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.052p7 ns:base.biblioness.bibs_location.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.052p7')\na.add_fact('m.052p7', 'base.biblioness.bibs_location.state', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1378",
        "question": "who does kellan lutz play in prom night",
        "answer": [
            "m.0gyg58j"
        ],
        "different_answer": [
            [
                "m.0gyg58j"
            ]
        ],
        "entity_linking": {
            "Kellan Lutz": "m.02pjwn5",
            "Prom Night": "m.02rxbq6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02pjwn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02pjwn5 ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.02rxbq6 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02rxbq6')\na.add_filter('x0', '!=', 'm.02pjwn5')\na.add_fact('x1', 'film.performance.film', 'm.02rxbq6')\na.add_fact('m.02pjwn5', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1379",
        "question": "what did franz liszt do to earn a living",
        "answer": [
            "m.05xjb",
            "m.04l1gwb",
            "m.05vyk",
            "m.01cmdm",
            "m.01c72t"
        ],
        "different_answer": [
            [
                "m.05xjb",
                "m.04l1gwb",
                "m.05vyk",
                "m.01cmdm",
                "m.01c72t"
            ]
        ],
        "entity_linking": {
            "Life of Franz Liszt": "m.0hqgp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqgp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqgp ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hqgp')\na.add_fact('m.0hqgp', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1380",
        "question": "what was nikola tesla known for",
        "answer": [
            "m.07s7r2",
            "m.04q69_",
            "m.02xhgx0",
            "m.05snw",
            "m.03sbb",
            "m.06q2q"
        ],
        "different_answer": [
            [
                "m.07s7r2",
                "m.04q69_",
                "m.02xhgx0",
                "m.05snw",
                "m.03sbb",
                "m.06q2q"
            ]
        ],
        "entity_linking": {
            "Nikola Tesla": "m.05d1y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05d1y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05d1y ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05d1y')\na.add_fact('m.05d1y', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1381",
        "question": "what is the zip code for princeton nj",
        "answer": [
            "m.03n_q9c",
            "m.02070pc",
            "m.07nrtr1",
            "m.09sgmmm",
            "m.07nrtr8",
            "m.02070mv",
            "m.0zscz9w"
        ],
        "different_answer": [
            [
                "m.03n_q9c",
                "m.02070pc",
                "m.07nrtr1",
                "m.09sgmmm",
                "m.07nrtr8",
                "m.02070mv",
                "m.0zscz9w"
            ]
        ],
        "entity_linking": {
            "Princeton": "m.0ljsz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ljsz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ljsz ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ljsz')\na.add_fact('m.0ljsz', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1382",
        "question": "what other countries border argentina",
        "answer": [
            "m.0165v",
            "m.05v10",
            "m.01p1v",
            "m.07twz",
            "m.015fr"
        ],
        "different_answer": [
            [
                "m.0165v",
                "m.05v10",
                "m.01p1v",
                "m.07twz",
                "m.015fr"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.0jgd', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1383",
        "question": "what language does people in iceland speak",
        "answer": [
            "m.01gmkg"
        ],
        "different_answer": [
            [
                "m.01gmkg"
            ],
            [
                "m.01gmkg"
            ]
        ],
        "entity_linking": {
            "Iceland": "m.03rj0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rj0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rj0 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rj0')\na.add_fact('m.03rj0', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1384",
        "question": "what is the predominant religion in israel",
        "answer": [
            "m.03_gx"
        ],
        "different_answer": [
            [
                "m.03_gx"
            ]
        ],
        "entity_linking": {
            "Israel": "m.03spz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03spz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03spz ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n?y ns:location.religion_percentage.percentage ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03spz')\na.add_fact('m.03spz', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.percentage', 'x2')\na.add_max('x2')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1385",
        "question": "who has coached the carolina panthers",
        "answer": [
            "m.06_73l",
            "m.04tmdx",
            "m.03zbvp"
        ],
        "different_answer": [
            [
                "m.06_73l",
                "m.04tmdx",
                "m.03zbvp"
            ]
        ],
        "entity_linking": {
            "Carolina Panthers": "m.01y3c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y3c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y3c ns:american_football.football_team.historical_coaching_staff ?y .\n?y ns:american_football.football_historical_coach_position.coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y3c')\na.add_fact('m.01y3c', 'american_football.football_team.historical_coaching_staff', 'x1')\na.add_fact('x1', 'american_football.football_historical_coach_position.coach', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1387",
        "question": "what time zone is toronto gmt",
        "answer": [
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Toronto": "m.0h7h6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7h6')\na.add_fact('m.0h7h6', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1388",
        "question": "what country did toussaint l'ouverture help free",
        "answer": [
            "m.09b63n",
            "m.0410mhq",
            "m.02wf01"
        ],
        "different_answer": [
            [
                "m.09b63n",
                "m.0410mhq",
                "m.02wf01"
            ]
        ],
        "entity_linking": {
            "Toussaint Louverture": "m.011wgw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011wgw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011wgw ns:military.military_person.service ?y .\n?y ns:military.military_service.military_force ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011wgw')\na.add_fact('m.011wgw', 'military.military_person.service', 'x1')\na.add_fact('x1', 'military.military_service.military_force', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1389",
        "question": "what jobs did robert burns have",
        "answer": [
            "m.0kyk",
            "m.0cbd2",
            "m.0knj1",
            "m.05z96"
        ],
        "different_answer": [
            [
                "m.0kyk",
                "m.0cbd2",
                "m.0knj1",
                "m.05z96"
            ]
        ],
        "entity_linking": {
            "Robert Burns": "m.09482"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09482)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09482 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09482')\na.add_fact('m.09482', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1390",
        "question": "who won utah attorney general",
        "answer": [
            "m.0g93dh",
            "m.0ztk8w5",
            "m.09v9vs_"
        ],
        "different_answer": [
            [
                "m.0g93dh",
                "m.0ztk8w5",
                "m.09v9vs_"
            ]
        ],
        "entity_linking": {
            "Utah": "m.07srw",
            "Utah Attorney General": "m.0hzbyr1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07srw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07srw ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.0hzbyr1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzbyr1')\na.add_filter('x0', '!=', 'm.07srw')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.0hzbyr1')\na.add_fact('m.07srw', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1391",
        "question": "who is the leader of libya 2011",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Libya": "m.04gqr",
            "Chairman": "m.09d6p2",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04gqr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04gqr ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.09d6p2 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09d6p2')\na.add_filter('x0', '!=', 'm.04gqr')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.09d6p2')\na.add_fact('m.04gqr', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1392",
        "question": "what the language spoken in indonesia",
        "answer": [
            "m.02hwx1l",
            "m.0f9fsf",
            "m.02h40lc",
            "m.097kp",
            "m.02bv9",
            "m.0y1mh",
            "m.075yc64",
            "m.01qzl2",
            "m.020257",
            "m.0201jz"
        ],
        "different_answer": [
            [
                "m.02hwx1l",
                "m.0f9fsf",
                "m.02h40lc",
                "m.097kp",
                "m.02bv9",
                "m.0y1mh",
                "m.075yc64",
                "m.01qzl2",
                "m.020257",
                "m.0201jz"
            ],
            [
                "m.097kp"
            ]
        ],
        "entity_linking": {
            "Indonesia": "m.03ryn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ryn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ryn ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ryn')\na.add_fact('m.03ryn', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1394",
        "question": "who coaches the carolina panthers",
        "answer": [
            "m.04g57l"
        ],
        "different_answer": [
            [
                "m.04g57l"
            ]
        ],
        "entity_linking": {
            "Carolina Panthers": "m.01y3c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01y3c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01y3c ns:american_football.football_team.current_head_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y3c')\na.add_fact('m.01y3c', 'american_football.football_team.current_head_coach', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1395",
        "question": "what other countries does south africa share borders with",
        "answer": [
            "m.0166v",
            "m.088q4",
            "m.05bmq",
            "m.04hvw",
            "m.06v36",
            "m.04wlh"
        ],
        "different_answer": [
            [
                "m.0166v",
                "m.088q4",
                "m.05bmq",
                "m.04hvw",
                "m.06v36",
                "m.04wlh"
            ]
        ],
        "entity_linking": {
            "South Africa": "m.0hzlz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hzlz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hzlz ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hzlz')\na.add_fact('m.0hzlz', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1396",
        "question": "who played darth vader at the end of return of the jedi",
        "answer": [
            "m.03xblf",
            "m.0f6_x",
            "m.023jmy"
        ],
        "different_answer": [
            [
                "m.03xblf",
                "m.0f6_x",
                "m.023jmy"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Return of the Jedi": "m.0ddjy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0ddjy .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ddjy')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.film', 'm.0ddjy')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1398",
        "question": "what movies did joan crawford play in",
        "answer": [
            "m.054_0p",
            "m.076162",
            "m.02rfbbd",
            "m.07zbj7",
            "m.02rzp63",
            "m.05m82n",
            "m.02rmlkd",
            "m.02rjtbf",
            "m.02rjffj",
            "m.02rl75j",
            "m.0ngnd6x",
            "m.02rndbf",
            "m.02rl6rf",
            "m.03gq7tf",
            "m.0cs4d2d",
            "m.04w25m",
            "m.02rmlwq",
            "m.02rp425",
            "m.02rgkfq",
            "m.03wfchq",
            "m.06y7_x",
            "m.07ncxk",
            "m.07bc2w",
            "m.02rfb5l",
            "m.02x7d7",
            "m.02rgkjt",
            "m.02r9t_k",
            "m.02rj2z0",
            "m.02rkxqw",
            "m.02rm98x",
            "m.0c8q9k",
            "m.03wgxy1",
            "m.02rnd1v",
            "m.05d_tr",
            "m.0brk3r",
            "m.09x69j",
            "m.02rm8yk",
            "m.02rp5tx",
            "m.080m7fp",
            "m.02rjfz0",
            "m.04hl97",
            "m.02r9tvd",
            "m.02rlw9m",
            "m.0cy__l",
            "m.02rl6vw",
            "m.02qvv1h",
            "m.02rm8lx",
            "m.027_q_t",
            "m.02rlw5h",
            "m.02rc9rv",
            "m.026v_q1",
            "m.02rj1n2",
            "m.019l8m",
            "m.02rjv0t",
            "m.02rzt27",
            "m.080pgyc",
            "m.02rjdrw",
            "m.0b8ghw",
            "m.02rlnc6",
            "m.07n06p",
            "m.064nm14",
            "m.02rl6ym",
            "m.027qqvj",
            "m.02rfbd3",
            "m.02qvt4z",
            "m.02rbh2y",
            "m.02rfb8b",
            "m.02rkz1j",
            "m.02710m8",
            "m.065_f8",
            "m.0dkslz",
            "m.02pwvzg",
            "m.02rkx49",
            "m.03wg0lz",
            "m.02rzqnj",
            "m.0bh8z_",
            "m.09l_6k",
            "m.0c61b",
            "m.0c5wn",
            "m.02rj2mq",
            "m.01937g",
            "m.0brjnd",
            "m.02rhtrl",
            "m.05f04x",
            "m.0270fg0",
            "m.0bhjr3",
            "m.0270xln",
            "m.02rndrh",
            "m.02r92ps"
        ],
        "different_answer": [
            [
                "m.054_0p",
                "m.076162",
                "m.02rfbbd",
                "m.07zbj7",
                "m.02rzp63",
                "m.05m82n",
                "m.02rmlkd",
                "m.02rjtbf",
                "m.02rjffj",
                "m.02rl75j",
                "m.0ngnd6x",
                "m.02rndbf",
                "m.02rl6rf",
                "m.03gq7tf",
                "m.0cs4d2d",
                "m.04w25m",
                "m.02rmlwq",
                "m.02rp425",
                "m.02rgkfq",
                "m.03wfchq",
                "m.06y7_x",
                "m.07ncxk",
                "m.07bc2w",
                "m.02rfb5l",
                "m.02x7d7",
                "m.02rgkjt",
                "m.02r9t_k",
                "m.02rj2z0",
                "m.02rkxqw",
                "m.02rm98x",
                "m.0c8q9k",
                "m.03wgxy1",
                "m.02rnd1v",
                "m.05d_tr",
                "m.0brk3r",
                "m.09x69j",
                "m.02rm8yk",
                "m.02rp5tx",
                "m.080m7fp",
                "m.02rjfz0",
                "m.04hl97",
                "m.02r9tvd",
                "m.02rlw9m",
                "m.0cy__l",
                "m.02rl6vw",
                "m.02qvv1h",
                "m.02rm8lx",
                "m.027_q_t",
                "m.02rlw5h",
                "m.02rc9rv",
                "m.026v_q1",
                "m.02rj1n2",
                "m.019l8m",
                "m.02rjv0t",
                "m.02rzt27",
                "m.080pgyc",
                "m.02rjdrw",
                "m.0b8ghw",
                "m.02rlnc6",
                "m.07n06p",
                "m.064nm14",
                "m.02rl6ym",
                "m.027qqvj",
                "m.02rfbd3",
                "m.02qvt4z",
                "m.02rbh2y",
                "m.02rfb8b",
                "m.02rkz1j",
                "m.02710m8",
                "m.065_f8",
                "m.0dkslz",
                "m.02pwvzg",
                "m.02rkx49",
                "m.03wg0lz",
                "m.02rzqnj",
                "m.0bh8z_",
                "m.09l_6k",
                "m.0c61b",
                "m.0c5wn",
                "m.02rj2mq",
                "m.01937g",
                "m.0brjnd",
                "m.02rhtrl",
                "m.05f04x",
                "m.0270fg0",
                "m.0bhjr3",
                "m.0270xln",
                "m.02rndrh",
                "m.02r92ps"
            ]
        ],
        "entity_linking": {
            "Joan Crawford": "m.0cgbf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cgbf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cgbf ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cgbf')\na.add_fact('m.0cgbf', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1399",
        "question": "what products does the united states export",
        "answer": [
            "m.03q9wp2",
            "m.015smg",
            "m.03qtf10",
            "m.03qtd_n"
        ],
        "different_answer": [
            [
                "m.03q9wp2",
                "m.015smg",
                "m.03qtf10",
                "m.03qtd_n"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.statistical_region.major_exports ?y .\n?y ns:location.imports_exports_by_industry.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.statistical_region.major_exports', 'x1')\na.add_fact('x1', 'location.imports_exports_by_industry.industry', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1402",
        "question": "what is the kentucky state bird",
        "answer": [
            "m.01m0p1"
        ],
        "different_answer": [
            [
                "m.01m0p1"
            ]
        ],
        "entity_linking": {
            "Kentucky": "m.0498y",
            "State bird": "m.04627hw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0498y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0498y ns:government.governmental_jurisdiction.official_symbols ?y .\n?y ns:location.location_symbol_relationship.symbol ?x .\n?y ns:location.location_symbol_relationship.Kind_of_symbol ns:m.04627hw .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04627hw')\na.add_filter('x0', '!=', 'm.0498y')\na.add_fact('x1', 'location.location_symbol_relationship.Kind_of_symbol', 'm.04627hw')\na.add_fact('m.0498y', 'government.governmental_jurisdiction.official_symbols', 'x1')\na.add_fact('x1', 'location.location_symbol_relationship.symbol', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1403",
        "question": "who was canadian prime minister in 1993",
        "answer": [
            "m.0k0y0",
            "m.0bwz5",
            "m.0h0zn",
            "m.0n4t"
        ],
        "different_answer": [
            [
                "m.0k0y0",
                "m.0bwz5",
                "m.0h0zn",
                "m.0n4t"
            ]
        ],
        "entity_linking": {
            "Prime Minister of Canada": "m.060m4",
            "1993-12-31": "\"1993-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1993-01-01": "\"1993-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060m4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060m4 ns:government.government_office_or_title.office_holders ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"1993-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"1993-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060m4')\na.add_fact('m.060m4', 'government.government_office_or_title.office_holders', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"1993-12-31\"^^xsd:dateTime', '\"1993-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1405",
        "question": "what there to do in salt lake city utah",
        "answer": [
            "m.034zn4",
            "m.01626x",
            "m.04p9dd",
            "m.0b6mxyf",
            "m.0cnsp",
            "m.02x5d6c",
            "m.0h231z",
            "m.06mp6_",
            "g.121xqqc4",
            "m.048fms",
            "m.0268k69",
            "m.0cgn__",
            "m.034zsf",
            "m.05qp9q",
            "m.02z2sd8"
        ],
        "different_answer": [
            [
                "m.034zn4",
                "m.01626x",
                "m.04p9dd",
                "m.0b6mxyf",
                "m.0cnsp",
                "m.02x5d6c",
                "m.0h231z",
                "m.06mp6_",
                "g.121xqqc4",
                "m.048fms",
                "m.0268k69",
                "m.0cgn__",
                "m.034zsf",
                "m.05qp9q",
                "m.02z2sd8"
            ]
        ],
        "entity_linking": {
            "Salt Lake City": "m.0f2r6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2r6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2r6 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f2r6')\na.add_fact('m.0f2r6', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1408",
        "question": "who is the current ohio state senator",
        "answer": [
            "m.0343xg",
            "m.034s80"
        ],
        "different_answer": [
            [
                "m.0343xg",
                "m.034s80"
            ]
        ],
        "entity_linking": {
            "United States Senate": "m.07t58",
            "Ohio": "m.05kkh",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t58)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t58 ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.district_represented ns:m.05kkh .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05kkh')\na.add_filter('x0', '!=', 'm.07t58')\na.add_fact('x1', 'government.government_position_held.district_represented', 'm.05kkh')\na.add_fact('m.07t58', 'government.governmental_body.members', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1409",
        "question": "what are the major languages spoken in the united kingdom",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1410",
        "question": "what did st. nicholas do in his life",
        "answer": [
            "m.027k49j"
        ],
        "different_answer": [
            [
                "m.027k49j"
            ]
        ],
        "entity_linking": {
            "Saint Nicholas": "m.0f9q7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f9q7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f9q7 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f9q7')\na.add_fact('m.0f9q7', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1414",
        "question": "what happened to pope john paul ii",
        "answer": [
            "m.0gk4g",
            "m.0g02vk"
        ],
        "different_answer": [
            [
                "m.0gk4g",
                "m.0g02vk"
            ]
        ],
        "entity_linking": {
            "Pope John Paul II": "m.05yfx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05yfx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05yfx ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05yfx')\na.add_fact('m.05yfx', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1416",
        "question": "what was franklin pierce famous for",
        "answer": [
            "m.01xljv7"
        ],
        "different_answer": [
            [
                "m.01xljv7"
            ]
        ],
        "entity_linking": {
            "Franklin Pierce": "m.02z51"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z51)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z51 ns:common.topic.notable_types ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02z51')\na.add_fact('m.02z51', 'common.topic.notable_types', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1417",
        "question": "when was the last time the boston bruins went to the stanley cup",
        "answer": [
            "m.0hrcjzl"
        ],
        "different_answer": [
            [
                "m.0hrcjzl"
            ]
        ],
        "entity_linking": {
            "Boston Bruins": "m.0j2zj"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.0cc8tt9 ns:time.recurring_event.instances ?x . # Stanly Cup finals instances\n\n  {\n    ?x ns:sports.sports_championship_event.champion ns:m.0j2zj . #(Boston Bruins)\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.0j2zj . #(Boston Bruins)\n  }\n\n  ?x ns:time.event.start_date ?st .\n}\nORDER BY DESC(xsd:datetime(?st))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1418",
        "question": "who is meredith gray married to in real life",
        "answer": [
            "m.09k5l7w"
        ],
        "different_answer": [
            [
                "m.09k5l7w"
            ]
        ],
        "entity_linking": {
            "Meredith Grey": "m.0268x2f"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n                ns:m.0268x2f ns:tv.tv_character.appeared_in_tv_program ?y .\n                ?y ns:tv.regular_tv_appearance.actor ?z .\n                ?z ns:people.person.spouse_s ?s .\n                ?s ns:people.marriage.spouse ?x .\n                ?s ns:people.marriage.type_of_union ns:m.04ztj .\nFilter (?x != ?z)\nFILTER(NOT EXISTS {?s ns:people.marriage.from ?sk0} || \n           EXISTS {?s ns:people.marriage.from ?sk1 . \n                   FILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?s ns:people.marriage.to ?sk2} || \n           EXISTS {?s ns:people.marriage.to ?sk3 . \n                   FILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n?s ns:people.marriage.from ?sk4 .\n}\nORDER BY DESC(xsd:datetime(?sk4))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1419",
        "question": "what inspired michelangelo buonarroti",
        "answer": [
            "m.0d8wb",
            "m.0j56d",
            "m.072cpw",
            "m.01cc3w",
            "m.04qj5",
            "m.013w_3"
        ],
        "different_answer": [
            [
                "m.0d8wb",
                "m.0j56d",
                "m.072cpw",
                "m.01cc3w",
                "m.04qj5",
                "m.013w_3"
            ]
        ],
        "entity_linking": {
            "Michelangelo": "m.058w5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058w5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058w5 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.058w5')\na.add_fact('m.058w5', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1420",
        "question": "what does monsanto own",
        "answer": [
            "m.0hkf",
            "m.09dh0",
            "m.0g10z",
            "m.02ntf00"
        ],
        "different_answer": [
            [
                "m.0hkf",
                "m.09dh0",
                "m.0g10z",
                "m.02ntf00"
            ]
        ],
        "entity_linking": {
            "Monsanto": "m.0n8m6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0n8m6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0n8m6 ns:business.business_operation.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0n8m6')\na.add_fact('m.0n8m6', 'business.business_operation.industry', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1421",
        "question": "who did woody harrelson play on cheers",
        "answer": [
            "m.065xmv"
        ],
        "different_answer": [
            [
                "m.065xmv"
            ],
            [
                "m.065xmv"
            ]
        ],
        "entity_linking": {
            "Woody Harrelson": "m.0170s4",
            "Cheers": "m.01s81"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0170s4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0170s4 ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01s81 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0170s4')\na.add_filter('x0', '!=', 'm.01s81')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'm.0170s4')\na.add_fact('m.01s81', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1422",
        "question": "what language do they speak in sweden yahoo",
        "answer": [
            "m.0880p",
            "m.06mp7",
            "m.01gp_d",
            "m.04lmb2",
            "m.012psb",
            "m.02zb99n",
            "m.02z5h0"
        ],
        "different_answer": [
            [
                "m.0880p",
                "m.06mp7",
                "m.01gp_d",
                "m.04lmb2",
                "m.012psb",
                "m.02zb99n",
                "m.02z5h0"
            ],
            [
                "m.06mp7"
            ]
        ],
        "entity_linking": {
            "Sweden": "m.0d0vqn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d0vqn')\na.add_fact('m.0d0vqn', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1423",
        "question": "what language did they speak in ghana",
        "answer": [
            "m.02h40lc",
            "m.02j199",
            "m.05n7jk",
            "m.01_lfh",
            "m.02vkpsr",
            "m.02hx8z6",
            "m.04wm85",
            "m.02hw_03",
            "m.02hwm3m",
            "m.01kphj",
            "m.05781j",
            "m.08r4hf"
        ],
        "different_answer": [
            [
                "m.02h40lc",
                "m.02j199",
                "m.05n7jk",
                "m.01_lfh",
                "m.02vkpsr",
                "m.02hx8z6",
                "m.04wm85",
                "m.02hw_03",
                "m.02hwm3m",
                "m.01kphj",
                "m.05781j",
                "m.08r4hf"
            ]
        ],
        "entity_linking": {
            "Ghana": "m.035dk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035dk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035dk ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035dk')\na.add_fact('m.035dk', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1424",
        "question": "what form of government do we have in the philippines",
        "answer": [
            "m.01fpfn",
            "m.01d9r3",
            "m.0c9rw5",
            "m.06cx9"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01d9r3",
                "m.0c9rw5",
                "m.06cx9"
            ]
        ],
        "entity_linking": {
            "Philippines": "m.05v8c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05v8c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05v8c ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05v8c')\na.add_fact('m.05v8c', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1425",
        "question": "what colleges did mitt romney attend",
        "answer": [
            "m.03ksy",
            "m.06pwq",
            "m.014zws",
            "m.0l2tk",
            "m.0kqj1"
        ],
        "different_answer": [
            [
                "m.03ksy",
                "m.06pwq",
                "m.014zws",
                "m.0l2tk",
                "m.0kqj1"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0271_s', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1426",
        "question": "where is ibrahim afellay from",
        "answer": [
            "m.0d9s5"
        ],
        "different_answer": [
            [
                "m.0d9s5"
            ]
        ],
        "entity_linking": {
            "Ibrahim Afellay": "m.08w78j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08w78j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08w78j ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08w78j')\na.add_fact('m.08w78j', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1427",
        "question": "who was the secretary of state when andrew jackson was president",
        "answer": [
            "m.04_0m",
            "m.04lhfcl",
            "m.02ggrk",
            "m.01bxb3"
        ],
        "different_answer": [
            [
                "m.04_0m",
                "m.04lhfcl",
                "m.02ggrk",
                "m.01bxb3"
            ]
        ],
        "entity_linking": {
            "Andrew Jackson": "m.0rlz",
            "Secretary of State": "m.0789n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0rlz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0rlz ns:government.political_appointer.appointees ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0789n .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0789n')\na.add_filter('x0', '!=', 'm.0rlz')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0789n')\na.add_fact('m.0rlz', 'government.political_appointer.appointees', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1428",
        "question": "who does ron stoppable 's voice",
        "answer": [
            "m.031y89"
        ],
        "different_answer": [
            [
                "m.031y89"
            ]
        ],
        "entity_linking": {
            "Ron Stoppable": "m.09w3mr",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09w3mr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09w3mr ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.09w3mr')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.09w3mr', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1429",
        "question": "what currency is accepted in new zealand",
        "answer": [
            "m.015f1d"
        ],
        "different_answer": [
            [
                "m.015f1d"
            ]
        ],
        "entity_linking": {
            "New Zealand": "m.0ctw_b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ctw_b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ctw_b ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ctw_b')\na.add_fact('m.0ctw_b', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1432",
        "question": "what places are in the west midlands",
        "answer": [
            "m.0257kt",
            "m.0k33p",
            "m.0c5_3",
            "m.01ycxx",
            "m.02z8_s"
        ],
        "different_answer": [
            [
                "m.0257kt",
                "m.0k33p",
                "m.0c5_3",
                "m.01ycxx",
                "m.02z8_s"
            ],
            [
                "m.0257kt",
                "m.03gdzj",
                "m.030v1t",
                "m.03gds2",
                "m.0c3gk9",
                "m.04lf5c_",
                "m.070cy8",
                "m.04g96p",
                "m.04rnyj",
                "m.0f3ys2",
                "m.09mx_1",
                "m.03nvxqf",
                "m.08rzm3",
                "m.04zbwz",
                "m.01dvc5",
                "m.01ybv0",
                "m.04y7fk4",
                "m.01ycxx",
                "m.01n244",
                "m.0206f5",
                "m.03ggry",
                "m.0dkdpk3",
                "m.0c5h2h",
                "m.03cx_nw",
                "m.09711x",
                "m.07rmfq",
                "m.0gr4_0",
                "m.0dkdpjy",
                "m.0316qm",
                "m.03q29q",
                "m.029ht2",
                "m.0cp4b7l",
                "m.05ch9q",
                "m.05mwqyl",
                "m.071m_f",
                "m.06rm0d",
                "m.02w1dv",
                "m.017zt4",
                "m.030v6r",
                "m.0306tx",
                "m.02x6_mr",
                "m.03hh05h",
                "m.035bgr",
                "m.03gqy2",
                "m.04ygwp6",
                "m.0ggskz",
                "m.012vtmd1",
                "m.0dkdpjv",
                "m.01z66c",
                "m.0bbwzs0",
                "m.08pbr_",
                "m.08rzpl",
                "m.02zd_x",
                "m.0377rp",
                "m.01nh1c",
                "m.0cyfpqp",
                "m.06gv95",
                "m.03g7tr",
                "m.06dvdx",
                "m.0cy2l4v",
                "m.03hqtr",
                "m.05dy1k",
                "m.07r9fk",
                "m.09v285l",
                "m.0343ls",
                "m.03gdn8",
                "m.030v5c",
                "m.063c1n",
                "m.01yc0s",
                "m.030v5q",
                "m.0hhszd1",
                "m.031g2z",
                "m.01kcxp",
                "m.05cdr6",
                "m.06gv5j",
                "m.05vn47",
                "m.03gg8n",
                "m.095gf0",
                "m.03gdss",
                "m.024q9r",
                "m.050pzt",
                "m.029hv3",
                "m.08lvpr",
                "m.08rzqz",
                "m.0j3gsx1",
                "m.025x_q9",
                "m.01m4pc",
                "m.03t_q3",
                "m.0c5psw",
                "m.03ggv2",
                "m.07f0ct",
                "m.0cy2l54",
                "m.03gg9q",
                "m.03gdr0",
                "m.02x9kq6",
                "m.02q1g5",
                "m.060vvx",
                "m.0h96bwj",
                "m.08rzwj",
                "m.035x9c",
                "m.063cc8",
                "m.08rzd1",
                "m.04lfx53",
                "m.0k5p1",
                "m.088ff3",
                "m.01p7jr",
                "m.07rm1d",
                "m.07rmbm",
                "m.05chbr",
                "m.02bnwq",
                "m.07xy5s",
                "m.0hhw1jn",
                "m.03gnpd",
                "m.0117_7xz",
                "m.063d7q",
                "m.06h8dk",
                "m.03ggh3",
                "m.05d71w",
                "m.06h8j1",
                "m.0bbz7lw",
                "m.0fd1jx",
                "m.02w5_6",
                "m.023c29",
                "m.0533n4",
                "m.02j17x",
                "m.0k33p",
                "m.03wcm3l",
                "m.04b0mq",
                "m.08rzrn",
                "m.0hnbb49",
                "m.03gdmy",
                "m.089qnv",
                "m.02th3k",
                "m.03ph11",
                "m.03ggrl",
                "m.0cyfpq1",
                "m.063cg3",
                "m.03jsf4",
                "m.0c5_3",
                "m.01ycyp",
                "m.02p9rp_",
                "m.030v61",
                "m.04g15m",
                "m.021r42",
                "m.02wgjc",
                "m.044bnj",
                "m.030v3x",
                "m.097149",
                "m.0bbtlf9",
                "m.02x9_vp",
                "m.0ddbm5q",
                "m.07212d",
                "m.027g9sd",
                "m.04zbvx",
                "m.07rbqz",
                "m.0bbyw2f",
                "m.06gqm1",
                "m.023wkp",
                "m.0316sc",
                "m.03gfj0",
                "m.0jkygbt",
                "m.0cyfpqc",
                "m.0gq3sw",
                "m.03hjtd",
                "m.0284zkf",
                "m.020_47",
                "m.026_qm2",
                "m.07sxsn",
                "m.097j_f",
                "m.08w9nc",
                "m.04ygj57",
                "m.0bzbk3",
                "m.0256py",
                "m.02z8_s",
                "m.0b8mhx",
                "m.03m6rjj",
                "m.01ycw7",
                "m.03gfjq",
                "m.0h7j4d",
                "m.0bbx9zg",
                "m.02n7wd",
                "m.0gmf052",
                "m.030v12",
                "m.07r242",
                "m.01ycz1",
                "m.05q6fc8",
                "m.07zql4",
                "m.08rzvv",
                "m.0jt58vy",
                "m.07qbhz",
                "m.05mts_",
                "m.04g9c7",
                "m.03gg9c",
                "m.03mcnp8",
                "m.02rmthq",
                "m.03gnsj"
            ],
            [
                "m.084_f",
                "m.02j17x",
                "m.03m3r_t",
                "m.010r7psx",
                "m.023qkf",
                "m.0g14f",
                "m.021y1s",
                "m.017cjb",
                "m.0cz1pp8",
                "m.0dm0f",
                "m.020797",
                "m.010x6wn0",
                "m.01rvhz",
                "m.0dyjz",
                "m.0b73vd4"
            ]
        ],
        "entity_linking": {
            "West Midlands": "m.0dyjz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dyjz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dyjz ns:base.aareas.schema.administrative_area.administrative_children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dyjz')\na.add_fact('m.0dyjz', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1433",
        "question": "what to do with kids in asheville nc",
        "answer": [
            "m.02rtgcx",
            "m.03qhg3_",
            "m.0fhdb5",
            "m.08gz6r",
            "m.07pc_b",
            "m.0k5mxqg",
            "m.03qknx1",
            "m.03d2gy",
            "m.06_g_2g",
            "m.01vnqb"
        ],
        "different_answer": [
            [
                "m.02rtgcx",
                "m.03qhg3_",
                "m.0fhdb5",
                "m.08gz6r",
                "m.07pc_b",
                "m.0k5mxqg",
                "m.03qknx1",
                "m.03d2gy",
                "m.06_g_2g",
                "m.01vnqb"
            ]
        ],
        "entity_linking": {
            "Asheville": "m.0ydpd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ydpd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ydpd ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ydpd')\na.add_fact('m.0ydpd', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1434",
        "question": "who is in the american league in baseball",
        "answer": [
            "m.049n7",
            "m.0cqt41",
            "m.02d02",
            "m.01d6g",
            "m.05nlyxv",
            "m.06wpc",
            "m.05m_8",
            "m.01slc",
            "m.0fq2vj2",
            "m.07l8f",
            "m.05lkwhs",
            "m.05ll0s1",
            "m.03m1n",
            "m.07l8x",
            "m.01yhm",
            "m.07l4z",
            "m.01d5z",
            "m.0512p",
            "m.062s316",
            "m.04wmvz"
        ],
        "different_answer": [
            [
                "m.049n7",
                "m.0cqt41",
                "m.02d02",
                "m.01d6g",
                "m.05nlyxv",
                "m.06wpc",
                "m.05m_8",
                "m.01slc",
                "m.0fq2vj2",
                "m.07l8f",
                "m.05lkwhs",
                "m.05ll0s1",
                "m.03m1n",
                "m.07l8x",
                "m.01yhm",
                "m.07l4z",
                "m.01d5z",
                "m.0512p",
                "m.062s316",
                "m.04wmvz"
            ],
            [
                "m.049n7",
                "m.05kmkc5",
                "m.02d02",
                "m.0cqt41",
                "m.05kmkd0",
                "m.01d6g",
                "m.05kmp0g",
                "m.042v_h4",
                "m.051vz",
                "m.06wpc",
                "m.05kmnv1",
                "m.05m_8",
                "m.01slc",
                "m.0fq2vj2",
                "m.07l8f",
                "m.05lkwhs",
                "m.07l8x",
                "m.01yhm",
                "m.07l4z",
                "m.05kmk3z",
                "m.01d5z",
                "m.05c8tcn",
                "m.05n6l3_",
                "m.0512p",
                "m.05n6ll4",
                "m.04wmvz"
            ]
        ],
        "entity_linking": {
            "American League": "m.0h8b0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h8b0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h8b0 ns:baseball.baseball_league.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h8b0')\na.add_fact('m.0h8b0', 'baseball.baseball_league.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1435",
        "question": "who did kurt warner play 4",
        "answer": [
            "m.05gg4",
            "m.03m3x9z",
            "m.06x76",
            "m.05bd9b5",
            "m.0ws7",
            "m.02y5f_"
        ],
        "different_answer": [
            [
                "m.05gg4",
                "m.03m3x9z",
                "m.06x76",
                "m.05bd9b5",
                "m.0ws7",
                "m.02y5f_"
            ]
        ],
        "entity_linking": {
            "Kurt Warner": "m.025j0c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025j0c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025j0c ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025j0c')\na.add_fact('m.025j0c', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1436",
        "question": "who is dirk nowitzki wife",
        "answer": [
            "m.0j4vb1g"
        ],
        "different_answer": [
            [
                "m.0j4vb1g"
            ]
        ],
        "entity_linking": {
            "Dirk Nowitzki": "m.023dcl",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.023dcl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.023dcl ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.023dcl')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.023dcl', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1441",
        "question": "where all did picasso live",
        "answer": [
            "m.01978d",
            "m.056_y",
            "m.0f8l9c"
        ],
        "different_answer": [
            [
                "m.01978d",
                "m.056_y",
                "m.0f8l9c"
            ]
        ],
        "entity_linking": {
            "Pablo Picasso": "m.060_7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060_7 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060_7')\na.add_fact('m.060_7', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1442",
        "question": "what currency shall i take to croatia",
        "answer": [
            "m.02z8jt"
        ],
        "different_answer": [
            [
                "m.02z8jt"
            ]
        ],
        "entity_linking": {
            "Croatia": "m.01pj7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01pj7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01pj7 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01pj7')\na.add_fact('m.01pj7', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1443",
        "question": "what team is raul ibanez on",
        "answer": [
            "m.049n7"
        ],
        "different_answer": [
            [
                "m.049n7"
            ]
        ],
        "entity_linking": {
            "Ra\u00fal Iba\u00f1ez": "m.06xvwt",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06xvwt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06xvwt ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06xvwt')\na.add_fact('m.06xvwt', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1445",
        "question": "what tv series did mark harmon star in",
        "answer": [
            "m.01fx1l",
            "m.05c2j5_",
            "m.02996d",
            "m.0g6sm2",
            "m.03m8sg",
            "m.0dl6q1_",
            "m.02md2d",
            "m.02x6r9",
            "m.07cgcf9",
            "m.05p4qwd",
            "m.02kk_c",
            "m.06yg5s"
        ],
        "different_answer": [
            [
                "m.01fx1l",
                "m.05c2j5_",
                "m.02996d",
                "m.0g6sm2",
                "m.03m8sg",
                "m.0dl6q1_",
                "m.02md2d",
                "m.02x6r9",
                "m.07cgcf9",
                "m.05p4qwd",
                "m.02kk_c",
                "m.06yg5s"
            ]
        ],
        "entity_linking": {
            "Mark Harmon": "m.037gjc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.037gjc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.037gjc ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.series ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.037gjc')\na.add_fact('m.037gjc', 'tv.tv_actor.starring_roles', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1446",
        "question": "what year did jimmy the rev sullivan die",
        "answer": [
            "2009-12-28-08:00"
        ],
        "different_answer": [
            [
                "2009-12-28-08:00"
            ]
        ],
        "entity_linking": {
            "The Rev": "m.025sf_8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025sf_8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025sf_8 ns:people.deceased_person.date_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025sf_8')\na.add_fact('m.025sf_8', 'people.deceased_person.date_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1447",
        "question": "who plays anakin skywalker in star wars 1",
        "answer": [
            "m.02p8dm"
        ],
        "different_answer": [
            [
                "m.02p8dm"
            ],
            [
                "m.02p8dm"
            ]
        ],
        "entity_linking": {
            "Star Wars Episode I: The Phantom Menace": "m.0ddt_",
            "Darth Vader": "m.0f2y0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ddt_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ddt_ ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0f2y0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_filter('x0', '!=', 'm.0ddt_')\na.add_fact('x1', 'film.performance.character', 'm.0f2y0')\na.add_fact('m.0ddt_', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1448",
        "question": "where does michelle pfeiffer live now",
        "answer": [
            "m.0cb4j"
        ],
        "different_answer": [
            [
                "m.0cb4j"
            ]
        ],
        "entity_linking": {
            "Michelle Pfeiffer": "m.0gx_p",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gx_p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gx_p ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gx_p')\na.add_fact('m.0gx_p', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1449",
        "question": "what was laura ingalls wilder famous for",
        "answer": [
            "m.01d30f",
            "m.0kyk",
            "m.0d8qb",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.01d30f",
                "m.0kyk",
                "m.0d8qb",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Laura Ingalls Wilder": "m.01bt87"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bt87')\na.add_fact('m.01bt87', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1452",
        "question": "where is dwight howard now",
        "answer": [
            "m.0jmfb"
        ],
        "different_answer": [
            [
                "m.0jmfb"
            ]
        ],
        "entity_linking": {
            "Dwight Howard": "m.02fg_f",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02fg_f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02fg_f ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02fg_f')\na.add_fact('m.02fg_f', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1453",
        "question": "who is nick lachey married to",
        "answer": [
            "m.063yvp"
        ],
        "different_answer": [
            [
                "m.063yvp"
            ]
        ],
        "entity_linking": {
            "Nick Lachey": "m.039bpc",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039bpc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039bpc ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.039bpc')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.039bpc', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1454",
        "question": "where did madonna grew up",
        "answer": [
            "m.0v1xg"
        ],
        "different_answer": [
            [
                "m.0v1xg"
            ]
        ],
        "entity_linking": {
            "Madonna": "m.01vs_v8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vs_v8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vs_v8 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vs_v8')\na.add_fact('m.01vs_v8', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1455",
        "question": "what capital city of brazil",
        "answer": [
            "m.01hy_"
        ],
        "different_answer": [
            [
                "m.01hy_"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1456",
        "question": "what college did john stockton go to",
        "answer": [
            "m.01b1mj"
        ],
        "different_answer": [
            [
                "m.01b1mj"
            ]
        ],
        "entity_linking": {
            "John Stockton": "m.01r6lw",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r6lw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r6lw ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.01r6lw')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.01r6lw', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1457",
        "question": "what kind of currency does mexico use",
        "answer": [
            "m.012ts8"
        ],
        "different_answer": [
            [
                "m.012ts8"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1458",
        "question": "who owns chrysler corporation 2011",
        "answer": [
            "m.0_gywj9",
            "m.0c7mv",
            "m.02wz7x",
            "m.01bqks",
            "m.03c40gm"
        ],
        "different_answer": [
            [
                "m.0_gywj9",
                "m.0c7mv",
                "m.02wz7x",
                "m.01bqks",
                "m.03c40gm"
            ]
        ],
        "entity_linking": {
            "Chrysler Group LLC": "m.01_bp",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_bp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_bp ns:organization.organization.parent ?y .\n?y ns:organization.organization_relationship.parent ?x .\nFILTER(NOT EXISTS {?y ns:organization.organization_relationship.to ?sk0} || \nEXISTS {?y ns:organization.organization_relationship.to ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2011-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:organization.organization_relationship.from ?sk2} || \nEXISTS {?y ns:organization.organization_relationship.from ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2011-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01_bp')\na.add_fact('m.01_bp', 'organization.organization.parent', 'x1')\na.add_time_constrain('x1', 'organization.organization_relationship.from', 'organization.organization_relationship.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'organization.organization_relationship.parent', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1459",
        "question": "what are some books that mark twain wrote",
        "answer": [
            "m.04v138g",
            "m.04v2v0m",
            "m.04t_7jl",
            "m.04v4g1q",
            "m.04v45fv",
            "m.04tzyb2",
            "m.04v4g0x",
            "m.04t__tm",
            "m.04v4cqd",
            "m.04v2tyt",
            "m.04t_9gg",
            "m.04v4b21",
            "m.04v4crs",
            "m.04t__vm",
            "m.04t_wnh",
            "m.04v2vsc",
            "m.04v45f1",
            "m.04v2vqp",
            "m.04t__tw",
            "m.04v3fyx",
            "m.04t_9x1",
            "m.04t_z4y",
            "m.04v01zy",
            "m.04v2mtz",
            "m.04v45dj",
            "m.04v4921",
            "m.04v47db",
            "m.04v2vnx",
            "m.04v12lk",
            "m.04v493_",
            "m.04v45zv",
            "m.04v03zz",
            "m.04t_jwk",
            "m.04t_z6n",
            "m.04t_gtq",
            "m.04v12n3",
            "m.04v2v20",
            "m.04v4cpl",
            "m.04v45fl",
            "m.04t_z3z",
            "m.04t_cnp",
            "m.04v64cx",
            "m.04v490z",
            "m.04v2tzr",
            "m.04v49_d",
            "m.04tzy76",
            "m.04v2ms0",
            "m.04t_1b5",
            "m.04v47b4",
            "m.04v3vtv",
            "m.04t_9hr",
            "m.04v44sx",
            "m.04v2zrm",
            "m.04t_cnz",
            "m.04t__v3",
            "m.04v47xl",
            "m.04v633n",
            "m.04v45xx",
            "m.04t_17f",
            "m.04v12np",
            "m.05bqkhl",
            "m.04t_9fz",
            "m.04t_cj4",
            "m.04t_chw",
            "m.04t_41v",
            "m.04v2xbt",
            "m.04v4ccm",
            "m.04tzt9j",
            "m.04v309v",
            "m.04v2zsd",
            "m.04t_ckt",
            "m.04v2zt7",
            "m.04v40f9",
            "m.04v45b6",
            "m.04v2xdf",
            "m.04v31_p",
            "m.04tzy8j",
            "m.04v05m2",
            "m.04v6325",
            "m.04v2v1k",
            "m.04v30c8",
            "m.04t_7mq",
            "m.04v62_6",
            "m.04v4cnv",
            "m.04t_fv7",
            "m.04v4g0n",
            "m.04t_gwv",
            "m.04t_b9v",
            "m.04t_jwt",
            "m.04t_wt5",
            "m.04t_cjq",
            "m.04v2vp5",
            "m.04v2msw",
            "m.04v4cd5",
            "m.04v45c7",
            "m.04tztcx",
            "m.04v45b_",
            "m.04v49zl",
            "m.04yqgs_",
            "m.04v62_z",
            "m.04v2mqr",
            "m.04v44sn",
            "m.04v49wm",
            "m.04t_9tv",
            "m.04v64cm",
            "m.04v3fx9",
            "m.04v12m9",
            "m.04t_ww9",
            "m.04v2t_p",
            "m.04v49yv",
            "m.04tztdc",
            "m.04v4c9d",
            "m.04t_gv8",
            "m.04v30d1",
            "m.04t_cn0",
            "m.04v07_k",
            "m.04v47y4",
            "m.04t_1d4",
            "m.04v2zv1",
            "m.04tzy7g",
            "m.04v30b3",
            "m.04v2xrz",
            "m.04v4cpw",
            "m.04v4c8p",
            "m.04v47bd",
            "m.04tzy92",
            "m.04v6311",
            "m.04t_cp6",
            "m.04v05n4",
            "m.04v48zy",
            "m.04v47cs",
            "m.04v47dl",
            "m.04v4dy3",
            "m.04t_bcl",
            "m.04yqgth",
            "m.04tzy8t",
            "m.04tztgz",
            "m.04t_cqr",
            "m.04t_1by",
            "m.04t_7jw",
            "m.04t_wmk",
            "m.04v64d5",
            "m.04t_1bn",
            "m.04t_wwm",
            "m.04v2zsz",
            "m.04v4cbb",
            "m.04t_cqh",
            "m.04t_7kd",
            "m.04v49x2",
            "m.04v30dl",
            "m.04v45_b",
            "m.04v05nf",
            "m.04v461m",
            "m.04t_cq7",
            "m.04v47bz",
            "m.04v2zxw",
            "m.04v2xnx",
            "m.04tz_4z",
            "m.04v45br",
            "m.04v4g1z",
            "m.04v12nd",
            "m.04v2xql",
            "m.04v2v04",
            "m.04tzvwv",
            "m.04t_z5q",
            "m.04t_1f4",
            "m.04v2xml",
            "m.04t_ch4",
            "m.04v47zv",
            "m.04v0ggs",
            "m.04v45ds",
            "m.04v47zl",
            "m.04t_ckj",
            "m.04tz_4h",
            "m.04tzvxs",
            "m.04t_ws7",
            "m.04t_1dd",
            "m.04v30db",
            "m.04t_7k3",
            "m.04t_9hf",
            "m.04v4917",
            "m.04v4cqy",
            "m.04v2t_6",
            "m.04v31z3",
            "m.04t_z65",
            "m.04v479l",
            "m.04v4cr6",
            "m.04v2zrc",
            "m.04v4dz2",
            "m.04t_7l6",
            "m.04v0ghh",
            "m.04v47ch",
            "m.04v47z1",
            "m.04t_wrs",
            "m.04v479b",
            "m.04t_wsq",
            "m.04v12mv",
            "m.04v12lv",
            "m.04v3fxk",
            "m.04t_gtf",
            "m.04v01xt",
            "m.04t_9ry",
            "m.04v3fxt",
            "m.04v080s",
            "m.04v12kg",
            "m.04tztbz",
            "m.04v4dxb",
            "m.04t_1cp",
            "m.04v459r",
            "m.04v2ztj",
            "m.04v4ccc",
            "m.04tzvtj",
            "m.04v45c_",
            "m.04v479w",
            "m.04t_gxd",
            "m.04v477_",
            "m.04tzy6y",
            "m.04t_wlj",
            "m.04v45cr",
            "m.04v01yr",
            "m.04t_f9k",
            "m.04v2vqd",
            "m.04t_cgb",
            "m.04v45hm",
            "m.04t__sd",
            "m.04t_9sh",
            "m.04v2mtp",
            "m.04v2xr8",
            "m.04v03xt",
            "m.04t_gw1",
            "m.04v2ms9",
            "m.04tz_1p",
            "m.04v47_l",
            "m.04t_gt_",
            "m.04t_wv3",
            "m.04t_9t1",
            "m.04t_9vw",
            "m.04t_1cf",
            "m.04t__y0",
            "m.04v2zs4",
            "m.04v45_t",
            "m.04tz_24",
            "m.04tzy9b",
            "m.04v48_p",
            "m.04t_z4f",
            "m.04t_cmr",
            "m.04v2mt4",
            "m.04t_jsg",
            "m.04t_wr9",
            "m.04t_1gm",
            "m.04t_9s6",
            "m.04v64dr",
            "m.04v4cc3",
            "m.04v44r9",
            "m.04t_gx3",
            "m.04v156y",
            "m.04v44sb",
            "m.04v47_b",
            "m.04v6307",
            "m.04tzy7q",
            "m.04v64dg",
            "m.04v48yv",
            "m.04v03w9",
            "m.04v3vvc",
            "m.04v03xb",
            "m.04v477q",
            "m.04v45ch",
            "m.04v01xb",
            "m.04v4cbm",
            "m.04t_l8m",
            "m.04v62_p",
            "m.04v4802",
            "m.04v2mtd",
            "m.04v47yf",
            "m.04t_cj_",
            "m.04v45yv",
            "m.04v03x2",
            "m.04tzvwc",
            "m.04v2v12",
            "m.04t_wqv",
            "m.04t_bc9",
            "m.04v4g3r",
            "m.04v07zj",
            "m.04v4f_v",
            "m.04t_7lz",
            "m.04v3fz4",
            "m.04v460j",
            "m.04t_wnz",
            "m.04t_1dn",
            "m.04t_9dn",
            "m.04tztfs",
            "m.04v44rw",
            "m.04v47yp",
            "m.04t_gsc",
            "m.04v459h",
            "m.04v48yk",
            "m.04t_9ss",
            "m.04t_cpr",
            "m.04v139n",
            "m.04t_1hk",
            "m.04v4cqp",
            "m.04tz_40",
            "m.04v12l8",
            "m.04v2vpn",
            "m.04v3fyc",
            "m.04t_z27",
            "m.04v4dxw",
            "m.04v4cpb",
            "m.04v2vtl",
            "m.04v01_d",
            "m.04v49zw",
            "m.04t_gwl",
            "m.04v4gvg",
            "m.04v159t",
            "m.04t_gwb",
            "m.04v45d8",
            "m.04t_fbh",
            "m.04tzt9_",
            "m.04v30fv",
            "m.04t_wqc",
            "m.04v0gg9",
            "m.04v631b",
            "m.04v491s",
            "m.04tzy9l",
            "m.04v48zn",
            "m.04v05mk",
            "m.04v30g2",
            "m.04v2mpk",
            "m.04v2ztt",
            "m.04v4c9w",
            "m.04v2zsp",
            "m.04t_gt4",
            "m.04v320j",
            "m.04v12ml",
            "m.04v45yc",
            "m.04t_9h5",
            "m.04t_9g6",
            "m.04t_9vl",
            "m.04t_jt_",
            "m.04t_43n",
            "m.04t_7kp",
            "m.04tzvt_",
            "m.04v2xcj",
            "m.04v49_n",
            "m.04t__tc",
            "m.04v2tyb",
            "m.04v2nxg",
            "m.04v2xc8",
            "m.04v30cj",
            "m.04v40fk",
            "m.04t_cp_",
            "m.04v3fy3",
            "m.04t_jvg",
            "m.04t__t3",
            "m.04v321k",
            "m.04t_9r6",
            "m.04v64rn",
            "m.04t_fc7",
            "m.04t_gvs",
            "m.04v0gfl",
            "m.04v4cdf",
            "m.04t__w3",
            "m.04v630s",
            "m.04t_17p",
            "m.04t_ft_",
            "m.04v2mwn",
            "m.04t_wpf",
            "m.04t_fbr",
            "m.04v30bv",
            "m.04v45f9",
            "m.04v492b",
            "m.04v2msl",
            "m.04t_wvv",
            "m.04v2xdp",
            "m.04tztdv",
            "m.04v2txw",
            "m.04v01z6",
            "m.04t_7lq",
            "m.04t__wm",
            "m.04v31_4",
            "m.04v05mw",
            "m.04t_19g",
            "m.04v07zs",
            "m.04t_1fw",
            "m.04v2mq8",
            "m.04v4g35",
            "m.04v30bl",
            "m.04v2vq3",
            "m.04v64g9",
            "m.04tzvy2",
            "m.04t_cgm",
            "m.04v4d_l",
            "m.04t_wpx",
            "m.04v2vm2",
            "m.04v44qq",
            "m.04tzthf",
            "m.04v49y2",
            "m.04t_9tl",
            "m.04t_ck8",
            "m.04tzt8l",
            "m.04tzy65",
            "m.04v2xq9",
            "m.04t_7kz",
            "m.04t_5pr",
            "m.04t_f8k",
            "m.04tz_2m",
            "m.04v2vn4",
            "m.04tzt82",
            "m.04tzvvx",
            "m.04v2v2h",
            "m.04v4c94",
            "m.04v3207",
            "m.04v01_w",
            "m.04t_z57",
            "m.04t_9gy",
            "m.04t_cjf",
            "m.04v40fv",
            "m.04t_z2q",
            "m.04t_bbm",
            "m.04v44rl",
            "m.04v2vnm",
            "m.04v4b03",
            "m.04yqgv4",
            "m.04v490d",
            "m.04v631x",
            "m.04t_195",
            "m.04tztgh",
            "m.04t_z3n",
            "m.04v30cs",
            "m.04t_9tb",
            "m.04v4d_0",
            "m.04v45_2",
            "m.04v47z9",
            "m.04v0gj1",
            "m.04t_z1s",
            "m.04v30f2",
            "m.04v2xnm",
            "m.04v07_0",
            "m.04v01y8",
            "m.04v631m",
            "m.04tzt91",
            "m.04t_wn0",
            "m.04v47_2",
            "m.04v4g0d",
            "m.04t_gsm",
            "m.04t_gsw",
            "m.04v0gdl",
            "m.04t_cgx",
            "m.04v4ccx",
            "m.04v49hm",
            "m.04v4dzb",
            "m.04t_1gb",
            "m.04v478j",
            "m.04v49_4",
            "m.04v4g3g",
            "m.04v45zl",
            "m.04t_fvj",
            "m.04v491j",
            "m.04v460t",
            "m.04tztcf",
            "m.04v4930",
            "m.04v2tz8",
            "m.04v630j",
            "m.04v2nwy",
            "m.04v2vmp",
            "m.04t_7lg",
            "m.04v3vt9",
            "m.04v3093",
            "m.04v2xn1",
            "m.04t_5qj",
            "m.04v3vw5",
            "m.04t_gvj",
            "m.04v632y",
            "m.04t__vc",
            "m.04t_7jb",
            "m.04tzy87",
            "m.04t_9rg",
            "m.04v321t",
            "m.04v4d_9",
            "m.04t_1c5",
            "m.04t__sw",
            "m.04t_5p_",
            "m.04t_bb3",
            "m.04tztf9"
        ],
        "different_answer": [
            [
                "m.04v138g",
                "m.04v2v0m",
                "m.04t_7jl",
                "m.04v4g1q",
                "m.04v45fv",
                "m.04tzyb2",
                "m.04v4g0x",
                "m.04t__tm",
                "m.04v4cqd",
                "m.04v2tyt",
                "m.04t_9gg",
                "m.04v4b21",
                "m.04v4crs",
                "m.04t__vm",
                "m.04t_wnh",
                "m.04v2vsc",
                "m.04v45f1",
                "m.04v2vqp",
                "m.04t__tw",
                "m.04v3fyx",
                "m.04t_9x1",
                "m.04t_z4y",
                "m.04v01zy",
                "m.04v2mtz",
                "m.04v45dj",
                "m.04v4921",
                "m.04v47db",
                "m.04v2vnx",
                "m.04v12lk",
                "m.04v493_",
                "m.04v45zv",
                "m.04v03zz",
                "m.04t_jwk",
                "m.04t_z6n",
                "m.04t_gtq",
                "m.04v12n3",
                "m.04v2v20",
                "m.04v4cpl",
                "m.04v45fl",
                "m.04t_z3z",
                "m.04t_cnp",
                "m.04v64cx",
                "m.04v490z",
                "m.04v2tzr",
                "m.04v49_d",
                "m.04tzy76",
                "m.04v2ms0",
                "m.04t_1b5",
                "m.04v47b4",
                "m.04v3vtv",
                "m.04t_9hr",
                "m.04v44sx",
                "m.04v2zrm",
                "m.04t_cnz",
                "m.04t__v3",
                "m.04v47xl",
                "m.04v633n",
                "m.04v45xx",
                "m.04t_17f",
                "m.04v12np",
                "m.05bqkhl",
                "m.04t_9fz",
                "m.04t_cj4",
                "m.04t_chw",
                "m.04t_41v",
                "m.04v2xbt",
                "m.04v4ccm",
                "m.04tzt9j",
                "m.04v309v",
                "m.04v2zsd",
                "m.04t_ckt",
                "m.04v2zt7",
                "m.04v40f9",
                "m.04v45b6",
                "m.04v2xdf",
                "m.04v31_p",
                "m.04tzy8j",
                "m.04v05m2",
                "m.04v6325",
                "m.04v2v1k",
                "m.04v30c8",
                "m.04t_7mq",
                "m.04v62_6",
                "m.04v4cnv",
                "m.04t_fv7",
                "m.04v4g0n",
                "m.04t_gwv",
                "m.04t_b9v",
                "m.04t_jwt",
                "m.04t_wt5",
                "m.04t_cjq",
                "m.04v2vp5",
                "m.04v2msw",
                "m.04v4cd5",
                "m.04v45c7",
                "m.04tztcx",
                "m.04v45b_",
                "m.04v49zl",
                "m.04yqgs_",
                "m.04v62_z",
                "m.04v2mqr",
                "m.04v44sn",
                "m.04v49wm",
                "m.04t_9tv",
                "m.04v64cm",
                "m.04v3fx9",
                "m.04v12m9",
                "m.04t_ww9",
                "m.04v2t_p",
                "m.04v49yv",
                "m.04tztdc",
                "m.04v4c9d",
                "m.04t_gv8",
                "m.04v30d1",
                "m.04t_cn0",
                "m.04v07_k",
                "m.04v47y4",
                "m.04t_1d4",
                "m.04v2zv1",
                "m.04tzy7g",
                "m.04v30b3",
                "m.04v2xrz",
                "m.04v4cpw",
                "m.04v4c8p",
                "m.04v47bd",
                "m.04tzy92",
                "m.04v6311",
                "m.04t_cp6",
                "m.04v05n4",
                "m.04v48zy",
                "m.04v47cs",
                "m.04v47dl",
                "m.04v4dy3",
                "m.04t_bcl",
                "m.04yqgth",
                "m.04tzy8t",
                "m.04tztgz",
                "m.04t_cqr",
                "m.04t_1by",
                "m.04t_7jw",
                "m.04t_wmk",
                "m.04v64d5",
                "m.04t_1bn",
                "m.04t_wwm",
                "m.04v2zsz",
                "m.04v4cbb",
                "m.04t_cqh",
                "m.04t_7kd",
                "m.04v49x2",
                "m.04v30dl",
                "m.04v45_b",
                "m.04v05nf",
                "m.04v461m",
                "m.04t_cq7",
                "m.04v47bz",
                "m.04v2zxw",
                "m.04v2xnx",
                "m.04tz_4z",
                "m.04v45br",
                "m.04v4g1z",
                "m.04v12nd",
                "m.04v2xql",
                "m.04v2v04",
                "m.04tzvwv",
                "m.04t_z5q",
                "m.04t_1f4",
                "m.04v2xml",
                "m.04t_ch4",
                "m.04v47zv",
                "m.04v0ggs",
                "m.04v45ds",
                "m.04v47zl",
                "m.04t_ckj",
                "m.04tz_4h",
                "m.04tzvxs",
                "m.04t_ws7",
                "m.04t_1dd",
                "m.04v30db",
                "m.04t_7k3",
                "m.04t_9hf",
                "m.04v4917",
                "m.04v4cqy",
                "m.04v2t_6",
                "m.04v31z3",
                "m.04t_z65",
                "m.04v479l",
                "m.04v4cr6",
                "m.04v2zrc",
                "m.04v4dz2",
                "m.04t_7l6",
                "m.04v0ghh",
                "m.04v47ch",
                "m.04v47z1",
                "m.04t_wrs",
                "m.04v479b",
                "m.04t_wsq",
                "m.04v12mv",
                "m.04v12lv",
                "m.04v3fxk",
                "m.04t_gtf",
                "m.04v01xt",
                "m.04t_9ry",
                "m.04v3fxt",
                "m.04v080s",
                "m.04v12kg",
                "m.04tztbz",
                "m.04v4dxb",
                "m.04t_1cp",
                "m.04v459r",
                "m.04v2ztj",
                "m.04v4ccc",
                "m.04tzvtj",
                "m.04v45c_",
                "m.04v479w",
                "m.04t_gxd",
                "m.04v477_",
                "m.04tzy6y",
                "m.04t_wlj",
                "m.04v45cr",
                "m.04v01yr",
                "m.04t_f9k",
                "m.04v2vqd",
                "m.04t_cgb",
                "m.04v45hm",
                "m.04t__sd",
                "m.04t_9sh",
                "m.04v2mtp",
                "m.04v2xr8",
                "m.04v03xt",
                "m.04t_gw1",
                "m.04v2ms9",
                "m.04tz_1p",
                "m.04v47_l",
                "m.04t_gt_",
                "m.04t_wv3",
                "m.04t_9t1",
                "m.04t_9vw",
                "m.04t_1cf",
                "m.04t__y0",
                "m.04v2zs4",
                "m.04v45_t",
                "m.04tz_24",
                "m.04tzy9b",
                "m.04v48_p",
                "m.04t_z4f",
                "m.04t_cmr",
                "m.04v2mt4",
                "m.04t_jsg",
                "m.04t_wr9",
                "m.04t_1gm",
                "m.04t_9s6",
                "m.04v64dr",
                "m.04v4cc3",
                "m.04v44r9",
                "m.04t_gx3",
                "m.04v156y",
                "m.04v44sb",
                "m.04v47_b",
                "m.04v6307",
                "m.04tzy7q",
                "m.04v64dg",
                "m.04v48yv",
                "m.04v03w9",
                "m.04v3vvc",
                "m.04v03xb",
                "m.04v477q",
                "m.04v45ch",
                "m.04v01xb",
                "m.04v4cbm",
                "m.04t_l8m",
                "m.04v62_p",
                "m.04v4802",
                "m.04v2mtd",
                "m.04v47yf",
                "m.04t_cj_",
                "m.04v45yv",
                "m.04v03x2",
                "m.04tzvwc",
                "m.04v2v12",
                "m.04t_wqv",
                "m.04t_bc9",
                "m.04v4g3r",
                "m.04v07zj",
                "m.04v4f_v",
                "m.04t_7lz",
                "m.04v3fz4",
                "m.04v460j",
                "m.04t_wnz",
                "m.04t_1dn",
                "m.04t_9dn",
                "m.04tztfs",
                "m.04v44rw",
                "m.04v47yp",
                "m.04t_gsc",
                "m.04v459h",
                "m.04v48yk",
                "m.04t_9ss",
                "m.04t_cpr",
                "m.04v139n",
                "m.04t_1hk",
                "m.04v4cqp",
                "m.04tz_40",
                "m.04v12l8",
                "m.04v2vpn",
                "m.04v3fyc",
                "m.04t_z27",
                "m.04v4dxw",
                "m.04v4cpb",
                "m.04v2vtl",
                "m.04v01_d",
                "m.04v49zw",
                "m.04t_gwl",
                "m.04v4gvg",
                "m.04v159t",
                "m.04t_gwb",
                "m.04v45d8",
                "m.04t_fbh",
                "m.04tzt9_",
                "m.04v30fv",
                "m.04t_wqc",
                "m.04v0gg9",
                "m.04v631b",
                "m.04v491s",
                "m.04tzy9l",
                "m.04v48zn",
                "m.04v05mk",
                "m.04v30g2",
                "m.04v2mpk",
                "m.04v2ztt",
                "m.04v4c9w",
                "m.04v2zsp",
                "m.04t_gt4",
                "m.04v320j",
                "m.04v12ml",
                "m.04v45yc",
                "m.04t_9h5",
                "m.04t_9g6",
                "m.04t_9vl",
                "m.04t_jt_",
                "m.04t_43n",
                "m.04t_7kp",
                "m.04tzvt_",
                "m.04v2xcj",
                "m.04v49_n",
                "m.04t__tc",
                "m.04v2tyb",
                "m.04v2nxg",
                "m.04v2xc8",
                "m.04v30cj",
                "m.04v40fk",
                "m.04t_cp_",
                "m.04v3fy3",
                "m.04t_jvg",
                "m.04t__t3",
                "m.04v321k",
                "m.04t_9r6",
                "m.04v64rn",
                "m.04t_fc7",
                "m.04t_gvs",
                "m.04v0gfl",
                "m.04v4cdf",
                "m.04t__w3",
                "m.04v630s",
                "m.04t_17p",
                "m.04t_ft_",
                "m.04v2mwn",
                "m.04t_wpf",
                "m.04t_fbr",
                "m.04v30bv",
                "m.04v45f9",
                "m.04v492b",
                "m.04v2msl",
                "m.04t_wvv",
                "m.04v2xdp",
                "m.04tztdv",
                "m.04v2txw",
                "m.04v01z6",
                "m.04t_7lq",
                "m.04t__wm",
                "m.04v31_4",
                "m.04v05mw",
                "m.04t_19g",
                "m.04v07zs",
                "m.04t_1fw",
                "m.04v2mq8",
                "m.04v4g35",
                "m.04v30bl",
                "m.04v2vq3",
                "m.04v64g9",
                "m.04tzvy2",
                "m.04t_cgm",
                "m.04v4d_l",
                "m.04t_wpx",
                "m.04v2vm2",
                "m.04v44qq",
                "m.04tzthf",
                "m.04v49y2",
                "m.04t_9tl",
                "m.04t_ck8",
                "m.04tzt8l",
                "m.04tzy65",
                "m.04v2xq9",
                "m.04t_7kz",
                "m.04t_5pr",
                "m.04t_f8k",
                "m.04tz_2m",
                "m.04v2vn4",
                "m.04tzt82",
                "m.04tzvvx",
                "m.04v2v2h",
                "m.04v4c94",
                "m.04v3207",
                "m.04v01_w",
                "m.04t_z57",
                "m.04t_9gy",
                "m.04t_cjf",
                "m.04v40fv",
                "m.04t_z2q",
                "m.04t_bbm",
                "m.04v44rl",
                "m.04v2vnm",
                "m.04v4b03",
                "m.04yqgv4",
                "m.04v490d",
                "m.04v631x",
                "m.04t_195",
                "m.04tztgh",
                "m.04t_z3n",
                "m.04v30cs",
                "m.04t_9tb",
                "m.04v4d_0",
                "m.04v45_2",
                "m.04v47z9",
                "m.04v0gj1",
                "m.04t_z1s",
                "m.04v30f2",
                "m.04v2xnm",
                "m.04v07_0",
                "m.04v01y8",
                "m.04v631m",
                "m.04tzt91",
                "m.04t_wn0",
                "m.04v47_2",
                "m.04v4g0d",
                "m.04t_gsm",
                "m.04t_gsw",
                "m.04v0gdl",
                "m.04t_cgx",
                "m.04v4ccx",
                "m.04v49hm",
                "m.04v4dzb",
                "m.04t_1gb",
                "m.04v478j",
                "m.04v49_4",
                "m.04v4g3g",
                "m.04v45zl",
                "m.04t_fvj",
                "m.04v491j",
                "m.04v460t",
                "m.04tztcf",
                "m.04v4930",
                "m.04v2tz8",
                "m.04v630j",
                "m.04v2nwy",
                "m.04v2vmp",
                "m.04t_7lg",
                "m.04v3vt9",
                "m.04v3093",
                "m.04v2xn1",
                "m.04t_5qj",
                "m.04v3vw5",
                "m.04t_gvj",
                "m.04v632y",
                "m.04t__vc",
                "m.04t_7jb",
                "m.04tzy87",
                "m.04t_9rg",
                "m.04v321t",
                "m.04v4d_9",
                "m.04t_1c5",
                "m.04t__sw",
                "m.04t_5p_",
                "m.04t_bb3",
                "m.04tztf9"
            ],
            [
                "m.05bzb6",
                "m.04042z9",
                "m.04pqwr",
                "m.04wx00",
                "m.05yxls7",
                "m.0507mq",
                "m.05v7wt9",
                "m.06pftnw",
                "m.062pbx6",
                "m.05z39sg"
            ]
        ],
        "entity_linking": {
            "Mark Twain": "m.014635"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014635)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014635 ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014635')\na.add_fact('m.014635', 'book.book_subject.works', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1460",
        "question": "what was gregor mendel contribution",
        "answer": [
            "m.06q2q",
            "m.02h6p1f",
            "m.0266rh"
        ],
        "different_answer": [
            [
                "m.06q2q",
                "m.02h6p1f",
                "m.0266rh"
            ]
        ],
        "entity_linking": {
            "Gregor Mendel": "m.039c5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039c5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039c5 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.039c5')\na.add_fact('m.039c5', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1461",
        "question": "who has ray allen dated",
        "answer": [
            "m.0cs097_"
        ],
        "different_answer": [
            [
                "m.0cs097_"
            ]
        ],
        "entity_linking": {
            "Ray Allen": "m.03lh3v",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03lh3v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03lh3v ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.03lh3v')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.03lh3v', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1462",
        "question": "who is running for vice president with barack obama 2012",
        "answer": [
            "m.012gx2"
        ],
        "different_answer": [
            [
                "m.012gx2"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1463",
        "question": "what language do people from the uk speak",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1464",
        "question": "what to do with my kids in toronto",
        "answer": [
            "m.024yvy",
            "m.02vylr",
            "m.02dktk",
            "m.05dv6f",
            "m.0170x4",
            "m.01xs9p",
            "m.026lgdg",
            "m.05s4g6",
            "m.024wty",
            "m.049963",
            "m.01yk7l",
            "m.049gql",
            "m.03q_c9",
            "m.0wbh5pc",
            "m.02qnrn_",
            "m.02js07",
            "m.04h_rf",
            "m.02jzwv",
            "m.02kppx",
            "m.07040p",
            "m.08jh92",
            "m.02h456",
            "m.0496dg",
            "m.08pt1m",
            "m.056fr8",
            "m.02vpw01",
            "m.06j93_",
            "m.01zrh2",
            "m.049gjy",
            "m.0jt2h",
            "m.06d1jn",
            "m.027_p6",
            "m.01tws",
            "m.01zqjc",
            "m.04zvykh",
            "m.018dtx",
            "m.02jlfc",
            "m.0g5824n",
            "m.0cp0hfg",
            "m.02vpvh6",
            "m.05398k",
            "m.08wgfx",
            "m.05kywl",
            "m.0bk7sc",
            "m.02cfl0",
            "m.026gt46",
            "m.0swmcnz",
            "m.01_zt4",
            "m.028b_w"
        ],
        "different_answer": [
            [
                "m.024yvy",
                "m.02vylr",
                "m.02dktk",
                "m.05dv6f",
                "m.0170x4",
                "m.01xs9p",
                "m.026lgdg",
                "m.05s4g6",
                "m.024wty",
                "m.049963",
                "m.01yk7l",
                "m.049gql",
                "m.03q_c9",
                "m.0wbh5pc",
                "m.02qnrn_",
                "m.02js07",
                "m.04h_rf",
                "m.02jzwv",
                "m.02kppx",
                "m.07040p",
                "m.08jh92",
                "m.02h456",
                "m.0496dg",
                "m.08pt1m",
                "m.056fr8",
                "m.02vpw01",
                "m.06j93_",
                "m.01zrh2",
                "m.049gjy",
                "m.0jt2h",
                "m.06d1jn",
                "m.027_p6",
                "m.01tws",
                "m.01zqjc",
                "m.04zvykh",
                "m.018dtx",
                "m.02jlfc",
                "m.0g5824n",
                "m.0cp0hfg",
                "m.02vpvh6",
                "m.05398k",
                "m.08wgfx",
                "m.05kywl",
                "m.0bk7sc",
                "m.02cfl0",
                "m.026gt46",
                "m.0swmcnz",
                "m.01_zt4",
                "m.028b_w"
            ]
        ],
        "entity_linking": {
            "Toronto": "m.0h7h6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7h6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7h6 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7h6')\na.add_fact('m.0h7h6', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1465",
        "question": "what kind of government is south korea",
        "answer": [
            "m.01fpfn",
            "m.01d9r3",
            "m.0c9rw5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01d9r3",
                "m.0c9rw5"
            ]
        ],
        "entity_linking": {
            "South Korea": "m.06qd3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06qd3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06qd3 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06qd3')\na.add_fact('m.06qd3', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1467",
        "question": "who did ben franklin marry",
        "answer": [
            "m.0b15_0"
        ],
        "different_answer": [
            [
                "m.0b15_0"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz",
            "Common-law marriage": "m.01bl8s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.01bl8s .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bl8s')\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.01bl8s')\na.add_fact('m.019fz', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1468",
        "question": "what sri lanka capital",
        "answer": [
            "m.02r9rz",
            "m.0fn7r"
        ],
        "different_answer": [
            [
                "m.02r9rz",
                "m.0fn7r"
            ]
        ],
        "entity_linking": {
            "Sri Lanka": "m.06m_5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06m_5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06m_5 ns:location.country.capital ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06m_5')\na.add_fact('m.06m_5', 'location.country.capital', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1470",
        "question": "what kind of government does poland have",
        "answer": [
            "m.026wp",
            "m.0glnsx"
        ],
        "different_answer": [
            [
                "m.026wp",
                "m.0glnsx"
            ]
        ],
        "entity_linking": {
            "Poland": "m.05qhw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qhw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qhw ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qhw')\na.add_fact('m.05qhw', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1471",
        "question": "what famous people came from delaware",
        "answer": [
            "m.02pklp5",
            "m.0c6vmy",
            "m.03ctznp",
            "m.0vsbk22",
            "m.05mw5wh",
            "m.0dry27q",
            "m.0rphj64",
            "m.02qt46z",
            "m.0j3dk2k",
            "m.0n5y06z",
            "m.0nhcvxt",
            "m.0j9l05d",
            "m.02wz9x4",
            "m.0hz6xr1",
            "m.0bhlkkh",
            "m.01129fkw",
            "m.01wgcqq",
            "m.0j47g36",
            "m.09wyb6",
            "m.04dzs00",
            "m.06kqn",
            "m.02z58yt",
            "m.05w85n5",
            "m.0k8r_15",
            "m.0drydyc",
            "m.0c0311b",
            "m.063h55",
            "m.04jssy6",
            "m.02vnjsq",
            "m.0w36css",
            "m.0_xw9n5",
            "m.0d65y5",
            "m.02pvs20",
            "m.09l25n",
            "m.0_y_9x0",
            "m.0jz14_",
            "m.03cpszm",
            "m.0f5c9g",
            "m.05bc6b",
            "m.02qnnct",
            "m.0gkg6m7",
            "m.0hqqthn",
            "m.04zs9n7",
            "m.0131bnwf",
            "m.08rwbh"
        ],
        "different_answer": [
            [
                "m.02pklp5",
                "m.0c6vmy",
                "m.03ctznp",
                "m.0vsbk22",
                "m.05mw5wh",
                "m.0dry27q",
                "m.0rphj64",
                "m.02qt46z",
                "m.0j3dk2k",
                "m.0n5y06z",
                "m.0nhcvxt",
                "m.0j9l05d",
                "m.02wz9x4",
                "m.0hz6xr1",
                "m.0bhlkkh",
                "m.01129fkw",
                "m.01wgcqq",
                "m.0j47g36",
                "m.09wyb6",
                "m.04dzs00",
                "m.06kqn",
                "m.02z58yt",
                "m.05w85n5",
                "m.0k8r_15",
                "m.0drydyc",
                "m.0c0311b",
                "m.063h55",
                "m.04jssy6",
                "m.02vnjsq",
                "m.0w36css",
                "m.0_xw9n5",
                "m.0d65y5",
                "m.02pvs20",
                "m.09l25n",
                "m.0_y_9x0",
                "m.0jz14_",
                "m.03cpszm",
                "m.0f5c9g",
                "m.05bc6b",
                "m.02qnnct",
                "m.0gkg6m7",
                "m.0hqqthn",
                "m.04zs9n7",
                "m.0131bnwf",
                "m.08rwbh"
            ]
        ],
        "entity_linking": {
            "Delaware": "m.026mj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.026mj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.026mj ns:location.location.people_born_here ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.026mj')\na.add_fact('m.026mj', 'location.location.people_born_here', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1472",
        "question": "when did romney become governor",
        "answer": [
            "2003-01-02-08:00"
        ],
        "different_answer": [
            [
                "2003-01-02-08:00"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s",
            "Governor": "m.0fkvn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.0271_s', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1473",
        "question": "what currency does cyprus use",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Cyprus": "m.01ppq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ppq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ppq ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ppq')\na.add_fact('m.01ppq', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1475",
        "question": "what type of guitar does johnny depp play",
        "answer": [
            "m.0342h",
            "m.06w7v"
        ],
        "different_answer": [
            [
                "m.0342h",
                "m.06w7v"
            ]
        ],
        "entity_linking": {
            "Johnny Depp": "m.0jfx1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jfx1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jfx1 ns:music.group_member.instruments_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jfx1')\na.add_fact('m.0jfx1', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1477",
        "question": "what episode of how i met your mother is carrie underwood on",
        "answer": [
            "m.0bbt_3x"
        ],
        "different_answer": [
            [
                "m.0bbt_3x"
            ]
        ],
        "entity_linking": {
            "Carrie Underwood": "m.058s57",
            "How I Met Your Mother": "m.07zhjj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.058s57)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.058s57 ns:tv.tv_actor.guest_roles ?y .\n?y ns:tv.tv_guest_role.episodes_appeared_in ?x .\n?x ns:tv.tv_series_episode.series ns:m.07zhjj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07zhjj')\na.add_filter('x0', '!=', 'm.058s57')\na.add_fact('x0', 'tv.tv_series_episode.series', 'm.07zhjj')\na.add_fact('m.058s57', 'tv.tv_actor.guest_roles', 'x1')\na.add_fact('x1', 'tv.tv_guest_role.episodes_appeared_in', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1478",
        "question": "who are the 9 justices of the supreme court 2011",
        "answer": [
            "m.019s7r",
            "m.016m0v",
            "m.066vhq",
            "m.06lnfm",
            "m.01_4j",
            "m.04gnxk",
            "m.0166zk",
            "m.06lvrr",
            "m.0199pk"
        ],
        "different_answer": [
            [
                "m.019s7r",
                "m.016m0v",
                "m.066vhq",
                "m.06lnfm",
                "m.01_4j",
                "m.04gnxk",
                "m.0166zk",
                "m.06lvrr",
                "m.0199pk"
            ]
        ],
        "entity_linking": {
            "Supreme Court of the United States": "m.07sz1",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07sz1')\na.add_fact('m.07sz1', 'law.court.judges', 'x1')\na.add_time_constrain('x1', 'law.judicial_tenure.from_date', 'law.judicial_tenure.to_date', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'law.judicial_tenure.judge', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1479",
        "question": "who is dustin johnson the golfer",
        "answer": [
            "m.025smyp"
        ],
        "different_answer": [
            [
                "m.025smyp"
            ]
        ],
        "entity_linking": {
            "Dustin Johnson": "m.04n4sw4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n4sw4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n4sw4 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04n4sw4')\na.add_fact('m.04n4sw4', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1480",
        "question": "who did cher have a son with",
        "answer": [
            "m.06wmp",
            "m.02jg92"
        ],
        "different_answer": [
            [
                "m.06wmp",
                "m.02jg92"
            ]
        ],
        "entity_linking": {
            "Cher": "m.01vtj38"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.01vtj38 ns:people.person.children ?y .\n\t?y ns:people.person.gender ns:m.05zppz . #Male\n\t?y ns:people.person.parents ?x .\n  FILTER (?x != ns:m.01vtj38)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1481",
        "question": "what city is the university of oregon state in",
        "answer": [
            "m.02mf7"
        ],
        "different_answer": [
            [
                "m.02mf7"
            ]
        ],
        "entity_linking": {
            "University of Oregon": "m.01n6r0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01n6r0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01n6r0 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01n6r0')\na.add_fact('m.01n6r0', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1482",
        "question": "who played carmen cortez in spy kids",
        "answer": [
            "m.0zfn9cs",
            "m.02z7h0"
        ],
        "different_answer": [
            [
                "m.0zfn9cs",
                "m.02z7h0"
            ]
        ],
        "entity_linking": {
            "Spy Kids": "m.02rrfzf",
            "Baby Carmen": "m.02ql50"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rrfzf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rrfzf ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.02ql50 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ql50')\na.add_filter('x0', '!=', 'm.02rrfzf')\na.add_fact('x1', 'film.performance.character', 'm.02ql50')\na.add_fact('m.02rrfzf', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1483",
        "question": "what is the political system in germany",
        "answer": [
            "m.0drnm",
            "m.0c9rw5",
            "m.0glnsx",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.0drnm",
                "m.0c9rw5",
                "m.0glnsx",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1484",
        "question": "what prompted shakespeare to write poetry",
        "answer": [
            "m.07hl9",
            "m.0c2cl",
            "m.07km7",
            "m.03cdqxx",
            "m.09fdm",
            "m.01r7z",
            "m.060yy",
            "m.063_9",
            "m.0j_8y",
            "m.07yhg",
            "m.01612m",
            "m.02lqj",
            "m.0c5h0",
            "m.03b_m"
        ],
        "different_answer": [
            [
                "m.07hl9",
                "m.0c2cl",
                "m.07km7",
                "m.03cdqxx",
                "m.09fdm",
                "m.01r7z",
                "m.060yy",
                "m.063_9",
                "m.0j_8y",
                "m.07yhg",
                "m.01612m",
                "m.02lqj",
                "m.0c5h0",
                "m.03b_m"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('m.081k8', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1485",
        "question": "what is the currency in turkey called",
        "answer": [
            "m.04dq0w"
        ],
        "different_answer": [
            [
                "m.04dq0w"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1486",
        "question": "what school did mark zuckerberg attend",
        "answer": [
            "m.01cyd5",
            "m.038133",
            "m.08nm4j",
            "m.03ksy"
        ],
        "different_answer": [
            [
                "m.01cyd5",
                "m.038133",
                "m.08nm4j",
                "m.03ksy"
            ]
        ],
        "entity_linking": {
            "Mark Zuckerberg": "m.086dny"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.086dny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.086dny ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.086dny')\na.add_fact('m.086dny', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1487",
        "question": "where does kate middleton live 2012",
        "answer": [
            "m.02kqsd",
            "m.0b_yz"
        ],
        "different_answer": [
            [
                "m.02kqsd",
                "m.0b_yz"
            ]
        ],
        "entity_linking": {
            "Catherine, Duchess of Cambridge": "m.05mnc3",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mnc3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mnc3 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2012-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2012-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05mnc3')\na.add_fact('m.05mnc3', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1488",
        "question": "what type of art does marc chagall do",
        "answer": [
            "m.09ff3",
            "m.073_6",
            "m.0pybl",
            "m.04lx1",
            "m.015r61"
        ],
        "different_answer": [
            [
                "m.09ff3",
                "m.073_6",
                "m.0pybl",
                "m.04lx1",
                "m.015r61"
            ]
        ],
        "entity_linking": {
            "Marc Chagall": "m.0g_j0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g_j0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g_j0 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g_j0')\na.add_fact('m.0g_j0', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1489",
        "question": "what character did billy d williams play in star wars",
        "answer": [
            "m.0ddrb"
        ],
        "different_answer": [
            [
                "m.0ddrb"
            ],
            [
                "m.0ddrb"
            ],
            [
                "m.0ddrb"
            ]
        ],
        "entity_linking": {
            "Billy Dee Williams": "m.027_sn",
            "Robot Chicken: Star Wars Episode III": "m.0g55yqj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027_sn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027_sn ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.0g55yqj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f3m1')\na.add_filter('x0', '!=', 'm.027_sn')\na.add_fact('x1', 'film.performance.film', 'm.0f3m1')\na.add_fact('m.027_sn', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1490",
        "question": "what language is spoken in argentina",
        "answer": [
            "m.02w_hsv",
            "m.02bjrlw",
            "m.03d9kg",
            "m.0880p",
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.02w_hsv",
                "m.02bjrlw",
                "m.03d9kg",
                "m.0880p",
                "m.06nm1"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1493",
        "question": "what school did wilfred owen go to",
        "answer": [
            "m.02f46y",
            "m.03qjj55"
        ],
        "different_answer": [
            [
                "m.02f46y",
                "m.03qjj55"
            ]
        ],
        "entity_linking": {
            "Wilfred Owen": "m.0ckwt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ckwt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ckwt ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ckwt')\na.add_fact('m.0ckwt', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1494",
        "question": "who is kevin jonas married to",
        "answer": [
            "m.064hjjr"
        ],
        "different_answer": [
            [
                "m.064hjjr"
            ]
        ],
        "entity_linking": {
            "Kevin Jonas": "m.04d_mtq",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04d_mtq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04d_mtq ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.04d_mtq')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.04d_mtq', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1495",
        "question": "where does airtran airways fly",
        "answer": [
            "m.01f07x",
            "m.0cy71",
            "m.01kyln",
            "m.01n2vy",
            "m.01mz5z",
            "m.01nhvq"
        ],
        "different_answer": [
            [
                "m.01f07x",
                "m.0cy71",
                "m.01kyln",
                "m.01n2vy",
                "m.01mz5z",
                "m.01nhvq"
            ]
        ],
        "entity_linking": {
            "AirTran Airways": "m.01vk4t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vk4t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vk4t ns:aviation.airline.airports_served ?y .\n?y ns:aviation.airline_airport_presence.airport ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vk4t')\na.add_fact('m.01vk4t', 'aviation.airline.airports_served', 'x1')\na.add_fact('x1', 'aviation.airline_airport_presence.airport', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1496",
        "question": "where does the city of paris get its name",
        "answer": [
            "m.0283_dl"
        ],
        "different_answer": [
            [
                "m.0283_dl"
            ]
        ],
        "entity_linking": {
            "Paris": "m.05qtj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qtj')\na.add_fact('m.05qtj', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1499",
        "question": "who did sandra bullock marry",
        "answer": [
            "m.02khjc"
        ],
        "different_answer": [
            [
                "m.02khjc"
            ]
        ],
        "entity_linking": {
            "Sandra Bullock": "m.0794g",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0794g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0794g ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0794g')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0794g', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1500",
        "question": "where is olympic national park located",
        "answer": [
            "m.081yw"
        ],
        "different_answer": [
            [
                "m.081yw"
            ]
        ],
        "entity_linking": {
            "Olympic National Park": "m.015nrn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015nrn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015nrn ns:base.usnationalparks.us_national_park.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015nrn')\na.add_fact('m.015nrn', 'base.usnationalparks.us_national_park.state', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1501",
        "question": "where is the un based",
        "answer": [
            "m.02_286"
        ],
        "different_answer": [
            [
                "m.02_286"
            ]
        ],
        "entity_linking": {
            "United Nations": "m.07t65"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t65)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t65 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t65')\na.add_fact('m.07t65', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1502",
        "question": "what city and state is yale located in",
        "answer": [
            "m.0f2nf"
        ],
        "different_answer": [
            [
                "m.0f2nf"
            ]
        ],
        "entity_linking": {
            "University Yale": "m.08815"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08815)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08815 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08815')\na.add_fact('m.08815', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1503",
        "question": "where did thomas paine die",
        "answer": [
            "m.02_286"
        ],
        "different_answer": [
            [
                "m.02_286"
            ]
        ],
        "entity_linking": {
            "Thomas Paine": "m.07kwl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07kwl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07kwl ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07kwl')\na.add_fact('m.07kwl', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1504",
        "question": "where was barack hussein obama sr born",
        "answer": [
            "m.04f2ymq"
        ],
        "different_answer": [
            [
                "m.04f2ymq"
            ]
        ],
        "entity_linking": {
            "Barack Obama, Sr.": "m.03qccxj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03qccxj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03qccxj ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03qccxj')\na.add_fact('m.03qccxj', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1506",
        "question": "where is the home stadium of the new england patriots",
        "answer": [
            "m.0299m7"
        ],
        "different_answer": [
            [
                "m.0299m7"
            ]
        ],
        "entity_linking": {
            "New England Patriots": "m.05g3b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05g3b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05g3b ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05g3b')\na.add_fact('m.05g3b', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1507",
        "question": "who was kate chopin",
        "answer": [
            "m.012t_z",
            "m.0kyk",
            "m.0cbd2",
            "m.02xhgwq"
        ],
        "different_answer": [
            [
                "m.012t_z",
                "m.0kyk",
                "m.0cbd2",
                "m.02xhgwq"
            ]
        ],
        "entity_linking": {
            "Kate Chopin": "m.0d8pw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d8pw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d8pw ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d8pw')\na.add_fact('m.0d8pw', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1508",
        "question": "when did bill clinton go to college",
        "answer": [
            "m.0pspl",
            "m.0ymf1",
            "m.02bq1j",
            "m.07tgn",
            "m.02ckl3",
            "m.08815"
        ],
        "different_answer": [
            [
                "m.0pspl",
                "m.0ymf1",
                "m.02bq1j",
                "m.07tgn",
                "m.02ckl3",
                "m.08815"
            ]
        ],
        "entity_linking": {
            "Bill Clinton": "m.0157m",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0157m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0157m ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.0157m')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.0157m', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1510",
        "question": "what are staffordshire terriers",
        "answer": [
            "m.0bt9lr"
        ],
        "different_answer": [
            [
                "m.0bt9lr"
            ],
            [
                "m.0bt9lr"
            ]
        ],
        "entity_linking": {
            "Staffordshire Bull Terrier": "m.01kv93"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01kv93)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01kv93 ns:biology.animal_breed.breed_of ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01kv93')\na.add_fact('m.01kv93', 'biology.animal_breed.breed_of', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1513",
        "question": "what to do downtown sacramento",
        "answer": [
            "m.0k4wq0k",
            "m.03mdd2l",
            "m.0d7nnr",
            "m.0bgv0p",
            "m.0crhh7y",
            "m.065yn2d",
            "m.07skv9",
            "m.0962d",
            "m.03v4j7",
            "m.03v4nl",
            "m.0b7727"
        ],
        "different_answer": [
            [
                "m.0k4wq0k",
                "m.03mdd2l",
                "m.0d7nnr",
                "m.0bgv0p",
                "m.0crhh7y",
                "m.065yn2d",
                "m.07skv9",
                "m.0962d",
                "m.03v4j7",
                "m.03v4nl",
                "m.0b7727"
            ]
        ],
        "entity_linking": {
            "Sacramento": "m.07bcn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07bcn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07bcn ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07bcn')\na.add_fact('m.07bcn', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1515",
        "question": "who is michael j fox parents",
        "answer": [
            "m.0gxtzg9",
            "m.0gxtzg3"
        ],
        "different_answer": [
            [
                "m.0gxtzg9",
                "m.0gxtzg3"
            ]
        ],
        "entity_linking": {
            "Michael J. Fox": "m.0hz_1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hz_1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hz_1 ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hz_1')\na.add_fact('m.0hz_1', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1516",
        "question": "where did sanjay gupta go to school",
        "answer": [
            "m.08mhmx",
            "m.027j22s",
            "m.07szy"
        ],
        "different_answer": [
            [
                "m.08mhmx",
                "m.027j22s",
                "m.07szy"
            ]
        ],
        "entity_linking": {
            "Sanjay Gupta": "m.02yyk6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02yyk6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02yyk6 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02yyk6')\na.add_fact('m.02yyk6', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1518",
        "question": "what countries are involved in the nafta",
        "answer": [
            "m.0b90_r",
            "m.09c7w0",
            "m.0d060g"
        ],
        "different_answer": [
            [
                "m.0b90_r",
                "m.09c7w0",
                "m.0d060g"
            ]
        ],
        "entity_linking": {
            "North American Free Trade Agreement": "m.05jj_",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05jj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05jj_ ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.05jj_')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.05jj_', 'organization.membership_organization.members', 'x1')\na.add_fact('x1', 'organization.organization_membership.member', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1519",
        "question": "what continent is cayman islands located",
        "answer": [
            "m.059g4",
            "m.07c5l"
        ],
        "different_answer": [
            [
                "m.059g4",
                "m.07c5l"
            ]
        ],
        "entity_linking": {
            "Cayman Islands": "m.01nty",
            "Continent": "m.01mh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01nty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01nty ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mh')\na.add_filter('x0', '!=', 'm.01nty')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mh')\na.add_fact('m.01nty', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1520",
        "question": "what language speak in brazil",
        "answer": [
            "m.05zjd",
            "m.02bjrlw",
            "m.02zj58"
        ],
        "different_answer": [
            [
                "m.05zjd",
                "m.02bjrlw",
                "m.02zj58"
            ],
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1522",
        "question": "who does kroy biermann play football for",
        "answer": [
            "m.0wsr"
        ],
        "different_answer": [
            [
                "m.0wsr"
            ]
        ],
        "entity_linking": {
            "Kroy Biermann": "m.043m195",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043m195)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043m195 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.043m195')\na.add_fact('m.043m195', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1523",
        "question": "when is the last time the pittsburgh steelers won a superbowl",
        "answer": [
            "m.04n7r5"
        ],
        "different_answer": [
            [
                "m.04n7r5"
            ]
        ],
        "entity_linking": {
            "Pittsburgh Steelers": "m.05tfm",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tfm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tfm ns:sports.sports_team.championships ?x .\n?x ns:sports.sports_championship_event.championship ns:m.06x5s .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x5s')\na.add_filter('x0', '!=', 'm.05tfm')\na.add_fact('x0', 'sports.sports_championship_event.championship', 'm.06x5s')\na.add_fact('m.05tfm', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1524",
        "question": "who invented islamic religion",
        "answer": [
            "m.04s9n"
        ],
        "different_answer": [
            [
                "m.04s9n"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.founding_figures ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.founding_figures', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1525",
        "question": "who were we fighting in the gulf war",
        "answer": [
            "m.0d05q4",
            "m.01z215",
            "m.0jgd",
            "m.09c7w0",
            "m.0f8l9c",
            "m.07ssc",
            "m.0chghy"
        ],
        "different_answer": [
            [
                "m.0d05q4",
                "m.01z215",
                "m.0jgd",
                "m.09c7w0",
                "m.0f8l9c",
                "m.07ssc",
                "m.0chghy"
            ]
        ],
        "entity_linking": {
            "Gulf War": "m.018w0j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018w0j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018w0j ns:military.military_conflict.combatants ?y .\n?y ns:military.military_combatant_group.combatants ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018w0j')\na.add_fact('m.018w0j', 'military.military_conflict.combatants', 'x1')\na.add_fact('x1', 'military.military_combatant_group.combatants', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1526",
        "question": "how many languages do they speak in switzerland",
        "answer": [
            "m.06ctk",
            "m.064_8sq",
            "m.04306rv",
            "m.02bjrlw"
        ],
        "different_answer": [
            [
                "m.06ctk",
                "m.064_8sq",
                "m.04306rv",
                "m.02bjrlw"
            ],
            [
                "m.06ctk",
                "m.064_8sq",
                "m.04306rv",
                "m.02bjrlw"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('m.06mzp', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1527",
        "question": "what political party does barack obama represent",
        "answer": [
            "m.0d075m"
        ],
        "different_answer": [
            [
                "m.0d075m"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1528",
        "question": "what movies does logan lerman play in",
        "answer": [
            "m.0642xf3",
            "m.0d67yl",
            "m.0t_5p_m",
            "m.07799g",
            "m.02pjkz7",
            "g.122h61qh",
            "m.0btbyn",
            "m.0qlz9",
            "m.0crc2cp",
            "m.0g57wgv",
            "m.04f46k7",
            "m.06y_y74",
            "m.0gltv",
            "m.0b7hdh",
            "m.0gwrkkn",
            "m.0lbcy8h",
            "m.0c4mcp",
            "m.0kdy118",
            "m.02bg55",
            "m.0d31rqr",
            "m.0j27n5r"
        ],
        "different_answer": [
            [
                "m.0642xf3",
                "m.0d67yl",
                "m.0t_5p_m",
                "m.07799g",
                "m.02pjkz7",
                "g.122h61qh",
                "m.0btbyn",
                "m.0qlz9",
                "m.0crc2cp",
                "m.0g57wgv",
                "m.04f46k7",
                "m.06y_y74",
                "m.0gltv",
                "m.0b7hdh",
                "m.0gwrkkn",
                "m.0lbcy8h",
                "m.0c4mcp",
                "m.0kdy118",
                "m.02bg55",
                "m.0d31rqr",
                "m.0j27n5r"
            ]
        ],
        "entity_linking": {
            "Logan Lerman": "m.04f1s6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04f1s6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04f1s6 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04f1s6')\na.add_fact('m.04f1s6', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1529",
        "question": "where did emperor constantine die",
        "answer": [
            "m.01678j"
        ],
        "different_answer": [
            [
                "m.01678j"
            ]
        ],
        "entity_linking": {
            "Constantine the Great": "m.021tl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.021tl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.021tl ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.021tl')\na.add_fact('m.021tl', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1531",
        "question": "where is mali located",
        "answer": [
            "m.0dg3n1"
        ],
        "different_answer": [
            [
                "m.0dg3n1"
            ],
            [
                "m.0hqjh",
                "m.0dg3n1"
            ]
        ],
        "entity_linking": {
            "Mali": "m.04v09"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v09)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v09 ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04v09')\na.add_fact('m.04v09', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1533",
        "question": "what planet did luke skywalker came from",
        "answer": [
            "g.120mc0gk"
        ],
        "different_answer": [
            [
                "g.120mc0gk"
            ]
        ],
        "entity_linking": {
            "Luke Skywalker": "m.0f1bg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f1bg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f1bg ns:fictional_universe.fictional_character.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f1bg')\na.add_fact('m.0f1bg', 'fictional_universe.fictional_character.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1534",
        "question": "who are the coaches for the oakland raiders",
        "answer": [
            "m.03h4k5d"
        ],
        "different_answer": [
            [
                "m.03h4k5d"
            ]
        ],
        "entity_linking": {
            "Oakland Raiders": "m.05l71"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05l71)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05l71 ns:american_football.football_team.current_head_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05l71')\na.add_fact('m.05l71', 'american_football.football_team.current_head_coach', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1535",
        "question": "where was the first microsoft headquarters located",
        "answer": [
            "m.06m7v"
        ],
        "different_answer": [
            [
                "m.06m7v"
            ]
        ],
        "entity_linking": {
            "Microsoft Corporation": "m.04sv4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04sv4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04sv4 ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04sv4')\na.add_fact('m.04sv4', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1536",
        "question": "where did john steinbeck go to college",
        "answer": [
            "m.06pwq"
        ],
        "different_answer": [
            [
                "m.06pwq"
            ]
        ],
        "entity_linking": {
            "John Steinbeck": "m.04107",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04107)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04107 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.04107')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.04107', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1537",
        "question": "what did niels bohr discover about the atomic structure",
        "answer": [
            "m.069dx"
        ],
        "different_answer": [
            [
                "m.069dx"
            ]
        ],
        "entity_linking": {
            "Niels Henrik David Bohr": "m.059y0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059y0 ns:base.nobelprizes.nobel_prize_winner.nobel_honor ?y .\n?y ns:base.nobelprizes.nobel_honor.subject_area ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.059y0')\na.add_fact('m.059y0', 'base.nobelprizes.nobel_prize_winner.nobel_honor', 'x1')\na.add_fact('x1', 'base.nobelprizes.nobel_honor.subject_area', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1538",
        "question": "what books did louis sachar wrote",
        "answer": [
            "m.04vzwf8",
            "m.04vk0f_",
            "m.04v_cdw",
            "m.04tx5kt",
            "m.04vk_0q",
            "m.04v_cdl",
            "m.04tx5n0",
            "m.04vfy9y",
            "m.04vk_60",
            "m.04vl09f",
            "m.04vfy2h",
            "m.04vk_8s",
            "m.04vk_80",
            "m.04tx5mk",
            "m.04vkj5z",
            "m.04vfybn",
            "m.04tx5k2",
            "m.04v09yr",
            "m.04v_kjh",
            "m.04v5xwx",
            "m.04vztrl",
            "m.04tx5h9",
            "m.04v09_5",
            "m.04vk0hr",
            "m.04vztvk",
            "m.04vztqt",
            "m.04vzwd7",
            "m.04vk_5s",
            "m.04vk_50",
            "m.04vk_4s",
            "m.04vk_26",
            "m.04tx5mb",
            "m.04tx5k9",
            "m.04v5xx4",
            "m.028xsvy",
            "m.04vztww",
            "m.04vkj5q",
            "m.04tx5m3",
            "m.04vk0jj",
            "m.04tx5gn",
            "m.04vfsfw",
            "m.04vztrv",
            "m.04vzwfv",
            "m.04vk_3p",
            "m.04vkj76",
            "m.04vk0gr",
            "m.04vztx4",
            "m.04vk_4h",
            "m.04vk_2z",
            "m.04vfmz4",
            "m.04tx5lg",
            "m.04vztw2",
            "m.04tx5jm",
            "m.028y9y6",
            "m.04tx5hj",
            "m.04tx5jw",
            "m.04vztq9",
            "m.04vkj6z",
            "m.04vfy3x",
            "m.04vztt1",
            "m.04tx5dp",
            "m.04vl080",
            "m.04vztq0",
            "m.04tx5lp",
            "m.04tx5h2",
            "m.04v09x5",
            "m.04vfy26",
            "m.04vk_68",
            "m.04vk_47",
            "m.04vztvv",
            "m.04vl08z",
            "m.04vk0hh",
            "m.04vkj8s",
            "m.04v09_n",
            "m.028y3lc",
            "m.04tx5l7",
            "m.04vkj5g",
            "m.04vfsh_",
            "m.04vk_71",
            "m.04vfyby",
            "m.04v_kj_",
            "m.04v09xp",
            "m.04w05b2",
            "m.04w059b",
            "m.04w059v",
            "m.04vztst",
            "m.04tx5kj",
            "m.04vk_58",
            "m.04v_kj0",
            "m.04w058k",
            "m.04vfy3m",
            "m.04vzts9",
            "m.04v5xxw",
            "m.04vkj56",
            "m.04vztt9",
            "m.04tx5hz",
            "m.04tx5jd",
            "m.04vfsh5",
            "m.04vk_6t",
            "m.04vztwl",
            "m.04v09zg",
            "m.04vl08h",
            "m.04vzwgy",
            "m.04v09wp",
            "m.04vzwg2",
            "m.04vk_6j",
            "m.04v09xy",
            "m.04vl07k",
            "m.04vzwhg",
            "m.04tx5f_",
            "m.028yqjw",
            "m.04vztwb",
            "m.04vk0g_",
            "m.04v09xf",
            "m.04vkj7g",
            "m.04vzwh6",
            "m.04vk_1f",
            "m.04vzttl",
            "m.04tx5gf",
            "m.04vk_1z",
            "m.04vk0h_",
            "m.04vzwdh",
            "m.04vztv9",
            "m.04tx5mt",
            "m.04tx5fk",
            "m.04vk_5j",
            "m.04v_kjr",
            "m.04vzwj8",
            "m.04vfsj7",
            "m.04vztv0"
        ],
        "different_answer": [
            [
                "m.04vzwf8",
                "m.04vk0f_",
                "m.04v_cdw",
                "m.04tx5kt",
                "m.04vk_0q",
                "m.04v_cdl",
                "m.04tx5n0",
                "m.04vfy9y",
                "m.04vk_60",
                "m.04vl09f",
                "m.04vfy2h",
                "m.04vk_8s",
                "m.04vk_80",
                "m.04tx5mk",
                "m.04vkj5z",
                "m.04vfybn",
                "m.04tx5k2",
                "m.04v09yr",
                "m.04v_kjh",
                "m.04v5xwx",
                "m.04vztrl",
                "m.04tx5h9",
                "m.04v09_5",
                "m.04vk0hr",
                "m.04vztvk",
                "m.04vztqt",
                "m.04vzwd7",
                "m.04vk_5s",
                "m.04vk_50",
                "m.04vk_4s",
                "m.04vk_26",
                "m.04tx5mb",
                "m.04tx5k9",
                "m.04v5xx4",
                "m.028xsvy",
                "m.04vztww",
                "m.04vkj5q",
                "m.04tx5m3",
                "m.04vk0jj",
                "m.04tx5gn",
                "m.04vfsfw",
                "m.04vztrv",
                "m.04vzwfv",
                "m.04vk_3p",
                "m.04vkj76",
                "m.04vk0gr",
                "m.04vztx4",
                "m.04vk_4h",
                "m.04vk_2z",
                "m.04vfmz4",
                "m.04tx5lg",
                "m.04vztw2",
                "m.04tx5jm",
                "m.028y9y6",
                "m.04tx5hj",
                "m.04tx5jw",
                "m.04vztq9",
                "m.04vkj6z",
                "m.04vfy3x",
                "m.04vztt1",
                "m.04tx5dp",
                "m.04vl080",
                "m.04vztq0",
                "m.04tx5lp",
                "m.04tx5h2",
                "m.04v09x5",
                "m.04vfy26",
                "m.04vk_68",
                "m.04vk_47",
                "m.04vztvv",
                "m.04vl08z",
                "m.04vk0hh",
                "m.04vkj8s",
                "m.04v09_n",
                "m.028y3lc",
                "m.04tx5l7",
                "m.04vkj5g",
                "m.04vfsh_",
                "m.04vk_71",
                "m.04vfyby",
                "m.04v_kj_",
                "m.04v09xp",
                "m.04w05b2",
                "m.04w059b",
                "m.04w059v",
                "m.04vztst",
                "m.04tx5kj",
                "m.04vk_58",
                "m.04v_kj0",
                "m.04w058k",
                "m.04vfy3m",
                "m.04vzts9",
                "m.04v5xxw",
                "m.04vkj56",
                "m.04vztt9",
                "m.04tx5hz",
                "m.04tx5jd",
                "m.04vfsh5",
                "m.04vk_6t",
                "m.04vztwl",
                "m.04v09zg",
                "m.04vl08h",
                "m.04vzwgy",
                "m.04v09wp",
                "m.04vzwg2",
                "m.04vk_6j",
                "m.04v09xy",
                "m.04vl07k",
                "m.04vzwhg",
                "m.04tx5f_",
                "m.028yqjw",
                "m.04vztwb",
                "m.04vk0g_",
                "m.04v09xf",
                "m.04vkj7g",
                "m.04vzwh6",
                "m.04vk_1f",
                "m.04vzttl",
                "m.04tx5gf",
                "m.04vk_1z",
                "m.04vk0h_",
                "m.04vzwdh",
                "m.04vztv9",
                "m.04tx5mt",
                "m.04tx5fk",
                "m.04vk_5j",
                "m.04v_kjr",
                "m.04vzwj8",
                "m.04vfsj7",
                "m.04vztv0"
            ],
            [
                "m.04t4867",
                "m.027by4_",
                "m.0fq08x0",
                "m.010r2x8r",
                "m.03tgtr",
                "m.04t4842",
                "m.0h0jhl",
                "g.1218f5g0",
                "m.04t485_",
                "m.09yl25",
                "m.06blrtc",
                "m.0f8d9g",
                "m.04t484_",
                "m.06tm95g",
                "m.067d3d8",
                "m.069nlkb",
                "m.04t486h",
                "m.06hhh6t",
                "m.04t484b",
                "m.010r3l0q",
                "m.027bxq6",
                "m.011brh75",
                "m.0dl1lt",
                "m.06dymp",
                "m.0dh2fh",
                "m.0cmt6c",
                "m.06ck0yg",
                "m.04t484l",
                "m.04t485h",
                "m.027bxn3",
                "m.027bxzt",
                "m.0f95rs"
            ]
        ],
        "entity_linking": {
            "Louis Sachar": "m.01bq8d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bq8d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bq8d ns:book.author.book_editions_published ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bq8d')\na.add_fact('m.01bq8d', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1539",
        "question": "who is ryan reynolds married to 2012",
        "answer": [
            "m.06_bq1"
        ],
        "different_answer": [
            [
                "m.06_bq1"
            ]
        ],
        "entity_linking": {
            "Ryan Reynolds": "m.036hf4",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.036hf4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.036hf4 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.036hf4')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.036hf4', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.from', 'x2')\na.add_max('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1540",
        "question": "what is newt gingrich 's wife 's name",
        "answer": [
            "m.05znhhq"
        ],
        "different_answer": [
            [
                "m.05znhhq"
            ]
        ],
        "entity_linking": {
            "Newt Gingrich": "m.018fzs",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018fzs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018fzs ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?x ns:people.person.gender ns:m.02zsn .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.018fzs')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.018fzs', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.from', 'x2')\na.add_max('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1541",
        "question": "what type of music did antonio vivaldi play",
        "answer": [
            "m.01fsz",
            "m.0ggq0m"
        ],
        "different_answer": [
            [
                "m.01fsz",
                "m.0ggq0m"
            ]
        ],
        "entity_linking": {
            "Antonio Vivaldi": "m.0pth"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pth ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0pth')\na.add_fact('m.0pth', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1542",
        "question": "what school does james franco go to",
        "answer": [
            "m.04b_46",
            "m.04lh_5",
            "m.01vg13",
            "m.02s62q",
            "m.03ysv6",
            "m.09f2j",
            "m.025rrjh",
            "m.08815"
        ],
        "different_answer": [
            [
                "m.04b_46",
                "m.04lh_5",
                "m.01vg13",
                "m.02s62q",
                "m.03ysv6",
                "m.09f2j",
                "m.025rrjh",
                "m.08815"
            ]
        ],
        "entity_linking": {
            "James Franco": "m.05bnp0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05bnp0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05bnp0 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05bnp0')\na.add_fact('m.05bnp0', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1543",
        "question": "what is samuel langhorne clemens well known for",
        "answer": [
            "m.01d30f",
            "m.0d8qb",
            "m.0461fx_",
            "m.0kyk",
            "m.0cbd2",
            "m.02xhgwq"
        ],
        "different_answer": [
            [
                "m.01d30f",
                "m.0d8qb",
                "m.0461fx_",
                "m.0kyk",
                "m.0cbd2",
                "m.02xhgwq"
            ]
        ],
        "entity_linking": {
            "Mark Twain": "m.014635"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014635)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014635 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014635')\na.add_fact('m.014635', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1544",
        "question": "who was president after william henry harrison",
        "answer": [
            "m.042dk"
        ],
        "different_answer": [
            [
                "m.042dk"
            ]
        ],
        "entity_linking": {
            "President of the United States": "m.060d2",
            "President": "m.060c4"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\nfilter (?x != ns:m.0835q)\n  ns:m.0835q ns:government.us_president.presidency_number ?p .\n  ns:m.060d2 ns:government.government_office_or_title.office_holders ?y .\n  ?y ns:government.government_position_held.office_holder ?x .\n  ?x ns:government.us_president.presidency_number ?pp .\nfilter (xsd:float(?p)+1 = xsd:float(?pp))\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1546",
        "question": "where did rick santorum attend high school",
        "answer": [
            "m.06skgp"
        ],
        "different_answer": [
            [
                "m.06skgp"
            ]
        ],
        "entity_linking": {
            "Rick Santorum": "m.01fgd3",
            "School": "m.01y2hn6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01fgd3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01fgd3 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hn6 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hn6')\na.add_filter('x0', '!=', 'm.01fgd3')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hn6')\na.add_fact('m.01fgd3', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1547",
        "question": "what is the title of george bush 's new book",
        "answer": [
            "m.0h3wdwz"
        ],
        "different_answer": [
            [
                "m.0h3wdwz"
            ]
        ],
        "entity_linking": {
            "George W. Bush": "m.09b6zr",
            "Book": "m.01xryvm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09b6zr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09b6zr ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:m.01xryvm .\n?x ns:book.written_work.date_of_first_publication ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xryvm')\na.add_filter('x0', '!=', 'm.09b6zr')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xryvm')\na.add_fact('m.09b6zr', 'book.author.works_written', 'x0')\na.add_fact('x0', 'book.written_work.date_of_first_publication', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1548",
        "question": "where did antoine lavoisier die",
        "answer": [
            "m.0kx9d"
        ],
        "different_answer": [
            [
                "m.0kx9d"
            ]
        ],
        "entity_linking": {
            "Antoine Lavoisier": "m.0tfw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tfw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tfw ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0tfw')\na.add_fact('m.0tfw', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1550",
        "question": "what is the name of king george vi wife",
        "answer": [
            "m.0cm63"
        ],
        "different_answer": [
            [
                "m.0cm63"
            ]
        ],
        "entity_linking": {
            "George VI": "m.0cm83",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cm83)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cm83 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0cm83')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0cm83', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1551",
        "question": "what year did seattle seahawks go to the super bowl",
        "answer": [
            "m.032tn6",
            "m.09k4qg3"
        ],
        "different_answer": [
            [
                "m.032tn6",
                "m.09k4qg3"
            ]
        ],
        "entity_linking": {
            "Seattle Seahawks": "m.070xg",
            "Super Bowl": "m.06x5s"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT  ?x\nWHERE {\n  ns:m.06x5s ns:sports.sports_championship.events ?x . # Super Bowl\n  {\n    { ?x ns:sports.sports_championship_event.runner_up ns:m.070xg . } # Seattle Seahawks\n    UNION\n    { ?x ns:sports.sports_championship_event.champion ns:m.070xg . } # Seattle Seahawks\n  }\n  ?x ns:time.event.start_date ?d .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1553",
        "question": "where does sami yusuf live",
        "answer": [
            "m.0ftlx"
        ],
        "different_answer": [
            [
                "m.0ftlx"
            ]
        ],
        "entity_linking": {
            "Sami Yusuf": "m.08cnsg",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08cnsg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08cnsg ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08cnsg')\na.add_fact('m.08cnsg', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1554",
        "question": "what is the official language of brazil now",
        "answer": [
            "m.05zjd"
        ],
        "different_answer": [
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1555",
        "question": "what is the parliament of nepal called",
        "answer": [
            "Parliament of Nepal"
        ],
        "different_answer": [
            [
                "Parliament of Nepal"
            ]
        ],
        "entity_linking": {
            "Parliament of Nepal": "m.0c5yqk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c5yqk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c5yqk ns:type.object.name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c5yqk')\na.add_fact('m.0c5yqk', 'type.object.name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1556",
        "question": "when 's the last time the mets won the world series",
        "answer": [
            "m.01q9lc"
        ],
        "different_answer": [
            [
                "m.01q9lc"
            ]
        ],
        "entity_linking": {
            "New York Mets": "m.05g76"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05g76)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05g76 ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05g76')\na.add_fact('m.05g76', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1557",
        "question": "where do florida panthers play",
        "answer": [
            "m.039xlz",
            "m.038hc3"
        ],
        "different_answer": [
            [
                "m.039xlz",
                "m.038hc3"
            ]
        ],
        "entity_linking": {
            "Florida Panthers": "m.0j8js"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j8js)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j8js ns:sports.sports_team.arena_stadium ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j8js')\na.add_fact('m.0j8js', 'sports.sports_team.arena_stadium', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1558",
        "question": "who is john cena married to",
        "answer": [
            "m.07n79hq"
        ],
        "different_answer": [
            [
                "m.07n79hq"
            ]
        ],
        "entity_linking": {
            "John Cena": "m.01ypx5",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ypx5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ypx5 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01ypx5')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01ypx5', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1559",
        "question": "what to do san jose ca",
        "answer": [
            "m.0cm9hhr",
            "m.04_y_d",
            "m.053j1_",
            "m.05b8gm",
            "m.02ryz1",
            "m.03rvy1",
            "m.0255__",
            "m.03gyhcp",
            "m.072p67",
            "m.03bwp6",
            "m.05cm97",
            "m.0fcd8p",
            "m.01nmrx",
            "m.099ltq",
            "m.04zrqk"
        ],
        "different_answer": [
            [
                "m.0cm9hhr",
                "m.04_y_d",
                "m.053j1_",
                "m.05b8gm",
                "m.02ryz1",
                "m.03rvy1",
                "m.0255__",
                "m.03gyhcp",
                "m.072p67",
                "m.03bwp6",
                "m.05cm97",
                "m.0fcd8p",
                "m.01nmrx",
                "m.099ltq",
                "m.04zrqk"
            ]
        ],
        "entity_linking": {
            "San Jose": "m.0f04v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f04v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f04v ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f04v')\na.add_fact('m.0f04v', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1560",
        "question": "who founded new york university",
        "answer": [
            "m.05m665",
            "m.01p369"
        ],
        "different_answer": [
            [
                "m.05m665",
                "m.01p369"
            ]
        ],
        "entity_linking": {
            "New York University": "m.0bwfn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bwfn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bwfn ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bwfn')\na.add_fact('m.0bwfn', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1561",
        "question": "who created arthur",
        "answer": [
            "m.06_dbm",
            "m.02g2wh",
            "m.058nj4"
        ],
        "different_answer": [
            [
                "m.06_dbm",
                "m.02g2wh",
                "m.058nj4"
            ]
        ],
        "entity_linking": {
            "Arthur": "m.0px0r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0px0r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0px0r ns:tv.tv_program.program_creator ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0px0r')\na.add_fact('m.0px0r', 'tv.tv_program.program_creator', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1562",
        "question": "what countries constitute the eu",
        "answer": [
            "m.05qhw",
            "m.01mjq",
            "m.03rjj",
            "m.04v3q",
            "m.04g5k",
            "m.015qh",
            "m.07ssc",
            "m.06mkj",
            "m.02vzc",
            "m.04gzd",
            "m.02kmm",
            "m.0345h",
            "m.059j2",
            "m.03gj2",
            "m.01pj7",
            "m.06npd",
            "m.0k6nt",
            "m.06c1y",
            "m.06t8v",
            "m.0f8l9c",
            "m.0d0vqn",
            "m.04g61",
            "m.0154j",
            "m.05r4w",
            "m.01ppq",
            "m.03rt9",
            "m.0h7x",
            "m.035qy"
        ],
        "different_answer": [
            [
                "m.05qhw",
                "m.01mjq",
                "m.03rjj",
                "m.04v3q",
                "m.04g5k",
                "m.015qh",
                "m.07ssc",
                "m.06mkj",
                "m.02vzc",
                "m.04gzd",
                "m.02kmm",
                "m.0345h",
                "m.059j2",
                "m.03gj2",
                "m.01pj7",
                "m.06npd",
                "m.0k6nt",
                "m.06c1y",
                "m.06t8v",
                "m.0f8l9c",
                "m.0d0vqn",
                "m.04g61",
                "m.0154j",
                "m.05r4w",
                "m.01ppq",
                "m.03rt9",
                "m.0h7x",
                "m.035qy"
            ]
        ],
        "entity_linking": {
            "European Union": "m.0_6t_z8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0_6t_z8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0_6t_z8 ns:organization.membership_organization.members ?y .\n?y ns:organization.organization_membership.member ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0_6t_z8')\na.add_fact('m.0_6t_z8', 'organization.membership_organization.members', 'x1')\na.add_fact('x1', 'organization.organization_membership.member', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1563",
        "question": "what are all the countries in north africa",
        "answer": [
            "m.06frc",
            "m.04q7yp",
            "m.06tw8",
            "m.02wvgjs",
            "m.02vkl1t",
            "m.02jbz2",
            "m.0c75f"
        ],
        "different_answer": [
            [
                "m.06frc",
                "m.04q7yp",
                "m.06tw8",
                "m.02wvgjs",
                "m.02vkl1t",
                "m.02jbz2",
                "m.0c75f"
            ]
        ],
        "entity_linking": {
            "North Africa": "m.05g2v",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05g2v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05g2v ns:location.location.contains ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.05g2v')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.05g2v', 'location.location.contains', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1564",
        "question": "what did bobby darin die of",
        "answer": [
            "m.02wgfrh"
        ],
        "different_answer": [
            [
                "m.02wgfrh"
            ]
        ],
        "entity_linking": {
            "Bobby Darin": "m.0pj9t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pj9t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pj9t ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0pj9t')\na.add_fact('m.0pj9t', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1565",
        "question": "where does houston dynamo play",
        "answer": [
            "m.03l2n"
        ],
        "different_answer": [
            [
                "m.03l2n"
            ]
        ],
        "entity_linking": {
            "Houston Dynamo": "m.09cl0w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09cl0w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09cl0w ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09cl0w')\na.add_fact('m.09cl0w', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1566",
        "question": "what kind of guitar john mayer",
        "answer": [
            "m.02m873"
        ],
        "different_answer": [
            [
                "m.02m873"
            ]
        ],
        "entity_linking": {
            "John Mayer": "m.01s21dg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01s21dg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01s21dg ns:music.guitarist.guitars_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01s21dg')\na.add_fact('m.01s21dg', 'music.guitarist.guitars_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1567",
        "question": "what cancer did patrick swayze",
        "answer": [
            "m.01_qc_"
        ],
        "different_answer": [
            [
                "m.01_qc_"
            ]
        ],
        "entity_linking": {
            "Patrick Swayze": "m.02h3tp",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h3tp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h3tp ns:people.deceased_person.cause_of_death ?x .\n?x ns:medicine.disease.parent_disease ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.02h3tp')\na.add_fact('x0', 'medicine.disease.parent_disease', 'm.0qcr0')\na.add_fact('m.02h3tp', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1568",
        "question": "what university did obama graduated from",
        "answer": [
            "m.01w5m"
        ],
        "different_answer": [
            [
                "m.01w5m"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr",
            "Bachelor of Arts": "m.014mlp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?y ns:education.education.degree ns:m.014mlp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014mlp')\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('x1', 'education.education.degree', 'm.014mlp')\na.add_fact('m.02mjmr', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1569",
        "question": "what jamaican money called",
        "answer": [
            "m.04xc2m"
        ],
        "different_answer": [
            [
                "m.04xc2m"
            ]
        ],
        "entity_linking": {
            "Jamaica": "m.03_r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_r3')\na.add_fact('m.03_r3', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1570",
        "question": "where is the arizona cardinals stadium located",
        "answer": [
            "m.0vmt"
        ],
        "different_answer": [
            [
                "m.0vmt"
            ]
        ],
        "entity_linking": {
            "Arizona Cardinals": "m.0ws7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ws7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ws7 ns:sports.sports_team.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ws7')\na.add_fact('m.0ws7', 'sports.sports_team.location', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1571",
        "question": "what is sir isaac newton theory",
        "answer": [
            "m.01kffn"
        ],
        "different_answer": [
            [
                "m.01kffn"
            ]
        ],
        "entity_linking": {
            "Isaac Newton": "m.03s9v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03s9v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03s9v ns:base.argumentmaps.innovator.original_ideas ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03s9v')\na.add_fact('m.03s9v', 'base.argumentmaps.innovator.original_ideas', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1572",
        "question": "what should i do today in san francisco",
        "answer": [
            "m.0595pv",
            "m.0j2gj8v",
            "m.0f726z",
            "m.0g687",
            "m.04lh5gw",
            "m.0245vl",
            "m.023x4y",
            "m.0h594",
            "m.0hmt3bb",
            "m.025psq",
            "m.09ybm9",
            "m.061tjx",
            "m.057mlm",
            "m.02p_8jw",
            "m.01z4cc",
            "m.029bdk",
            "m.022q0n",
            "m.03p_pq",
            "m.035p3",
            "m.05w70m",
            "m.04vhpfx",
            "m.05vvwl",
            "m.027yy0b",
            "m.058h2l",
            "m.04ptrc",
            "m.02z4m5c",
            "m.0fhvgc",
            "m.012vvtp_",
            "m.05nxnt",
            "m.050wqp",
            "m.02rwwk9",
            "m.02pqty5",
            "m.034gjn",
            "m.012_1t",
            "m.0g2_pk"
        ],
        "different_answer": [
            [
                "m.0595pv",
                "m.0j2gj8v",
                "m.0f726z",
                "m.0g687",
                "m.04lh5gw",
                "m.0245vl",
                "m.023x4y",
                "m.0h594",
                "m.0hmt3bb",
                "m.025psq",
                "m.09ybm9",
                "m.061tjx",
                "m.057mlm",
                "m.02p_8jw",
                "m.01z4cc",
                "m.029bdk",
                "m.022q0n",
                "m.03p_pq",
                "m.035p3",
                "m.05w70m",
                "m.04vhpfx",
                "m.05vvwl",
                "m.027yy0b",
                "m.058h2l",
                "m.04ptrc",
                "m.02z4m5c",
                "m.0fhvgc",
                "m.012vvtp_",
                "m.05nxnt",
                "m.050wqp",
                "m.02rwwk9",
                "m.02pqty5",
                "m.034gjn",
                "m.012_1t",
                "m.0g2_pk"
            ]
        ],
        "entity_linking": {
            "San Francisco": "m.0d6lp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d6lp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d6lp ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d6lp')\na.add_fact('m.0d6lp', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1573",
        "question": "who influenced picasso art",
        "answer": [
            "m.0h82x",
            "m.063mx",
            "m.03p_bz",
            "m.02mbk",
            "m.02y23",
            "m.0cwk2",
            "m.016s03",
            "m.02rdf6",
            "m.0tth",
            "m.07_m2",
            "m.0h7vt",
            "m.0k92y"
        ],
        "different_answer": [
            [
                "m.0h82x",
                "m.063mx",
                "m.03p_bz",
                "m.02mbk",
                "m.02y23",
                "m.0cwk2",
                "m.016s03",
                "m.02rdf6",
                "m.0tth",
                "m.07_m2",
                "m.0h7vt",
                "m.0k92y"
            ]
        ],
        "entity_linking": {
            "Pablo Picasso": "m.060_7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.060_7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.060_7 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060_7')\na.add_fact('m.060_7', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1574",
        "question": "what is my timezone in pennsylvania",
        "answer": [
            "m.02_37z",
            "m.02hcv8"
        ],
        "different_answer": [
            [
                "m.02_37z",
                "m.02hcv8"
            ]
        ],
        "entity_linking": {
            "Pennsylvania": "m.05tbn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05tbn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05tbn ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05tbn')\na.add_fact('m.05tbn', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1575",
        "question": "what products and\\/or services does google offer customers",
        "answer": [
            "m.0wf0rgl",
            "m.0pb8gtr",
            "m.0nb7n8f",
            "m.0dm258",
            "m.010pkp62",
            "m.0j7m2zm",
            "m.03w9g0f",
            "m.064qgt0",
            "m.06ny5h",
            "m.0fpj3tb",
            "m.0b6g2kz",
            "m.0k2998k",
            "m.0k0p036"
        ],
        "different_answer": [
            [
                "m.0wf0rgl",
                "m.0pb8gtr",
                "m.0nb7n8f",
                "m.0dm258",
                "m.010pkp62",
                "m.0j7m2zm",
                "m.03w9g0f",
                "m.064qgt0",
                "m.06ny5h",
                "m.0fpj3tb",
                "m.0b6g2kz",
                "m.0k2998k",
                "m.0k0p036"
            ]
        ],
        "entity_linking": {
            "Google": "m.045c7b",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045c7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045c7b ns:business.consumer_company.products ?y .\n?y ns:business.company_product_relationship.consumer_product ?x .\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.from_date ?sk0} || \nEXISTS {?y ns:business.company_product_relationship.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:business.company_product_relationship.to_date ?sk2} || \nEXISTS {?y ns:business.company_product_relationship.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045c7b')\na.add_fact('m.045c7b', 'business.consumer_company.products', 'x1')\na.add_time_constrain('x1', 'business.company_product_relationship.from_date', 'business.company_product_relationship.to_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'business.company_product_relationship.consumer_product', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1577",
        "question": "who did cliff lee play for last year",
        "answer": [
            "m.05xvj"
        ],
        "different_answer": [
            [
                "m.05xvj"
            ]
        ],
        "entity_linking": {
            "Cliff Lee": "m.05bz_j",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2014-08-10": "\"2014-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05bz_j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05bz_j ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2014-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05bz_j')\na.add_fact('m.05bz_j', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1580",
        "question": "what type of democracy is the united states",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1582",
        "question": "what time in china hong kong",
        "answer": [
            "m.04qqww"
        ],
        "different_answer": [
            [
                "m.04qqww"
            ]
        ],
        "entity_linking": {
            "Hong Kong": "m.03h64"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03h64)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03h64 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03h64')\na.add_fact('m.03h64', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1583",
        "question": "what all movies has taylor lautner been in",
        "answer": [
            "m.06_wqk4",
            "m.075wx89",
            "m.06zs80t",
            "m.0mzt5cs",
            "m.066b_n",
            "m.0cmdl80",
            "m.0gx8qcw",
            "m.06crgb",
            "m.075wx7_",
            "m.03nm_fh",
            "m.02686wj",
            "m.0g_w5hs",
            "m.011q0_7k",
            "m.0ngj__s",
            "m.0djz0rc",
            "m.012z_7zt",
            "m.0bdwfqj",
            "m.07cdy_t",
            "m.05pdh86"
        ],
        "different_answer": [
            [
                "m.06_wqk4",
                "m.075wx89",
                "m.06zs80t",
                "m.0mzt5cs",
                "m.066b_n",
                "m.0cmdl80",
                "m.0gx8qcw",
                "m.06crgb",
                "m.075wx7_",
                "m.03nm_fh",
                "m.02686wj",
                "m.0g_w5hs",
                "m.011q0_7k",
                "m.0ngj__s",
                "m.0djz0rc",
                "m.012z_7zt",
                "m.0bdwfqj",
                "m.07cdy_t",
                "m.05pdh86"
            ]
        ],
        "entity_linking": {
            "Taylor Lautner": "m.07ldhs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ldhs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ldhs ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ldhs')\na.add_fact('m.07ldhs', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1584",
        "question": "what disease did bernie mac die of",
        "answer": [
            "m.0p367zp",
            "m.01q5y6"
        ],
        "different_answer": [
            [
                "m.0p367zp",
                "m.01q5y6"
            ]
        ],
        "entity_linking": {
            "Bernie Mac": "m.02lj6p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lj6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lj6p ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lj6p')\na.add_fact('m.02lj6p', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1585",
        "question": "who plays spike spiegel",
        "answer": [
            "m.039tg4",
            "m.044_7j"
        ],
        "different_answer": [
            [
                "m.039tg4",
                "m.044_7j"
            ]
        ],
        "entity_linking": {
            "Spike Spiegel": "m.025tj1w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025tj1w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025tj1w ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025tj1w')\na.add_fact('m.025tj1w', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1586",
        "question": "who was queen isabella 's mother",
        "answer": [
            "m.0d18m0"
        ],
        "different_answer": [
            [
                "m.0d18m0"
            ]
        ],
        "entity_linking": {
            "Isabella I of Castile": "m.0jd6m",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jd6m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jd6m ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.0jd6m')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.0jd6m', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1587",
        "question": "who does chris hemsworth have a baby with",
        "answer": [
            "m.0fccsp"
        ],
        "different_answer": [
            [
                "m.0fccsp"
            ]
        ],
        "entity_linking": {
            "Chris Hemsworth": "m.04jnqj"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.04jnqj ns:people.person.children ?y .\n\t?y ns:people.person.parents ?x .\n  FILTER (?x != ns:m.04jnqj) .\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1589",
        "question": "where is the mts iceplex in winnipeg",
        "answer": [
            "m.08mhny",
            "m.0pmq2"
        ],
        "different_answer": [
            [
                "m.08mhny",
                "m.0pmq2"
            ]
        ],
        "entity_linking": {
            "MTS Iceplex": "m.0g5r_z_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0g5r_z_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0g5r_z_ ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g5r_z_')\na.add_fact('m.0g5r_z_', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1590",
        "question": "what are the most popular religions in israel",
        "answer": [
            "m.03_gx"
        ],
        "different_answer": [
            [
                "m.03_gx"
            ]
        ],
        "entity_linking": {
            "Israel": "m.03spz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03spz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03spz ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n?y ns:location.religion_percentage.percentage ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03spz')\na.add_fact('m.03spz', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.percentage', 'x2')\na.add_max('x2')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1591",
        "question": "what was obama 's former occupation",
        "answer": [
            "m.0fj9f",
            "m.0fz465",
            "m.04gc2",
            "m.0kyk",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.0fj9f",
                "m.0fz465",
                "m.04gc2",
                "m.0kyk",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1592",
        "question": "what are all the songs justin bieber wrote",
        "answer": [
            "m.0qfpkqq",
            "m.0bmc2ql",
            "m.0fqlv5l",
            "m.0y6b7k5",
            "m.0yt3zg2",
            "m.0g5q9ky",
            "m.0bbz4p9",
            "m.0k0l2vf",
            "m.0zbv_v0",
            "m.0zmzvrc",
            "m.0j4453t",
            "m.0c3vvnk",
            "m.0z6sgcx",
            "m.0zgb5ny",
            "m.0yt1lb9",
            "m.0ynrkyl",
            "m.0g5b0p2",
            "m.012k_48s",
            "m.0rytzvz",
            "m.0jxk_hq",
            "m.0zg6nnd",
            "m.0bbvzq2",
            "m.0jwqwyx",
            "m.09v3gb4",
            "m.0jxk_kq",
            "m.0j64n8c",
            "m.0jwx2_w",
            "m.0ljtwfj",
            "m.0zdkrym",
            "m.0116pj4q",
            "m.0jxkzb9",
            "m.0yt3yyw"
        ],
        "different_answer": [
            [
                "m.0qfpkqq",
                "m.0bmc2ql",
                "m.0fqlv5l",
                "m.0y6b7k5",
                "m.0yt3zg2",
                "m.0g5q9ky",
                "m.0bbz4p9",
                "m.0k0l2vf",
                "m.0zbv_v0",
                "m.0zmzvrc",
                "m.0j4453t",
                "m.0c3vvnk",
                "m.0z6sgcx",
                "m.0zgb5ny",
                "m.0yt1lb9",
                "m.0ynrkyl",
                "m.0g5b0p2",
                "m.012k_48s",
                "m.0rytzvz",
                "m.0jxk_hq",
                "m.0zg6nnd",
                "m.0bbvzq2",
                "m.0jwqwyx",
                "m.09v3gb4",
                "m.0jxk_kq",
                "m.0j64n8c",
                "m.0jwx2_w",
                "m.0ljtwfj",
                "m.0zdkrym",
                "m.0116pj4q",
                "m.0jxkzb9",
                "m.0yt3yyw"
            ]
        ],
        "entity_linking": {
            "Justin Bieber": "m.06w2sn5"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\t{ \n\t  # Lyrics\n\t  ns:m.06w2sn5 ns:music.lyricist.lyrics_written ?x .\n\t}\n\tUNION\n\t{\n\t  # Compositions\n\t  ns:m.06w2sn5 ns:music.composer.compositions ?x .\n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1593",
        "question": "where is the thames river source",
        "answer": [
            "m.02pj_tp"
        ],
        "different_answer": [
            [
                "m.02pj_tp"
            ]
        ],
        "entity_linking": {
            "River Thames": "m.0d2kt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d2kt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d2kt ns:geography.river.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d2kt')\na.add_fact('m.0d2kt', 'geography.river.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1595",
        "question": "what new movies is robert pattinson in",
        "answer": [
            "m.0crwqwj",
            "m.0ngxkxx",
            "m.075wx89",
            "m.0k24hpb",
            "m.04qk12",
            "m.012sdm5f",
            "m.06w67tn",
            "m.031hcx",
            "m.065_t2_",
            "m.04m_qkz",
            "m.075wx7_",
            "m.0ngns90",
            "m.0fsmw2",
            "m.0c1sgd3",
            "m.03nm_fh",
            "m.0gx3vhy",
            "m.031786",
            "m.047fhg8",
            "m.0gtvrv3",
            "m.0g57n3s",
            "m.09v9mks",
            "m.0djz0rc",
            "m.0w1yhhx",
            "m.0_s30t6",
            "m.05pdh86",
            "m.0bpkq4",
            "m.0j310_v"
        ],
        "different_answer": [
            [
                "m.0crwqwj",
                "m.0ngxkxx",
                "m.075wx89",
                "m.0k24hpb",
                "m.04qk12",
                "m.012sdm5f",
                "m.06w67tn",
                "m.031hcx",
                "m.065_t2_",
                "m.04m_qkz",
                "m.075wx7_",
                "m.0ngns90",
                "m.0fsmw2",
                "m.0c1sgd3",
                "m.03nm_fh",
                "m.0gx3vhy",
                "m.031786",
                "m.047fhg8",
                "m.0gtvrv3",
                "m.0g57n3s",
                "m.09v9mks",
                "m.0djz0rc",
                "m.0w1yhhx",
                "m.0_s30t6",
                "m.05pdh86",
                "m.0bpkq4",
                "m.0j310_v"
            ]
        ],
        "entity_linking": {
            "Robert Pattinson": "m.062dn7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.062dn7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.062dn7 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.062dn7')\na.add_fact('m.062dn7', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1596",
        "question": "what language do they use in pakistan",
        "answer": [
            "m.02hxcvy",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02hxcvy",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Pakistan": "m.05sb1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05sb1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05sb1 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05sb1')\na.add_fact('m.05sb1', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1597",
        "question": "what kind of products does nike sell",
        "answer": [
            "m.0463sg",
            "m.09j5n",
            "m.05y5lj",
            "m.03q9xp9",
            "m.02kztmt",
            "m.09j2d"
        ],
        "different_answer": [
            [
                "m.0463sg",
                "m.09j5n",
                "m.05y5lj",
                "m.03q9xp9",
                "m.02kztmt",
                "m.09j2d"
            ]
        ],
        "entity_linking": {
            "Nike, Inc.": "m.0lwkh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lwkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lwkh ns:business.business_operation.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lwkh')\na.add_fact('m.0lwkh', 'business.business_operation.industry', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1598",
        "question": "who did lbj marry",
        "answer": [
            "m.01fpkg"
        ],
        "different_answer": [
            [
                "m.01fpkg"
            ]
        ],
        "entity_linking": {
            "Lyndon B. Johnson": "m.0f7fy",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f7fy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f7fy ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0f7fy')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0f7fy', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1599",
        "question": "where did kim jong il die",
        "answer": [
            "m.0cw5k"
        ],
        "different_answer": [
            [
                "m.0cw5k"
            ]
        ],
        "entity_linking": {
            "Kim Jong-il": "m.0143y5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0143y5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0143y5 ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0143y5')\na.add_fact('m.0143y5', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1600",
        "question": "what honor did agatha christie receive in 1971",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "Agatha Christie": "m.0ldd",
            "1971-01-01": "\"1971-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1971-12-31": "\"1971-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ldd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ldd ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk0} || \nEXISTS {?y ns:award.award_honor.year ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"1971-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:award.award_honor.year ?sk2} || \nEXISTS {?y ns:award.award_honor.year ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"1971-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ldd')\na.add_fact('m.0ldd', 'award.award_winner.awards_won', 'x1')\na.add_time_constrain('x1', 'award.award_honor.year', 'award.award_honor.year', '\"1971-12-31\"^^xsd:dateTime', '\"1971-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'award.award_honor.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1603",
        "question": "what is the sacred text of daoism",
        "answer": [
            "m.02czn",
            "m.0164zy",
            "m.03ydb",
            "m.05blr4"
        ],
        "different_answer": [
            [
                "m.02czn",
                "m.0164zy",
                "m.03ydb",
                "m.05blr4"
            ]
        ],
        "entity_linking": {
            "Taoism": "m.07gvx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07gvx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07gvx ns:religion.religion.texts ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07gvx')\na.add_fact('m.07gvx', 'religion.religion.texts', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1604",
        "question": "what countries speak english natively",
        "answer": [
            "m.0d060g",
            "m.03rt9",
            "m.09c7w0",
            "m.014tss",
            "m.07ssc",
            "m.0chghy",
            "m.0ctw_b"
        ],
        "different_answer": [
            [
                "m.0d060g",
                "m.03rt9",
                "m.09c7w0",
                "m.014tss",
                "m.07ssc",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.main_country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1607",
        "question": "who won fedex cup 2012",
        "answer": [
            "m.02vnxb_"
        ],
        "different_answer": [
            [
                "m.02vnxb_"
            ]
        ],
        "entity_linking": {
            "FedEx Cup": "m.08q5ws",
            "2012 PGA Tour": "m.0hrfg40"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08q5ws)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08q5ws ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:m.0hrfg40 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hrfg40')\na.add_filter('x0', '!=', 'm.08q5ws')\na.add_fact('x1', 'sports.sports_award.season', 'm.0hrfg40')\na.add_fact('m.08q5ws', 'sports.sports_award_type.winners', 'x1')\na.add_fact('x1', 'sports.sports_award.award_winner', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1608",
        "question": "what language is mainly spoken in egypt",
        "answer": [
            "m.02hxbhg",
            "m.02hx2cr",
            "m.012zfy",
            "m.03wc2kf"
        ],
        "different_answer": [
            [
                "m.02hxbhg",
                "m.02hx2cr",
                "m.012zfy",
                "m.03wc2kf"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.languages_spoken ?x .\n?x ns:language.human_language.main_country ns:m.02k54 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('x0', 'language.human_language.main_country', 'm.02k54')\na.add_fact('m.02k54', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1609",
        "question": "who played alf on tv show",
        "answer": [
            "m.082765"
        ],
        "different_answer": [
            [
                "m.082765"
            ]
        ],
        "entity_linking": {
            "ALF": "m.0sgqfm0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01klc1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01klc1 ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0sgqfm0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0sgqfm0')\na.add_filter('x0', '!=', 'm.01klc1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.0sgqfm0')\na.add_fact('m.01klc1', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1610",
        "question": "who was gerald ford vp",
        "answer": [
            "m.05jd_"
        ],
        "different_answer": [
            [
                "m.05jd_"
            ]
        ],
        "entity_linking": {
            "Gerald Ford": "m.0c_md_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c_md_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c_md_ ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c_md_')\na.add_fact('m.0c_md_', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1611",
        "question": "what is armenian currency",
        "answer": [
            "m.033xr3"
        ],
        "different_answer": [
            [
                "m.033xr3"
            ]
        ],
        "entity_linking": {
            "Armenia": "m.0jgx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgx ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgx')\na.add_fact('m.0jgx', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1612",
        "question": "what type of art did raphael sanzio create",
        "answer": [
            "m.05qdh",
            "m.02csf"
        ],
        "different_answer": [
            [
                "m.05qdh",
                "m.02csf"
            ]
        ],
        "entity_linking": {
            "Raphael": "m.0c43g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c43g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c43g ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c43g')\na.add_fact('m.0c43g', 'visual_art.visual_artist.art_forms', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1613",
        "question": "what language do they speak in malta",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ],
            [
                "m.04t3_",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Malta": "m.04v3q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04v3q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04v3q ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04v3q')\na.add_fact('m.04v3q', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1614",
        "question": "what religion was king louis xiv",
        "answer": [
            "m.0c8wxp"
        ],
        "different_answer": [
            [
                "m.0c8wxp"
            ]
        ],
        "entity_linking": {
            "Louis XIV of France": "m.04pwg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04pwg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04pwg ns:people.person.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04pwg')\na.add_fact('m.04pwg', 'people.person.religion', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1615",
        "question": "what football team does mike wright play for",
        "answer": [
            "m.05g3b"
        ],
        "different_answer": [
            [
                "m.05g3b"
            ]
        ],
        "entity_linking": {
            "Mike Wright": "m.07twz9",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07twz9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07twz9 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07twz9')\na.add_fact('m.07twz9', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1616",
        "question": "what did shannon hoon die from",
        "answer": [
            "m.01tf_6"
        ],
        "different_answer": [
            [
                "m.01tf_6"
            ]
        ],
        "entity_linking": {
            "Shannon Hoon": "m.01w2x6z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01w2x6z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01w2x6z ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01w2x6z')\na.add_fact('m.01w2x6z', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1617",
        "question": "what did nicholas copernicus discover",
        "answer": [
            "m.01kf8z",
            "m.02p6y2z",
            "m.027lfyz"
        ],
        "different_answer": [
            [
                "m.01kf8z",
                "m.02p6y2z",
                "m.027lfyz"
            ]
        ],
        "entity_linking": {
            "Nicolaus Copernicus": "m.01vvm4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvm4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvm4 ns:base.argumentmaps.innovator.original_ideas ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vvm4')\na.add_fact('m.01vvm4', 'base.argumentmaps.innovator.original_ideas', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1618",
        "question": "what teams has manny ramirez played for",
        "answer": [
            "m.08tdk2",
            "m.07l8f",
            "m.01yjl",
            "m.04mjl",
            "m.07l8x",
            "m.01yhm",
            "m.05m_8",
            "m.01slc",
            "m.01d5z"
        ],
        "different_answer": [
            [
                "m.08tdk2",
                "m.07l8f",
                "m.01yjl",
                "m.04mjl",
                "m.07l8x",
                "m.01yhm",
                "m.05m_8",
                "m.01slc",
                "m.01d5z"
            ]
        ],
        "entity_linking": {
            "Manny Ramirez": "m.06tjlc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06tjlc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06tjlc ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06tjlc')\na.add_fact('m.06tjlc', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1619",
        "question": "where do the appalachian mountains run",
        "answer": [
            "m.059g4"
        ],
        "different_answer": [
            [
                "m.059g4"
            ]
        ],
        "entity_linking": {
            "Appalachian Mountains": "m.0lm0n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lm0n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lm0n ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lm0n')\na.add_fact('m.0lm0n', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1620",
        "question": "when was president wilson in office",
        "answer": [
            "1913-03-04-08:00"
        ],
        "different_answer": [
            [
                "1913-03-04-08:00"
            ]
        ],
        "entity_linking": {
            "Woodrow Wilson": "m.083q7",
            "President of the United States": "m.060d2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083q7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083q7 ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.060d2 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060d2')\na.add_filter('x0', '!=', 'm.083q7')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.060d2')\na.add_fact('m.083q7', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1621",
        "question": "what political party is jerry brown",
        "answer": [
            "m.0d075m",
            "m.0b8h9s"
        ],
        "different_answer": [
            [
                "m.0d075m",
                "m.0b8h9s"
            ]
        ],
        "entity_linking": {
            "Jerry Brown": "m.017pf5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.017pf5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.017pf5 ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.017pf5')\na.add_fact('m.017pf5', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1622",
        "question": "what ocean is around hawaii",
        "answer": [
            "m.05rgl"
        ],
        "different_answer": [
            [
                "m.05rgl"
            ],
            [
                "m.05rgl"
            ]
        ],
        "entity_linking": {
            "Hawaii": "m.0jbt3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jbt3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jbt3 ns:geography.island.body_of_water ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jbt3')\na.add_fact('m.0jbt3', 'geography.island.body_of_water', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1623",
        "question": "what is the most common language spoken in argentina",
        "answer": [
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1624",
        "question": "what language tunisia",
        "answer": [
            "m.064_8sq",
            "m.0jzc"
        ],
        "different_answer": [
            [
                "m.064_8sq",
                "m.0jzc"
            ],
            [
                "m.0jzc"
            ]
        ],
        "entity_linking": {
            "Tunisia": "m.07fj_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07fj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07fj_ ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07fj_')\na.add_fact('m.07fj_', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1625",
        "question": "what are some inventions that leonardo da vinci invented",
        "answer": [
            "m.01w6mc",
            "m.05my_3",
            "m.0y8r",
            "m.0cyfs",
            "m.012rm",
            "m.0w11h15",
            "m.0796wt",
            "m.0w11gwh",
            "m.0w11hbh",
            "m.01x3y7"
        ],
        "different_answer": [
            [
                "m.01w6mc",
                "m.05my_3",
                "m.0y8r",
                "m.0cyfs",
                "m.012rm",
                "m.0w11h15",
                "m.0796wt",
                "m.0w11gwh",
                "m.0w11hbh",
                "m.01x3y7"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1626",
        "question": "who wrote st trinians",
        "answer": [
            "m.01v2jh"
        ],
        "different_answer": [
            [
                "m.01v2jh"
            ]
        ],
        "entity_linking": {
            "St Trinian's School": "m.01nxmb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01nxmb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01nxmb ns:fictional_universe.fictional_universe.created_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nxmb')\na.add_fact('m.01nxmb', 'fictional_universe.fictional_universe.created_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1627",
        "question": "what are malaysian coins called",
        "answer": [
            "m.01_c9q"
        ],
        "different_answer": [
            [
                "m.01_c9q"
            ]
        ],
        "entity_linking": {
            "Malaysia": "m.09pmkv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09pmkv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09pmkv ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09pmkv')\na.add_fact('m.09pmkv', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1628",
        "question": "what type government does mexico have",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1629",
        "question": "what currency does dominican republic take",
        "answer": [
            "m.04lt7_"
        ],
        "different_answer": [
            [
                "m.04lt7_"
            ]
        ],
        "entity_linking": {
            "Dominican Republic": "m.027rn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rn ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027rn')\na.add_fact('m.027rn', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1630",
        "question": "what inspired michael jackson to become a singer",
        "answer": [
            "m.0407f",
            "m.01b9db",
            "m.01lc5",
            "m.04ct6p",
            "m.081nh"
        ],
        "different_answer": [
            [
                "m.0407f",
                "m.01b9db",
                "m.01lc5",
                "m.04ct6p",
                "m.081nh"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1631",
        "question": "who is the texas state senator",
        "answer": [
            "m.03x_db",
            "m.06ym7b",
            "m.037f5r",
            "m.04l_mk",
            "m.089hd7",
            "m.053fln",
            "m.06j9dp",
            "m.01rpmr",
            "m.03w4ln",
            "m.0452c9",
            "m.02pv3w",
            "m.028356y",
            "m.02wv_6",
            "m.084vl0",
            "m.021nlp",
            "m.0gbjz",
            "m.053zcg",
            "m.016l53",
            "m.07k6x2",
            "m.02dcc4",
            "m.03yvp9",
            "m.07p913",
            "m.07j6ty",
            "m.06yjdd",
            "m.03r6tl",
            "m.01xcqs",
            "m.06yjq_",
            "m.02050j",
            "m.037_c0",
            "m.07jjx6",
            "m.0f7fy",
            "m.08fbq9"
        ],
        "different_answer": [
            [
                "m.03x_db",
                "m.06ym7b",
                "m.037f5r",
                "m.04l_mk",
                "m.089hd7",
                "m.053fln",
                "m.06j9dp",
                "m.01rpmr",
                "m.03w4ln",
                "m.0452c9",
                "m.02pv3w",
                "m.028356y",
                "m.02wv_6",
                "m.084vl0",
                "m.021nlp",
                "m.0gbjz",
                "m.053zcg",
                "m.016l53",
                "m.07k6x2",
                "m.02dcc4",
                "m.03yvp9",
                "m.07p913",
                "m.07j6ty",
                "m.06yjdd",
                "m.03r6tl",
                "m.01xcqs",
                "m.06yjq_",
                "m.02050j",
                "m.037_c0",
                "m.07jjx6",
                "m.0f7fy",
                "m.08fbq9"
            ]
        ],
        "entity_linking": {
            "Texas": "m.07b_l",
            "United States Senator": "m.02_7l8y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07b_l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07b_l ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.02_7l8y .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_7l8y')\na.add_filter('x0', '!=', 'm.07b_l')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.02_7l8y')\na.add_fact('m.07b_l', 'government.political_district.representatives', 'x1')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1632",
        "question": "what to visit in london city",
        "answer": [
            "m.0d0rj",
            "m.0hsb3",
            "m.0j32kvf",
            "m.0pwzt",
            "m.01hc38",
            "m.0w1d3n8",
            "m.01xrzb",
            "m.02mg5r",
            "m.03m401",
            "m.026ydc",
            "m.0ggp4",
            "m.04dn_hk",
            "m.0p0jt",
            "m.03825f",
            "m.07gyc",
            "m.04ttyf",
            "m.0gjv_",
            "m.0ncy4",
            "m.055whd",
            "m.02sfxg",
            "m.01t372",
            "m.03l0pt",
            "m.0p1tx",
            "m.01w0yg",
            "m.01hb3",
            "m.0272nt3",
            "m.04mmgh",
            "m.0nb1f",
            "m.0j32g13",
            "m.0bll4mn",
            "m.019k9x",
            "m.0bnlz5j",
            "m.0414y7c",
            "m.022pjp",
            "m.0270g5",
            "m.045ffb",
            "m.05q3_3",
            "m.01lpg6",
            "m.0pdb059",
            "m.0ncv_",
            "m.07n8hk",
            "m.01k804",
            "m.060yf",
            "m.0j2g8sh",
            "m.0m6q6",
            "m.04vflw",
            "m.0bvqq",
            "m.017_lw",
            "m.0z8h65p",
            "m.013yrz",
            "m.0k2c9hx",
            "m.02q6xg0",
            "m.026v7z",
            "m.01x6xn",
            "m.07nqn",
            "m.0ncpy",
            "m.05r48r",
            "m.01xzg6",
            "m.0j53x",
            "m.05t7yp",
            "m.05pq2k",
            "m.018g60",
            "m.05fl7q",
            "m.0198g",
            "m.0bnlz9r",
            "m.07nb5",
            "m.018yyl",
            "m.02mv8x",
            "m.05xz1j",
            "m.0gl6x",
            "m.0p77g",
            "m.04jgv",
            "m.0gsxw",
            "m.02yfnd",
            "m.043mxr",
            "m.05s6ns",
            "m.021mgt",
            "m.0nc61",
            "m.01tp60",
            "m.01d_0p",
            "m.013y0_",
            "m.01x3nm",
            "m.0dplh",
            "m.04d1hw7",
            "m.0jx0nq8",
            "m.0fg05k",
            "m.03gm6z",
            "m.05f3pf0",
            "m.06w3j7k",
            "m.012vvtp_",
            "m.0136mc",
            "m.0nblr"
        ],
        "different_answer": [
            [
                "m.0d0rj",
                "m.0hsb3",
                "m.0j32kvf",
                "m.0pwzt",
                "m.01hc38",
                "m.0w1d3n8",
                "m.01xrzb",
                "m.02mg5r",
                "m.03m401",
                "m.026ydc",
                "m.0ggp4",
                "m.04dn_hk",
                "m.0p0jt",
                "m.03825f",
                "m.07gyc",
                "m.04ttyf",
                "m.0gjv_",
                "m.0ncy4",
                "m.055whd",
                "m.02sfxg",
                "m.01t372",
                "m.03l0pt",
                "m.0p1tx",
                "m.01w0yg",
                "m.01hb3",
                "m.0272nt3",
                "m.04mmgh",
                "m.0nb1f",
                "m.0j32g13",
                "m.0bll4mn",
                "m.019k9x",
                "m.0bnlz5j",
                "m.0414y7c",
                "m.022pjp",
                "m.0270g5",
                "m.045ffb",
                "m.05q3_3",
                "m.01lpg6",
                "m.0pdb059",
                "m.0ncv_",
                "m.07n8hk",
                "m.01k804",
                "m.060yf",
                "m.0j2g8sh",
                "m.0m6q6",
                "m.04vflw",
                "m.0bvqq",
                "m.017_lw",
                "m.0z8h65p",
                "m.013yrz",
                "m.0k2c9hx",
                "m.02q6xg0",
                "m.026v7z",
                "m.01x6xn",
                "m.07nqn",
                "m.0ncpy",
                "m.05r48r",
                "m.01xzg6",
                "m.0j53x",
                "m.05t7yp",
                "m.05pq2k",
                "m.018g60",
                "m.05fl7q",
                "m.0198g",
                "m.0bnlz9r",
                "m.07nb5",
                "m.018yyl",
                "m.02mv8x",
                "m.05xz1j",
                "m.0gl6x",
                "m.0p77g",
                "m.04jgv",
                "m.0gsxw",
                "m.02yfnd",
                "m.043mxr",
                "m.05s6ns",
                "m.021mgt",
                "m.0nc61",
                "m.01tp60",
                "m.01d_0p",
                "m.013y0_",
                "m.01x3nm",
                "m.0dplh",
                "m.04d1hw7",
                "m.0jx0nq8",
                "m.0fg05k",
                "m.03gm6z",
                "m.05f3pf0",
                "m.06w3j7k",
                "m.012vvtp_",
                "m.0136mc",
                "m.0nblr"
            ]
        ],
        "entity_linking": {
            "London": "m.04jpl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jpl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jpl ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04jpl')\na.add_fact('m.04jpl', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1633",
        "question": "what genre of art is the mona lisa",
        "answer": [
            "m.01dv4h"
        ],
        "different_answer": [
            [
                "m.01dv4h"
            ]
        ],
        "entity_linking": {
            "Mona Lisa": "m.0jbg2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jbg2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jbg2 ns:visual_art.artwork.art_genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jbg2')\na.add_fact('m.0jbg2', 'visual_art.artwork.art_genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1634",
        "question": "who does peter griffin voice",
        "answer": [
            "m.021yw7"
        ],
        "different_answer": [
            [
                "m.021yw7"
            ]
        ],
        "entity_linking": {
            "Peter Griffin": "m.03n6jv",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03n6jv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03n6jv ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.03n6jv')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.03n6jv', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1635",
        "question": "when did tony romo got drafted",
        "answer": [
            "2002-08:00"
        ],
        "different_answer": [
            [
                "2002-08:00"
            ]
        ],
        "entity_linking": {
            "Tony Romo": "m.097yk7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.097yk7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.097yk7 ns:sports.pro_athlete.career_start ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.097yk7')\na.add_fact('m.097yk7', 'sports.pro_athlete.career_start', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1637",
        "question": "what are the catholic holy days",
        "answer": [
            "m.0604_c",
            "m.04sy0c",
            "m.0_l_d7h",
            "m.0dsq86",
            "m.0_m1438",
            "m.0_kv0v5",
            "m.0_lpd56",
            "m.011nk6vg",
            "m.011nkz4p",
            "m.01cqmf",
            "m.0581_5",
            "m.04qnzg",
            "m.011ncb1h",
            "m.0k5y347",
            "m.016v69",
            "m.04mrs1",
            "m.0n_fbc8",
            "m.0_kvbh6",
            "m.0f6l2j",
            "m.0_mrbts",
            "m.0cpnkn",
            "m.060_r",
            "m.011ncyv_",
            "m.0148r6",
            "m.01v147",
            "m.058_lf",
            "m.016s_l",
            "m.03nlrrk",
            "m.0_m14vv",
            "m.0_lsyyw",
            "m.0fdm1h",
            "m.0497bm",
            "m.0k0c",
            "m.05b22_z",
            "m.0_kvb49"
        ],
        "different_answer": [
            [
                "m.0604_c",
                "m.04sy0c",
                "m.0_l_d7h",
                "m.0dsq86",
                "m.0_m1438",
                "m.0_kv0v5",
                "m.0_lpd56",
                "m.011nk6vg",
                "m.011nkz4p",
                "m.01cqmf",
                "m.0581_5",
                "m.04qnzg",
                "m.011ncb1h",
                "m.0k5y347",
                "m.016v69",
                "m.04mrs1",
                "m.0n_fbc8",
                "m.0_kvbh6",
                "m.0f6l2j",
                "m.0_mrbts",
                "m.0cpnkn",
                "m.060_r",
                "m.011ncyv_",
                "m.0148r6",
                "m.01v147",
                "m.058_lf",
                "m.016s_l",
                "m.03nlrrk",
                "m.0_m14vv",
                "m.0_lsyyw",
                "m.0fdm1h",
                "m.0497bm",
                "m.0k0c",
                "m.05b22_z",
                "m.0_kvb49"
            ]
        ],
        "entity_linking": {
            "Catholicism": "m.0c8wxp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c8wxp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c8wxp ns:religion.religion.holidays ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c8wxp')\na.add_fact('m.0c8wxp', 'religion.religion.holidays', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1638",
        "question": "what language is most commonly spoken in belgium",
        "answer": [
            "m.02bv9",
            "m.064_8sq",
            "m.04306rv"
        ],
        "different_answer": [
            [
                "m.02bv9",
                "m.064_8sq",
                "m.04306rv"
            ]
        ],
        "entity_linking": {
            "Belgium": "m.0154j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0154j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0154j ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0154j')\na.add_fact('m.0154j', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1639",
        "question": "where did frank baum die",
        "answer": [
            "m.0f2wj"
        ],
        "different_answer": [
            [
                "m.0f2wj"
            ]
        ],
        "entity_linking": {
            "L. Frank Baum": "m.04mby"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04mby)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04mby ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04mby')\na.add_fact('m.04mby', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1640",
        "question": "where is tunis on a map",
        "answer": [
            "m.0dg3n1"
        ],
        "different_answer": [
            [
                "m.0dg3n1"
            ],
            [
                "m.07fj_"
            ],
            [
                "m.0cyb_z",
                "m.07fj_",
                "m.0dg3n1"
            ]
        ],
        "entity_linking": {
            "Tunisia": "m.07fj_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07fj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07fj_ ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ftn8')\na.add_fact('m.0ftn8', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1641",
        "question": "who is nicolas cage married too",
        "answer": [
            "m.025dscf"
        ],
        "different_answer": [
            [
                "m.025dscf"
            ]
        ],
        "entity_linking": {
            "Nicolas Cage": "m.01vvb4m",
            "Marriage": "m.04ztj",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vvb4m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vvb4m ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\nFILTER(NOT EXISTS {?y ns:people.marriage.from ?sk0} || \nEXISTS {?y ns:people.marriage.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.marriage.to ?sk2} || \nEXISTS {?y ns:people.marriage.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01vvb4m')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01vvb4m', 'people.person.spouse_s', 'x1')\na.add_time_constrain('x1', 'people.marriage.from', 'people.marriage.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1643",
        "question": "who does the voice for chucky in child 's play",
        "answer": [
            "m.03czqtb",
            "m.02bfmn",
            "m.06hw0m"
        ],
        "different_answer": [
            [
                "m.03czqtb",
                "m.02bfmn",
                "m.06hw0m"
            ]
        ],
        "entity_linking": {
            "Child's Play": "m.02mkzj",
            "Chucky": "m.06jpdm",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mkzj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mkzj ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.06jpdm .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n?y ns:film.performance.film ns:m.02mkzj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mkzj')\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.06jpdm')\na.add_filter('x0', '!=', 'm.02mkzj')\na.add_fact('x1', 'film.performance.film', 'm.02mkzj')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('x1', 'film.performance.character', 'm.06jpdm')\na.add_fact('m.02mkzj', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1644",
        "question": "what did mary wollstonecraft fight for",
        "answer": [
            "m.012h0y"
        ],
        "different_answer": [
            [
                "m.012h0y"
            ]
        ],
        "entity_linking": {
            "Mary Wollstonecraft": "m.04_cw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04_cw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04_cw ns:base.activism.activist.area_of_activism ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04_cw')\na.add_fact('m.04_cw', 'base.activism.activist.area_of_activism', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1646",
        "question": "what year did the phillies begin",
        "answer": [
            "1883-08:00"
        ],
        "different_answer": [
            [
                "1883-08:00"
            ]
        ],
        "entity_linking": {
            "Philadelphia Phillies": "m.05xvj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05xvj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05xvj ns:sports.sports_team.founded ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05xvj')\na.add_fact('m.05xvj', 'sports.sports_team.founded', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1648",
        "question": "what language does iceland speak",
        "answer": [
            "m.01gmkg"
        ],
        "different_answer": [
            [
                "m.01gmkg"
            ],
            [
                "m.01gmkg"
            ]
        ],
        "entity_linking": {
            "Iceland": "m.03rj0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03rj0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03rj0 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03rj0')\na.add_fact('m.03rj0', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1649",
        "question": "what was dr seuss real name",
        "answer": [
            "Theodor Seuss Geisel"
        ],
        "different_answer": [
            [
                "Theodor Seuss Geisel"
            ]
        ],
        "entity_linking": {
            "Theodore Lesieg": "m.02g3w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g3w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g3w ns:base.schemastaging.context_name.official_name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02g3w')\na.add_fact('m.02g3w', 'base.schemastaging.context_name.official_name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1650",
        "question": "what did gloria steinem founded",
        "answer": [
            "m.06d6x5",
            "m.03cytx2",
            "m.02vvc3x",
            "m.0640068",
            "m.04wwjx",
            "m.027hxmd",
            "m.05st95c"
        ],
        "different_answer": [
            [
                "m.06d6x5",
                "m.03cytx2",
                "m.02vvc3x",
                "m.0640068",
                "m.04wwjx",
                "m.027hxmd",
                "m.05st95c"
            ]
        ],
        "entity_linking": {
            "Gloria Steinem": "m.01rnwj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01rnwj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01rnwj ns:organization.organization_founder.organizations_founded ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01rnwj')\na.add_fact('m.01rnwj', 'organization.organization_founder.organizations_founded', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1652",
        "question": "what language they speak in scotland",
        "answer": [
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Scotland": "m.06q1r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06q1r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06q1r ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06q1r')\na.add_fact('m.06q1r', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1653",
        "question": "what boarding school did mark zuckerberg go to",
        "answer": [
            "m.01cyd5"
        ],
        "different_answer": [
            [
                "m.01cyd5"
            ]
        ],
        "entity_linking": {
            "Mark Zuckerberg": "m.086dny",
            "Boarding school": "m.0m4mb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.086dny)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.086dny ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:education.educational_institution.school_type ns:m.0m4mb .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0m4mb')\na.add_filter('x0', '!=', 'm.086dny')\na.add_fact('x0', 'education.educational_institution.school_type', 'm.0m4mb')\na.add_fact('m.086dny', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1654",
        "question": "what are bigos",
        "answer": [
            "m.0jnxw"
        ],
        "different_answer": [
            [
                "m.0jnxw"
            ]
        ],
        "entity_linking": {
            "Bigos": "m.06815z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06815z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06815z ns:food.dish.type_of_dish1 ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06815z')\na.add_fact('m.06815z', 'food.dish.type_of_dish1', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1655",
        "question": "where are ike and tina turner 's children",
        "answer": [
            "m.0ggl36p",
            "m.0j5dh53"
        ],
        "different_answer": [
            [
                "m.0ggl36p",
                "m.0j5dh53"
            ]
        ],
        "entity_linking": {
            "Tina Turner": "m.01vwyqp",
            "Ike Turner": "m.0dbzg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vwyqp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vwyqp ns:people.person.children ?x .\n?x ns:people.person.parents ns:m.0dbzg .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dbzg')\na.add_filter('x0', '!=', 'm.01vwyqp')\na.add_fact('x0', 'people.person.parents', 'm.0dbzg')\na.add_fact('m.01vwyqp', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1656",
        "question": "what are some of leonardo da vinci most famous inventions",
        "answer": [
            "m.01w6mc",
            "m.05my_3",
            "m.0y8r",
            "m.0cyfs",
            "m.012rm",
            "m.0w11h15",
            "m.0796wt",
            "m.0w11gwh",
            "m.0w11hbh",
            "m.01x3y7"
        ],
        "different_answer": [
            [
                "m.01w6mc",
                "m.05my_3",
                "m.0y8r",
                "m.0cyfs",
                "m.012rm",
                "m.0w11h15",
                "m.0796wt",
                "m.0w11gwh",
                "m.0w11hbh",
                "m.01x3y7"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1657",
        "question": "when did shaq come into the nba",
        "answer": [
            "m.06jnjz"
        ],
        "different_answer": [
            [
                "m.06jnjz"
            ]
        ],
        "entity_linking": {
            "Shaquille O'Neal": "m.012xdf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012xdf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012xdf ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012xdf')\na.add_fact('m.012xdf', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.draft', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1658",
        "question": "where do they speak turkish",
        "answer": [
            "m.01znc_",
            "m.0bjv6",
            "m.01ppq",
            "m.0h7x",
            "m.04fh3"
        ],
        "different_answer": [
            [
                "m.01znc_",
                "m.0bjv6",
                "m.01ppq",
                "m.0h7x",
                "m.04fh3"
            ]
        ],
        "entity_linking": {
            "Turkish Language": "m.02hwyss"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02hwyss)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02hwyss ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02hwyss')\na.add_fact('m.02hwyss', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1659",
        "question": "what is the zip code for walnut creek",
        "answer": [
            "m.01zs6ht",
            "m.01zs75v",
            "m.01zs6f0",
            "m.01zs6ms"
        ],
        "different_answer": [
            [
                "m.01zs6ht",
                "m.01zs75v",
                "m.01zs6f0",
                "m.01zs6ms"
            ]
        ],
        "entity_linking": {
            "Walnut Creek": "m.0qyzb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0qyzb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0qyzb ns:location.citytown.postal_codes ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qyzb')\na.add_fact('m.0qyzb', 'location.citytown.postal_codes', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1661",
        "question": "who was the voice of darth vader in the original star wars movie",
        "answer": [
            "m.0f6_x"
        ],
        "different_answer": [
            [
                "m.0f6_x"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0",
            "Star Wars": "m.0dtfn",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f2y0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.film ns:m.0dtfn .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0dtfn')\na.add_filter('x0', '!=', 'm.0f2y0')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('x1', 'film.performance.film', 'm.0dtfn')\na.add_fact('m.0f2y0', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1662",
        "question": "where is english spoken around the world",
        "answer": [
            "m.01nln",
            "m.06ryl",
            "m.06t2t",
            "m.065skb",
            "m.07fsv",
            "m.019rg5",
            "m.06m_5",
            "m.0l3h",
            "m.04hhv",
            "m.027nb",
            "m.06dfg",
            "m.035dk",
            "m.0164b",
            "m.04hvw",
            "m.09wfqp",
            "m.04v6v",
            "m.0d05w3",
            "m.03h2c",
            "m.0165b",
            "m.05qkp",
            "m.02lx0",
            "m.03rt9",
            "m.03rk0",
            "m.07dzf",
            "m.034tl",
            "m.05v8c",
            "m.088q4",
            "m.0hdx8",
            "m.07tp2",
            "m.07ytt",
            "m.0rdr4",
            "m.04v3q",
            "m.0160w",
            "m.047t_",
            "m.03__y",
            "m.05sb1",
            "m.035yg",
            "m.020p1",
            "m.01k0p4",
            "m.05bmq",
            "m.06s0l",
            "m.035hm",
            "m.06s9y",
            "m.026wtlf",
            "m.0j5g9",
            "m.04wcf",
            "m.02wt0",
            "m.0ctw_b",
            "m.0167v",
            "m.03t1s",
            "m.0162b",
            "m.07ssc",
            "m.05r7t",
            "m.06v36",
            "m.03_3d",
            "m.02jx1",
            "m.03ryn",
            "m.04hzj",
            "m.06s6l",
            "m.06tw8",
            "m.09pmkv",
            "m.03spz",
            "m.01nty",
            "m.019pcs",
            "m.01ppq",
            "m.0hbgh",
            "m.035hr8",
            "m.05br2",
            "m.0697s",
            "m.034m8",
            "m.07z5n",
            "m.0h44w",
            "m.0166v",
            "m.0d060g",
            "m.07fr_",
            "m.0162v",
            "m.016p5p",
            "m.03_xj",
            "m.06s_2",
            "m.0chghy",
            "m.088vb",
            "m.05cgv",
            "m.03h64",
            "m.0hzlz",
            "m.07f9q"
        ],
        "different_answer": [
            [
                "m.01nln",
                "m.06ryl",
                "m.06t2t",
                "m.065skb",
                "m.07fsv",
                "m.019rg5",
                "m.06m_5",
                "m.0l3h",
                "m.04hhv",
                "m.027nb",
                "m.06dfg",
                "m.035dk",
                "m.0164b",
                "m.04hvw",
                "m.09wfqp",
                "m.04v6v",
                "m.0d05w3",
                "m.03h2c",
                "m.0165b",
                "m.05qkp",
                "m.02lx0",
                "m.03rt9",
                "m.03rk0",
                "m.07dzf",
                "m.034tl",
                "m.05v8c",
                "m.088q4",
                "m.0hdx8",
                "m.07tp2",
                "m.07ytt",
                "m.0rdr4",
                "m.04v3q",
                "m.0160w",
                "m.047t_",
                "m.03__y",
                "m.05sb1",
                "m.035yg",
                "m.020p1",
                "m.01k0p4",
                "m.05bmq",
                "m.06s0l",
                "m.035hm",
                "m.06s9y",
                "m.026wtlf",
                "m.0j5g9",
                "m.04wcf",
                "m.02wt0",
                "m.0ctw_b",
                "m.0167v",
                "m.03t1s",
                "m.0162b",
                "m.07ssc",
                "m.05r7t",
                "m.06v36",
                "m.03_3d",
                "m.02jx1",
                "m.03ryn",
                "m.04hzj",
                "m.06s6l",
                "m.06tw8",
                "m.09pmkv",
                "m.03spz",
                "m.01nty",
                "m.019pcs",
                "m.01ppq",
                "m.0hbgh",
                "m.035hr8",
                "m.05br2",
                "m.0697s",
                "m.034m8",
                "m.07z5n",
                "m.0h44w",
                "m.0166v",
                "m.0d060g",
                "m.07fr_",
                "m.0162v",
                "m.016p5p",
                "m.03_xj",
                "m.06s_2",
                "m.0chghy",
                "m.088vb",
                "m.05cgv",
                "m.03h64",
                "m.0hzlz",
                "m.07f9q"
            ],
            [
                "m.0d060g",
                "m.03rt9",
                "m.09c7w0",
                "m.014tss",
                "m.07ssc",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1663",
        "question": "what music did louis armstrong play",
        "answer": [
            "m.0m40d",
            "m.0dhb2",
            "m.03_d0",
            "m.09xw2",
            "m.015y_n"
        ],
        "different_answer": [
            [
                "m.0m40d",
                "m.0dhb2",
                "m.03_d0",
                "m.09xw2",
                "m.015y_n"
            ]
        ],
        "entity_linking": {
            "Louis Armstrong": "m.04n32"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n32)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n32 ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04n32')\na.add_fact('m.04n32', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1664",
        "question": "what form of currency does germany use",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1665",
        "question": "where is the latin language from",
        "answer": [
            "m.03t28",
            "m.03v09"
        ],
        "different_answer": [
            [
                "m.03t28",
                "m.03v09"
            ]
        ],
        "entity_linking": {
            "Latin Language": "m.04h9h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04h9h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04h9h ns:language.human_language.language_family ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04h9h')\na.add_fact('m.04h9h', 'language.human_language.language_family', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1666",
        "question": "what are the top tourist attractions in rome",
        "answer": [
            "m.099k7",
            "m.01hfkb",
            "m.0cspx",
            "m.03f8l8",
            "m.0184wm",
            "m.02z0_2",
            "m.05b2vw7",
            "m.07ytt",
            "m.027njzr",
            "m.02z0f9",
            "m.09xnwr",
            "m.0n16t",
            "m.01d_3y",
            "m.053h3z",
            "m.0d5qx",
            "m.036_2f",
            "m.01vg9f",
            "m.01_jls",
            "m.0jnym",
            "m.01d_2s",
            "m.0gg9hqc",
            "m.01rjqb",
            "m.09vgb9",
            "m.012c_2",
            "m.027x2k",
            "m.01tk_r",
            "m.02zjzq",
            "m.03l438",
            "m.0gszqz",
            "m.07_bf4",
            "m.01xgt5",
            "m.08chmx",
            "m.0kbls",
            "m.026qcrj",
            "m.06519j",
            "m.01pyrb",
            "m.03f7gc",
            "m.01xzdz",
            "m.02r6mvk",
            "m.0874tw",
            "m.070y6f",
            "m.08m73_",
            "m.09pct3",
            "m.02kp1h",
            "m.03wbgny",
            "m.01gw1q"
        ],
        "different_answer": [
            [
                "m.099k7",
                "m.01hfkb",
                "m.0cspx",
                "m.03f8l8",
                "m.0184wm",
                "m.02z0_2",
                "m.05b2vw7",
                "m.07ytt",
                "m.027njzr",
                "m.02z0f9",
                "m.09xnwr",
                "m.0n16t",
                "m.01d_3y",
                "m.053h3z",
                "m.0d5qx",
                "m.036_2f",
                "m.01vg9f",
                "m.01_jls",
                "m.0jnym",
                "m.01d_2s",
                "m.0gg9hqc",
                "m.01rjqb",
                "m.09vgb9",
                "m.012c_2",
                "m.027x2k",
                "m.01tk_r",
                "m.02zjzq",
                "m.03l438",
                "m.0gszqz",
                "m.07_bf4",
                "m.01xgt5",
                "m.08chmx",
                "m.0kbls",
                "m.026qcrj",
                "m.06519j",
                "m.01pyrb",
                "m.03f7gc",
                "m.01xzdz",
                "m.02r6mvk",
                "m.0874tw",
                "m.070y6f",
                "m.08m73_",
                "m.09pct3",
                "m.02kp1h",
                "m.03wbgny",
                "m.01gw1q"
            ]
        ],
        "entity_linking": {
            "Rome": "m.06c62"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c62)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c62 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06c62')\na.add_fact('m.06c62', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1667",
        "question": "who were the children of king solomon",
        "answer": [
            "m.01qn77",
            "m.06h5t"
        ],
        "different_answer": [
            [
                "m.01qn77",
                "m.06h5t"
            ]
        ],
        "entity_linking": {
            "Solomon": "m.070h3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.070h3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.070h3 ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.070h3')\na.add_fact('m.070h3', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1668",
        "question": "what did andy irons die from",
        "answer": [
            "m.0gk4g"
        ],
        "different_answer": [
            [
                "m.0gk4g"
            ]
        ],
        "entity_linking": {
            "Andy Irons": "m.03xn54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xn54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xn54 ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03xn54')\na.add_fact('m.03xn54', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1669",
        "question": "where is auburn university located",
        "answer": [
            "m.0gyh",
            "m.06_g97h",
            "m.09c7w0",
            "m.0q8p8"
        ],
        "different_answer": [
            [
                "m.0gyh",
                "m.06_g97h",
                "m.09c7w0",
                "m.0q8p8"
            ],
            [
                "m.0gyh"
            ]
        ],
        "entity_linking": {
            "Auburn University": "m.01wdj_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wdj_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wdj_ ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wdj_')\na.add_fact('m.01wdj_', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1670",
        "question": "who is tatyana ali parents",
        "answer": [
            "m.0jwnfyd",
            "m.0jwnfyl"
        ],
        "different_answer": [
            [
                "m.0jwnfyd",
                "m.0jwnfyl"
            ]
        ],
        "entity_linking": {
            "Tatyana Ali": "m.01knh9l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01knh9l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01knh9l ns:people.person.parents ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01knh9l')\na.add_fact('m.01knh9l', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1671",
        "question": "where did leif ericson grow up",
        "answer": [
            "m.02vmwn"
        ],
        "different_answer": [
            [
                "m.02vmwn"
            ]
        ],
        "entity_linking": {
            "Leif Eriksson": "m.02vwg2_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02vwg2_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02vwg2_ ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02vwg2_')\na.add_fact('m.02vwg2_', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1672",
        "question": "what language do the maasai speak",
        "answer": [
            "m.064kl7"
        ],
        "different_answer": [
            [
                "m.064kl7"
            ]
        ],
        "entity_linking": {
            "Maasai people": "m.054vv"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.054vv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.054vv ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.054vv')\na.add_fact('m.054vv', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1673",
        "question": "what political party was hitler in",
        "answer": [
            "m.05g9h",
            "m.0dl13"
        ],
        "different_answer": [
            [
                "m.05g9h",
                "m.0dl13"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1674",
        "question": "who is the leader of north korea today",
        "answer": [
            "m.0fgw19"
        ],
        "different_answer": [
            [
                "m.0fgw19"
            ]
        ],
        "entity_linking": {
            "North Korea": "m.05b7q",
            "Supreme leader": "m.0h7p97k",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b7q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b7q ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0h7p97k .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7p97k')\na.add_filter('x0', '!=', 'm.05b7q')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0h7p97k')\na.add_fact('m.05b7q', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1675",
        "question": "where do the appalachian mountains run through",
        "answer": [
            "m.07z1m",
            "m.05fkf",
            "m.05j49",
            "m.01x73",
            "m.0694j",
            "m.05tbn",
            "m.0498y",
            "m.05kkh",
            "m.06s4c",
            "m.050ks",
            "m.0gyh",
            "m.059rby",
            "m.05fjf",
            "m.06yxd",
            "m.029jpy",
            "m.059t8",
            "m.059f4",
            "m.081mh",
            "m.05k7sb",
            "m.07h34",
            "m.0d0x8",
            "m.059s8",
            "m.05rh2",
            "m.07_f2"
        ],
        "different_answer": [
            [
                "m.07z1m",
                "m.05fkf",
                "m.05j49",
                "m.01x73",
                "m.0694j",
                "m.05tbn",
                "m.0498y",
                "m.05kkh",
                "m.06s4c",
                "m.050ks",
                "m.0gyh",
                "m.059rby",
                "m.05fjf",
                "m.06yxd",
                "m.029jpy",
                "m.059t8",
                "m.059f4",
                "m.081mh",
                "m.05k7sb",
                "m.07h34",
                "m.0d0x8",
                "m.059s8",
                "m.05rh2",
                "m.07_f2"
            ]
        ],
        "entity_linking": {
            "Appalachian Mountains": "m.0lm0n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lm0n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lm0n ns:location.location.partially_containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lm0n')\na.add_fact('m.0lm0n', 'location.location.partially_containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1676",
        "question": "what money does spain use",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1677",
        "question": "where was terry waite born",
        "answer": [
            "m.01425k"
        ],
        "different_answer": [
            [
                "m.01425k"
            ]
        ],
        "entity_linking": {
            "Terry Waite": "m.013p_j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013p_j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013p_j ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013p_j')\na.add_fact('m.013p_j', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1678",
        "question": "what country did the battle of san juan hill take place",
        "answer": [
            "m.01j4rs"
        ],
        "different_answer": [
            [
                "m.01j4rs"
            ]
        ],
        "entity_linking": {
            "Battle of San Juan Hill": "m.01tf88"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01tf88)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01tf88 ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01tf88')\na.add_fact('m.01tf88', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1679",
        "question": "what kind of government does the united states have currently",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1680",
        "question": "when was the last time the orioles won the world series",
        "answer": [
            "m.046_p6"
        ],
        "different_answer": [
            [
                "m.046_p6"
            ]
        ],
        "entity_linking": {
            "Baltimore Orioles": "m.01d6g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01d6g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01d6g ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01d6g')\na.add_fact('m.01d6g', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1682",
        "question": "who did ben stiller date",
        "answer": [
            "m.01x72k",
            "m.023s8",
            "m.03m8lq",
            "m.015p37",
            "m.0qdgc",
            "m.03_jy4",
            "m.0f0j02"
        ],
        "different_answer": [
            [
                "m.01x72k",
                "m.023s8",
                "m.03m8lq",
                "m.015p37",
                "m.0qdgc",
                "m.03_jy4",
                "m.0f0j02"
            ]
        ],
        "entity_linking": {
            "Ben Stiller": "m.0mdqp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0mdqp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0mdqp ns:base.popstra.celebrity.dated ?y .\n?y ns:base.popstra.dated.participant ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0mdqp')\na.add_fact('m.0mdqp', 'base.popstra.celebrity.dated', 'x1')\na.add_fact('x1', 'base.popstra.dated.participant', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1683",
        "question": "what is the most common language in norway",
        "answer": [
            "m.01648r",
            "m.05f_3",
            "m.016rsc"
        ],
        "different_answer": [
            [
                "m.01648r",
                "m.05f_3",
                "m.016rsc"
            ]
        ],
        "entity_linking": {
            "Norway": "m.05b4w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b4w ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05b4w')\na.add_fact('m.05b4w', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1684",
        "question": "what influenced william shakespeare to start writing",
        "answer": [
            "m.07hl9",
            "m.0c2cl",
            "m.07km7",
            "m.03cdqxx",
            "m.09fdm",
            "m.01r7z",
            "m.060yy",
            "m.063_9",
            "m.0j_8y",
            "m.07yhg",
            "m.01612m",
            "m.02lqj",
            "m.0c5h0",
            "m.03b_m"
        ],
        "different_answer": [
            [
                "m.07hl9",
                "m.0c2cl",
                "m.07km7",
                "m.03cdqxx",
                "m.09fdm",
                "m.01r7z",
                "m.060yy",
                "m.063_9",
                "m.0j_8y",
                "m.07yhg",
                "m.01612m",
                "m.02lqj",
                "m.0c5h0",
                "m.03b_m"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('m.081k8', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1685",
        "question": "where did benjamin franklin went to school",
        "answer": [
            "m.02kj7g"
        ],
        "different_answer": [
            [
                "m.02kj7g"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1686",
        "question": "who is the governor of arizona 2009",
        "answer": [
            "m.02pkb1c",
            "m.01kf06"
        ],
        "different_answer": [
            [
                "m.02pkb1c",
                "m.01kf06"
            ]
        ],
        "entity_linking": {
            "Arizona": "m.0vmt",
            "Governor": "m.0fkvn",
            "2009-12-31": "\"2009-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2009-01-01": "\"2009-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0vmt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0vmt ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.0fkvn .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2009-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2009-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fkvn')\na.add_filter('x0', '!=', 'm.0vmt')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.0fkvn')\na.add_fact('m.0vmt', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2009-12-31\"^^xsd:dateTime', '\"2009-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1687",
        "question": "what movies has spike lee made",
        "answer": [
            "m.02785pw",
            "m.0hz6z53",
            "m.016f62",
            "m.0134yc8y",
            "m.0c0d9s",
            "m.0zn10sh",
            "m.0276b_n",
            "m.0hz6_q8",
            "m.0hzhvcw",
            "m.033hc9",
            "m.05zj2qc",
            "m.04jrzl",
            "m.0bfbg1",
            "m.027hpnl",
            "m.01rwyq",
            "m.0c9755",
            "m.03ckwzc",
            "m.0fps1l",
            "m.0h1nxf0",
            "m.0wggzj_",
            "m.01gwbq",
            "m.05k4z0",
            "m.08q72t",
            "m.038lhw",
            "m.05yvc04",
            "m.027mdm2",
            "m.0_r3q4v",
            "m.03sxd2",
            "m.09nl36",
            "m.0nb7kyg",
            "m.02650sq",
            "m.0jqkh",
            "m.0pxkyz6",
            "m.059925",
            "m.060hk0",
            "m.0n5v9bz",
            "m.0cmdm1",
            "m.0963mq",
            "m.0hzc4zk",
            "m.06l2pj",
            "m.0ddbbpt",
            "m.086v51",
            "m.027nvjf"
        ],
        "different_answer": [
            [
                "m.02785pw",
                "m.0hz6z53",
                "m.016f62",
                "m.0134yc8y",
                "m.0c0d9s",
                "m.0zn10sh",
                "m.0276b_n",
                "m.0hz6_q8",
                "m.0hzhvcw",
                "m.033hc9",
                "m.05zj2qc",
                "m.04jrzl",
                "m.0bfbg1",
                "m.027hpnl",
                "m.01rwyq",
                "m.0c9755",
                "m.03ckwzc",
                "m.0fps1l",
                "m.0h1nxf0",
                "m.0wggzj_",
                "m.01gwbq",
                "m.05k4z0",
                "m.08q72t",
                "m.038lhw",
                "m.05yvc04",
                "m.027mdm2",
                "m.0_r3q4v",
                "m.03sxd2",
                "m.09nl36",
                "m.0nb7kyg",
                "m.02650sq",
                "m.0jqkh",
                "m.0pxkyz6",
                "m.059925",
                "m.060hk0",
                "m.0n5v9bz",
                "m.0cmdm1",
                "m.0963mq",
                "m.0hzc4zk",
                "m.06l2pj",
                "m.0ddbbpt",
                "m.086v51",
                "m.027nvjf"
            ],
            [
                "m.02785pw",
                "m.016f62",
                "m.0c0d9s",
                "m.0276b_n",
                "m.033hc9",
                "m.05zj2qc",
                "m.04jrzl",
                "m.0bfbg1",
                "m.01rwyq",
                "m.0c9755",
                "m.03ckwzc",
                "m.08n3t7v",
                "m.0fps1l",
                "m.0h1nxf0",
                "m.0wggzj_",
                "m.01gwbq",
                "m.05k4z0",
                "m.08q72t",
                "m.038lhw",
                "m.05yvc04",
                "m.08487v",
                "m.03sxd2",
                "m.088s3s",
                "m.03d05ct",
                "m.0nb7kyg",
                "m.0jqkh",
                "m.059925",
                "m.0963mq",
                "m.06l2pj",
                "m.086v51",
                "m.027nvjf"
            ]
        ],
        "entity_linking": {
            "Spike Lee": "m.06pjs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06pjs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06pjs ns:film.director.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06pjs')\na.add_fact('m.06pjs', 'film.director.film', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1688",
        "question": "what did bernie mac died of",
        "answer": [
            "m.0p367zp",
            "m.01q5y6"
        ],
        "different_answer": [
            [
                "m.0p367zp",
                "m.01q5y6"
            ]
        ],
        "entity_linking": {
            "Bernie Mac": "m.02lj6p"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02lj6p)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02lj6p ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02lj6p')\na.add_fact('m.02lj6p', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1690",
        "question": "where is electrolux based",
        "answer": [
            "m.06mxs"
        ],
        "different_answer": [
            [
                "m.06mxs"
            ]
        ],
        "entity_linking": {
            "Electrolux": "m.02h0_y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h0_y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h0_y ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h0_y')\na.add_fact('m.02h0_y', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1691",
        "question": "what is houston timezone",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Houston": "m.03l2n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03l2n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03l2n ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03l2n')\na.add_fact('m.03l2n', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1694",
        "question": "what was shakespeare 's wife called",
        "answer": [
            "m.03mzbg"
        ],
        "different_answer": [
            [
                "m.03mzbg"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.081k8', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1695",
        "question": "when did truman become president",
        "answer": [
            "1945-04-12-08:00"
        ],
        "different_answer": [
            [
                "1945-04-12-08:00"
            ]
        ],
        "entity_linking": {
            "Harry S. Truman": "m.09bg4l",
            "President": "m.060c4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09bg4l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09bg4l ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060c4')\na.add_filter('x0', '!=', 'm.09bg4l')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060c4')\na.add_fact('m.09bg4l', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1696",
        "question": "what did ferdinand magellan do",
        "answer": [
            "m.040vc4s",
            "m.023nrw",
            "m.016wtf"
        ],
        "different_answer": [
            [
                "m.040vc4s",
                "m.023nrw",
                "m.016wtf"
            ]
        ],
        "entity_linking": {
            "Ferdinand Magellan": "m.033ky"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.033ky)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.033ky ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.033ky')\na.add_fact('m.033ky', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1698",
        "question": "where do burmese cats originate from",
        "answer": [
            "m.04xn_",
            "m.07f1x"
        ],
        "different_answer": [
            [
                "m.04xn_",
                "m.07f1x"
            ]
        ],
        "entity_linking": {
            "Burmese cat": "m.01mvkt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mvkt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mvkt ns:biology.animal_breed.place_of_origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mvkt')\na.add_fact('m.01mvkt', 'biology.animal_breed.place_of_origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1699",
        "question": "who played kirk",
        "answer": [
            "m.0c6g1l",
            "m.06jkh9",
            "m.084m3"
        ],
        "different_answer": [
            [
                "m.0c6g1l",
                "m.06jkh9",
                "m.084m3"
            ]
        ],
        "entity_linking": {
            "James T. Kirk": "m.0crtw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0crtw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0crtw ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0crtw')\na.add_fact('m.0crtw', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1700",
        "question": "where is mt st helens located",
        "answer": [
            "m.059g4",
            "m.09c7w0",
            "m.081yw",
            "m.0mly4",
            "m.0k3nk"
        ],
        "different_answer": [
            [
                "m.059g4",
                "m.09c7w0",
                "m.081yw",
                "m.0mly4",
                "m.0k3nk"
            ]
        ],
        "entity_linking": {
            "Mount St. Helens": "m.094xz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.094xz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.094xz ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.094xz')\na.add_fact('m.094xz', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1701",
        "question": "what county is st paul minnesota in",
        "answer": [
            "m.0nh57"
        ],
        "different_answer": [
            [
                "m.0nh57"
            ]
        ],
        "entity_linking": {
            "Saint Paul": "m.0b2lw",
            "US County": "m.0kpym_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b2lw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b2lw ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpym_ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpym_')\na.add_filter('x0', '!=', 'm.0b2lw')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpym_')\na.add_fact('m.0b2lw', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1702",
        "question": "who was king henry viii son",
        "answer": [
            "m.02sx6f",
            "m.02s82",
            "m.0hn9rc9"
        ],
        "different_answer": [
            [
                "m.02sx6f",
                "m.02s82",
                "m.0hn9rc9"
            ]
        ],
        "entity_linking": {
            "Henry VIII of England": "m.03p77",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p77 ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.03p77')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.03p77', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1703",
        "question": "who does david beckham play for",
        "answer": [],
        "different_answer": [
            []
        ],
        "entity_linking": {
            "David Beckham": "m.02d9k",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02d9k)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02d9k ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02d9k')\na.add_fact('m.02d9k', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1705",
        "question": "where was franz ferdinand from",
        "answer": [
            "m.0hyxv"
        ],
        "different_answer": [
            [
                "m.0hyxv"
            ]
        ],
        "entity_linking": {
            "Franz Ferdinand": "m.02ft60"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ft60)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ft60 ns:music.artist.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ft60')\na.add_fact('m.02ft60', 'music.artist.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1706",
        "question": "what was benedict arnold most famous for",
        "answer": [
            "m.07y2zxd"
        ],
        "different_answer": [
            [
                "m.07y2zxd"
            ]
        ],
        "entity_linking": {
            "Benedict Arnold": "m.025_0c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.025_0c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.025_0c ns:base.honouriam.dishonoured_person.dishonor_bestowed ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.025_0c')\na.add_fact('m.025_0c', 'base.honouriam.dishonoured_person.dishonor_bestowed', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1707",
        "question": "who plays lex luthor on smallville",
        "answer": [
            "m.0q1lp"
        ],
        "different_answer": [
            [
                "m.0q1lp"
            ]
        ],
        "entity_linking": {
            "Smallville": "m.03g9xj",
            "Alexander Luthor": "m.04q78"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03g9xj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03g9xj ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.04q78 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04q78')\na.add_filter('x0', '!=', 'm.03g9xj')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.04q78')\na.add_fact('m.03g9xj', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1708",
        "question": "what are dallas cowboys colors",
        "answer": [
            "m.02rnmb",
            "m.083jv",
            "m.03vtbc",
            "m.01g5v",
            "m.06kqt3"
        ],
        "different_answer": [
            [
                "m.02rnmb",
                "m.083jv",
                "m.03vtbc",
                "m.01g5v",
                "m.06kqt3"
            ]
        ],
        "entity_linking": {
            "Dallas Cowboys": "m.02896"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02896)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02896 ns:sports.sports_team.colors ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02896')\na.add_fact('m.02896', 'sports.sports_team.colors', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1710",
        "question": "what is the currency of the czech republic",
        "answer": [
            "m.04rpc3"
        ],
        "different_answer": [
            [
                "m.04rpc3"
            ]
        ],
        "entity_linking": {
            "Czech Republic": "m.01mjq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mjq')\na.add_fact('m.01mjq', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1711",
        "question": "when was the last time the la kings won a playoff series",
        "answer": [
            "m.010fdzhp"
        ],
        "different_answer": [
            [
                "m.010fdzhp"
            ]
        ],
        "entity_linking": {
            "Los Angeles Kings": "m.0jnq8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jnq8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jnq8 ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jnq8')\na.add_fact('m.0jnq8', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1712",
        "question": "where did spencer pratt go to school",
        "answer": [
            "m.065y4w7"
        ],
        "different_answer": [
            [
                "m.065y4w7"
            ]
        ],
        "entity_linking": {
            "Spencer Pratt": "m.02z3d24"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02z3d24)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02z3d24 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02z3d24')\na.add_fact('m.02z3d24', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1713",
        "question": "what disease did abraham lincoln had",
        "answer": [
            "m.06vr2",
            "m.02s645",
            "m.0cc6n"
        ],
        "different_answer": [
            [
                "m.06vr2",
                "m.02s645",
                "m.0cc6n"
            ]
        ],
        "entity_linking": {
            "Abraham Lincoln": "m.0gzh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:medicine.notable_person_with_medical_condition.condition ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gzh')\na.add_fact('m.0gzh', 'medicine.notable_person_with_medical_condition.condition', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1714",
        "question": "who is vancouver canucks coach",
        "answer": [
            "m.030q_6",
            "m.08j98h",
            "m.0g4n7q",
            "m.06qy2y"
        ],
        "different_answer": [
            [
                "m.030q_6",
                "m.08j98h",
                "m.0g4n7q",
                "m.06qy2y"
            ]
        ],
        "entity_linking": {
            "Vancouver Canucks": "m.0jnnx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jnnx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jnnx ns:sports.sports_team.coaches ?y .\n?y ns:sports.sports_team_coach_tenure.coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jnnx')\na.add_fact('m.0jnnx', 'sports.sports_team.coaches', 'x1')\na.add_fact('x1', 'sports.sports_team_coach_tenure.coach', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1715",
        "question": "where did cs lewis wrote",
        "answer": [
            "m.01l63"
        ],
        "different_answer": [
            [
                "m.01l63"
            ]
        ],
        "entity_linking": {
            "C. S. Lewis": "m.01wd02c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01wd02c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01wd02c ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01wd02c')\na.add_fact('m.01wd02c', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1716",
        "question": "what is carlos pena jr nationality",
        "answer": [
            "m.027rn"
        ],
        "different_answer": [
            [
                "m.027rn"
            ]
        ],
        "entity_linking": {
            "Carlos Pe\u00f1a": "m.05c95x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05c95x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05c95x ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05c95x')\na.add_fact('m.05c95x', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1719",
        "question": "who was married to jane wyman",
        "answer": [
            "m.0jzkdh"
        ],
        "different_answer": [
            [
                "m.0jzkdh"
            ]
        ],
        "entity_linking": {
            "Jane Wyman": "m.01933d",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01933d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01933d ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.01933d')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.01933d', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.to', 'x2')\na.add_max('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1721",
        "question": "what language does peru speak",
        "answer": [
            "m.09j2hg",
            "m.02hxk02",
            "m.09_sxt",
            "m.01y5tq",
            "m.06nm1",
            "m.06qmrf"
        ],
        "different_answer": [
            [
                "m.09j2hg",
                "m.02hxk02",
                "m.09_sxt",
                "m.01y5tq",
                "m.06nm1",
                "m.06qmrf"
            ],
            [
                "m.06nm1",
                "m.03d9kg",
                "m.01y5tq"
            ]
        ],
        "entity_linking": {
            "Peru": "m.016wzw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016wzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016wzw ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016wzw')\na.add_fact('m.016wzw', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1723",
        "question": "where is english spoken in the world map",
        "answer": [
            "m.01nln",
            "m.06ryl",
            "m.06t2t",
            "m.065skb",
            "m.07fsv",
            "m.019rg5",
            "m.06m_5",
            "m.0l3h",
            "m.04hhv",
            "m.027nb",
            "m.06dfg",
            "m.035dk",
            "m.0164b",
            "m.04hvw",
            "m.09wfqp",
            "m.04v6v",
            "m.0d05w3",
            "m.03h2c",
            "m.0165b",
            "m.05qkp",
            "m.02lx0",
            "m.03rt9",
            "m.03rk0",
            "m.07dzf",
            "m.034tl",
            "m.05v8c",
            "m.088q4",
            "m.0hdx8",
            "m.07tp2",
            "m.07ytt",
            "m.0rdr4",
            "m.04v3q",
            "m.0160w",
            "m.047t_",
            "m.03__y",
            "m.05sb1",
            "m.035yg",
            "m.020p1",
            "m.01k0p4",
            "m.05bmq",
            "m.06s0l",
            "m.035hm",
            "m.06s9y",
            "m.026wtlf",
            "m.0j5g9",
            "m.04wcf",
            "m.02wt0",
            "m.0ctw_b",
            "m.0167v",
            "m.03t1s",
            "m.0162b",
            "m.07ssc",
            "m.05r7t",
            "m.06v36",
            "m.03_3d",
            "m.02jx1",
            "m.03ryn",
            "m.04hzj",
            "m.06s6l",
            "m.06tw8",
            "m.09pmkv",
            "m.03spz",
            "m.01nty",
            "m.019pcs",
            "m.01ppq",
            "m.0hbgh",
            "m.035hr8",
            "m.05br2",
            "m.0697s",
            "m.034m8",
            "m.07z5n",
            "m.0h44w",
            "m.0166v",
            "m.0d060g",
            "m.07fr_",
            "m.0162v",
            "m.016p5p",
            "m.03_xj",
            "m.06s_2",
            "m.0chghy",
            "m.088vb",
            "m.05cgv",
            "m.03h64",
            "m.0hzlz",
            "m.07f9q"
        ],
        "different_answer": [
            [
                "m.01nln",
                "m.06ryl",
                "m.06t2t",
                "m.065skb",
                "m.07fsv",
                "m.019rg5",
                "m.06m_5",
                "m.0l3h",
                "m.04hhv",
                "m.027nb",
                "m.06dfg",
                "m.035dk",
                "m.0164b",
                "m.04hvw",
                "m.09wfqp",
                "m.04v6v",
                "m.0d05w3",
                "m.03h2c",
                "m.0165b",
                "m.05qkp",
                "m.02lx0",
                "m.03rt9",
                "m.03rk0",
                "m.07dzf",
                "m.034tl",
                "m.05v8c",
                "m.088q4",
                "m.0hdx8",
                "m.07tp2",
                "m.07ytt",
                "m.0rdr4",
                "m.04v3q",
                "m.0160w",
                "m.047t_",
                "m.03__y",
                "m.05sb1",
                "m.035yg",
                "m.020p1",
                "m.01k0p4",
                "m.05bmq",
                "m.06s0l",
                "m.035hm",
                "m.06s9y",
                "m.026wtlf",
                "m.0j5g9",
                "m.04wcf",
                "m.02wt0",
                "m.0ctw_b",
                "m.0167v",
                "m.03t1s",
                "m.0162b",
                "m.07ssc",
                "m.05r7t",
                "m.06v36",
                "m.03_3d",
                "m.02jx1",
                "m.03ryn",
                "m.04hzj",
                "m.06s6l",
                "m.06tw8",
                "m.09pmkv",
                "m.03spz",
                "m.01nty",
                "m.019pcs",
                "m.01ppq",
                "m.0hbgh",
                "m.035hr8",
                "m.05br2",
                "m.0697s",
                "m.034m8",
                "m.07z5n",
                "m.0h44w",
                "m.0166v",
                "m.0d060g",
                "m.07fr_",
                "m.0162v",
                "m.016p5p",
                "m.03_xj",
                "m.06s_2",
                "m.0chghy",
                "m.088vb",
                "m.05cgv",
                "m.03h64",
                "m.0hzlz",
                "m.07f9q"
            ],
            [
                "m.0d060g",
                "m.03rt9",
                "m.09c7w0",
                "m.014tss",
                "m.07ssc",
                "m.0chghy",
                "m.0ctw_b"
            ]
        ],
        "entity_linking": {
            "English Language": "m.02h40lc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02h40lc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02h40lc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02h40lc')\na.add_fact('m.02h40lc', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1724",
        "question": "when did arsenal won the league",
        "answer": [
            "m.04gjljy",
            "m.04jjvq6",
            "m.03wcr3x",
            "m.03wcjy2",
            "m.0vptrcs",
            "m.03wbzvj",
            "m.03qp0n6",
            "m.03ntmq0"
        ],
        "different_answer": [
            [
                "m.04gjljy",
                "m.04jjvq6",
                "m.03wcr3x",
                "m.03wcjy2",
                "m.0vptrcs",
                "m.03wbzvj",
                "m.03qp0n6",
                "m.03ntmq0"
            ]
        ],
        "entity_linking": {
            "Arsenal F.C.": "m.0xbm",
            "FA Cup": "m.02_p0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xbm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xbm ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.02_p0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_p0')\na.add_filter('x0', '!=', 'm.0xbm')\na.add_fact('x1', 'sports.sports_award.award', 'm.02_p0')\na.add_fact('m.0xbm', 'sports.sports_award_winner.awards', 'x1')\na.add_fact('x1', 'sports.sports_award.season', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1725",
        "question": "what timezone is phoenix az in right now",
        "answer": [
            "m.02hczc"
        ],
        "different_answer": [
            [
                "m.02hczc"
            ]
        ],
        "entity_linking": {
            "Phoenix": "m.0d35y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d35y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d35y ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d35y')\na.add_fact('m.0d35y', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1726",
        "question": "where is south portland",
        "answer": [
            "m.0nm9h"
        ],
        "different_answer": [
            [
                "m.0nm9h"
            ],
            [
                "m.0nm9h",
                "m.09c7w0",
                "m.050ks"
            ]
        ],
        "entity_linking": {
            "South Portland": "m.0tpk4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0tpk4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0tpk4 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0tpk4')\na.add_fact('m.0tpk4', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1727",
        "question": "what countries speak french as a first language",
        "answer": [
            "m.04w58",
            "m.03548",
            "m.01nln",
            "m.04sj3",
            "m.04v09",
            "m.01p1b",
            "m.07z5n",
            "m.06mzp",
            "m.04vg8",
            "m.06srk",
            "m.027jk",
            "m.0fv4v",
            "m.03_xj",
            "m.06dfg",
            "m.05cc1",
            "m.0169t",
            "m.0f8l9c",
            "m.03676",
            "m.01rxw",
            "m.04g61",
            "m.0164v",
            "m.0154j",
            "m.01nyl",
            "m.02kcz",
            "m.01699",
            "m.01n6c",
            "m.06sw9",
            "m.03gyl"
        ],
        "different_answer": [
            [
                "m.04w58",
                "m.03548",
                "m.01nln",
                "m.04sj3",
                "m.04v09",
                "m.01p1b",
                "m.07z5n",
                "m.06mzp",
                "m.04vg8",
                "m.06srk",
                "m.027jk",
                "m.0fv4v",
                "m.03_xj",
                "m.06dfg",
                "m.05cc1",
                "m.0169t",
                "m.0f8l9c",
                "m.03676",
                "m.01rxw",
                "m.04g61",
                "m.0164v",
                "m.0154j",
                "m.01nyl",
                "m.02kcz",
                "m.01699",
                "m.01n6c",
                "m.06sw9",
                "m.03gyl"
            ]
        ],
        "entity_linking": {
            "French": "m.064_8sq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.064_8sq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.064_8sq ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.064_8sq .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.064_8sq')\na.add_filter('x0', '!=', 'm.064_8sq')\na.add_fact('x0', 'location.country.official_language', 'm.064_8sq')\na.add_fact('m.064_8sq', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1728",
        "question": "who was ptolemy and what did he do",
        "answer": [
            "m.0jygg",
            "m.0h9c",
            "m.02h6fbs",
            "m.04s2z",
            "m.025rxky"
        ],
        "different_answer": [
            [
                "m.0jygg",
                "m.0h9c",
                "m.02h6fbs",
                "m.04s2z",
                "m.025rxky"
            ]
        ],
        "entity_linking": {
            "Ptolemy": "m.05_0t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05_0t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05_0t ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05_0t')\na.add_fact('m.05_0t', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1729",
        "question": "what was the name of henry viii first wife",
        "answer": [
            "m.01_tz"
        ],
        "different_answer": [
            [
                "m.01_tz"
            ]
        ],
        "entity_linking": {
            "Henry VIII of England": "m.03p77"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p77)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p77 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03p77')\na.add_fact('m.03p77', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1730",
        "question": "where does the parana river flow",
        "answer": [
            "m.06n3y"
        ],
        "different_answer": [
            [
                "m.06n3y"
            ]
        ],
        "entity_linking": {
            "Paran\u00e1 River": "m.02xsr6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xsr6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xsr6 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02xsr6')\na.add_fact('m.02xsr6', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1731",
        "question": "what is president nixon 's first name",
        "answer": [
            "Richard Nixon"
        ],
        "different_answer": [
            [
                "Richard Nixon"
            ]
        ],
        "entity_linking": {
            "Richard Nixon": "m.06c97"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06c97)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06c97 ns:type.object.name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06c97')\na.add_fact('m.06c97', 'type.object.name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1732",
        "question": "where did theodor schwann get his education",
        "answer": [
            "m.03563j",
            "m.0m7yh",
            "m.01stzp"
        ],
        "different_answer": [
            [
                "m.03563j",
                "m.0m7yh",
                "m.01stzp"
            ]
        ],
        "entity_linking": {
            "Theodor Schwann": "m.040000"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.040000)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.040000 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.040000')\na.add_fact('m.040000', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1733",
        "question": "who or what influenced frank lloyd wright",
        "answer": [
            "m.0bybqwn",
            "m.01cqpy",
            "m.08304",
            "m.0dvns",
            "m.06jmjj",
            "m.01whq3q",
            "m.0bwx3"
        ],
        "different_answer": [
            [
                "m.0bybqwn",
                "m.01cqpy",
                "m.08304",
                "m.0dvns",
                "m.06jmjj",
                "m.01whq3q",
                "m.0bwx3"
            ]
        ],
        "entity_linking": {
            "Frank Lloyd Wright": "m.02wlk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02wlk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02wlk ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02wlk')\na.add_fact('m.02wlk', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1734",
        "question": "what year did houston rockets win their first championship",
        "answer": [
            "m.08x9cq"
        ],
        "different_answer": [
            [
                "m.08x9cq"
            ]
        ],
        "entity_linking": {
            "Houston Rockets": "m.0jmfb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jmfb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jmfb ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jmfb')\na.add_fact('m.0jmfb', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1735",
        "question": "where do most of the people live in russia",
        "answer": [
            "m.02wr92"
        ],
        "different_answer": [
            [
                "m.02wr92"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.location.contains ?x .\n?x ns:topic_server.population_number ?sk0 .\n}\nORDER BY DESC(xsd:float(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.location.contains', 'x0')\na.add_fact('x0', 'topic_server.population_number', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1736",
        "question": "where is holy roman empire located",
        "answer": [
            "m.02j9z"
        ],
        "different_answer": [
            [
                "m.02j9z"
            ]
        ],
        "entity_linking": {
            "Holy Roman Empire": "m.03gk2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03gk2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03gk2 ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03gk2')\na.add_fact('m.03gk2', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1737",
        "question": "what movies has liam hemsworth played in",
        "answer": [
            "m.0v9rfj5",
            "m.01222hf6",
            "m.0gkz15s",
            "m.0gxtt3_",
            "m.0134v4hd",
            "m.0123hmcd",
            "m.0n40qmp",
            "m.0lcw1gn",
            "m.0k9390g",
            "m.0gxtt2w",
            "m.0wk4knj",
            "m.0ngvsvk",
            "m.06_vszc",
            "m.0gffmn8",
            "m.047v2p4",
            "m.07ykkx5",
            "m.0ngvtb_",
            "m.0hz6697"
        ],
        "different_answer": [
            [
                "m.0v9rfj5",
                "m.01222hf6",
                "m.0gkz15s",
                "m.0gxtt3_",
                "m.0134v4hd",
                "m.0123hmcd",
                "m.0n40qmp",
                "m.0lcw1gn",
                "m.0k9390g",
                "m.0gxtt2w",
                "m.0wk4knj",
                "m.0ngvsvk",
                "m.06_vszc",
                "m.0gffmn8",
                "m.047v2p4",
                "m.07ykkx5",
                "m.0ngvtb_",
                "m.0hz6697"
            ]
        ],
        "entity_linking": {
            "Liam Hemsworth": "m.04yd0fh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04yd0fh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04yd0fh ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04yd0fh')\na.add_fact('m.04yd0fh', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1738",
        "question": "who plays nicholas newman on the young and the restless",
        "answer": [
            "m.07sklj"
        ],
        "different_answer": [
            [
                "m.07sklj"
            ]
        ],
        "entity_linking": {
            "The Young and the Restless": "m.01b64v",
            "Nicholas Newman": "m.0f22p8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01b64v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01b64v ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0f22p8 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f22p8')\na.add_filter('x0', '!=', 'm.01b64v')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.0f22p8')\na.add_fact('m.01b64v', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1739",
        "question": "who is the voice of eric cartman on south park",
        "answer": [
            "m.01_x6v"
        ],
        "different_answer": [
            [
                "m.01_x6v"
            ]
        ],
        "entity_linking": {
            "South Park": "m.06y_n",
            "Eric Cartman": "m.0myj0",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06y_n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06y_n ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0myj0 .\n?y ns:tv.regular_tv_appearance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.0myj0')\na.add_filter('x0', '!=', 'm.06y_n')\na.add_fact('x1', 'tv.regular_tv_appearance.special_performance_type', 'm.02nsjvf')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.0myj0')\na.add_fact('m.06y_n', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1740",
        "question": "who is angelina jolies brother",
        "answer": [
            "m.01mqg0"
        ],
        "different_answer": [
            [
                "m.01mqg0"
            ]
        ],
        "entity_linking": {
            "Angelina Jolie": "m.0f4vbz",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f4vbz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f4vbz ns:people.person.sibling_s ?y .\n?y ns:people.sibling_relationship.sibling ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0f4vbz')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.0f4vbz', 'people.person.sibling_s', 'x1')\na.add_fact('x1', 'people.sibling_relationship.sibling', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1741",
        "question": "where is the headquarters of bank of america",
        "answer": [
            "m.0fsb8"
        ],
        "different_answer": [
            [
                "m.0fsb8"
            ]
        ],
        "entity_linking": {
            "Bank of America Corporation": "m.01yx7f"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01yx7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01yx7f ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01yx7f')\na.add_fact('m.01yx7f', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1742",
        "question": "what type of government japan have",
        "answer": [
            "m.01fpfn",
            "m.01q20",
            "m.018wl5"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01q20",
                "m.018wl5"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1744",
        "question": "what team does josh hamilton play for",
        "answer": [
            "m.04wmvz"
        ],
        "different_answer": [
            [
                "m.04wmvz"
            ]
        ],
        "entity_linking": {
            "Josh Hamilton": "m.08zxm9",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08zxm9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08zxm9 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08zxm9')\na.add_fact('m.08zxm9', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1746",
        "question": "where is burundi country",
        "answer": [
            "m.0dg3n1"
        ],
        "different_answer": [
            [
                "m.0dg3n1"
            ],
            [
                "m.0dg3n1"
            ]
        ],
        "entity_linking": {
            "Burundi": "m.0169t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0169t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0169t ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0169t')\na.add_fact('m.0169t', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1748",
        "question": "through which countries of the sahel does the niger river flow",
        "answer": [
            "m.05cc1",
            "m.05cgv",
            "m.04v09"
        ],
        "different_answer": [
            [
                "m.05cc1",
                "m.05cgv",
                "m.04v09"
            ]
        ],
        "entity_linking": {
            "Niger River": "m.05csx",
            "Country": "m.01mp",
            "Sahel": "m.0l5_l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05csx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05csx ns:location.location.partially_containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n?x ns:location.location.partially_contains ns:m.0l5_l .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0l5_l')\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.05csx')\na.add_fact('x0', 'location.location.partially_contains', 'm.0l5_l')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.05csx', 'location.location.partially_containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1750",
        "question": "what city does paul ryan live in",
        "answer": [
            "m.01mm_c"
        ],
        "different_answer": [
            [
                "m.01mm_c"
            ]
        ],
        "entity_linking": {
            "Paul Ryan": "m.024v2j",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.024v2j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.024v2j ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\nFILTER(NOT EXISTS {?y ns:people.place_lived.end_date ?sk0} || \nEXISTS {?y ns:people.place_lived.end_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:people.place_lived.start_date ?sk2} || \nEXISTS {?y ns:people.place_lived.start_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.024v2j')\na.add_fact('m.024v2j', 'people.person.places_lived', 'x1')\na.add_time_constrain('x1', 'people.place_lived.start_date', 'people.place_lived.end_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1751",
        "question": "what city is acadia university in",
        "answer": [
            "m.084vj"
        ],
        "different_answer": [
            [
                "m.084vj"
            ]
        ],
        "entity_linking": {
            "Acadia University": "m.0xxc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0xxc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0xxc ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0xxc')\na.add_fact('m.0xxc', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1752",
        "question": "what did f. scott fitzgerald do",
        "answer": [
            "m.0cbd2",
            "m.02xhgwq",
            "m.05z96"
        ],
        "different_answer": [
            [
                "m.0cbd2",
                "m.02xhgwq",
                "m.05z96"
            ]
        ],
        "entity_linking": {
            "F. Scott Fitzgerald": "m.02zjd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zjd ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zjd')\na.add_fact('m.02zjd', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1753",
        "question": "what countries does tomtom western europe include",
        "answer": [
            "m.0d060g",
            "m.06mzp",
            "m.09c7w0",
            "m.0f8l9c",
            "m.07ssc",
            "m.0chghy",
            "m.0154j"
        ],
        "different_answer": [
            [
                "m.0d060g",
                "m.06mzp",
                "m.09c7w0",
                "m.0f8l9c",
                "m.07ssc",
                "m.0chghy",
                "m.0154j"
            ]
        ],
        "entity_linking": {
            "Tomtom Nv": "m.03p3m2y",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03p3m2y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03p3m2y ns:base.schemastaging.organization_extra.phone_number ?y .\n?y ns:base.schemastaging.phone_sandbox.service_location ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.03p3m2y')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.03p3m2y', 'base.schemastaging.organization_extra.phone_number', 'x1')\na.add_fact('x1', 'base.schemastaging.phone_sandbox.service_location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1754",
        "question": "what is the national language of iran",
        "answer": [
            "m.032f6"
        ],
        "different_answer": [
            [
                "m.032f6"
            ]
        ],
        "entity_linking": {
            "Iran": "m.03shp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03shp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03shp ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03shp')\na.add_fact('m.03shp', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1755",
        "question": "where did the second battle of ypres occur",
        "answer": [
            "m.0145__"
        ],
        "different_answer": [
            [
                "m.0145__"
            ]
        ],
        "entity_linking": {
            "Second Battle of Ypres": "m.02q3m7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02q3m7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02q3m7 ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02q3m7')\na.add_fact('m.02q3m7', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1756",
        "question": "what languages do people speak in spain",
        "answer": [
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1757",
        "question": "what did michael crabtree do",
        "answer": [
            "m.02g_6x"
        ],
        "different_answer": [
            [
                "m.02g_6x"
            ],
            [
                "m.01445t",
                "m.02h665k"
            ],
            [
                "m.02g_6x"
            ]
        ],
        "entity_linking": {
            "Michael Crabtree": "m.03ccsym"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ccsym)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ccsym ns:american_football.football_player.position_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03ccsym')\na.add_fact('m.03ccsym', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1758",
        "question": "where do they speak afrikaans",
        "answer": [
            "m.0166v",
            "m.05bmq",
            "m.088vb",
            "m.04tr1",
            "m.016p5p",
            "m.065skb"
        ],
        "different_answer": [
            [
                "m.0166v",
                "m.05bmq",
                "m.088vb",
                "m.04tr1",
                "m.016p5p",
                "m.065skb"
            ],
            [
                "m.05bmq",
                "m.0hzlz"
            ]
        ],
        "entity_linking": {
            "Afrikaans Language": "m.0x82"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0x82)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0x82 ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0x82')\na.add_fact('m.0x82', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1759",
        "question": "what 3 states border florida",
        "answer": [
            "m.0gyh",
            "m.0d0x8"
        ],
        "different_answer": [
            [
                "m.0gyh",
                "m.0d0x8"
            ]
        ],
        "entity_linking": {
            "Florida": "m.02xry",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02xry)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02xry ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.02xry')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.02xry', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1760",
        "question": "who plays ziva david on ncis",
        "answer": [
            "m.0cpd76"
        ],
        "different_answer": [
            [
                "m.0cpd76"
            ]
        ],
        "entity_linking": {
            "Mossad Agent Ziva David": "m.093xn8",
            "NCIS": "m.03m8sg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.093xn8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.093xn8 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.03m8sg .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03m8sg')\na.add_filter('x0', '!=', 'm.093xn8')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.03m8sg')\na.add_fact('m.093xn8', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1761",
        "question": "who ruled after king henry viii died",
        "answer": [
            "m.02s82"
        ],
        "different_answer": [
            [
                "m.02s82"
            ]
        ],
        "entity_linking": {
            "Henry VIII of England": "m.03p77",
            "Monarch": "m.04fnrhx"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ns:m.04l4rht ns:royalty.noble_title.holders ?y0 .  # Monarch of England\n  ?y0 ns:royalty.noble_title_tenure.noble_title ?title ;\n      ns:royalty.noble_title_tenure.noble_person ns:m.03p77 ;\n      ns:royalty.noble_title_tenure.to_date ?to .\n\n  ns:m.04l4rht ns:royalty.noble_title.holders ?y1 .  # Monarch of England\n  ?y1 ns:royalty.noble_title_tenure.noble_person ?x ;\n      ns:royalty.noble_title_tenure.from_date ?from .\n\n  FILTER (xsd:datetime(?from) - xsd:datetime(?to) >= 0)\n}\nORDER BY xsd:datetime(?from)\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1763",
        "question": "who are the st louis cardinals coaches",
        "answer": [
            "m.0271dv6",
            "m.0glr18",
            "m.02p7knr",
            "m.03_507",
            "m.07vcky",
            "m.07sckg"
        ],
        "different_answer": [
            [
                "m.0271dv6",
                "m.0glr18",
                "m.02p7knr",
                "m.03_507",
                "m.07vcky",
                "m.07sckg"
            ]
        ],
        "entity_linking": {
            "St. Louis Cardinals": "m.06x68"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06x68)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06x68 ns:baseball.baseball_team.current_coaches ?y .\n?y ns:baseball.current_coaching_tenure.baseball_coach ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06x68')\na.add_fact('m.06x68', 'baseball.baseball_team.current_coaches', 'x1')\na.add_fact('x1', 'baseball.current_coaching_tenure.baseball_coach', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1764",
        "question": "where is daud ibrahim",
        "answer": [
            "m.055vr"
        ],
        "different_answer": [
            [
                "m.055vr"
            ]
        ],
        "entity_linking": {
            "Dawood Ibrahim": "m.02ry1s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02ry1s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02ry1s ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02ry1s')\na.add_fact('m.02ry1s', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1765",
        "question": "what region is turkey considered",
        "answer": [
            "m.02qkt"
        ],
        "different_answer": [
            [
                "m.02qkt"
            ]
        ],
        "entity_linking": {
            "Turkey": "m.01znc_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01znc_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01znc_ ns:base.locations.countries.continent ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01znc_')\na.add_fact('m.01znc_', 'base.locations.countries.continent', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1766",
        "question": "what language do russians speak",
        "answer": [
            "m.04xqkr",
            "m.06b_j",
            "m.02lpht",
            "m.02nbbh",
            "m.02gj5b",
            "m.03gn_0",
            "m.02mj1c",
            "m.0cjk9",
            "m.017dsl",
            "m.0264gxt",
            "m.03wt_j",
            "m.02x9lm",
            "m.020g7w",
            "m.01qyqy",
            "m.02q4t0g",
            "m.019yz7",
            "m.03f3f1",
            "m.091dr6",
            "m.054zyh",
            "m.049jrm",
            "m.05l6md",
            "m.0234zj",
            "m.03klw8",
            "m.037lmh",
            "m.04rxz0",
            "m.02mxzf",
            "m.02hwm9x",
            "m.027bj_4",
            "m.01y_vl",
            "m.0198z0",
            "m.01bcw_",
            "m.093gjw",
            "m.0880p",
            "m.037nfm",
            "m.06bw_x"
        ],
        "different_answer": [
            [
                "m.04xqkr",
                "m.06b_j",
                "m.02lpht",
                "m.02nbbh",
                "m.02gj5b",
                "m.03gn_0",
                "m.02mj1c",
                "m.0cjk9",
                "m.017dsl",
                "m.0264gxt",
                "m.03wt_j",
                "m.02x9lm",
                "m.020g7w",
                "m.01qyqy",
                "m.02q4t0g",
                "m.019yz7",
                "m.03f3f1",
                "m.091dr6",
                "m.054zyh",
                "m.049jrm",
                "m.05l6md",
                "m.0234zj",
                "m.03klw8",
                "m.037lmh",
                "m.04rxz0",
                "m.02mxzf",
                "m.02hwm9x",
                "m.027bj_4",
                "m.01y_vl",
                "m.0198z0",
                "m.01bcw_",
                "m.093gjw",
                "m.0880p",
                "m.037nfm",
                "m.06bw_x"
            ],
            [
                "m.06b_j"
            ],
            [
                "m.06b_j"
            ]
        ],
        "entity_linking": {
            "Russia": "m.06bnz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06bnz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06bnz ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06bnz')\na.add_fact('m.06bnz', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1767",
        "question": "where was martin luther king jr buried",
        "answer": [
            "m.050my1"
        ],
        "different_answer": [
            [
                "m.050my1"
            ]
        ],
        "entity_linking": {
            "Martin Luther King, Jr.": "m.051cc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051cc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051cc ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051cc')\na.add_fact('m.051cc', 'people.deceased_person.place_of_burial', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1768",
        "question": "what are the official languages of argentina",
        "answer": [
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1769",
        "question": "where is the city wales",
        "answer": [
            "m.07ssc",
            "m.0hzc9md"
        ],
        "different_answer": [
            [
                "m.07ssc",
                "m.0hzc9md"
            ]
        ],
        "entity_linking": {
            "Wales": "m.0j5g9",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j5g9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j5g9 ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.0j5g9')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.0j5g9', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1770",
        "question": "what country does rafael nadal play for",
        "answer": [
            "m.06mkj"
        ],
        "different_answer": [
            [
                "m.06mkj"
            ]
        ],
        "entity_linking": {
            "Rafael Nadal": "m.051q39"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.051q39)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.051q39 ns:people.person.nationality ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.051q39')\na.add_fact('m.051q39', 'people.person.nationality', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1771",
        "question": "what is the islamic belief",
        "answer": [
            "m.01bbmp",
            "m.07r6vw",
            "m.024b22",
            "m.074hw",
            "m.0hr6vbp",
            "m.06rvp0",
            "m.019vqj",
            "m.07bfrc",
            "m.0698fs",
            "m.025w817",
            "m.04xy3",
            "m.02wvcg4",
            "m.09kb_2"
        ],
        "different_answer": [
            [
                "m.01bbmp",
                "m.07r6vw",
                "m.024b22",
                "m.074hw",
                "m.0hr6vbp",
                "m.06rvp0",
                "m.019vqj",
                "m.07bfrc",
                "m.0698fs",
                "m.025w817",
                "m.04xy3",
                "m.02wvcg4",
                "m.09kb_2"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.beliefs ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.beliefs', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1772",
        "question": "who is the prime minister of spain 2011",
        "answer": [
            "m.02k6pd",
            "m.01p2pb"
        ],
        "different_answer": [
            [
                "m.02k6pd",
                "m.01p2pb"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj",
            "Prime minister": "m.060bp",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060bp .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060bp')\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060bp')\na.add_fact('m.06mkj', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1773",
        "question": "who was the son of king leonidas",
        "answer": [
            "m.063sr6"
        ],
        "different_answer": [
            [
                "m.063sr6"
            ]
        ],
        "entity_linking": {
            "Leonidas I": "m.0nb2t",
            "Male": "m.05zppz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0nb2t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0nb2t ns:people.person.children ?x .\n?x ns:people.person.gender ns:m.05zppz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05zppz')\na.add_filter('x0', '!=', 'm.0nb2t')\na.add_fact('x0', 'people.person.gender', 'm.05zppz')\na.add_fact('m.0nb2t', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1774",
        "question": "who was judi dench married to",
        "answer": [
            "m.016sm7"
        ],
        "different_answer": [
            [
                "m.016sm7"
            ]
        ],
        "entity_linking": {
            "Judi Dench": "m.0lpjn",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lpjn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lpjn ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.0lpjn')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.0lpjn', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1775",
        "question": "how many languages do they speak in spain",
        "answer": [
            "m.01q5d9",
            "m.05l0r",
            "m.017k6",
            "m.06nm1",
            "m.01m69"
        ],
        "different_answer": [
            [
                "m.01q5d9",
                "m.05l0r",
                "m.017k6",
                "m.06nm1",
                "m.01m69"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1776",
        "question": "where are the sahara desert located",
        "answer": [
            "m.05g2v"
        ],
        "different_answer": [
            [
                "m.05g2v"
            ]
        ],
        "entity_linking": {
            "Sahara": "m.01w1vt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01w1vt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01w1vt ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01w1vt')\na.add_fact('m.01w1vt', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1777",
        "question": "what is rihanna mum called",
        "answer": [
            "m.0h30zg_"
        ],
        "different_answer": [
            [
                "m.0h30zg_"
            ]
        ],
        "entity_linking": {
            "Rihanna": "m.06mt91",
            "Female": "m.02zsn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:people.person.parents ?x .\n?x ns:people.person.gender ns:m.02zsn .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02zsn')\na.add_filter('x0', '!=', 'm.06mt91')\na.add_fact('x0', 'people.person.gender', 'm.02zsn')\na.add_fact('m.06mt91', 'people.person.parents', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1779",
        "question": "when did president theodore roosevelt take office",
        "answer": [
            "1901-09-14-08:00"
        ],
        "different_answer": [
            [
                "1901-09-14-08:00"
            ]
        ],
        "entity_linking": {
            "Theodore Roosevelt": "m.07hyk",
            "President of the United States": "m.060d2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hyk ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.from ?x .\n?y ns:government.government_position_held.office_position_or_title ns:m.060d2 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060d2')\na.add_filter('x0', '!=', 'm.07hyk')\na.add_fact('x1', 'government.government_position_held.office_position_or_title', 'm.060d2')\na.add_fact('m.07hyk', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1780",
        "question": "who does michael oher play for in 2010",
        "answer": [
            "m.01ct6"
        ],
        "different_answer": [
            [
                "m.01ct6"
            ]
        ],
        "entity_linking": {
            "Michael Oher": "m.0h7q7b",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h7q7b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h7q7b ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h7q7b')\na.add_fact('m.0h7q7b', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1781",
        "question": "who or what influenced albert einstein",
        "answer": [
            "m.0434m",
            "m.012102",
            "m.03s9v",
            "m.05q658z",
            "m.015yk8",
            "m.01bgwr",
            "m.01dfd4",
            "m.032l1",
            "m.015n8",
            "m.026lj",
            "m.0fcy0",
            "m.0j3v",
            "m.05vy1",
            "m.04xfb",
            "m.0dm1p",
            "m.03cdg",
            "m.0m3hd",
            "m.0bjvq"
        ],
        "different_answer": [
            [
                "m.0434m",
                "m.012102",
                "m.03s9v",
                "m.05q658z",
                "m.015yk8",
                "m.01bgwr",
                "m.01dfd4",
                "m.032l1",
                "m.015n8",
                "m.026lj",
                "m.0fcy0",
                "m.0j3v",
                "m.05vy1",
                "m.04xfb",
                "m.0dm1p",
                "m.03cdg",
                "m.0m3hd",
                "m.0bjvq"
            ]
        ],
        "entity_linking": {
            "Albert Einstein": "m.0jcx"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jcx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jcx ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jcx')\na.add_fact('m.0jcx', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1782",
        "question": "where does egypt export to",
        "answer": [
            "m.06tw8"
        ],
        "different_answer": [
            [
                "m.06tw8"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.statistical_region.places_exported_to ?y .\n?y ns:location.imports_and_exports.exported_to ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.statistical_region.places_exported_to', 'x1')\na.add_fact('x1', 'location.imports_and_exports.exported_to', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1784",
        "question": "where is the seat of the african union",
        "answer": [
            "m.0dttf"
        ],
        "different_answer": [
            [
                "m.0dttf"
            ]
        ],
        "entity_linking": {
            "African Union": "m.0gkjy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gkjy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gkjy ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gkjy')\na.add_fact('m.0gkjy', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1785",
        "question": "what was kim richards in",
        "answer": [
            "m.08dyxd",
            "m.0d1_kl",
            "m.05r3nm",
            "m.05dj6dc",
            "m.04f76fm",
            "m.0bfmjvh",
            "m.02r2r2j",
            "m.04f2h9q",
            "m.0dnh5w",
            "m.0ff1st",
            "m.07wbmd",
            "m.02rl4qq"
        ],
        "different_answer": [
            [
                "m.08dyxd",
                "m.0d1_kl",
                "m.05r3nm",
                "m.05dj6dc",
                "m.04f76fm",
                "m.0bfmjvh",
                "m.02r2r2j",
                "m.04f2h9q",
                "m.0dnh5w",
                "m.0ff1st",
                "m.07wbmd",
                "m.02rl4qq"
            ]
        ],
        "entity_linking": {
            "Kim Richards": "m.08l257"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08l257)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08l257 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08l257')\na.add_fact('m.08l257', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1788",
        "question": "what artistic style did henri rousseau work in",
        "answer": [
            "m.01b8q0",
            "m.015r61",
            "m.06s0d7",
            "m.015xrq"
        ],
        "different_answer": [
            [
                "m.01b8q0",
                "m.015r61",
                "m.06s0d7",
                "m.015xrq"
            ]
        ],
        "entity_linking": {
            "Henri Rousseau": "m.02rdf6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02rdf6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02rdf6 ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02rdf6')\na.add_fact('m.02rdf6', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1789",
        "question": "what is john edwards indicted for",
        "answer": [
            "m.0hj49"
        ],
        "different_answer": [
            [
                "m.0hj49"
            ]
        ],
        "entity_linking": {
            "John Edwards": "m.01651q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01651q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01651q ns:base.crime.acquitted_person.acquittal ?y .\n?y ns:base.crime.acquittal.crime_type ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01651q')\na.add_fact('m.01651q', 'base.crime.acquitted_person.acquittal', 'x1')\na.add_fact('x1', 'base.crime.acquittal.crime_type', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1790",
        "question": "where was huey newton killed",
        "answer": [
            "m.0dc95"
        ],
        "different_answer": [
            [
                "m.0dc95"
            ]
        ],
        "entity_linking": {
            "Huey P. Newton": "m.018y0w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.018y0w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.018y0w ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018y0w')\na.add_fact('m.018y0w', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1791",
        "question": "when was the printing press invented by gutenberg",
        "answer": [
            "1440-08:00"
        ],
        "different_answer": [
            [
                "1440-08:00"
            ]
        ],
        "entity_linking": {
            "Printing press": "m.05sxt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05sxt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05sxt ns:law.invention.date_of_invention ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05sxt')\na.add_fact('m.05sxt', 'law.invention.date_of_invention', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1792",
        "question": "where is midlothian scotland",
        "answer": [
            "m.07ssc",
            "m.06q1r",
            "m.0hzc9md"
        ],
        "different_answer": [
            [
                "m.07ssc",
                "m.06q1r",
                "m.0hzc9md"
            ]
        ],
        "entity_linking": {
            "Midlothian": "m.011w8v"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.011w8v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.011w8v ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.011w8v')\na.add_fact('m.011w8v', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1793",
        "question": "where does marta play soccer",
        "answer": [
            "m.0755sb",
            "m.0h9814q"
        ],
        "different_answer": [
            [
                "m.0755sb",
                "m.0h9814q"
            ]
        ],
        "entity_linking": {
            "Marta": "m.09fr69",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09fr69)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09fr69 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09fr69')\na.add_fact('m.09fr69', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1794",
        "question": "where is mitt romney 's family from",
        "answer": [
            "m.02dtg"
        ],
        "different_answer": [
            [
                "m.02dtg"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('m.0271_s', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1795",
        "question": "what are john terry 's children called",
        "answer": [
            "m.0j51lwr",
            "m.0j51lwj"
        ],
        "different_answer": [
            [
                "m.0j51lwr",
                "m.0j51lwj"
            ]
        ],
        "entity_linking": {
            "John Terry": "m.029f79"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.029f79)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.029f79 ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.029f79')\na.add_fact('m.029f79', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1796",
        "question": "what city was michael jackson born in",
        "answer": [
            "m.03b12"
        ],
        "different_answer": [
            [
                "m.03b12"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1797",
        "question": "who fought in the battle of vicksburg",
        "answer": [
            "m.020d5",
            "m.07t2k",
            "m.02fp48",
            "m.09c7w0",
            "m.02_qg_"
        ],
        "different_answer": [
            [
                "m.020d5",
                "m.07t2k",
                "m.02fp48",
                "m.09c7w0",
                "m.02_qg_"
            ],
            [
                "m.020d5",
                "m.02fp48"
            ],
            [
                "m.020d5",
                "m.02fp48"
            ],
            [
                "m.07t2k",
                "m.02_qg_"
            ]
        ],
        "entity_linking": {
            "Siege of Vicksburg": "m.01hf7f"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01hf7f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01hf7f ns:base.culturalevent.event.entity_involved ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01hf7f')\na.add_fact('m.01hf7f', 'base.culturalevent.event.entity_involved', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1799",
        "question": "what kind of writing is nikolai gogol famous for",
        "answer": [
            "m.02hv44_",
            "m.0cbd2",
            "m.02xhgwq"
        ],
        "different_answer": [
            [
                "m.02hv44_",
                "m.0cbd2",
                "m.02xhgwq"
            ]
        ],
        "entity_linking": {
            "Nikolai Gogol": "m.0113sg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0113sg)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0113sg ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0113sg')\na.add_fact('m.0113sg', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1800",
        "question": "what year was first world series",
        "answer": [
            "m.018n8"
        ],
        "different_answer": [
            [
                "m.018n8"
            ]
        ],
        "entity_linking": {
            "World Series": "m.0fjp3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fjp3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fjp3 ns:time.recurring_event.instances ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0fjp3')\na.add_fact('m.0fjp3', 'time.recurring_event.instances', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_min('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1801",
        "question": "who plays simon birch",
        "answer": [
            "m.0cp8vl"
        ],
        "different_answer": [
            [
                "m.0cp8vl"
            ]
        ],
        "entity_linking": {
            "Simon Birch": "m.0gwwcp6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.070m8v)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.070m8v ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0gwwcp6 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gwwcp6')\na.add_filter('x0', '!=', 'm.070m8v')\na.add_fact('x1', 'film.performance.character', 'm.0gwwcp6')\na.add_fact('m.070m8v', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1802",
        "question": "where are the timezones in the usa",
        "answer": [
            "m.02hczc",
            "m.02lcqs",
            "m.042g7t",
            "m.027wjl3",
            "m.02lctm",
            "m.02lcrv",
            "m.02hcv8",
            "m.02fqwt",
            "m.027wj2_"
        ],
        "different_answer": [
            [
                "m.02hczc",
                "m.02lcqs",
                "m.042g7t",
                "m.027wjl3",
                "m.02lctm",
                "m.02lcrv",
                "m.02hcv8",
                "m.02fqwt",
                "m.027wj2_"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1803",
        "question": "what does gm make",
        "answer": [
            "m.015smg",
            "m.03qtfw8"
        ],
        "different_answer": [
            [
                "m.015smg",
                "m.03qtfw8"
            ]
        ],
        "entity_linking": {
            "General Motors": "m.035nm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.035nm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.035nm ns:business.business_operation.industry ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.035nm')\na.add_fact('m.035nm', 'business.business_operation.industry', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1804",
        "question": "what do people speak in uk",
        "answer": [
            "m.02h40lc",
            "m.01v0g",
            "m.0h407",
            "m.0ct8m",
            "m.083tk",
            "m.02jcw",
            "m.03x42",
            "m.070zw"
        ],
        "different_answer": [
            [
                "m.02h40lc",
                "m.01v0g",
                "m.0h407",
                "m.0ct8m",
                "m.083tk",
                "m.02jcw",
                "m.03x42",
                "m.070zw"
            ],
            [
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "United Kingdom": "m.07ssc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07ssc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07ssc ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07ssc')\na.add_fact('m.07ssc', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1805",
        "question": "what do people in jamaica speak",
        "answer": [
            "m.04ygk0",
            "m.01428y"
        ],
        "different_answer": [
            [
                "m.04ygk0",
                "m.01428y"
            ],
            [
                "m.01428y"
            ]
        ],
        "entity_linking": {
            "Jamaica": "m.03_r3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_r3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_r3 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_r3')\na.add_fact('m.03_r3', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1806",
        "question": "what position did lebron james play",
        "answer": [
            "m.0355dz",
            "m.01pv51",
            "m.03ww62"
        ],
        "different_answer": [
            [
                "m.0355dz",
                "m.01pv51",
                "m.03ww62"
            ],
            [
                "m.05ch8k9",
                "m.03ww62",
                "m.01pv51",
                "m.0355dz",
                "m.03558l"
            ]
        ],
        "entity_linking": {
            "LeBron James": "m.01jz6d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01jz6d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01jz6d ns:basketball.basketball_player.position_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01jz6d')\na.add_fact('m.01jz6d', 'basketball.basketball_player.position_s', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1807",
        "question": "what was wayne gretzky 's first team",
        "answer": [
            "m.0jnmj"
        ],
        "different_answer": [
            [
                "m.0jnmj"
            ]
        ],
        "entity_linking": {
            "Wayne Gretzky": "m.0839s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0839s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0839s ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y ns:sports.sports_team_roster.from ?sk0 .\n}\nORDER BY xsd:datetime(?sk0)\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0839s')\na.add_fact('m.0839s', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.from', 'x2')\na.add_min('x2')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1808",
        "question": "who is the president of peru now",
        "answer": [
            "m.0d2m0y"
        ],
        "different_answer": [
            [
                "m.0d2m0y"
            ]
        ],
        "entity_linking": {
            "Peru": "m.016wzw",
            "President": "m.060c4",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016wzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016wzw ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060c4')\na.add_filter('x0', '!=', 'm.016wzw')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060c4')\na.add_fact('m.016wzw', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1809",
        "question": "what kind of guitar did jerry garcia play",
        "answer": [
            "m.01jyd4",
            "m.02j9dp",
            "m.02m873"
        ],
        "different_answer": [
            [
                "m.01jyd4",
                "m.02j9dp",
                "m.02m873"
            ]
        ],
        "entity_linking": {
            "Jerry Garcia": "m.0k1bs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k1bs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k1bs ns:music.guitarist.guitars_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k1bs')\na.add_fact('m.0k1bs', 'music.guitarist.guitars_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1810",
        "question": "what type of art leonardo da vinci do",
        "answer": [
            "m.05qdh",
            "m.02csf",
            "m.06msq"
        ],
        "different_answer": [
            [
                "m.05qdh",
                "m.02csf",
                "m.06msq"
            ]
        ],
        "entity_linking": {
            "Leonardo da Vinci": "m.04lg6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04lg6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04lg6 ns:visual_art.visual_artist.art_forms ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04lg6')\na.add_fact('m.04lg6', 'visual_art.visual_artist.art_forms', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1811",
        "question": "who are the senators of new jersey now",
        "answer": [
            "m.06p430",
            "m.033d3p"
        ],
        "different_answer": [
            [
                "m.06p430",
                "m.033d3p"
            ]
        ],
        "entity_linking": {
            "New Jersey": "m.05fjf",
            "United States Senate": "m.07t58",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05fjf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05fjf ns:government.political_district.representatives ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.governmental_body ns:m.07t58 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t58')\na.add_filter('x0', '!=', 'm.05fjf')\na.add_fact('x1', 'government.government_position_held.governmental_body', 'm.07t58')\na.add_fact('m.05fjf', 'government.political_district.representatives', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1812",
        "question": "where was rihanna raised",
        "answer": [
            "m.02p5kp"
        ],
        "different_answer": [
            [
                "m.02p5kp"
            ]
        ],
        "entity_linking": {
            "Rihanna": "m.06mt91"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mt91')\na.add_fact('m.06mt91', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1813",
        "question": "what team does messi play for 2011",
        "answer": [
            "m.0hvgt",
            "m.02bh_v"
        ],
        "different_answer": [
            [
                "m.0hvgt",
                "m.02bh_v"
            ]
        ],
        "entity_linking": {
            "Lionel Messi": "m.06qjgc",
            "2011-12-31": "\"2011-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2011-01-01": "\"2011-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06qjgc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06qjgc ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2011-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2011-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06qjgc')\na.add_fact('m.06qjgc', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2011-12-31\"^^xsd:dateTime', '\"2011-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1815",
        "question": "where does lil wayne go to school",
        "answer": [
            "m.02gr81",
            "m.0h2_zh0",
            "m.076qq2_",
            "m.075_jk3",
            "m.02gnrt"
        ],
        "different_answer": [
            [
                "m.02gr81",
                "m.0h2_zh0",
                "m.076qq2_",
                "m.075_jk3",
                "m.02gnrt"
            ]
        ],
        "entity_linking": {
            "Lil Wayne": "m.016kjs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016kjs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016kjs ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016kjs')\na.add_fact('m.016kjs', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1817",
        "question": "where did jrr tolkien go to school",
        "answer": [
            "m.0ylvj",
            "m.025ycq",
            "m.07tgn",
            "m.0b_b0v"
        ],
        "different_answer": [
            [
                "m.0ylvj",
                "m.025ycq",
                "m.07tgn",
                "m.0b_b0v"
            ]
        ],
        "entity_linking": {
            "J. R. R. Tolkien": "m.041h0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.041h0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.041h0 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.041h0')\na.add_fact('m.041h0', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1818",
        "question": "what state is saint louis university in",
        "answer": [
            "m.04ych"
        ],
        "different_answer": [
            [
                "m.04ych"
            ],
            [
                "m.04ych"
            ]
        ],
        "entity_linking": {
            "Saint Louis University": "m.02tz9z",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02tz9z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02tz9z ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.02tz9z')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.02tz9z', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1819",
        "question": "what religion does canada follow",
        "answer": [
            "m.0flw86",
            "m.05sfs",
            "m.0c8wxp"
        ],
        "different_answer": [
            [
                "m.0flw86",
                "m.05sfs",
                "m.0c8wxp"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('m.0d060g', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1821",
        "question": "which countries have spanish as their main language",
        "answer": [
            "m.0345_",
            "m.07ylj",
            "m.05v10",
            "m.016wzw",
            "m.01p8s",
            "m.0jgd",
            "m.05qx1",
            "m.05r7t",
            "m.02k8k",
            "m.06mkj",
            "m.02k1b",
            "m.01ls2",
            "m.01p1v",
            "m.0d04z6",
            "m.03h2c",
            "m.027rn",
            "m.0165v",
            "m.02kcz",
            "m.05c74",
            "m.07twz"
        ],
        "different_answer": [
            [
                "m.0345_",
                "m.07ylj",
                "m.05v10",
                "m.016wzw",
                "m.01p8s",
                "m.0jgd",
                "m.05qx1",
                "m.05r7t",
                "m.02k8k",
                "m.06mkj",
                "m.02k1b",
                "m.01ls2",
                "m.01p1v",
                "m.0d04z6",
                "m.03h2c",
                "m.027rn",
                "m.0165v",
                "m.02kcz",
                "m.05c74",
                "m.07twz"
            ]
        ],
        "entity_linking": {
            "Spanish Language": "m.06nm1"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06nm1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06nm1 ns:language.human_language.countries_spoken_in ?x .\n?x ns:location.country.official_language ns:m.06nm1 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06nm1')\na.add_filter('x0', '!=', 'm.06nm1')\na.add_fact('x0', 'location.country.official_language', 'm.06nm1')\na.add_fact('m.06nm1', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1822",
        "question": "who is in paul ryan 's family",
        "answer": [
            "m.0qf0gtr",
            "m.0qf0hct",
            "m.0kr8t50",
            "m.0j6fhh8",
            "m.0kr8sx8",
            "m.0kr8tj2"
        ],
        "different_answer": [
            [
                "m.0qf0gtr",
                "m.0qf0hct",
                "m.0kr8t50",
                "m.0j6fhh8",
                "m.0kr8sx8",
                "m.0kr8tj2"
            ]
        ],
        "entity_linking": {
            "Paul Ryan": "m.024v2j"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tFILTER (?x != ns:m.024v2j)\n\t{ \n\t  # Parents\n\t  ns:m.024v2j ns:people.person.parents ?x .\n\t}\n\tUNION\n\t{\n\t  # Children\n\t  ns:m.024v2j ns:people.person.children ?x .\n\t}\n\tUNION\n\t{\n\t  # Siblings\n\t  ns:m.024v2j ns:people.person.sibling_s ?y .\n\t  ?y ns:people.sibling_relationship.sibling ?x .\n\t}\n\tUNION\n\t{\n\t  # Spouse\n\t  ns:m.024v2j ns:people.person.spouse_s ?y .\n\t  ?y ns:people.marriage.spouse ?x .\n\t  ?y ns:people.marriage.type_of_union ns:m.04ztj .\n\t  FILTER (NOT EXISTS {?y ns:people.marriage.to []})\n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1823",
        "question": "what government does iraq use",
        "answer": [
            "m.018wl5",
            "m.06cx9",
            "m.0glnsx",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.018wl5",
                "m.06cx9",
                "m.0glnsx",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Iraq": "m.0d05q4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d05q4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d05q4 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d05q4')\na.add_fact('m.0d05q4', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1824",
        "question": "what type of currency do they use in spain",
        "answer": [
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "Spain": "m.06mkj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mkj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mkj ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mkj')\na.add_fact('m.06mkj', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1825",
        "question": "what did lincoln steffens wrote",
        "answer": [
            "m.06mv_gp",
            "m.06bsl_5",
            "m.06f67r1",
            "m.06gqt1t",
            "m.069h7f0",
            "m.06t_tbs",
            "m.06tdgyp",
            "m.068tvkv",
            "m.0c1xh9z",
            "m.06vgjfz",
            "m.0l6bpv3",
            "m.06bhsc3",
            "m.06lr_pz"
        ],
        "different_answer": [
            [
                "m.06mv_gp",
                "m.06bsl_5",
                "m.06f67r1",
                "m.06gqt1t",
                "m.069h7f0",
                "m.06t_tbs",
                "m.06tdgyp",
                "m.068tvkv",
                "m.0c1xh9z",
                "m.06vgjfz",
                "m.0l6bpv3",
                "m.06bhsc3",
                "m.06lr_pz"
            ]
        ],
        "entity_linking": {
            "Lincoln Steffens": "m.01bw1c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bw1c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bw1c ns:book.author.works_written ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bw1c')\na.add_fact('m.01bw1c', 'book.author.works_written', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1826",
        "question": "what schools did anders celsius attend",
        "answer": [
            "m.07tjf"
        ],
        "different_answer": [
            [
                "m.07tjf"
            ]
        ],
        "entity_linking": {
            "Anders Celsius": "m.010nm"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.010nm)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.010nm ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.010nm')\na.add_fact('m.010nm', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1827",
        "question": "what can do in new york",
        "answer": [
            "m.0403zkg",
            "m.09sg3h",
            "m.0jwy_gm",
            "m.02vz0kx",
            "m.0cv4c",
            "m.02qz9w",
            "m.07jwwf",
            "m.021848",
            "m.02nd_",
            "m.01kht3",
            "m.09sjx5",
            "m.019vsd",
            "m.0pnb8",
            "m.07qdr",
            "m.01zmd",
            "m.0163ff",
            "m.09c7v",
            "m.0bz7bg",
            "m.0989yy",
            "m.0j32d_5",
            "m.04053sn",
            "m.03vstx",
            "m.0q9h2",
            "m.026cv0z",
            "m.0jwvjyz",
            "m.0cc65g0",
            "m.0c02dld",
            "m.04q3k0p",
            "m.07trd0",
            "m.051vfm",
            "m.01nbpn",
            "m.01rxr7",
            "m.051xk9",
            "m.072p8",
            "m.0by0zd5",
            "m.0brl0p",
            "m.04jpg0f",
            "m.05f80pd",
            "m.0ll4_ht",
            "m.0j_66",
            "m.023r9j",
            "m.02z7b9_",
            "m.0bh8czr",
            "m.04q4sg",
            "m.06fybq",
            "m.01rs7b",
            "m.0_ymbw6",
            "m.0n5wy3b",
            "m.02hjvb",
            "m.0hhjk",
            "m.01rz3c",
            "m.048ltn",
            "m.012vvtp_",
            "m.01rxnm",
            "m.05t0ps",
            "m.04h9fs",
            "m.03cfv35",
            "m.0537mx",
            "m.01lnd3",
            "m.0gy74y",
            "m.06nhn3",
            "m.04sr12",
            "m.09c7b"
        ],
        "different_answer": [
            [
                "m.0403zkg",
                "m.09sg3h",
                "m.0jwy_gm",
                "m.02vz0kx",
                "m.0cv4c",
                "m.02qz9w",
                "m.07jwwf",
                "m.021848",
                "m.02nd_",
                "m.01kht3",
                "m.09sjx5",
                "m.019vsd",
                "m.0pnb8",
                "m.07qdr",
                "m.01zmd",
                "m.0163ff",
                "m.09c7v",
                "m.0bz7bg",
                "m.0989yy",
                "m.0j32d_5",
                "m.04053sn",
                "m.03vstx",
                "m.0q9h2",
                "m.026cv0z",
                "m.0jwvjyz",
                "m.0cc65g0",
                "m.0c02dld",
                "m.04q3k0p",
                "m.07trd0",
                "m.051vfm",
                "m.01nbpn",
                "m.01rxr7",
                "m.051xk9",
                "m.072p8",
                "m.0by0zd5",
                "m.0brl0p",
                "m.04jpg0f",
                "m.05f80pd",
                "m.0ll4_ht",
                "m.0j_66",
                "m.023r9j",
                "m.02z7b9_",
                "m.0bh8czr",
                "m.04q4sg",
                "m.06fybq",
                "m.01rs7b",
                "m.0_ymbw6",
                "m.0n5wy3b",
                "m.02hjvb",
                "m.0hhjk",
                "m.01rz3c",
                "m.048ltn",
                "m.012vvtp_",
                "m.01rxnm",
                "m.05t0ps",
                "m.04h9fs",
                "m.03cfv35",
                "m.0537mx",
                "m.01lnd3",
                "m.0gy74y",
                "m.06nhn3",
                "m.04sr12",
                "m.09c7b"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('m.02_286', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1828",
        "question": "what currency does france accept",
        "answer": [
            "m.01qyjx",
            "m.02l6h"
        ],
        "different_answer": [
            [
                "m.01qyjx",
                "m.02l6h"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1829",
        "question": "what type of religion did massachusetts have",
        "answer": [
            "m.02rsw",
            "m.05sfs",
            "m.0631_",
            "m.01lp8",
            "m.0c8wxp",
            "m.0dtdq",
            "m.021_0p",
            "m.03_gx",
            "m.051kv",
            "m.04pk9",
            "m.05w5d",
            "m.092bf5",
            "m.019cr",
            "m.01s5nb"
        ],
        "different_answer": [
            [
                "m.02rsw",
                "m.05sfs",
                "m.0631_",
                "m.01lp8",
                "m.0c8wxp",
                "m.0dtdq",
                "m.021_0p",
                "m.03_gx",
                "m.051kv",
                "m.04pk9",
                "m.05w5d",
                "m.092bf5",
                "m.019cr",
                "m.01s5nb"
            ]
        ],
        "entity_linking": {
            "Massachusetts": "m.05k7sb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05k7sb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05k7sb ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05k7sb')\na.add_fact('m.05k7sb', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1830",
        "question": "what language do they speak in colombia south america",
        "answer": [
            "m.02hwglw",
            "m.02hwl46",
            "m.02hwv8r",
            "m.02hxvjw",
            "m.02hwyr3",
            "m.05tnswp",
            "m.09gpqdh",
            "m.02hwvm1",
            "m.02hwh2x",
            "m.02hxb6s",
            "m.06nm1",
            "m.02hxds7",
            "m.02hxh5f",
            "m.02hwwxk",
            "m.02hwqrn",
            "m.02hxlpz",
            "m.03h0wpt",
            "m.02hxsy4",
            "m.01yppj",
            "m.02hwt3q",
            "m.02ppbb5",
            "m.02hxl2t",
            "m.02hwnpn",
            "m.02hwr84",
            "m.0b7mcv",
            "m.02hxz2z",
            "m.02ppbg9",
            "m.02hwxgh",
            "m.02hxb4m",
            "m.02hxs9_",
            "m.0km3ztb",
            "m.02hwl4_",
            "m.02hxssc",
            "m.02hxj6x",
            "m.02ppbnh",
            "m.02hxy6v",
            "m.02hx2q2",
            "m.02hxhrz",
            "m.02hxdd2",
            "m.02hxksk",
            "m.02hx2tn",
            "m.02hxs7q",
            "m.02hwrvb",
            "m.02hxswb",
            "m.02hxtwj",
            "m.085vdy",
            "m.02hw_7r",
            "m.02hxb1x",
            "m.09k4cp",
            "m.025syhx",
            "m.02hwv5q",
            "m.02hxnf6",
            "m.02hxxcv",
            "m.02pq8qn",
            "m.026wqvr",
            "m.02hxf1r",
            "m.07k4r10",
            "m.06gdhz",
            "m.02hx0bf",
            "m.02hx5w4",
            "m.02hwqww",
            "m.02hwnwm",
            "g.1q6h_1_4j",
            "m.02hwzgg",
            "m.02hwmth",
            "m.03w6b4",
            "m.02hxzv2",
            "m.02hxp1v",
            "m.02hwwlp",
            "m.02hwzdd",
            "m.02hxdfd",
            "m.02hxy04",
            "m.02hxv46",
            "m.08w0ky",
            "m.02hww1x",
            "m.02hwgnw",
            "m.02hwpxb",
            "m.02hwgxh",
            "m.02hx_dp",
            "m.02hxfkq",
            "m.02hxsz8",
            "m.02hx8nb",
            "m.0bm08x",
            "m.02hwqkg",
            "m.02hwzld",
            "m.02hwxg4"
        ],
        "different_answer": [
            [
                "m.02hwglw",
                "m.02hwl46",
                "m.02hwv8r",
                "m.02hxvjw",
                "m.02hwyr3",
                "m.05tnswp",
                "m.09gpqdh",
                "m.02hwvm1",
                "m.02hwh2x",
                "m.02hxb6s",
                "m.06nm1",
                "m.02hxds7",
                "m.02hxh5f",
                "m.02hwwxk",
                "m.02hwqrn",
                "m.02hxlpz",
                "m.03h0wpt",
                "m.02hxsy4",
                "m.01yppj",
                "m.02hwt3q",
                "m.02ppbb5",
                "m.02hxl2t",
                "m.02hwnpn",
                "m.02hwr84",
                "m.0b7mcv",
                "m.02hxz2z",
                "m.02ppbg9",
                "m.02hwxgh",
                "m.02hxb4m",
                "m.02hxs9_",
                "m.0km3ztb",
                "m.02hwl4_",
                "m.02hxssc",
                "m.02hxj6x",
                "m.02ppbnh",
                "m.02hxy6v",
                "m.02hx2q2",
                "m.02hxhrz",
                "m.02hxdd2",
                "m.02hxksk",
                "m.02hx2tn",
                "m.02hxs7q",
                "m.02hwrvb",
                "m.02hxswb",
                "m.02hxtwj",
                "m.085vdy",
                "m.02hw_7r",
                "m.02hxb1x",
                "m.09k4cp",
                "m.025syhx",
                "m.02hwv5q",
                "m.02hxnf6",
                "m.02hxxcv",
                "m.02pq8qn",
                "m.026wqvr",
                "m.02hxf1r",
                "m.07k4r10",
                "m.06gdhz",
                "m.02hx0bf",
                "m.02hx5w4",
                "m.02hwqww",
                "m.02hwnwm",
                "g.1q6h_1_4j",
                "m.02hwzgg",
                "m.02hwmth",
                "m.03w6b4",
                "m.02hxzv2",
                "m.02hxp1v",
                "m.02hwwlp",
                "m.02hwzdd",
                "m.02hxdfd",
                "m.02hxy04",
                "m.02hxv46",
                "m.08w0ky",
                "m.02hww1x",
                "m.02hwgnw",
                "m.02hwpxb",
                "m.02hwgxh",
                "m.02hx_dp",
                "m.02hxfkq",
                "m.02hxsz8",
                "m.02hx8nb",
                "m.0bm08x",
                "m.02hwqkg",
                "m.02hwzld",
                "m.02hwxg4"
            ],
            [
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Colombia": "m.01ls2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01ls2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01ls2 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01ls2')\na.add_fact('m.01ls2', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1833",
        "question": "what kind of government does brazil has",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1835",
        "question": "what country did gregor mendel live in",
        "answer": [
            "m.02p5_2s",
            "m.0fs_s"
        ],
        "different_answer": [
            [
                "m.02p5_2s",
                "m.0fs_s"
            ]
        ],
        "entity_linking": {
            "Gregor Mendel": "m.039c5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.039c5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.039c5 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.039c5')\na.add_fact('m.039c5', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1836",
        "question": "where laura ingalls wilder lived",
        "answer": [
            "m.0_r0n",
            "m.0x14p",
            "m.01mmj7",
            "m.0dz6k_",
            "m.0488g",
            "m.0wg6f"
        ],
        "different_answer": [
            [
                "m.0_r0n",
                "m.0x14p",
                "m.01mmj7",
                "m.0dz6k_",
                "m.0488g",
                "m.0wg6f"
            ]
        ],
        "entity_linking": {
            "Laura Ingalls Wilder": "m.01bt87"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01bt87)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01bt87 ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01bt87')\na.add_fact('m.01bt87', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1838",
        "question": "what sports are popular in germany",
        "answer": [
            "m.026pb10",
            "m.01l3wr",
            "m.03sx6f",
            "m.04mx1yr",
            "m.03d1r7t",
            "m.0260p73",
            "m.043rstb",
            "m.0by0kb9",
            "m.03m3xhy",
            "m.0cvc05",
            "m.0dt889",
            "m.0h40db",
            "m.05prqw",
            "m.025wfyk",
            "m.026pr2_",
            "m.0h40lj",
            "m.07ldyjt",
            "m.0h407v",
            "m.06y3b4",
            "m.030rdb",
            "m.026t7lw",
            "m.04cxm_7",
            "m.0h40f0",
            "m.025t26l",
            "m.02pnhdq",
            "m.026f3ys",
            "m.04jd6b6",
            "m.0414tdm",
            "m.0bs6dhl",
            "m.03c38d5",
            "m.0h167w",
            "m.053gfcl",
            "m.04gk22b",
            "m.02r4j0b",
            "m.04jgf73",
            "m.047nfps",
            "m.0cksc_",
            "m.04q8nzj",
            "m.0h40k4",
            "m.05c03j9",
            "m.02z6g34",
            "m.0h408w"
        ],
        "different_answer": [
            [
                "m.026pb10",
                "m.01l3wr",
                "m.03sx6f",
                "m.04mx1yr",
                "m.03d1r7t",
                "m.0260p73",
                "m.043rstb",
                "m.0by0kb9",
                "m.03m3xhy",
                "m.0cvc05",
                "m.0dt889",
                "m.0h40db",
                "m.05prqw",
                "m.025wfyk",
                "m.026pr2_",
                "m.0h40lj",
                "m.07ldyjt",
                "m.0h407v",
                "m.06y3b4",
                "m.030rdb",
                "m.026t7lw",
                "m.04cxm_7",
                "m.0h40f0",
                "m.025t26l",
                "m.02pnhdq",
                "m.026f3ys",
                "m.04jd6b6",
                "m.0414tdm",
                "m.0bs6dhl",
                "m.03c38d5",
                "m.0h167w",
                "m.053gfcl",
                "m.04gk22b",
                "m.02r4j0b",
                "m.04jgf73",
                "m.047nfps",
                "m.0cksc_",
                "m.04q8nzj",
                "m.0h40k4",
                "m.05c03j9",
                "m.02z6g34",
                "m.0h408w"
            ]
        ],
        "entity_linking": {
            "Germany": "m.0345h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0345h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0345h ns:sports.sports_team_location.teams ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0345h')\na.add_fact('m.0345h', 'sports.sports_team_location.teams', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1839",
        "question": "what 's my timezone in oklahoma",
        "answer": [
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Oklahoma": "m.05mph"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05mph)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05mph ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05mph')\na.add_fact('m.05mph', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1840",
        "question": "what do they speak in norway",
        "answer": [
            "m.04d36l",
            "m.05f_3",
            "m.06f7kz",
            "m.09xy1k",
            "m.02glq_"
        ],
        "different_answer": [
            [
                "m.04d36l",
                "m.05f_3",
                "m.06f7kz",
                "m.09xy1k",
                "m.02glq_"
            ],
            [
                "m.01648r",
                "m.05f_3",
                "m.016rsc"
            ]
        ],
        "entity_linking": {
            "Norway": "m.05b4w"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05b4w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05b4w ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05b4w')\na.add_fact('m.05b4w', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1842",
        "question": "what currency does singapore use",
        "answer": [
            "m.02f32g"
        ],
        "different_answer": [
            [
                "m.02f32g"
            ]
        ],
        "entity_linking": {
            "Singapore": "m.06t2t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06t2t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06t2t ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06t2t')\na.add_fact('m.06t2t', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1843",
        "question": "what did the blackfoot indians speak",
        "answer": [
            "m.02hx790",
            "m.02h40lc"
        ],
        "different_answer": [
            [
                "m.02hx790",
                "m.02h40lc"
            ]
        ],
        "entity_linking": {
            "Blackfoot Confederacy": "m.016f5d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016f5d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016f5d ns:people.ethnicity.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016f5d')\na.add_fact('m.016f5d', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1844",
        "question": "who plays robin hood in prince of thieves",
        "answer": [
            "m.0127m7"
        ],
        "different_answer": [
            [
                "m.0127m7"
            ]
        ],
        "entity_linking": {
            "Robin Hood: Prince of Thieves": "m.01msrb",
            "Robin Hood": "m.06j7x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01msrb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01msrb ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.06j7x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06j7x')\na.add_filter('x0', '!=', 'm.01msrb')\na.add_fact('x1', 'film.performance.character', 'm.06j7x')\na.add_fact('m.01msrb', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1845",
        "question": "what standard time is texas",
        "answer": [
            "m.02hczc",
            "m.02fqwt"
        ],
        "different_answer": [
            [
                "m.02hczc",
                "m.02fqwt"
            ]
        ],
        "entity_linking": {
            "Texas": "m.07b_l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07b_l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07b_l ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07b_l')\na.add_fact('m.07b_l', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1847",
        "question": "where does kurdish people live",
        "answer": [
            "m.0j0k"
        ],
        "different_answer": [
            [
                "m.0j0k"
            ]
        ],
        "entity_linking": {
            "Kurds": "m.04c28"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04c28)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04c28 ns:people.ethnicity.geographic_distribution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04c28')\na.add_fact('m.04c28', 'people.ethnicity.geographic_distribution', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1848",
        "question": "what instrument does louis armstrong",
        "answer": [
            "m.020w2",
            "m.07gql"
        ],
        "different_answer": [
            [
                "m.020w2",
                "m.07gql"
            ]
        ],
        "entity_linking": {
            "Louis Armstrong": "m.04n32"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04n32)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04n32 ns:music.group_member.instruments_played ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04n32')\na.add_fact('m.04n32', 'music.group_member.instruments_played', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1849",
        "question": "who does alyson stoner play in camp rock",
        "answer": [
            "m.0h5vd14"
        ],
        "different_answer": [
            [
                "m.0h5vd14"
            ],
            [
                "m.0h5vd14"
            ]
        ],
        "entity_linking": {
            "Alyson Stoner": "m.02bwjv",
            "Camp Rock": "m.02w4by3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02bwjv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02bwjv ns:film.actor.film ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.film ns:m.02w4by3 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02w4by3')\na.add_filter('x0', '!=', 'm.02bwjv')\na.add_fact('x1', 'film.performance.film', 'm.02w4by3')\na.add_fact('m.02bwjv', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1850",
        "question": "what religion does madonna practice",
        "answer": [
            "m.0c8wxp",
            "m.01n15n"
        ],
        "different_answer": [
            [
                "m.0c8wxp",
                "m.01n15n"
            ]
        ],
        "entity_linking": {
            "Madonna": "m.01vs_v8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01vs_v8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01vs_v8 ns:people.person.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01vs_v8')\na.add_fact('m.01vs_v8', 'people.person.religion', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1851",
        "question": "what countries are located near egypt",
        "answer": [
            "m.04gqr",
            "m.06tw8",
            "m.03spz"
        ],
        "different_answer": [
            [
                "m.04gqr",
                "m.06tw8",
                "m.03spz"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54",
            "Country": "m.01mp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.location.adjoin_s ?y .\n?y ns:location.adjoining_relationship.adjoins ?x .\n?x ns:common.topic.notable_types ns:m.01mp .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mp')\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('x0', 'common.topic.notable_types', 'm.01mp')\na.add_fact('m.02k54', 'location.location.adjoin_s', 'x1')\na.add_fact('x1', 'location.adjoining_relationship.adjoins', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1853",
        "question": "what made richard hammond famous",
        "answer": [
            "m.01tkqy",
            "m.0kyk",
            "m.0dxtg",
            "m.08z956",
            "m.0d8qb",
            "m.03gjzk",
            "m.0np9r",
            "m.015cjr",
            "m.0cbd2"
        ],
        "different_answer": [
            [
                "m.01tkqy",
                "m.0kyk",
                "m.0dxtg",
                "m.08z956",
                "m.0d8qb",
                "m.03gjzk",
                "m.0np9r",
                "m.015cjr",
                "m.0cbd2"
            ]
        ],
        "entity_linking": {
            "Richard Hammond": "m.02508x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02508x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02508x ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02508x')\na.add_fact('m.02508x', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1854",
        "question": "who originally voiced lois griffin",
        "answer": [
            "m.03jldb"
        ],
        "different_answer": [
            [
                "m.03jldb"
            ]
        ],
        "entity_linking": {
            "Lois Griffin": "m.03pcqz",
            "Voice": "m.02nsjvf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03pcqz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03pcqz ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.special_performance_type ns:m.02nsjvf .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02nsjvf')\na.add_filter('x0', '!=', 'm.03pcqz')\na.add_fact('x1', 'film.performance.special_performance_type', 'm.02nsjvf')\na.add_fact('m.03pcqz', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1855",
        "question": "what airport do you fly into in paris",
        "answer": [
            "m.01l525",
            "m.0qk79"
        ],
        "different_answer": [
            [
                "m.01l525",
                "m.0qk79"
            ]
        ],
        "entity_linking": {
            "Paris": "m.05qtj",
            "Airport": "m.01xpjyz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.how_to_get_here ?y .\n?y ns:travel.transportation.transport_terminus ?x .\n?x ns:common.topic.notable_types ns:m.01xpjyz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xpjyz')\na.add_filter('x0', '!=', 'm.05qtj')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xpjyz')\na.add_fact('m.05qtj', 'travel.travel_destination.how_to_get_here', 'x1')\na.add_fact('x1', 'travel.transportation.transport_terminus', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1857",
        "question": "what rihanna new album called 2012",
        "answer": [
            "m.0shm0m9",
            "m.0n5wjx_",
            "g.121n8wcw",
            "m.0y56x6d",
            "g.121_5zdm",
            "m.0139h91t",
            "g.11c3mrbyc8",
            "m.0124v_vt",
            "g.121xjjw_",
            "m.0vs9dgx",
            "m.0q5skzb",
            "m.0vs9nmk",
            "m.0rhvq_1",
            "m.0nfvxv8"
        ],
        "different_answer": [
            [
                "m.0shm0m9",
                "m.0n5wjx_",
                "g.121n8wcw",
                "m.0y56x6d",
                "g.121_5zdm",
                "m.0139h91t",
                "g.11c3mrbyc8",
                "m.0124v_vt",
                "g.121xjjw_",
                "m.0vs9dgx",
                "m.0q5skzb",
                "m.0vs9nmk",
                "m.0rhvq_1",
                "m.0nfvxv8"
            ]
        ],
        "entity_linking": {
            "Rihanna": "m.06mt91",
            "2012-01-01": "\"2012-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2012-12-31": "\"2012-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mt91)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mt91 ns:music.artist.album ?x .\nFILTER(NOT EXISTS {?x ns:music.album.release_date ?sk0} || \nEXISTS {?x ns:music.album.release_date ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"2012-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:music.album.release_date ?sk2} || \nEXISTS {?x ns:music.album.release_date ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"2012-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mt91')\na.add_fact('m.06mt91', 'music.artist.album', 'x0')\na.add_time_constrain('x0', 'music.album.release_date', 'music.album.release_date', '\"2012-12-31\"^^xsd:dateTime', '\"2012-01-01\"^^xsd:dateTime')\n"
    },
    {
        "qid": "WebQTest-1858",
        "question": "where does dave ramsey live",
        "answer": [
            "m.05jbn"
        ],
        "different_answer": [
            [
                "m.05jbn"
            ]
        ],
        "entity_linking": {
            "Dave Ramsey": "m.03zf9h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03zf9h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03zf9h ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03zf9h')\na.add_fact('m.03zf9h', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1860",
        "question": "what discovery did galileo make",
        "answer": [
            "m.0bv05",
            "m.0bt_p",
            "m.0f58c",
            "m.041sd6"
        ],
        "different_answer": [
            [
                "m.0bv05",
                "m.0bt_p",
                "m.0f58c",
                "m.041sd6"
            ]
        ],
        "entity_linking": {
            "Galileo Galilei": "m.034ks"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.034ks)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.034ks ns:astronomy.astronomer.astronomical_objects_discovered ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.034ks')\na.add_fact('m.034ks', 'astronomy.astronomer.astronomical_objects_discovered', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1861",
        "question": "what is the government system of saudi arabia",
        "answer": [
            "m.0hqc2",
            "m.01fpfn",
            "m.07v2k4"
        ],
        "different_answer": [
            [
                "m.0hqc2",
                "m.01fpfn",
                "m.07v2k4"
            ]
        ],
        "entity_linking": {
            "Saudi Arabia": "m.01z215"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01z215)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01z215 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01z215')\na.add_fact('m.01z215', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1864",
        "question": "who plays the role of tony dinozzo on ncis",
        "answer": [
            "m.0578mx"
        ],
        "different_answer": [
            [
                "m.0578mx"
            ]
        ],
        "entity_linking": {
            "Special Agent Anthony DiNozzo": "m.07wp25",
            "NCIS": "m.03m8sg"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07wp25)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07wp25 ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.03m8sg .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03m8sg')\na.add_filter('x0', '!=', 'm.07wp25')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.03m8sg')\na.add_fact('m.07wp25', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1865",
        "question": "what did jesus do for living",
        "answer": [
            "m.066dv",
            "m.067nv",
            "m.019x4f"
        ],
        "different_answer": [
            [
                "m.066dv",
                "m.067nv",
                "m.019x4f"
            ]
        ],
        "entity_linking": {
            "Jesus Christ": "m.045m1_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.045m1_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.045m1_ ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.045m1_')\na.add_fact('m.045m1_', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1866",
        "question": "what is the state name of new york city",
        "answer": [
            "m.059rby"
        ],
        "different_answer": [
            [
                "m.059rby"
            ]
        ],
        "entity_linking": {
            "New York City": "m.02_286"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_286)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_286 ns:base.biblioness.bibs_location.state ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02_286')\na.add_fact('m.02_286', 'base.biblioness.bibs_location.state', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1868",
        "question": "who plays knox overstreet",
        "answer": [
            "m.05gnf9"
        ],
        "different_answer": [
            [
                "m.05gnf9"
            ]
        ],
        "entity_linking": {
            "Knox Overstreet": "m.0h5qcr7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h5qcr7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h5qcr7 ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h5qcr7')\na.add_fact('m.0h5qcr7', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1870",
        "question": "what movies did david carradine play in",
        "answer": [
            "m.047g4lw",
            "m.0b__16q",
            "m.04j2zp2",
            "m.0dj9xmf",
            "m.0c41y5f",
            "m.0clhj5",
            "m.04j21g6",
            "m.0fqnq4_",
            "m.0h_0jbs",
            "m.07gp3w",
            "m.0kbjch5",
            "m.0d042l",
            "m.0bx_s9v",
            "m.0bx_71h",
            "m.02vr32y",
            "m.0crrckw",
            "m.04ssf",
            "m.0cs10pd",
            "m.03zndp",
            "m.0crs071",
            "m.07d83t",
            "m.057myy",
            "m.01rxyb",
            "m.0fn43t",
            "m.02z46bf",
            "m.07gns9",
            "m.0272v9w",
            "m.04j29v0",
            "m.0crrwjq",
            "m.04j0yld",
            "m.02qds4w",
            "m.0bs16n",
            "m.0gksd67",
            "m.0dqvnd",
            "m.0crshly",
            "m.04j08hn",
            "m.04j1xrt",
            "m.078mng",
            "m.0crxk1m",
            "m.04gvw_z",
            "m.05f5pjd",
            "m.0crr_yx",
            "m.0c3yq5d",
            "m.0dgkv64",
            "m.0fc6sp",
            "m.0g55lz_",
            "m.04p2fy8",
            "m.0gkr5xq",
            "m.0fm7l2",
            "m.09v17dd",
            "m.0kv6xq",
            "m.02qp9s8",
            "m.04j2zx0",
            "m.011pzwg5",
            "m.0gm0_fg",
            "m.0gyv0b4",
            "m.0b6k13z",
            "m.06_v8dw",
            "m.03gtwh_",
            "m.0crrb94",
            "m.0crrj82",
            "m.0274g5q",
            "m.0bxz0c1",
            "m.04j2q8v",
            "m.0cs76m5",
            "m.05b4l67",
            "m.0crt6rf",
            "m.0134lcx0",
            "m.0hy542p",
            "m.09k51yg",
            "m.0h0ncl5",
            "m.0gksqd4",
            "m.027grw3",
            "m.0crvmw1",
            "m.04j2sfx",
            "m.0cs3kyt",
            "m.0crrsd4",
            "m.02qjtml",
            "m.07k7bh0",
            "m.01xrqm9",
            "m.0c1c2yt",
            "m.0bc9_3",
            "m.07kf0d4",
            "m.0bf4gtj",
            "m.07dvtc",
            "m.0gttw88",
            "m.0crttx5",
            "m.0cs1_b1",
            "m.0crtfzr",
            "m.04j34y2",
            "m.0crtsrd",
            "m.04j0q52",
            "m.07yb1s",
            "m.08y5wd",
            "m.06k4hw",
            "m.04gsxgr",
            "m.04j1d9l",
            "m.0crsr0l",
            "m.05f3y96",
            "m.0gjdd6d",
            "m.0bcbhg",
            "m.047p6w8",
            "m.04lgl2y",
            "m.0crsfhl",
            "m.0gf7ssv",
            "m.0gks2zc",
            "m.062rrj",
            "m.0pt_5",
            "m.0bh7jby",
            "m.0h05yr",
            "m.06qxmj",
            "m.05p89nk",
            "m.0bcb9g",
            "m.0crrl_t",
            "m.0f2864",
            "m.0j62vp8",
            "m.027t7gk",
            "m.0bq8tr",
            "m.0272qjg",
            "m.02r96lm",
            "m.04j26sc",
            "m.04j0qqp",
            "m.04jgfgc",
            "m.0gks2xc",
            "m.04j2mhm",
            "m.0g9_441",
            "m.0b6lpbm",
            "m.0hr418b",
            "m.0dryg5m",
            "m.04j3579",
            "m.0crvkxc",
            "m.0h0nclq",
            "m.0crrwl7",
            "m.0c7y2c",
            "m.0kv661",
            "m.083vqj",
            "m.0crtspw",
            "m.05c2853"
        ],
        "different_answer": [
            [
                "m.047g4lw",
                "m.0b__16q",
                "m.04j2zp2",
                "m.0dj9xmf",
                "m.0c41y5f",
                "m.0clhj5",
                "m.04j21g6",
                "m.0fqnq4_",
                "m.0h_0jbs",
                "m.07gp3w",
                "m.0kbjch5",
                "m.0d042l",
                "m.0bx_s9v",
                "m.0bx_71h",
                "m.02vr32y",
                "m.0crrckw",
                "m.04ssf",
                "m.0cs10pd",
                "m.03zndp",
                "m.0crs071",
                "m.07d83t",
                "m.057myy",
                "m.01rxyb",
                "m.0fn43t",
                "m.02z46bf",
                "m.07gns9",
                "m.0272v9w",
                "m.04j29v0",
                "m.0crrwjq",
                "m.04j0yld",
                "m.02qds4w",
                "m.0bs16n",
                "m.0gksd67",
                "m.0dqvnd",
                "m.0crshly",
                "m.04j08hn",
                "m.04j1xrt",
                "m.078mng",
                "m.0crxk1m",
                "m.04gvw_z",
                "m.05f5pjd",
                "m.0crr_yx",
                "m.0c3yq5d",
                "m.0dgkv64",
                "m.0fc6sp",
                "m.0g55lz_",
                "m.04p2fy8",
                "m.0gkr5xq",
                "m.0fm7l2",
                "m.09v17dd",
                "m.0kv6xq",
                "m.02qp9s8",
                "m.04j2zx0",
                "m.011pzwg5",
                "m.0gm0_fg",
                "m.0gyv0b4",
                "m.0b6k13z",
                "m.06_v8dw",
                "m.03gtwh_",
                "m.0crrb94",
                "m.0crrj82",
                "m.0274g5q",
                "m.0bxz0c1",
                "m.04j2q8v",
                "m.0cs76m5",
                "m.05b4l67",
                "m.0crt6rf",
                "m.0134lcx0",
                "m.0hy542p",
                "m.09k51yg",
                "m.0h0ncl5",
                "m.0gksqd4",
                "m.027grw3",
                "m.0crvmw1",
                "m.04j2sfx",
                "m.0cs3kyt",
                "m.0crrsd4",
                "m.02qjtml",
                "m.07k7bh0",
                "m.01xrqm9",
                "m.0c1c2yt",
                "m.0bc9_3",
                "m.07kf0d4",
                "m.0bf4gtj",
                "m.07dvtc",
                "m.0gttw88",
                "m.0crttx5",
                "m.0cs1_b1",
                "m.0crtfzr",
                "m.04j34y2",
                "m.0crtsrd",
                "m.04j0q52",
                "m.07yb1s",
                "m.08y5wd",
                "m.06k4hw",
                "m.04gsxgr",
                "m.04j1d9l",
                "m.0crsr0l",
                "m.05f3y96",
                "m.0gjdd6d",
                "m.0bcbhg",
                "m.047p6w8",
                "m.04lgl2y",
                "m.0crsfhl",
                "m.0gf7ssv",
                "m.0gks2zc",
                "m.062rrj",
                "m.0pt_5",
                "m.0bh7jby",
                "m.0h05yr",
                "m.06qxmj",
                "m.05p89nk",
                "m.0bcb9g",
                "m.0crrl_t",
                "m.0f2864",
                "m.0j62vp8",
                "m.027t7gk",
                "m.0bq8tr",
                "m.0272qjg",
                "m.02r96lm",
                "m.04j26sc",
                "m.04j0qqp",
                "m.04jgfgc",
                "m.0gks2xc",
                "m.04j2mhm",
                "m.0g9_441",
                "m.0b6lpbm",
                "m.0hr418b",
                "m.0dryg5m",
                "m.04j3579",
                "m.0crvkxc",
                "m.0h0nclq",
                "m.0crrwl7",
                "m.0c7y2c",
                "m.0kv661",
                "m.083vqj",
                "m.0crtspw",
                "m.05c2853"
            ]
        ],
        "entity_linking": {
            "David Carradine": "m.02p5hf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02p5hf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02p5hf ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02p5hf')\na.add_fact('m.02p5hf', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1871",
        "question": "what is the stanley cup named after",
        "answer": [
            "m.01q69p"
        ],
        "different_answer": [
            [
                "m.01q69p"
            ]
        ],
        "entity_linking": {
            "Stanley Cup": "m.0hn79"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hn79)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hn79 ns:symbols.namesake.named_after ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hn79')\na.add_fact('m.0hn79', 'symbols.namesake.named_after', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1873",
        "question": "where is traditional chinese used",
        "answer": [
            "m.0d05w3"
        ],
        "different_answer": [
            [
                "m.0d05w3"
            ]
        ],
        "entity_linking": {
            "Chinese language": "m.01r2l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01r2l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01r2l ns:language.human_language.main_country ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01r2l')\na.add_fact('m.01r2l', 'language.human_language.main_country', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1874",
        "question": "who does portugal trade with",
        "answer": [
            "m.07fj_",
            "m.01z215",
            "m.03__y",
            "m.0j1z8",
            "m.0j4b",
            "m.0h3y",
            "m.02k54",
            "m.06t2t",
            "m.0b90_r",
            "m.04gqr",
            "m.04wgh",
            "m.04wlh"
        ],
        "different_answer": [
            [
                "m.07fj_",
                "m.01z215",
                "m.03__y",
                "m.0j1z8",
                "m.0j4b",
                "m.0h3y",
                "m.02k54",
                "m.06t2t",
                "m.0b90_r",
                "m.04gqr",
                "m.04wgh",
                "m.04wlh"
            ]
        ],
        "entity_linking": {
            "Portugal": "m.05r4w"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x \nWHERE {\n\tFILTER (?x != ns:m.05r4w)\n\t{ \n\t  ns:m.05r4w ns:location.statistical_region.places_exported_to ?y .\n\t  ?y ns:location.imports_and_exports.exported_to ?x . \n\t}\n\tUNION\n\t{\n\t  ns:m.05r4w ns:location.statistical_region.places_imported_from ?y .\n\t  ?y ns:location.imports_and_exports.imported_from ?x . \n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1875",
        "question": "what type of political system is brazil",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1876",
        "question": "what language did the ancient babylonians speak",
        "answer": [
            "m.0dc0d"
        ],
        "different_answer": [
            [
                "m.0dc0d"
            ],
            [
                "m.0dc0d"
            ]
        ],
        "entity_linking": {
            "Babylonia": "m.0cn3b"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cn3b)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cn3b ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cn3b')\na.add_fact('m.0cn3b', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1877",
        "question": "what kind of painter was wassily kandinsky",
        "answer": [
            "m.0197s6",
            "m.0pybl",
            "m.04191d",
            "m.02xk0r",
            "m.015r61"
        ],
        "different_answer": [
            [
                "m.0197s6",
                "m.0pybl",
                "m.04191d",
                "m.02xk0r",
                "m.015r61"
            ]
        ],
        "entity_linking": {
            "Wassily Kandinsky": "m.0856z"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0856z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0856z ns:visual_art.visual_artist.associated_periods_or_movements ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0856z')\na.add_fact('m.0856z', 'visual_art.visual_artist.associated_periods_or_movements', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1878",
        "question": "what form of government does the united states use",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1879",
        "question": "what money does cuba use",
        "answer": [
            "m.049p6c",
            "m.049p2z"
        ],
        "different_answer": [
            [
                "m.049p6c",
                "m.049p2z"
            ]
        ],
        "entity_linking": {
            "Cuba": "m.0d04z6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d04z6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d04z6 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d04z6')\na.add_fact('m.0d04z6', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1880",
        "question": "who is my representative in illinois house",
        "answer": [
            "m.01281c93",
            "m.012j2y3j",
            "m.0105s6hr",
            "m.0zm_9br",
            "m.0lq0c4x",
            "m.0rpjdpn",
            "m.012kczhw",
            "m.02w7qby",
            "m.0dsb8fw",
            "m.012j2s0k",
            "m.0wxs6vt",
            "m.0hhqr_y",
            "m.012j2rng",
            "m.012j2nvc",
            "m.0128186x",
            "m.0wxvvxx",
            "m.012kc8bx",
            "m.012j2m79",
            "m.0ztkk62",
            "m.0102ldy5"
        ],
        "different_answer": [
            [
                "m.01281c93",
                "m.012j2y3j",
                "m.0105s6hr",
                "m.0zm_9br",
                "m.0lq0c4x",
                "m.0rpjdpn",
                "m.012kczhw",
                "m.02w7qby",
                "m.0dsb8fw",
                "m.012j2s0k",
                "m.0wxs6vt",
                "m.0hhqr_y",
                "m.012j2rng",
                "m.012j2nvc",
                "m.0128186x",
                "m.0wxvvxx",
                "m.012kc8bx",
                "m.012j2m79",
                "m.0ztkk62",
                "m.0102ldy5"
            ]
        ],
        "entity_linking": {
            "Illinois House of Representatives": "m.03j8g1",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03j8g1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03j8g1 ns:government.governmental_body.members ?y .\n?y ns:government.government_position_held.office_holder ?x .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03j8g1')\na.add_fact('m.03j8g1', 'government.governmental_body.members', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1881",
        "question": "what timezone is sweden gmt",
        "answer": [
            "m.02llzg"
        ],
        "different_answer": [
            [
                "m.02llzg"
            ]
        ],
        "entity_linking": {
            "Sweden": "m.0d0vqn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d0vqn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d0vqn ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d0vqn')\na.add_fact('m.0d0vqn', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1882",
        "question": "what was franklin d roosevelt 's job before president",
        "answer": [
            "m.03whjr",
            "m.02_w_r9",
            "m.04kz0b7"
        ],
        "different_answer": [
            [
                "m.03whjr",
                "m.02_w_r9",
                "m.04kz0b7"
            ]
        ],
        "entity_linking": {
            "Franklin D. Roosevelt": "m.02yy8"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  {\n    SELECT ?pFrom \n    WHERE {\n      ns:m.02yy8 ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n      ?y ns:government.government_position_held.office_position_or_title ?x ; \n         ns:government.government_position_held.basic_title ns:m.060c4 ; # President\n         ns:government.government_position_held.from ?pFrom .\n    }\n  }\n  ns:m.02yy8 ns:government.politician.government_positions_held ?y . # Franklin D. Roosevelt\n  ?y ns:government.government_position_held.office_position_or_title ?x ; \n     ns:government.government_position_held.from ?from .\n  \n  FILTER(xsd:dateTime(?pFrom) - xsd:dateTime(?from) > 0)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1883",
        "question": "where did robert downey jr go to jail",
        "answer": [
            "m.02621l5"
        ],
        "different_answer": [
            [
                "m.02621l5"
            ]
        ],
        "entity_linking": {
            "Robert Downey Jr.": "m.016z2j"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016z2j)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016z2j ns:base.prison.prisoner.imprisoned ?y .\n?y ns:base.prison.imprisonment.prison ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016z2j')\na.add_fact('m.016z2j', 'base.prison.prisoner.imprisoned', 'x1')\na.add_fact('x1', 'base.prison.imprisonment.prison', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1884",
        "question": "what degrees did barack obama get",
        "answer": [
            "m.014mlp",
            "m.013zdg"
        ],
        "different_answer": [
            [
                "m.014mlp",
                "m.013zdg"
            ]
        ],
        "entity_linking": {
            "Barack Obama": "m.02mjmr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02mjmr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02mjmr ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02mjmr')\na.add_fact('m.02mjmr', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.degree', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1885",
        "question": "what does god shiva represent",
        "answer": [
            "m.03j6c"
        ],
        "different_answer": [
            [
                "m.03j6c"
            ]
        ],
        "entity_linking": {
            "Shiva": "m.074l5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.074l5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.074l5 ns:religion.deity.deity_of ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.074l5')\na.add_fact('m.074l5', 'religion.deity.deity_of', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1886",
        "question": "what inventions were made by ben franklin",
        "answer": [
            "m.013cqs",
            "m.01zh8g",
            "m.0135nr",
            "m.029mmz"
        ],
        "different_answer": [
            [
                "m.013cqs",
                "m.01zh8g",
                "m.0135nr",
                "m.029mmz"
            ]
        ],
        "entity_linking": {
            "Benjamin Franklin": "m.019fz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019fz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019fz ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019fz')\na.add_fact('m.019fz', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1887",
        "question": "what is the name of the currency used in switzerland",
        "answer": [
            "m.01_h4b"
        ],
        "different_answer": [
            [
                "m.01_h4b"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('m.06mzp', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1888",
        "question": "what year did the milwaukee brewers go to the world series",
        "answer": [
            "m.04j78h"
        ],
        "different_answer": [
            [
                "m.04j78h"
            ]
        ],
        "entity_linking": {
            "World Series": "m.0fjp3"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n  ?x ns:sports.sports_championship_event.championship ns:m.0fjp3 . # World Series\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n  UNION\n  {\n    ?x ns:sports.sports_championship_event.runner_up ns:m.051vz . # Milwaukee Brewers\n  }\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1889",
        "question": "who was vice president with bill clinton",
        "answer": [
            "m.0d05fv"
        ],
        "different_answer": [
            [
                "m.0d05fv"
            ]
        ],
        "entity_linking": {
            "Bill Clinton": "m.0157m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0157m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0157m ns:government.us_president.vice_president ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0157m')\na.add_fact('m.0157m', 'government.us_president.vice_president', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1890",
        "question": "what songs did franz liszt compose",
        "answer": [
            "m.0zvsdt1",
            "m.0_j5zvl",
            "m.0zvpf7_",
            "m.0zv92ck",
            "m.0_j50zw",
            "m.0gcth3c",
            "m.0zvmx6n",
            "m.0_6pfl4",
            "m.04jm_px",
            "m.0zvjgzr",
            "m.0zjmxll",
            "m.0_hz31w",
            "m.0zqhgwg",
            "m.0zvkcq4",
            "m.0_hq1lv",
            "m.0j7n240",
            "m.010xwjh8",
            "m.0zvgj54",
            "m.0gvbrm5",
            "m.0zvdyl8",
            "m.0zk1ppd",
            "m.0zsbvsr",
            "m.0zv4v57",
            "m.0k0rg1s",
            "m.0zldbx2",
            "m.0zv65ps",
            "m.0zslsy0",
            "m.0zv9frc",
            "m.01326119",
            "m.0_j9kvx",
            "m.0_kj8cq",
            "m.0zv5hdx",
            "m.0zskptm",
            "m.0zp4c_5",
            "m.027197r",
            "m.0zp8xxk",
            "m.0pd7f7c",
            "m.0zk9vgt",
            "m.0zlh1yh",
            "m.0zhdzp6",
            "m.0zjxbzb",
            "m.0_hq661",
            "m.0_67vcm",
            "m.0_k8g5x",
            "m.0zsbz63",
            "m.0zs9gw4",
            "m.0_jyz7b",
            "m.0zhmvpz",
            "m.0_67n0j",
            "m.0zsd1pg",
            "m.0zvfzkt",
            "m.0_6dl06",
            "m.0zvl3nk",
            "m.0gctgnp",
            "m.0_k8h3z",
            "m.012txvd4",
            "m.0zk28h0",
            "m.0zvc0z7",
            "m.0zkc2gw",
            "m.03d82l9",
            "m.0_k5txc",
            "m.0_jh98b",
            "m.0zvlk8q",
            "m.0gdjwrq",
            "m.06571n",
            "m.0zs9y4c",
            "m.0zx7zdt",
            "m.0zqldnc",
            "m.0zsgqvj",
            "m.0_7rtmq",
            "m.0_jhg6m",
            "m.0gdjw8d",
            "m.0zsbdw4",
            "m.0_jv_js",
            "m.0_j1mnv",
            "m.0zjlcfy",
            "m.0_6pnpx",
            "m.0zl5xgs",
            "m.0_j2t2d",
            "m.0_6_vp5",
            "m.0_jv68z",
            "m.0_klsjb",
            "m.0_k1vyy",
            "m.0zj7lmr",
            "m.0zx5ryj",
            "m.0zlwkdd",
            "m.0zsnws0",
            "m.0_j741k",
            "m.0_6ky5_",
            "m.0zvlgy0",
            "m.0_jmxr6",
            "m.070lyg",
            "m.0zppnx5",
            "m.0gcwxn7",
            "m.0_jsw1s",
            "m.0_kl2b_",
            "m.0zqzzjs",
            "m.0gdjw7h",
            "m.0zp8646",
            "m.0_j2h4y",
            "m.0gdjwt4",
            "m.0_6dpww",
            "m.0zvm8f4",
            "m.0zkpfnb",
            "m.010_h4tm",
            "m.0zp8_g7",
            "m.0zqxwpl",
            "m.0zsh94g",
            "m.0zpl05p",
            "m.0zvcwyc",
            "m.0_5_5n6",
            "m.0_687jm",
            "m.0zm1y8k",
            "m.0_5_tll",
            "m.0j43t42",
            "m.0_kdg9m",
            "m.0_6cvz6",
            "m.0zkqpvg",
            "m.0zvkcpr",
            "m.0zs93pc",
            "m.0zkm3nk",
            "m.0zh6cr5",
            "m.0pd7f9v",
            "m.0zkdlml",
            "m.0zvnqzc",
            "m.0zvk__v",
            "m.02pl25h",
            "m.0zh7_4z",
            "m.0zsh0k3",
            "m.0zldhcv",
            "m.0c1c9pf",
            "m.0zsj98w",
            "m.0_jskv9",
            "m.0_jkn2d",
            "m.0_hv0n5",
            "m.0_6hdm9",
            "m.0zpl3ln",
            "m.0zr33_n",
            "m.0zv8h23",
            "m.0136h9xq",
            "m.0271938",
            "m.0_jqkg9",
            "m.0_kgy4j",
            "m.0_j5v7p",
            "m.0_678df",
            "m.0zvcwkf",
            "m.0zv6d56",
            "m.0zv46zm",
            "m.0zvh1qq",
            "m.04gkv2m",
            "m.0zhc9zq",
            "m.0zvkfmb",
            "m.0zvb_6d",
            "m.0zv7f56",
            "m.0zskvzf",
            "m.0_6chcq",
            "m.0_jl28w",
            "m.0_6lr33",
            "m.0_jchhj",
            "m.0gctgty",
            "m.0zvlxfv",
            "m.0_jw39s",
            "m.0zlhgvj",
            "m.0zqqvpl",
            "m.0_hxgzt",
            "m.0gdjwsb",
            "m.0_5yytx",
            "m.05zrsg_",
            "m.0zvb1cl",
            "m.0zs9145",
            "m.0zv77bq",
            "m.0zvmczk",
            "m.0zshl1d",
            "m.0_5yjl4",
            "m.0zsgxv3",
            "m.0zv7s7l",
            "m.0_6btzf",
            "m.0_6cv43",
            "m.060wj1",
            "m.0_7kynh",
            "m.0_j7d6r",
            "m.0_hy30s",
            "m.0zvn22x",
            "m.0zv4qnl",
            "m.0zq74gz",
            "m.0_6h3ck",
            "m.0zvcjb3",
            "m.0zs8qr2",
            "m.0zvkjwl",
            "m.0_kh114",
            "m.0_j4brl",
            "m.0zvc_91",
            "m.0_jps4r",
            "m.0_jh08d",
            "m.0zvmzz5",
            "m.0zv7x5h",
            "m.0gctgh9",
            "m.0zvr5nn",
            "m.0zkvv95",
            "m.0zscc9f",
            "m.0_k042l",
            "m.0zjjt2l",
            "m.0zsj3xx",
            "m.0_klb3q",
            "m.0gctgyr",
            "m.0_jb9wm",
            "m.010xz0bw",
            "m.0zvbtct",
            "m.0_629s7",
            "m.0zv9m6r",
            "m.0zsnq7_",
            "m.0zsjgw7",
            "m.0_hx_6x",
            "m.0_6n8s8",
            "m.0zv7839",
            "m.0zv9jy6",
            "m.0zv72h_",
            "m.0zx9jjj",
            "m.0zjzqqy",
            "m.0zvl4z8",
            "m.0zsdvh9",
            "m.0zvjg7y",
            "m.0zp7stm",
            "m.0zv463w",
            "m.0gdjw60",
            "m.0gcwxp4",
            "m.0_jzgc1",
            "m.0zqgzgr",
            "m.0zx4w27",
            "m.0zxj7gb",
            "m.0_jbs7b",
            "m.0zj0wf3",
            "m.0chfwx",
            "m.0zvc6zj",
            "m.0_jtt0s",
            "m.0zvf2n7",
            "m.0zvl_sk",
            "m.0_hqv4l",
            "m.0_hvrfn",
            "m.0_6d90q",
            "m.0_jm48l",
            "m.0zh616r",
            "m.0_6c_87",
            "m.0zkbdlp",
            "m.0_6pd3w",
            "m.0zvr383",
            "m.010vnfnb",
            "m.0_jy26g",
            "m.0zs8kpt",
            "m.0zjzxvn",
            "m.0_j1_td",
            "m.012qh9ny",
            "m.0zqbfvd",
            "m.0zv9hg5",
            "m.0zhkncb",
            "m.0_hv0zr",
            "m.0zxtc9t",
            "m.0zxh_5h",
            "m.0zvfhvv",
            "m.0zslbt2",
            "m.04gm1w5",
            "m.0zxhcjl",
            "m.0zvgtjg",
            "m.0_hvpvc",
            "m.010ylrsg",
            "m.0zshrhb",
            "m.0zvfg04",
            "m.0_6n882",
            "m.0_kgnnw",
            "m.0_jhqny",
            "m.0zv4868",
            "m.0_6q7v2",
            "m.0_jx9l4",
            "m.0zv6_m1",
            "m.0_jb0n8",
            "m.0zx4wbc",
            "m.04hqzg",
            "m.0zxgvnz",
            "m.0zv4wxn",
            "m.0zvg_9y",
            "m.0_h_tyn",
            "m.0zqlyzk",
            "m.0zqmzs_",
            "m.0zj8d6y",
            "m.0_hz3h2",
            "m.0zj170z",
            "m.0zvgv_f",
            "m.0zsjghw",
            "m.0zv5_qc",
            "m.0_k2hjr",
            "m.0zlxw04",
            "m.04cwnbx",
            "m.0zsb8ly",
            "m.0zvszzx",
            "m.0zhxggl",
            "m.076_vg",
            "m.0zh304l",
            "m.0zvgkpb",
            "m.06fhy0",
            "m.0zqwkmf",
            "m.0zv6mlt",
            "m.0_jf1c3",
            "m.0pd7f92",
            "m.0_k0f1h",
            "m.0_jrj98",
            "m.0zv8f7n",
            "m.0zsqhq2",
            "m.0zvlph_",
            "m.0_jmslh",
            "m.0_jj3vt",
            "m.0_frzx1",
            "m.0_kl48s",
            "m.0_hwq3x",
            "m.0zvdkwx",
            "m.0h42bj",
            "m.0zvtsq3",
            "m.0_j6829",
            "m.0zsjrq9",
            "m.0zjk847",
            "g.1235wfk4",
            "m.0zvrbqb",
            "m.0zv5607",
            "m.0111sz27",
            "m.093r39",
            "m.0zpqxy7",
            "m.0_j56z7",
            "m.03c2wb1",
            "m.0zxndyj",
            "m.0zqxjvj",
            "m.0_7bm2y",
            "m.0zk3833",
            "m.0zv4sx_",
            "m.0zsf004",
            "m.0zvcn9m",
            "m.0gctghk",
            "m.0gctgql",
            "m.0gctgpm",
            "m.0_kknxt",
            "m.0_jwpdc",
            "m.0zvlmr9",
            "m.0zpzvvv",
            "m.0_kmg7n",
            "m.0zk8plm",
            "m.0h1dgb2",
            "m.0zv5njx",
            "m.0zvq0cg",
            "m.0zvpg7j",
            "m.0zspwpm",
            "m.0zvftcj",
            "m.0zqhwvg",
            "m.0zvm149",
            "m.0509_d",
            "m.0_jkv2b",
            "m.0_jrb0n",
            "m.010t5vss",
            "m.0gcwxnk",
            "m.0zv6svj",
            "m.0zvmy33",
            "m.0zv4mq3",
            "m.012rs1yn",
            "m.0zvl80t",
            "m.0_jzccw",
            "m.0zhm7b6",
            "m.0_jt5m7",
            "m.0zsj1sh",
            "m.0gds0k8",
            "m.064bdl",
            "m.0zsltdr",
            "m.0zshgjr",
            "m.0zvr58j",
            "m.0zvkwmd",
            "m.0zscssg",
            "m.0zxhh5n",
            "m.0_7wbs8",
            "m.0111plvp",
            "m.0zvgg74",
            "m.0zv6mjm",
            "m.0zhb9lb",
            "m.0zv44tc",
            "m.0zsjy9y",
            "m.0zq4fzq",
            "m.0zv967p",
            "m.01v8ts",
            "m.0_6jpg7",
            "m.0zvbbhm",
            "m.0zqw_pt",
            "m.0zvhv9n",
            "m.0zp_m4m",
            "m.0gdjwfb",
            "m.02rgtp1",
            "m.0_j5qkf",
            "m.0zvpt8b",
            "m.0zph5c9",
            "m.0zs8v0s",
            "m.04csqyj",
            "m.09gb9cp",
            "m.0_6nzl8",
            "m.0_j6b9s",
            "m.0_6678z",
            "m.0_6nj66",
            "m.0_hr0l3",
            "m.0_jd90y",
            "m.0zv5djm",
            "m.012s01nw",
            "m.027067w",
            "m.0zx88h6",
            "m.0_5zcx_",
            "m.0_7nyl3",
            "m.0zv917z",
            "m.0zvl07l",
            "m.026dh9w",
            "m.026h0ny",
            "m.0_6pknn",
            "m.0zsm4l7",
            "m.0_jtq5q",
            "m.0zvczyv",
            "m.0zvdd4t",
            "m.0gdjwh7",
            "m.0_zm3k2",
            "m.0zshs5p",
            "m.010tvp4y",
            "m.0_dkg10",
            "m.0112d2jj",
            "m.0zx49c3",
            "m.0zv51tp",
            "m.0zvqb2g",
            "m.0zv47zg",
            "m.0zv9b1p",
            "m.0zx95sn",
            "m.0_6y5_j",
            "m.0zvnj4d",
            "m.0zsdcb_",
            "m.0zr3x3t",
            "m.0zvrl6f",
            "m.0_6p7gj",
            "m.026dhf_",
            "m.0_7m01t",
            "m.0gctgj_",
            "m.0zvc277",
            "m.0zlzv51",
            "m.0zq7236",
            "m.08pp46",
            "m.0_63ml2",
            "m.0_6bp8p",
            "m.0zqhbpx",
            "m.0_6797v",
            "m.0zjt0lb",
            "m.0_69fg6",
            "m.0_jq800",
            "m.0_j9fgn",
            "m.0zvjtb7",
            "m.0_jp5z0",
            "m.0_j7y2j",
            "m.0gdphzq",
            "m.0zx8kkr",
            "m.0_jcmw5",
            "m.0zxyw51",
            "m.0_6nfht",
            "m.0zsg81f",
            "m.0zvnkqx",
            "m.0zsljt_",
            "m.0zvhjx_",
            "m.0zlntld",
            "m.0zq3z68",
            "m.0_hvgyl",
            "m.0zsnkng",
            "m.0zkgy4w",
            "m.0zq10fr",
            "m.0_6q841",
            "m.0bx_6tv",
            "m.010yv41_",
            "m.010zp_k7",
            "m.0272hyp",
            "m.0zvd87n",
            "m.0zv7sbj",
            "m.0_k7xc4",
            "m.0zhdq_k",
            "m.0_jtvm7",
            "m.0_hyl15",
            "m.0zvblhz",
            "m.0_j_h00",
            "m.0_k5z3t",
            "m.0_k12xr",
            "m.012rm3kh",
            "m.0zj9v48",
            "m.0_735lb",
            "m.0_5zzn1",
            "m.0_htrhs",
            "m.0zsnbcw",
            "m.0zj22vc",
            "m.0_k7r_6",
            "m.0cq468",
            "m.0zpn84l",
            "m.09gcpc6",
            "m.0zkkvnd",
            "m.0_hw6m1",
            "m.0_kch83",
            "m.0_k80_t",
            "m.0zhywqf",
            "m.0zvk77b",
            "m.0_k8w7x",
            "m.0_5y20_",
            "m.0_69914",
            "m.0zp9n0p",
            "m.0zvn9rt",
            "m.0_j_2n4",
            "m.0_hzd24",
            "m.0zvhg1y",
            "m.0zvmngk",
            "m.0zqbh1g",
            "m.0zklkdl",
            "m.0zvr653",
            "m.0_7j_vd",
            "m.0_j3fc_",
            "m.0zx2c1l",
            "m.0zv8l5n",
            "m.0zsnxq1",
            "m.0zsh_rj",
            "m.0zkn057",
            "m.0_k3r2f",
            "m.0zpr9x8",
            "m.0_jqmjr",
            "m.0zvcw2d",
            "m.0zsmvl3",
            "m.0zvg63w",
            "m.0zshzqf",
            "m.0zs9jln",
            "m.0_5zm1r",
            "m.010yzhb_",
            "m.02pl2sr",
            "m.0_hs2dq",
            "m.0zvnxj3",
            "m.0zphdb5",
            "m.0zv56p0",
            "m.0_kmdzc",
            "m.0zkmrw3",
            "m.0zvd1_2",
            "m.0_6lqqp",
            "m.0zv4n3n",
            "m.0zsk1c8",
            "m.0zqxjvc",
            "m.0zvgqv_",
            "m.0_6nzqr",
            "m.0_hx8q9",
            "m.0zkdxqh",
            "m.0j7myct",
            "m.0zp99ms",
            "m.0c1c9kt",
            "m.0_6nqg3",
            "m.0pd7f6v",
            "m.0zvh7hz",
            "m.0zq9c1c",
            "m.0zpw6rk",
            "m.0zsqks3",
            "m.0zxx6xk",
            "m.0zv78_r",
            "m.0zxj8d1",
            "m.0_jpqjm",
            "m.0_kgn3h",
            "m.0zh3j8j",
            "m.0_j8y9s",
            "m.0gdjwg0",
            "m.0zvm4y6",
            "m.0zvjxqq",
            "m.0_6n6zj",
            "m.0_jlmwx",
            "m.0jwsjv4",
            "m.0_j5ttp",
            "m.0zkhv_k",
            "m.0zqys2p",
            "m.0zj0w5h",
            "m.0zvfhkb",
            "m.0zv5sd_",
            "m.0zvbp2t",
            "m.0gctgl6",
            "m.0zxnzng",
            "m.0_7p2r6",
            "m.0zlrrg1",
            "m.0gctgv7",
            "m.0zsfvk4",
            "m.0zshy90",
            "m.0_603c4",
            "m.0j7j269",
            "m.0_65kj2",
            "m.0zxl64m",
            "m.0_k5_7f",
            "m.0zs8zwj",
            "m.05zyy17",
            "m.0zhz5dw",
            "m.0_k1zfy",
            "m.0_5zy57",
            "m.0zsh4t9",
            "m.0_j7fnl",
            "m.0_jcd8n",
            "m.0zp4f_l",
            "m.0_jwycf",
            "m.0zr29b8",
            "m.0zk09kw",
            "m.0_jx27k",
            "m.0zsm553",
            "m.0_jf2lf",
            "m.0_hvq9m",
            "m.0zv5f5s",
            "m.0_k9270",
            "m.0_6cv0q",
            "m.0_jq62f",
            "m.0_6g5_9",
            "m.0zl7dhj",
            "m.0_k7jrj",
            "m.02xbdck",
            "m.0zlqwtq",
            "m.0gctgjs",
            "m.0zvmsdw",
            "m.0zvq3fp",
            "m.0zsjlb2",
            "m.0zvjts6",
            "m.0_k4wp1",
            "m.0_66r3j",
            "m.0_kdclb",
            "m.0zsqw6z",
            "m.0zvv0q1",
            "m.0_j3jj7",
            "m.0zs8mdw",
            "m.0zvdj3s",
            "m.0zq797c",
            "m.0zjgqjt",
            "m.0zvgll1",
            "m.0zxvq8b",
            "m.0zs8bz5",
            "m.0_km0pr",
            "m.0zv7r83",
            "m.0_k5h1b",
            "m.0_jwb1q",
            "m.0zpxl0n",
            "m.0_k7tcp",
            "m.0rpglnv",
            "m.0_620tb",
            "m.0zv48td",
            "m.0_jlvh2",
            "m.0zqsknl",
            "m.0zjkxm2",
            "m.0_j16n_",
            "m.0zkhdp6",
            "m.010rq_ds",
            "m.0_6pllm",
            "m.0111rknp",
            "m.027ltlc",
            "m.09c8c3",
            "m.0_jz2j8",
            "m.0zxsg9z",
            "m.010z9xx3",
            "m.0zphw6n",
            "m.0zlpc6t",
            "m.0_j2rx1",
            "m.0zsgxk4",
            "m.0_kdvb9",
            "m.0zvj1m0",
            "m.0zk593z",
            "m.0zsm5b4",
            "m.0_h_3jr",
            "m.012rmfq2",
            "m.0zvcnkt",
            "m.0zv4sxx",
            "m.0zq33hb",
            "m.0_j8rjg",
            "m.0zlhgnv",
            "m.0zlsxz2",
            "m.0zv8gc0",
            "m.0_hr9fp",
            "m.0zv9trf",
            "m.0zsm3q_",
            "m.0zv6l1t",
            "m.0zp_kv0",
            "m.0zskmjy",
            "m.0_j4v93",
            "m.0zsl61h",
            "m.0_6kdk6",
            "m.010xrcv1",
            "m.0zlwbzp",
            "m.0_jm_x6",
            "m.0_klt0f",
            "m.027190w",
            "m.0zv6vhc",
            "m.010xzd84",
            "m.0zhxt9m",
            "m.0_75zc1",
            "m.0zvl317",
            "m.0pd7fcy",
            "m.0zv4fbs",
            "m.0139fb8r",
            "m.0zvd1_8",
            "m.08db_x",
            "m.0zsm562",
            "m.0650nn",
            "m.0_6pwrl",
            "m.0zvfjmy",
            "m.0_jrc1v",
            "m.03c2fb3",
            "g.122bxplw",
            "m.0zpnz8y",
            "m.0_hqdyd",
            "m.0zl17yh",
            "m.0zv9bjr",
            "m.0gdpj4n",
            "m.0_jqxz_",
            "m.010sktc9",
            "m.0zvqmxn",
            "m.0zvc0fc",
            "m.0zr5tpn",
            "m.03c2vm3",
            "m.0_690zn",
            "m.0_j9ymm",
            "m.0gctgq8",
            "m.0zx9lg4",
            "m.012rmc_6",
            "m.0_jz1hv",
            "m.0zptwrx",
            "m.0zvbc2m",
            "m.0zxhhj7",
            "m.0zvb9w6",
            "m.0_jzj6t",
            "m.0_6f6qm",
            "m.0112k7sg",
            "m.0gctghv",
            "m.0zv7qdr",
            "m.0zj78m1",
            "m.0gds0jl",
            "m.0_jpl_g",
            "m.012pkms8",
            "m.0zv7wl1",
            "m.0_j34rt",
            "m.0zvr65g",
            "m.0c1ghr6",
            "m.0zp7c05",
            "m.0zpczyb",
            "m.0_j8lb6",
            "m.0zv4kl1",
            "m.0zk4pdz",
            "m.0zvqqnh",
            "m.0zv9q01",
            "m.0_6bbsj",
            "m.0zshf14",
            "m.0zkd68l",
            "m.0zm3sy6",
            "m.0_7yz11",
            "m.0zsk9vy",
            "m.0zvgznj",
            "m.0zvcrhr",
            "m.0zxxs9k",
            "m.0zp7p5q",
            "m.0zsk781",
            "m.0zvcrnw",
            "m.0_j4zg5",
            "m.0zp85wb",
            "m.0zpmrb7",
            "m.0_6__pc",
            "m.0zltqdr",
            "m.0_7b4_4",
            "m.0zv8tp5",
            "m.0zqtbr2",
            "m.0zqknvb",
            "m.0zxj0b3",
            "m.0zld9tx",
            "m.0zvh812",
            "m.05cgkm",
            "m.0_65d9w",
            "m.0gcwxqg",
            "m.012rr3sd",
            "m.0zv7gg8",
            "m.0_5_c5y",
            "m.03cqyp7",
            "m.0zvpmxw",
            "m.0gctgwr",
            "m.0_jzglv",
            "m.0gdpj3d",
            "m.0zhss7z",
            "m.0zvhk3b",
            "m.0_k1cv9",
            "m.0_jy4qw",
            "m.0zv4fzg",
            "m.0zk2cx7",
            "m.0_77zpg",
            "m.0gcwxlt",
            "m.02612wf",
            "m.0zx8vfg",
            "m.0zvg51_",
            "m.0g52f7",
            "m.0zvs_ty",
            "m.0gctgnc",
            "m.0zhgsrh",
            "m.0zq43hs",
            "m.0zv5482",
            "m.0zqfmw7",
            "m.0gctgxr",
            "m.0zsjynd",
            "m.0zr0_fj",
            "m.0zxh3_2",
            "m.0_6dk_9",
            "m.03c33k4",
            "m.0zh13q9",
            "m.0zvv1j5",
            "m.0_6nzwm",
            "m.0_hwy34",
            "m.0zvln3p",
            "m.0zvmlvj",
            "m.0zvb6b0",
            "m.0_j2wm8",
            "m.0_5_tpf",
            "m.0_hy6ff",
            "m.0_6cvxc",
            "m.0_68vl1",
            "m.0_6pxbf",
            "m.0zp7rh5",
            "m.0zlgv4f",
            "m.0zjh6j6",
            "m.0zvnqvd",
            "m.0zvl4m7",
            "m.012rs0rl",
            "m.0_jy398",
            "m.0zh4t1x",
            "m.0_kc4xt",
            "m.027p4hb",
            "m.0zv53_5",
            "m.0_j4x_b",
            "m.0281swx",
            "m.0zqvs04",
            "m.0_5y7yn",
            "m.0zvp668",
            "m.0_jwlfl",
            "m.0_6mq_1",
            "m.0_6btk_",
            "m.0_7cpgx",
            "m.0zvr5rg",
            "m.0_kh0xh",
            "m.0gdjwvk",
            "m.0zvc8k8",
            "m.0_6nqdt",
            "m.0zvmx5k",
            "m.0zv5fd9",
            "m.0zq5470",
            "m.0_hs5rn",
            "m.0pd7fd6",
            "m.02qj03k",
            "m.0zs96rb",
            "m.0zv9p46",
            "m.0zvnn01",
            "m.0zpzg5l",
            "m.0zq50nx",
            "m.0zvp45x",
            "m.0zxttjn",
            "m.0_6hwmv",
            "m.02pl1wj",
            "m.0zr5v53",
            "m.09gdbkn",
            "m.0zlsts8",
            "m.0zvcq2c",
            "m.0zjrgg0",
            "m.0zxqlqm",
            "m.0_63th4",
            "m.0_hsn64",
            "m.0zvp07j",
            "m.0_66l8y",
            "m.0gctgn_",
            "m.0zsclh4",
            "m.0zsn9vs",
            "m.0gdpj1r",
            "m.02z33nw",
            "m.0zv4p06",
            "m.0zvcwk6",
            "m.01vnc8",
            "m.0_hv9l3",
            "m.0zshlyh",
            "m.0zvmz0j",
            "m.0zqthnq",
            "m.0_67mfy",
            "m.0zslkmr",
            "m.0zvkbsh",
            "m.0zsm3b4",
            "m.03hkrph",
            "m.0_hw2gs",
            "m.0_80k19",
            "m.0_jkmmk",
            "m.0_jkc_7",
            "m.0102jhf9",
            "m.0zvqf0b",
            "m.0zsqwtj",
            "m.0zvc3n1",
            "m.0_j8scb",
            "m.0_66gn_",
            "m.0zxczlq",
            "m.0zsdx6j",
            "m.0_k8y_9",
            "m.0zsjjhl",
            "m.0zl10ls",
            "m.0zv5r3q",
            "m.0zl84x2",
            "m.0_k5tlv",
            "m.0_6np4d",
            "m.0zv9_30",
            "m.0gdpj0d",
            "m.02rwyr2",
            "m.0zxj4mq",
            "m.0zsk0n7",
            "m.0_60g6b",
            "m.046tk4",
            "m.0zq39sx",
            "m.0zscxhr",
            "m.0_jssrj",
            "m.0zsjyhn",
            "m.0zvrdk4",
            "m.093r4b",
            "m.0zsc49m",
            "m.010v18r4",
            "m.0zvq4x8",
            "m.0zvbjpj",
            "m.0zr2nkk",
            "m.0_6pkp2",
            "m.0_hzh_w",
            "m.0zvgbxy",
            "m.02612sb",
            "m.02q87w3",
            "m.0zh47g4",
            "m.0zsp37c",
            "m.0zv873r",
            "m.0gctgp9",
            "m.0zvmhj1",
            "m.0_k2w2c",
            "m.010_2s39",
            "m.0zsh0kw",
            "m.0zq_2js",
            "m.0zsp7j0",
            "m.05p2482",
            "m.06b73x",
            "m.0zvclt7",
            "m.0_j66kk",
            "m.0zq4cjk",
            "m.0_65nl4",
            "m.0zv6ctd",
            "m.0gdpj2x",
            "m.0c1gj7f",
            "m.0zslkjc",
            "m.0zvbmcc",
            "m.0_6nrm4",
            "m.0zj9n6t",
            "m.0_7234b",
            "m.0zvm_94",
            "m.0pd7fcn",
            "m.0_jms1l",
            "m.0_jndzb",
            "m.0zq2bcd",
            "m.02qyp74",
            "m.0b6lsc7",
            "m.0zh8zg7",
            "m.0zx715q",
            "m.0zq_8wm",
            "m.05zvtqk",
            "m.0zsjdmq",
            "m.0_hw1pk",
            "m.0zvm26v",
            "m.0zvhrjh",
            "m.0zsklrc",
            "m.08ftns",
            "m.0zv6g1_",
            "m.0zxr3f2",
            "m.0zv954m",
            "m.0_7s309",
            "m.026hcjw",
            "m.0_6fqpg",
            "m.0_6nx5f",
            "m.0zv686g",
            "m.0zpkfbh",
            "m.0_kky8l",
            "m.0_j_43g",
            "m.0_jt5p6",
            "m.0zvrvbp",
            "m.0zpsp0v",
            "m.0zv4z0j",
            "m.0zp6qyb",
            "m.0zsg6l6",
            "m.0_hv1ml",
            "m.0zplsm9",
            "m.0zsd70y",
            "m.0zx5v6j",
            "m.0_js2c2",
            "m.0zkf0s1",
            "m.0_jzr19",
            "m.0zjq8q_",
            "m.0zprmr4",
            "m.0zlx8ty",
            "m.0zsdbc7",
            "m.04f0b80",
            "m.0dryn0m",
            "m.0_62shp",
            "m.0zjnn4t",
            "m.0zv67d0",
            "m.0_hz4df",
            "m.0zvkpmk",
            "m.053lkj",
            "m.0_6p0m3",
            "m.010tqjtl",
            "m.0zv4x13",
            "m.0_jg9bc",
            "m.0gdjwtg",
            "m.0zqn246",
            "m.0zhw_6d",
            "m.0gcwxm4",
            "m.0zv55w6",
            "m.0gdpj1c",
            "m.0_jtvb6",
            "m.0zsdf99",
            "m.0_6mh8q",
            "m.0_6fxlh",
            "m.0_jtl45",
            "m.0zv9y53",
            "m.0zp7_fz",
            "m.0zsq1nx",
            "m.0_kd3k_",
            "m.0gdjw5b",
            "m.0zsbd5c",
            "m.0_hzd3w",
            "m.0zl9xd1",
            "m.0zsjbl_",
            "m.0zpy618",
            "m.0zvmkxn",
            "m.0gdphzz",
            "m.0zkb_rb",
            "m.0zv8c2g",
            "m.0zqfznl",
            "m.0zvkgs6",
            "m.0_6gzmy",
            "m.0zj3yh8",
            "m.0zxpntg",
            "m.0zq9xcx",
            "m.0gdjw6y",
            "m.0_hyh80",
            "m.0zv9d2m",
            "m.047td29",
            "m.0_k1p42",
            "m.0zkrwc5",
            "m.0_hnybx",
            "m.0_jb1d8",
            "m.0zvll12",
            "m.0_hqwf4",
            "m.04r0d6",
            "m.0zsd9m4",
            "m.0zkmn74",
            "m.0_k8mfj",
            "m.0zskcgc",
            "m.0zr0xnp",
            "m.04hqn2",
            "m.0zvkpgy",
            "m.0zv9_1c",
            "m.0zj2n1k",
            "m.0_7wy4d",
            "m.010zg4h2",
            "m.0zm40hc",
            "m.0zvr1_r",
            "m.0zksllg",
            "m.0zlwd67",
            "m.0zh22tw",
            "m.0zvfnjf",
            "m.0_k7_83",
            "m.0zvgg5p",
            "m.0zv61hk",
            "m.0_j2p1_",
            "m.0zv9kx_",
            "m.0zr1_3r",
            "m.02639w6",
            "m.0_k7v7x",
            "m.0_jz_2s",
            "m.0zr6y77",
            "m.0_hnyjz",
            "m.0zx4rgt",
            "m.0_kclgl",
            "m.0zkwzgb",
            "m.0zp5gxt",
            "m.0zsjwcr",
            "m.0zxd069",
            "m.0zvgk49",
            "m.0_6nx58",
            "m.0gdpj03",
            "m.0zsds29",
            "m.0zvjr91",
            "m.0zv7t_9",
            "m.0_hy123",
            "m.0zvqf1v",
            "m.0_k0wtn",
            "m.0zvn5hd",
            "m.0_6pd78",
            "m.0zsgdtw",
            "m.0_jpgcp",
            "m.0zvrvxc",
            "m.0zvhk4y",
            "m.0zvp52f",
            "m.0zq5yvd",
            "m.0_6p0fw",
            "m.0_k8585",
            "m.0zvs011",
            "m.0_jvzj6",
            "m.0zskwrz",
            "m.0zx9w6p",
            "m.0_k7d20",
            "m.0zjt7ql",
            "m.0zv4g6z",
            "m.0_6pdmh",
            "m.0gcwxqs",
            "m.0zldq44",
            "m.0_67897",
            "m.0_jb406",
            "m.0zvpm0b"
        ],
        "different_answer": [
            [
                "m.0zvsdt1",
                "m.0_j5zvl",
                "m.0zvpf7_",
                "m.0zv92ck",
                "m.0_j50zw",
                "m.0gcth3c",
                "m.0zvmx6n",
                "m.0_6pfl4",
                "m.04jm_px",
                "m.0zvjgzr",
                "m.0zjmxll",
                "m.0_hz31w",
                "m.0zqhgwg",
                "m.0zvkcq4",
                "m.0_hq1lv",
                "m.0j7n240",
                "m.010xwjh8",
                "m.0zvgj54",
                "m.0gvbrm5",
                "m.0zvdyl8",
                "m.0zk1ppd",
                "m.0zsbvsr",
                "m.0zv4v57",
                "m.0k0rg1s",
                "m.0zldbx2",
                "m.0zv65ps",
                "m.0zslsy0",
                "m.0zv9frc",
                "m.01326119",
                "m.0_j9kvx",
                "m.0_kj8cq",
                "m.0zv5hdx",
                "m.0zskptm",
                "m.0zp4c_5",
                "m.027197r",
                "m.0zp8xxk",
                "m.0pd7f7c",
                "m.0zk9vgt",
                "m.0zlh1yh",
                "m.0zhdzp6",
                "m.0zjxbzb",
                "m.0_hq661",
                "m.0_67vcm",
                "m.0_k8g5x",
                "m.0zsbz63",
                "m.0zs9gw4",
                "m.0_jyz7b",
                "m.0zhmvpz",
                "m.0_67n0j",
                "m.0zsd1pg",
                "m.0zvfzkt",
                "m.0_6dl06",
                "m.0zvl3nk",
                "m.0gctgnp",
                "m.0_k8h3z",
                "m.012txvd4",
                "m.0zk28h0",
                "m.0zvc0z7",
                "m.0zkc2gw",
                "m.03d82l9",
                "m.0_k5txc",
                "m.0_jh98b",
                "m.0zvlk8q",
                "m.0gdjwrq",
                "m.06571n",
                "m.0zs9y4c",
                "m.0zx7zdt",
                "m.0zqldnc",
                "m.0zsgqvj",
                "m.0_7rtmq",
                "m.0_jhg6m",
                "m.0gdjw8d",
                "m.0zsbdw4",
                "m.0_jv_js",
                "m.0_j1mnv",
                "m.0zjlcfy",
                "m.0_6pnpx",
                "m.0zl5xgs",
                "m.0_j2t2d",
                "m.0_6_vp5",
                "m.0_jv68z",
                "m.0_klsjb",
                "m.0_k1vyy",
                "m.0zj7lmr",
                "m.0zx5ryj",
                "m.0zlwkdd",
                "m.0zsnws0",
                "m.0_j741k",
                "m.0_6ky5_",
                "m.0zvlgy0",
                "m.0_jmxr6",
                "m.070lyg",
                "m.0zppnx5",
                "m.0gcwxn7",
                "m.0_jsw1s",
                "m.0_kl2b_",
                "m.0zqzzjs",
                "m.0gdjw7h",
                "m.0zp8646",
                "m.0_j2h4y",
                "m.0gdjwt4",
                "m.0_6dpww",
                "m.0zvm8f4",
                "m.0zkpfnb",
                "m.010_h4tm",
                "m.0zp8_g7",
                "m.0zqxwpl",
                "m.0zsh94g",
                "m.0zpl05p",
                "m.0zvcwyc",
                "m.0_5_5n6",
                "m.0_687jm",
                "m.0zm1y8k",
                "m.0_5_tll",
                "m.0j43t42",
                "m.0_kdg9m",
                "m.0_6cvz6",
                "m.0zkqpvg",
                "m.0zvkcpr",
                "m.0zs93pc",
                "m.0zkm3nk",
                "m.0zh6cr5",
                "m.0pd7f9v",
                "m.0zkdlml",
                "m.0zvnqzc",
                "m.0zvk__v",
                "m.02pl25h",
                "m.0zh7_4z",
                "m.0zsh0k3",
                "m.0zldhcv",
                "m.0c1c9pf",
                "m.0zsj98w",
                "m.0_jskv9",
                "m.0_jkn2d",
                "m.0_hv0n5",
                "m.0_6hdm9",
                "m.0zpl3ln",
                "m.0zr33_n",
                "m.0zv8h23",
                "m.0136h9xq",
                "m.0271938",
                "m.0_jqkg9",
                "m.0_kgy4j",
                "m.0_j5v7p",
                "m.0_678df",
                "m.0zvcwkf",
                "m.0zv6d56",
                "m.0zv46zm",
                "m.0zvh1qq",
                "m.04gkv2m",
                "m.0zhc9zq",
                "m.0zvkfmb",
                "m.0zvb_6d",
                "m.0zv7f56",
                "m.0zskvzf",
                "m.0_6chcq",
                "m.0_jl28w",
                "m.0_6lr33",
                "m.0_jchhj",
                "m.0gctgty",
                "m.0zvlxfv",
                "m.0_jw39s",
                "m.0zlhgvj",
                "m.0zqqvpl",
                "m.0_hxgzt",
                "m.0gdjwsb",
                "m.0_5yytx",
                "m.05zrsg_",
                "m.0zvb1cl",
                "m.0zs9145",
                "m.0zv77bq",
                "m.0zvmczk",
                "m.0zshl1d",
                "m.0_5yjl4",
                "m.0zsgxv3",
                "m.0zv7s7l",
                "m.0_6btzf",
                "m.0_6cv43",
                "m.060wj1",
                "m.0_7kynh",
                "m.0_j7d6r",
                "m.0_hy30s",
                "m.0zvn22x",
                "m.0zv4qnl",
                "m.0zq74gz",
                "m.0_6h3ck",
                "m.0zvcjb3",
                "m.0zs8qr2",
                "m.0zvkjwl",
                "m.0_kh114",
                "m.0_j4brl",
                "m.0zvc_91",
                "m.0_jps4r",
                "m.0_jh08d",
                "m.0zvmzz5",
                "m.0zv7x5h",
                "m.0gctgh9",
                "m.0zvr5nn",
                "m.0zkvv95",
                "m.0zscc9f",
                "m.0_k042l",
                "m.0zjjt2l",
                "m.0zsj3xx",
                "m.0_klb3q",
                "m.0gctgyr",
                "m.0_jb9wm",
                "m.010xz0bw",
                "m.0zvbtct",
                "m.0_629s7",
                "m.0zv9m6r",
                "m.0zsnq7_",
                "m.0zsjgw7",
                "m.0_hx_6x",
                "m.0_6n8s8",
                "m.0zv7839",
                "m.0zv9jy6",
                "m.0zv72h_",
                "m.0zx9jjj",
                "m.0zjzqqy",
                "m.0zvl4z8",
                "m.0zsdvh9",
                "m.0zvjg7y",
                "m.0zp7stm",
                "m.0zv463w",
                "m.0gdjw60",
                "m.0gcwxp4",
                "m.0_jzgc1",
                "m.0zqgzgr",
                "m.0zx4w27",
                "m.0zxj7gb",
                "m.0_jbs7b",
                "m.0zj0wf3",
                "m.0chfwx",
                "m.0zvc6zj",
                "m.0_jtt0s",
                "m.0zvf2n7",
                "m.0zvl_sk",
                "m.0_hqv4l",
                "m.0_hvrfn",
                "m.0_6d90q",
                "m.0_jm48l",
                "m.0zh616r",
                "m.0_6c_87",
                "m.0zkbdlp",
                "m.0_6pd3w",
                "m.0zvr383",
                "m.010vnfnb",
                "m.0_jy26g",
                "m.0zs8kpt",
                "m.0zjzxvn",
                "m.0_j1_td",
                "m.012qh9ny",
                "m.0zqbfvd",
                "m.0zv9hg5",
                "m.0zhkncb",
                "m.0_hv0zr",
                "m.0zxtc9t",
                "m.0zxh_5h",
                "m.0zvfhvv",
                "m.0zslbt2",
                "m.04gm1w5",
                "m.0zxhcjl",
                "m.0zvgtjg",
                "m.0_hvpvc",
                "m.010ylrsg",
                "m.0zshrhb",
                "m.0zvfg04",
                "m.0_6n882",
                "m.0_kgnnw",
                "m.0_jhqny",
                "m.0zv4868",
                "m.0_6q7v2",
                "m.0_jx9l4",
                "m.0zv6_m1",
                "m.0_jb0n8",
                "m.0zx4wbc",
                "m.04hqzg",
                "m.0zxgvnz",
                "m.0zv4wxn",
                "m.0zvg_9y",
                "m.0_h_tyn",
                "m.0zqlyzk",
                "m.0zqmzs_",
                "m.0zj8d6y",
                "m.0_hz3h2",
                "m.0zj170z",
                "m.0zvgv_f",
                "m.0zsjghw",
                "m.0zv5_qc",
                "m.0_k2hjr",
                "m.0zlxw04",
                "m.04cwnbx",
                "m.0zsb8ly",
                "m.0zvszzx",
                "m.0zhxggl",
                "m.076_vg",
                "m.0zh304l",
                "m.0zvgkpb",
                "m.06fhy0",
                "m.0zqwkmf",
                "m.0zv6mlt",
                "m.0_jf1c3",
                "m.0pd7f92",
                "m.0_k0f1h",
                "m.0_jrj98",
                "m.0zv8f7n",
                "m.0zsqhq2",
                "m.0zvlph_",
                "m.0_jmslh",
                "m.0_jj3vt",
                "m.0_frzx1",
                "m.0_kl48s",
                "m.0_hwq3x",
                "m.0zvdkwx",
                "m.0h42bj",
                "m.0zvtsq3",
                "m.0_j6829",
                "m.0zsjrq9",
                "m.0zjk847",
                "g.1235wfk4",
                "m.0zvrbqb",
                "m.0zv5607",
                "m.0111sz27",
                "m.093r39",
                "m.0zpqxy7",
                "m.0_j56z7",
                "m.03c2wb1",
                "m.0zxndyj",
                "m.0zqxjvj",
                "m.0_7bm2y",
                "m.0zk3833",
                "m.0zv4sx_",
                "m.0zsf004",
                "m.0zvcn9m",
                "m.0gctghk",
                "m.0gctgql",
                "m.0gctgpm",
                "m.0_kknxt",
                "m.0_jwpdc",
                "m.0zvlmr9",
                "m.0zpzvvv",
                "m.0_kmg7n",
                "m.0zk8plm",
                "m.0h1dgb2",
                "m.0zv5njx",
                "m.0zvq0cg",
                "m.0zvpg7j",
                "m.0zspwpm",
                "m.0zvftcj",
                "m.0zqhwvg",
                "m.0zvm149",
                "m.0509_d",
                "m.0_jkv2b",
                "m.0_jrb0n",
                "m.010t5vss",
                "m.0gcwxnk",
                "m.0zv6svj",
                "m.0zvmy33",
                "m.0zv4mq3",
                "m.012rs1yn",
                "m.0zvl80t",
                "m.0_jzccw",
                "m.0zhm7b6",
                "m.0_jt5m7",
                "m.0zsj1sh",
                "m.0gds0k8",
                "m.064bdl",
                "m.0zsltdr",
                "m.0zshgjr",
                "m.0zvr58j",
                "m.0zvkwmd",
                "m.0zscssg",
                "m.0zxhh5n",
                "m.0_7wbs8",
                "m.0111plvp",
                "m.0zvgg74",
                "m.0zv6mjm",
                "m.0zhb9lb",
                "m.0zv44tc",
                "m.0zsjy9y",
                "m.0zq4fzq",
                "m.0zv967p",
                "m.01v8ts",
                "m.0_6jpg7",
                "m.0zvbbhm",
                "m.0zqw_pt",
                "m.0zvhv9n",
                "m.0zp_m4m",
                "m.0gdjwfb",
                "m.02rgtp1",
                "m.0_j5qkf",
                "m.0zvpt8b",
                "m.0zph5c9",
                "m.0zs8v0s",
                "m.04csqyj",
                "m.09gb9cp",
                "m.0_6nzl8",
                "m.0_j6b9s",
                "m.0_6678z",
                "m.0_6nj66",
                "m.0_hr0l3",
                "m.0_jd90y",
                "m.0zv5djm",
                "m.012s01nw",
                "m.027067w",
                "m.0zx88h6",
                "m.0_5zcx_",
                "m.0_7nyl3",
                "m.0zv917z",
                "m.0zvl07l",
                "m.026dh9w",
                "m.026h0ny",
                "m.0_6pknn",
                "m.0zsm4l7",
                "m.0_jtq5q",
                "m.0zvczyv",
                "m.0zvdd4t",
                "m.0gdjwh7",
                "m.0_zm3k2",
                "m.0zshs5p",
                "m.010tvp4y",
                "m.0_dkg10",
                "m.0112d2jj",
                "m.0zx49c3",
                "m.0zv51tp",
                "m.0zvqb2g",
                "m.0zv47zg",
                "m.0zv9b1p",
                "m.0zx95sn",
                "m.0_6y5_j",
                "m.0zvnj4d",
                "m.0zsdcb_",
                "m.0zr3x3t",
                "m.0zvrl6f",
                "m.0_6p7gj",
                "m.026dhf_",
                "m.0_7m01t",
                "m.0gctgj_",
                "m.0zvc277",
                "m.0zlzv51",
                "m.0zq7236",
                "m.08pp46",
                "m.0_63ml2",
                "m.0_6bp8p",
                "m.0zqhbpx",
                "m.0_6797v",
                "m.0zjt0lb",
                "m.0_69fg6",
                "m.0_jq800",
                "m.0_j9fgn",
                "m.0zvjtb7",
                "m.0_jp5z0",
                "m.0_j7y2j",
                "m.0gdphzq",
                "m.0zx8kkr",
                "m.0_jcmw5",
                "m.0zxyw51",
                "m.0_6nfht",
                "m.0zsg81f",
                "m.0zvnkqx",
                "m.0zsljt_",
                "m.0zvhjx_",
                "m.0zlntld",
                "m.0zq3z68",
                "m.0_hvgyl",
                "m.0zsnkng",
                "m.0zkgy4w",
                "m.0zq10fr",
                "m.0_6q841",
                "m.0bx_6tv",
                "m.010yv41_",
                "m.010zp_k7",
                "m.0272hyp",
                "m.0zvd87n",
                "m.0zv7sbj",
                "m.0_k7xc4",
                "m.0zhdq_k",
                "m.0_jtvm7",
                "m.0_hyl15",
                "m.0zvblhz",
                "m.0_j_h00",
                "m.0_k5z3t",
                "m.0_k12xr",
                "m.012rm3kh",
                "m.0zj9v48",
                "m.0_735lb",
                "m.0_5zzn1",
                "m.0_htrhs",
                "m.0zsnbcw",
                "m.0zj22vc",
                "m.0_k7r_6",
                "m.0cq468",
                "m.0zpn84l",
                "m.09gcpc6",
                "m.0zkkvnd",
                "m.0_hw6m1",
                "m.0_kch83",
                "m.0_k80_t",
                "m.0zhywqf",
                "m.0zvk77b",
                "m.0_k8w7x",
                "m.0_5y20_",
                "m.0_69914",
                "m.0zp9n0p",
                "m.0zvn9rt",
                "m.0_j_2n4",
                "m.0_hzd24",
                "m.0zvhg1y",
                "m.0zvmngk",
                "m.0zqbh1g",
                "m.0zklkdl",
                "m.0zvr653",
                "m.0_7j_vd",
                "m.0_j3fc_",
                "m.0zx2c1l",
                "m.0zv8l5n",
                "m.0zsnxq1",
                "m.0zsh_rj",
                "m.0zkn057",
                "m.0_k3r2f",
                "m.0zpr9x8",
                "m.0_jqmjr",
                "m.0zvcw2d",
                "m.0zsmvl3",
                "m.0zvg63w",
                "m.0zshzqf",
                "m.0zs9jln",
                "m.0_5zm1r",
                "m.010yzhb_",
                "m.02pl2sr",
                "m.0_hs2dq",
                "m.0zvnxj3",
                "m.0zphdb5",
                "m.0zv56p0",
                "m.0_kmdzc",
                "m.0zkmrw3",
                "m.0zvd1_2",
                "m.0_6lqqp",
                "m.0zv4n3n",
                "m.0zsk1c8",
                "m.0zqxjvc",
                "m.0zvgqv_",
                "m.0_6nzqr",
                "m.0_hx8q9",
                "m.0zkdxqh",
                "m.0j7myct",
                "m.0zp99ms",
                "m.0c1c9kt",
                "m.0_6nqg3",
                "m.0pd7f6v",
                "m.0zvh7hz",
                "m.0zq9c1c",
                "m.0zpw6rk",
                "m.0zsqks3",
                "m.0zxx6xk",
                "m.0zv78_r",
                "m.0zxj8d1",
                "m.0_jpqjm",
                "m.0_kgn3h",
                "m.0zh3j8j",
                "m.0_j8y9s",
                "m.0gdjwg0",
                "m.0zvm4y6",
                "m.0zvjxqq",
                "m.0_6n6zj",
                "m.0_jlmwx",
                "m.0jwsjv4",
                "m.0_j5ttp",
                "m.0zkhv_k",
                "m.0zqys2p",
                "m.0zj0w5h",
                "m.0zvfhkb",
                "m.0zv5sd_",
                "m.0zvbp2t",
                "m.0gctgl6",
                "m.0zxnzng",
                "m.0_7p2r6",
                "m.0zlrrg1",
                "m.0gctgv7",
                "m.0zsfvk4",
                "m.0zshy90",
                "m.0_603c4",
                "m.0j7j269",
                "m.0_65kj2",
                "m.0zxl64m",
                "m.0_k5_7f",
                "m.0zs8zwj",
                "m.05zyy17",
                "m.0zhz5dw",
                "m.0_k1zfy",
                "m.0_5zy57",
                "m.0zsh4t9",
                "m.0_j7fnl",
                "m.0_jcd8n",
                "m.0zp4f_l",
                "m.0_jwycf",
                "m.0zr29b8",
                "m.0zk09kw",
                "m.0_jx27k",
                "m.0zsm553",
                "m.0_jf2lf",
                "m.0_hvq9m",
                "m.0zv5f5s",
                "m.0_k9270",
                "m.0_6cv0q",
                "m.0_jq62f",
                "m.0_6g5_9",
                "m.0zl7dhj",
                "m.0_k7jrj",
                "m.02xbdck",
                "m.0zlqwtq",
                "m.0gctgjs",
                "m.0zvmsdw",
                "m.0zvq3fp",
                "m.0zsjlb2",
                "m.0zvjts6",
                "m.0_k4wp1",
                "m.0_66r3j",
                "m.0_kdclb",
                "m.0zsqw6z",
                "m.0zvv0q1",
                "m.0_j3jj7",
                "m.0zs8mdw",
                "m.0zvdj3s",
                "m.0zq797c",
                "m.0zjgqjt",
                "m.0zvgll1",
                "m.0zxvq8b",
                "m.0zs8bz5",
                "m.0_km0pr",
                "m.0zv7r83",
                "m.0_k5h1b",
                "m.0_jwb1q",
                "m.0zpxl0n",
                "m.0_k7tcp",
                "m.0rpglnv",
                "m.0_620tb",
                "m.0zv48td",
                "m.0_jlvh2",
                "m.0zqsknl",
                "m.0zjkxm2",
                "m.0_j16n_",
                "m.0zkhdp6",
                "m.010rq_ds",
                "m.0_6pllm",
                "m.0111rknp",
                "m.027ltlc",
                "m.09c8c3",
                "m.0_jz2j8",
                "m.0zxsg9z",
                "m.010z9xx3",
                "m.0zphw6n",
                "m.0zlpc6t",
                "m.0_j2rx1",
                "m.0zsgxk4",
                "m.0_kdvb9",
                "m.0zvj1m0",
                "m.0zk593z",
                "m.0zsm5b4",
                "m.0_h_3jr",
                "m.012rmfq2",
                "m.0zvcnkt",
                "m.0zv4sxx",
                "m.0zq33hb",
                "m.0_j8rjg",
                "m.0zlhgnv",
                "m.0zlsxz2",
                "m.0zv8gc0",
                "m.0_hr9fp",
                "m.0zv9trf",
                "m.0zsm3q_",
                "m.0zv6l1t",
                "m.0zp_kv0",
                "m.0zskmjy",
                "m.0_j4v93",
                "m.0zsl61h",
                "m.0_6kdk6",
                "m.010xrcv1",
                "m.0zlwbzp",
                "m.0_jm_x6",
                "m.0_klt0f",
                "m.027190w",
                "m.0zv6vhc",
                "m.010xzd84",
                "m.0zhxt9m",
                "m.0_75zc1",
                "m.0zvl317",
                "m.0pd7fcy",
                "m.0zv4fbs",
                "m.0139fb8r",
                "m.0zvd1_8",
                "m.08db_x",
                "m.0zsm562",
                "m.0650nn",
                "m.0_6pwrl",
                "m.0zvfjmy",
                "m.0_jrc1v",
                "m.03c2fb3",
                "g.122bxplw",
                "m.0zpnz8y",
                "m.0_hqdyd",
                "m.0zl17yh",
                "m.0zv9bjr",
                "m.0gdpj4n",
                "m.0_jqxz_",
                "m.010sktc9",
                "m.0zvqmxn",
                "m.0zvc0fc",
                "m.0zr5tpn",
                "m.03c2vm3",
                "m.0_690zn",
                "m.0_j9ymm",
                "m.0gctgq8",
                "m.0zx9lg4",
                "m.012rmc_6",
                "m.0_jz1hv",
                "m.0zptwrx",
                "m.0zvbc2m",
                "m.0zxhhj7",
                "m.0zvb9w6",
                "m.0_jzj6t",
                "m.0_6f6qm",
                "m.0112k7sg",
                "m.0gctghv",
                "m.0zv7qdr",
                "m.0zj78m1",
                "m.0gds0jl",
                "m.0_jpl_g",
                "m.012pkms8",
                "m.0zv7wl1",
                "m.0_j34rt",
                "m.0zvr65g",
                "m.0c1ghr6",
                "m.0zp7c05",
                "m.0zpczyb",
                "m.0_j8lb6",
                "m.0zv4kl1",
                "m.0zk4pdz",
                "m.0zvqqnh",
                "m.0zv9q01",
                "m.0_6bbsj",
                "m.0zshf14",
                "m.0zkd68l",
                "m.0zm3sy6",
                "m.0_7yz11",
                "m.0zsk9vy",
                "m.0zvgznj",
                "m.0zvcrhr",
                "m.0zxxs9k",
                "m.0zp7p5q",
                "m.0zsk781",
                "m.0zvcrnw",
                "m.0_j4zg5",
                "m.0zp85wb",
                "m.0zpmrb7",
                "m.0_6__pc",
                "m.0zltqdr",
                "m.0_7b4_4",
                "m.0zv8tp5",
                "m.0zqtbr2",
                "m.0zqknvb",
                "m.0zxj0b3",
                "m.0zld9tx",
                "m.0zvh812",
                "m.05cgkm",
                "m.0_65d9w",
                "m.0gcwxqg",
                "m.012rr3sd",
                "m.0zv7gg8",
                "m.0_5_c5y",
                "m.03cqyp7",
                "m.0zvpmxw",
                "m.0gctgwr",
                "m.0_jzglv",
                "m.0gdpj3d",
                "m.0zhss7z",
                "m.0zvhk3b",
                "m.0_k1cv9",
                "m.0_jy4qw",
                "m.0zv4fzg",
                "m.0zk2cx7",
                "m.0_77zpg",
                "m.0gcwxlt",
                "m.02612wf",
                "m.0zx8vfg",
                "m.0zvg51_",
                "m.0g52f7",
                "m.0zvs_ty",
                "m.0gctgnc",
                "m.0zhgsrh",
                "m.0zq43hs",
                "m.0zv5482",
                "m.0zqfmw7",
                "m.0gctgxr",
                "m.0zsjynd",
                "m.0zr0_fj",
                "m.0zxh3_2",
                "m.0_6dk_9",
                "m.03c33k4",
                "m.0zh13q9",
                "m.0zvv1j5",
                "m.0_6nzwm",
                "m.0_hwy34",
                "m.0zvln3p",
                "m.0zvmlvj",
                "m.0zvb6b0",
                "m.0_j2wm8",
                "m.0_5_tpf",
                "m.0_hy6ff",
                "m.0_6cvxc",
                "m.0_68vl1",
                "m.0_6pxbf",
                "m.0zp7rh5",
                "m.0zlgv4f",
                "m.0zjh6j6",
                "m.0zvnqvd",
                "m.0zvl4m7",
                "m.012rs0rl",
                "m.0_jy398",
                "m.0zh4t1x",
                "m.0_kc4xt",
                "m.027p4hb",
                "m.0zv53_5",
                "m.0_j4x_b",
                "m.0281swx",
                "m.0zqvs04",
                "m.0_5y7yn",
                "m.0zvp668",
                "m.0_jwlfl",
                "m.0_6mq_1",
                "m.0_6btk_",
                "m.0_7cpgx",
                "m.0zvr5rg",
                "m.0_kh0xh",
                "m.0gdjwvk",
                "m.0zvc8k8",
                "m.0_6nqdt",
                "m.0zvmx5k",
                "m.0zv5fd9",
                "m.0zq5470",
                "m.0_hs5rn",
                "m.0pd7fd6",
                "m.02qj03k",
                "m.0zs96rb",
                "m.0zv9p46",
                "m.0zvnn01",
                "m.0zpzg5l",
                "m.0zq50nx",
                "m.0zvp45x",
                "m.0zxttjn",
                "m.0_6hwmv",
                "m.02pl1wj",
                "m.0zr5v53",
                "m.09gdbkn",
                "m.0zlsts8",
                "m.0zvcq2c",
                "m.0zjrgg0",
                "m.0zxqlqm",
                "m.0_63th4",
                "m.0_hsn64",
                "m.0zvp07j",
                "m.0_66l8y",
                "m.0gctgn_",
                "m.0zsclh4",
                "m.0zsn9vs",
                "m.0gdpj1r",
                "m.02z33nw",
                "m.0zv4p06",
                "m.0zvcwk6",
                "m.01vnc8",
                "m.0_hv9l3",
                "m.0zshlyh",
                "m.0zvmz0j",
                "m.0zqthnq",
                "m.0_67mfy",
                "m.0zslkmr",
                "m.0zvkbsh",
                "m.0zsm3b4",
                "m.03hkrph",
                "m.0_hw2gs",
                "m.0_80k19",
                "m.0_jkmmk",
                "m.0_jkc_7",
                "m.0102jhf9",
                "m.0zvqf0b",
                "m.0zsqwtj",
                "m.0zvc3n1",
                "m.0_j8scb",
                "m.0_66gn_",
                "m.0zxczlq",
                "m.0zsdx6j",
                "m.0_k8y_9",
                "m.0zsjjhl",
                "m.0zl10ls",
                "m.0zv5r3q",
                "m.0zl84x2",
                "m.0_k5tlv",
                "m.0_6np4d",
                "m.0zv9_30",
                "m.0gdpj0d",
                "m.02rwyr2",
                "m.0zxj4mq",
                "m.0zsk0n7",
                "m.0_60g6b",
                "m.046tk4",
                "m.0zq39sx",
                "m.0zscxhr",
                "m.0_jssrj",
                "m.0zsjyhn",
                "m.0zvrdk4",
                "m.093r4b",
                "m.0zsc49m",
                "m.010v18r4",
                "m.0zvq4x8",
                "m.0zvbjpj",
                "m.0zr2nkk",
                "m.0_6pkp2",
                "m.0_hzh_w",
                "m.0zvgbxy",
                "m.02612sb",
                "m.02q87w3",
                "m.0zh47g4",
                "m.0zsp37c",
                "m.0zv873r",
                "m.0gctgp9",
                "m.0zvmhj1",
                "m.0_k2w2c",
                "m.010_2s39",
                "m.0zsh0kw",
                "m.0zq_2js",
                "m.0zsp7j0",
                "m.05p2482",
                "m.06b73x",
                "m.0zvclt7",
                "m.0_j66kk",
                "m.0zq4cjk",
                "m.0_65nl4",
                "m.0zv6ctd",
                "m.0gdpj2x",
                "m.0c1gj7f",
                "m.0zslkjc",
                "m.0zvbmcc",
                "m.0_6nrm4",
                "m.0zj9n6t",
                "m.0_7234b",
                "m.0zvm_94",
                "m.0pd7fcn",
                "m.0_jms1l",
                "m.0_jndzb",
                "m.0zq2bcd",
                "m.02qyp74",
                "m.0b6lsc7",
                "m.0zh8zg7",
                "m.0zx715q",
                "m.0zq_8wm",
                "m.05zvtqk",
                "m.0zsjdmq",
                "m.0_hw1pk",
                "m.0zvm26v",
                "m.0zvhrjh",
                "m.0zsklrc",
                "m.08ftns",
                "m.0zv6g1_",
                "m.0zxr3f2",
                "m.0zv954m",
                "m.0_7s309",
                "m.026hcjw",
                "m.0_6fqpg",
                "m.0_6nx5f",
                "m.0zv686g",
                "m.0zpkfbh",
                "m.0_kky8l",
                "m.0_j_43g",
                "m.0_jt5p6",
                "m.0zvrvbp",
                "m.0zpsp0v",
                "m.0zv4z0j",
                "m.0zp6qyb",
                "m.0zsg6l6",
                "m.0_hv1ml",
                "m.0zplsm9",
                "m.0zsd70y",
                "m.0zx5v6j",
                "m.0_js2c2",
                "m.0zkf0s1",
                "m.0_jzr19",
                "m.0zjq8q_",
                "m.0zprmr4",
                "m.0zlx8ty",
                "m.0zsdbc7",
                "m.04f0b80",
                "m.0dryn0m",
                "m.0_62shp",
                "m.0zjnn4t",
                "m.0zv67d0",
                "m.0_hz4df",
                "m.0zvkpmk",
                "m.053lkj",
                "m.0_6p0m3",
                "m.010tqjtl",
                "m.0zv4x13",
                "m.0_jg9bc",
                "m.0gdjwtg",
                "m.0zqn246",
                "m.0zhw_6d",
                "m.0gcwxm4",
                "m.0zv55w6",
                "m.0gdpj1c",
                "m.0_jtvb6",
                "m.0zsdf99",
                "m.0_6mh8q",
                "m.0_6fxlh",
                "m.0_jtl45",
                "m.0zv9y53",
                "m.0zp7_fz",
                "m.0zsq1nx",
                "m.0_kd3k_",
                "m.0gdjw5b",
                "m.0zsbd5c",
                "m.0_hzd3w",
                "m.0zl9xd1",
                "m.0zsjbl_",
                "m.0zpy618",
                "m.0zvmkxn",
                "m.0gdphzz",
                "m.0zkb_rb",
                "m.0zv8c2g",
                "m.0zqfznl",
                "m.0zvkgs6",
                "m.0_6gzmy",
                "m.0zj3yh8",
                "m.0zxpntg",
                "m.0zq9xcx",
                "m.0gdjw6y",
                "m.0_hyh80",
                "m.0zv9d2m",
                "m.047td29",
                "m.0_k1p42",
                "m.0zkrwc5",
                "m.0_hnybx",
                "m.0_jb1d8",
                "m.0zvll12",
                "m.0_hqwf4",
                "m.04r0d6",
                "m.0zsd9m4",
                "m.0zkmn74",
                "m.0_k8mfj",
                "m.0zskcgc",
                "m.0zr0xnp",
                "m.04hqn2",
                "m.0zvkpgy",
                "m.0zv9_1c",
                "m.0zj2n1k",
                "m.0_7wy4d",
                "m.010zg4h2",
                "m.0zm40hc",
                "m.0zvr1_r",
                "m.0zksllg",
                "m.0zlwd67",
                "m.0zh22tw",
                "m.0zvfnjf",
                "m.0_k7_83",
                "m.0zvgg5p",
                "m.0zv61hk",
                "m.0_j2p1_",
                "m.0zv9kx_",
                "m.0zr1_3r",
                "m.02639w6",
                "m.0_k7v7x",
                "m.0_jz_2s",
                "m.0zr6y77",
                "m.0_hnyjz",
                "m.0zx4rgt",
                "m.0_kclgl",
                "m.0zkwzgb",
                "m.0zp5gxt",
                "m.0zsjwcr",
                "m.0zxd069",
                "m.0zvgk49",
                "m.0_6nx58",
                "m.0gdpj03",
                "m.0zsds29",
                "m.0zvjr91",
                "m.0zv7t_9",
                "m.0_hy123",
                "m.0zvqf1v",
                "m.0_k0wtn",
                "m.0zvn5hd",
                "m.0_6pd78",
                "m.0zsgdtw",
                "m.0_jpgcp",
                "m.0zvrvxc",
                "m.0zvhk4y",
                "m.0zvp52f",
                "m.0zq5yvd",
                "m.0_6p0fw",
                "m.0_k8585",
                "m.0zvs011",
                "m.0_jvzj6",
                "m.0zskwrz",
                "m.0zx9w6p",
                "m.0_k7d20",
                "m.0zjt7ql",
                "m.0zv4g6z",
                "m.0_6pdmh",
                "m.0gcwxqs",
                "m.0zldq44",
                "m.0_67897",
                "m.0_jb406",
                "m.0zvpm0b"
            ]
        ],
        "entity_linking": {
            "Life of Franz Liszt": "m.0hqgp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0hqgp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0hqgp ns:music.composer.compositions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0hqgp')\na.add_fact('m.0hqgp', 'music.composer.compositions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1891",
        "question": "where did the russian japanese war happen",
        "answer": [
            "m.0cswl",
            "m.0df4f",
            "m.01krx6"
        ],
        "different_answer": [
            [
                "m.0cswl",
                "m.0df4f",
                "m.01krx6"
            ]
        ],
        "entity_linking": {
            "Russo-Japanese War": "m.0c4gf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0c4gf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0c4gf ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c4gf')\na.add_fact('m.0c4gf', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1892",
        "question": "what year did the la kings win the cup",
        "answer": [
            "m.0jt52pz",
            "m.010fdzhp"
        ],
        "different_answer": [
            [
                "m.0jt52pz",
                "m.010fdzhp"
            ]
        ],
        "entity_linking": {
            "Los Angeles Kings": "m.0jnq8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jnq8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jnq8 ns:sports.sports_team.championships ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jnq8')\na.add_fact('m.0jnq8', 'sports.sports_team.championships', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1893",
        "question": "what kind of money does egypt have",
        "answer": [
            "m.04phzg"
        ],
        "different_answer": [
            [
                "m.04phzg"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1894",
        "question": "what baseball team was jackie robinson on",
        "answer": [
            "m.05fc8c9",
            "m.02_cjl",
            "m.03_wkh"
        ],
        "different_answer": [
            [
                "m.05fc8c9",
                "m.02_cjl",
                "m.03_wkh"
            ]
        ],
        "entity_linking": {
            "Jackie Robinson": "m.0443c",
            "Baseball": "m.018jz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0443c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0443c ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?x ns:sports.sports_team.sport ns:m.018jz .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.018jz')\na.add_filter('x0', '!=', 'm.0443c')\na.add_fact('x0', 'sports.sports_team.sport', 'm.018jz')\na.add_fact('m.0443c', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1895",
        "question": "what body of water does st lawrence river flow into",
        "answer": [
            "m.0j8pq"
        ],
        "different_answer": [
            [
                "m.0j8pq"
            ]
        ],
        "entity_linking": {
            "Saint Lawrence River": "m.0cg4t"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cg4t)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cg4t ns:geography.river.mouth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cg4t')\na.add_fact('m.0cg4t', 'geography.river.mouth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1896",
        "question": "what form of government does the united states have",
        "answer": [
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "United States of America": "m.09c7w0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09c7w0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09c7w0 ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09c7w0')\na.add_fact('m.09c7w0', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1897",
        "question": "what are the names of ariel 's six sisters",
        "answer": [
            "m.065hkgg",
            "m.065hkgp",
            "m.065hkgw",
            "m.065hkfx",
            "m.065hkg8",
            "m.065hkg2"
        ],
        "different_answer": [
            [
                "m.065hkgg",
                "m.065hkgp",
                "m.065hkgw",
                "m.065hkfx",
                "m.065hkg8",
                "m.065hkg2"
            ]
        ],
        "entity_linking": {
            "Ariel": "m.0cl19h"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cl19h)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cl19h ns:fictional_universe.fictional_character.siblings ?y .\n?y ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cl19h')\na.add_fact('m.0cl19h', 'fictional_universe.fictional_character.siblings', 'x1')\na.add_fact('x1', 'fictional_universe.sibling_relationship_of_fictional_characters.siblings', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1898",
        "question": "what voices does seth macfarlane play on family guy",
        "answer": [
            "m.03pcvr",
            "m.026q0lb",
            "m.05sr4zg",
            "m.028b1c8",
            "m.05sr4x5",
            "g.120yrd_6",
            "m.01sxhc",
            "m.03n6jv",
            "m.05ss3k_",
            "m.05sr4_d",
            "m.02nw87f",
            "m.02m29p",
            "g.12245v14",
            "m.05srj40",
            "m.05sr4_s"
        ],
        "different_answer": [
            [
                "m.03pcvr",
                "m.026q0lb",
                "m.05sr4zg",
                "m.028b1c8",
                "m.05sr4x5",
                "g.120yrd_6",
                "m.01sxhc",
                "m.03n6jv",
                "m.05ss3k_",
                "m.05sr4_d",
                "m.02nw87f",
                "m.02m29p",
                "g.12245v14",
                "m.05srj40",
                "m.05sr4_s"
            ]
        ],
        "entity_linking": {
            "Family Guy": "m.019nnl",
            "Seth MacFarlane": "m.021yw7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.019nnl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.019nnl ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.character ?x .\n?y ns:tv.regular_tv_appearance.actor ns:m.021yw7 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.021yw7')\na.add_filter('x0', '!=', 'm.019nnl')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'm.021yw7')\na.add_fact('m.019nnl', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1899",
        "question": "who was william mckinley married to",
        "answer": [
            "m.025pyr"
        ],
        "different_answer": [
            [
                "m.025pyr"
            ]
        ],
        "entity_linking": {
            "William McKinley": "m.083p7",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.083p7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.083p7 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.083p7')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.083p7', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1900",
        "question": "who played darth vader in the first movie",
        "answer": [
            "m.03xblf",
            "m.0f6_x"
        ],
        "different_answer": [
            [
                "m.03xblf",
                "m.0f6_x"
            ]
        ],
        "entity_linking": {
            "Darth Vader": "m.0f2y0"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n{\n  SELECT DISTINCT ?f1\n  WHERE {\n    ns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .  # Darth Vader\n    ?y ns:film.performance.film ?f1 .\n    ?f1 ns:film.film.initial_release_date ?d .\n  }\n  ORDER BY ?d\n  LIMIT 1\n}\n  ns:m.0f2y0 ns:film.film_character.portrayed_in_films ?y .  # Darth Vader\n  ?y ns:film.performance.actor ?x ; \n     ns:film.performance.film ?f .\n  FILTER (?f1 = ?f)\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1901",
        "question": "where did kevin james go to college",
        "answer": [
            "m.0clvs5s"
        ],
        "different_answer": [
            [
                "m.0clvs5s"
            ]
        ],
        "entity_linking": {
            "Kevin James": "m.03xb2w",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03xb2w)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03xb2w ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03xb2w')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03xb2w', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1902",
        "question": "what year was hitler was born",
        "answer": [
            "1889-04-20-08:00"
        ],
        "different_answer": [
            [
                "1889-04-20-08:00"
            ]
        ],
        "entity_linking": {
            "Adolf Hitler": "m.07_m9_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_m9_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_m9_ ns:people.person.date_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_m9_')\na.add_fact('m.07_m9_', 'people.person.date_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1904",
        "question": "what 's there to see in atlanta",
        "answer": [
            "m.039xmp",
            "m.03xrf5",
            "m.04d135",
            "m.03l1zc",
            "m.04htb5",
            "m.033h7k",
            "m.02wl1b",
            "m.03wm34",
            "m.03spbl",
            "m.0j28sdt",
            "m.027r6hr",
            "m.050n0y",
            "m.03cspcp",
            "m.020fp1",
            "m.050mtz",
            "m.0130ft",
            "m.0b5g4p",
            "m.05c25f2",
            "m.03sm22",
            "m.050m_5",
            "m.02xmrp",
            "m.04qrhq",
            "m.02jnft",
            "m.027t71h",
            "m.06bxs4",
            "m.03q1hw",
            "m.038gvs",
            "m.04jny9",
            "m.050my1",
            "m.038bv6",
            "m.0gln9p",
            "m.04_mbv",
            "m.0fpmfg",
            "m.029fnx",
            "m.030pkm",
            "m.0c3cp2"
        ],
        "different_answer": [
            [
                "m.039xmp",
                "m.03xrf5",
                "m.04d135",
                "m.03l1zc",
                "m.04htb5",
                "m.033h7k",
                "m.02wl1b",
                "m.03wm34",
                "m.03spbl",
                "m.0j28sdt",
                "m.027r6hr",
                "m.050n0y",
                "m.03cspcp",
                "m.020fp1",
                "m.050mtz",
                "m.0130ft",
                "m.0b5g4p",
                "m.05c25f2",
                "m.03sm22",
                "m.050m_5",
                "m.02xmrp",
                "m.04qrhq",
                "m.02jnft",
                "m.027t71h",
                "m.06bxs4",
                "m.03q1hw",
                "m.038gvs",
                "m.04jny9",
                "m.050my1",
                "m.038bv6",
                "m.0gln9p",
                "m.04_mbv",
                "m.0fpmfg",
                "m.029fnx",
                "m.030pkm",
                "m.0c3cp2"
            ]
        ],
        "entity_linking": {
            "Atlanta": "m.013yq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.013yq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.013yq ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.013yq')\na.add_fact('m.013yq', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1905",
        "question": "where was auschwitz concentration camp located",
        "answer": [
            "m.05mtdhz",
            "m.05qhw",
            "m.021p2p"
        ],
        "different_answer": [
            [
                "m.05mtdhz",
                "m.05qhw",
                "m.021p2p"
            ]
        ],
        "entity_linking": {
            "Auschwitz concentration camp": "m.0v_x"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0v_x)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0v_x ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0v_x')\na.add_fact('m.0v_x', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1907",
        "question": "what kind of currency does dominican republic use",
        "answer": [
            "m.04lt7_"
        ],
        "different_answer": [
            [
                "m.04lt7_"
            ]
        ],
        "entity_linking": {
            "Dominican Republic": "m.027rn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rn ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027rn')\na.add_fact('m.027rn', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1909",
        "question": "what is spoken in czech republic",
        "answer": [
            "m.0cjk9",
            "m.04306rv",
            "m.0349s",
            "m.02ztjwg",
            "m.05qqm",
            "m.06b_j",
            "m.01bkv",
            "m.013hyy",
            "m.012psb",
            "m.06zvx",
            "m.0k0sv",
            "m.0k0sb",
            "m.01wgr"
        ],
        "different_answer": [
            [
                "m.0cjk9",
                "m.04306rv",
                "m.0349s",
                "m.02ztjwg",
                "m.05qqm",
                "m.06b_j",
                "m.01bkv",
                "m.013hyy",
                "m.012psb",
                "m.06zvx",
                "m.0k0sv",
                "m.0k0sb",
                "m.01wgr"
            ],
            [
                "m.01wgr"
            ]
        ],
        "entity_linking": {
            "Czech Republic": "m.01mjq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mjq')\na.add_fact('m.01mjq', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1910",
        "question": "where was shakespeare born at",
        "answer": [
            "m.0g251"
        ],
        "different_answer": [
            [
                "m.0g251"
            ]
        ],
        "entity_linking": {
            "William Shakespeare": "m.081k8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.081k8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.081k8 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.081k8')\na.add_fact('m.081k8', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1911",
        "question": "where did scott fitzgerald go to college",
        "answer": [
            "m.05zl0"
        ],
        "different_answer": [
            [
                "m.05zl0"
            ]
        ],
        "entity_linking": {
            "F. Scott Fitzgerald": "m.02zjd",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02zjd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02zjd ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.02zjd')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.02zjd', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1912",
        "question": "what did joan crawford died of",
        "answer": [
            "m.0gk4g",
            "m.01_qc_"
        ],
        "different_answer": [
            [
                "m.0gk4g",
                "m.01_qc_"
            ]
        ],
        "entity_linking": {
            "Joan Crawford": "m.0cgbf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cgbf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cgbf ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cgbf')\na.add_fact('m.0cgbf', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1913",
        "question": "where did rob kardashian go to school",
        "answer": [
            "m.06t2qb"
        ],
        "different_answer": [
            [
                "m.06t2qb"
            ]
        ],
        "entity_linking": {
            "Rob Kardashian": "m.043n6dp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.043n6dp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.043n6dp ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.043n6dp')\na.add_fact('m.043n6dp', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1914",
        "question": "what year was allen iverson mvp",
        "answer": [
            "m.080b2d"
        ],
        "different_answer": [
            [
                "m.080b2d"
            ]
        ],
        "entity_linking": {
            "Allen Iverson": "m.01sg7_",
            "NBA Most Valuable Player Award": "m.02yqk8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sg7_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sg7_ ns:sports.sports_award_winner.awards ?y .\n?y ns:sports.sports_award.season ?x .\n?y ns:sports.sports_award.award ns:m.02yqk8 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02yqk8')\na.add_filter('x0', '!=', 'm.01sg7_')\na.add_fact('x1', 'sports.sports_award.award', 'm.02yqk8')\na.add_fact('m.01sg7_', 'sports.sports_award_winner.awards', 'x1')\na.add_fact('x1', 'sports.sports_award.season', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1915",
        "question": "where did harry s truman go to school",
        "answer": [
            "m.0bvjpw",
            "m.064r775",
            "m.016vf7"
        ],
        "different_answer": [
            [
                "m.0bvjpw",
                "m.064r775",
                "m.016vf7"
            ]
        ],
        "entity_linking": {
            "Harry S. Truman": "m.09bg4l"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09bg4l)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09bg4l ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09bg4l')\na.add_fact('m.09bg4l', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1916",
        "question": "what county is utica ny in",
        "answer": [
            "m.0fc_9"
        ],
        "different_answer": [
            [
                "m.0fc_9"
            ],
            [
                "m.0fc_9"
            ]
        ],
        "entity_linking": {
            "Utica": "m.0lpk3"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lpk3)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lpk3 ns:location.hud_county_place.county ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0lpk3')\na.add_fact('m.0lpk3', 'location.hud_county_place.county', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1917",
        "question": "what did charles babbage discover",
        "answer": [
            "m.029wv",
            "m.0nf_"
        ],
        "different_answer": [
            [
                "m.029wv",
                "m.0nf_"
            ]
        ],
        "entity_linking": {
            "Charles Babbage": "m.01qmz"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01qmz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01qmz ns:law.inventor.inventions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01qmz')\na.add_fact('m.01qmz', 'law.inventor.inventions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1919",
        "question": "who plays king julian madagascar",
        "answer": [
            "m.0c9c0"
        ],
        "different_answer": [
            [
                "m.0c9c0"
            ]
        ],
        "entity_linking": {
            "Madagascar": "m.01sbv9",
            "Julien": "m.0cj5p22"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01sbv9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01sbv9 ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0cj5p22 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cj5p22')\na.add_filter('x0', '!=', 'm.01sbv9')\na.add_fact('x1', 'film.performance.character', 'm.0cj5p22')\na.add_fact('m.01sbv9', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1920",
        "question": "who is rick scott",
        "answer": [
            "m.0fj9f",
            "m.025sppp",
            "m.0289fz",
            "m.012t_z",
            "m.04gc2"
        ],
        "different_answer": [
            [
                "m.0fj9f",
                "m.025sppp",
                "m.0289fz",
                "m.012t_z",
                "m.04gc2"
            ]
        ],
        "entity_linking": {
            "Rick Scott": "m.0btx2g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0btx2g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0btx2g ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0btx2g')\na.add_fact('m.0btx2g', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1921",
        "question": "where did the crimean war take place",
        "answer": [
            "m.015h7",
            "m.0cr7m",
            "m.01522",
            "m.0k_hb",
            "m.09shn",
            "m.01jjk",
            "m.0ndwhc3"
        ],
        "different_answer": [
            [
                "m.015h7",
                "m.0cr7m",
                "m.01522",
                "m.0k_hb",
                "m.09shn",
                "m.01jjk",
                "m.0ndwhc3"
            ]
        ],
        "entity_linking": {
            "Crimean War": "m.0cmc2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cmc2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cmc2 ns:time.event.locations ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cmc2')\na.add_fact('m.0cmc2', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1922",
        "question": "what offices did theodore roosevelt hold",
        "answer": [
            "m.060c4",
            "m.0621v9",
            "m.0dq3c",
            "m.0fkvn",
            "m.09tm8y"
        ],
        "different_answer": [
            [
                "m.060c4",
                "m.0621v9",
                "m.0dq3c",
                "m.0fkvn",
                "m.09tm8y"
            ]
        ],
        "entity_linking": {
            "Theodore Roosevelt": "m.07hyk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07hyk)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07hyk ns:government.politician.government_positions_held ?y .\n?y ns:government.government_position_held.basic_title ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07hyk')\na.add_fact('m.07hyk', 'government.politician.government_positions_held', 'x1')\na.add_fact('x1', 'government.government_position_held.basic_title', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1923",
        "question": "what movies has miley cyrus been in",
        "answer": [
            "m.0cmddrx",
            "m.0swngjg",
            "m.042w0v2",
            "m.080gfc8",
            "m.0w1x037",
            "m.0g56xqy",
            "m.02x3lt7",
            "m.0cs2t3x",
            "m.0bc5ny",
            "m.010ls0tb",
            "m.027pfg",
            "m.03ck042",
            "m.07ykkx5",
            "m.064qvcw",
            "m.0crsmk2",
            "m.05h43ls",
            "m.06fcqw"
        ],
        "different_answer": [
            [
                "m.0cmddrx",
                "m.0swngjg",
                "m.042w0v2",
                "m.080gfc8",
                "m.0w1x037",
                "m.0g56xqy",
                "m.02x3lt7",
                "m.0cs2t3x",
                "m.0bc5ny",
                "m.010ls0tb",
                "m.027pfg",
                "m.03ck042",
                "m.07ykkx5",
                "m.064qvcw",
                "m.0crsmk2",
                "m.05h43ls",
                "m.06fcqw"
            ]
        ],
        "entity_linking": {
            "Miley Cyrus": "m.0bdxs5"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bdxs5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bdxs5 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bdxs5')\na.add_fact('m.0bdxs5', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1925",
        "question": "who did james franco play in milk",
        "answer": [
            "m.04zgntd"
        ],
        "different_answer": [
            [
                "m.04zgntd"
            ]
        ],
        "entity_linking": {
            "Milk": "m.03hkch7",
            "James Franco": "m.05bnp0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03hkch7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03hkch7 ns:film.film.starring ?y .\n?y ns:film.performance.character ?x .\n?y ns:film.performance.actor ns:m.05bnp0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05bnp0')\na.add_filter('x0', '!=', 'm.03hkch7')\na.add_fact('x1', 'film.performance.actor', 'm.05bnp0')\na.add_fact('m.03hkch7', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.character', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1926",
        "question": "when did the libyan conflict start",
        "answer": [
            "2011-03-19-08:00"
        ],
        "different_answer": [
            [
                "2011-03-19-08:00"
            ]
        ],
        "entity_linking": {
            "2011 military intervention in Libya": "m.0gh674m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gh674m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gh674m ns:time.event.start_date ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gh674m')\na.add_fact('m.0gh674m', 'time.event.start_date', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1928",
        "question": "what wnba team is diana taurasi on",
        "answer": [
            "m.0bmbqg2",
            "m.0lr76"
        ],
        "different_answer": [
            [
                "m.0bmbqg2",
                "m.0lr76"
            ]
        ],
        "entity_linking": {
            "Diana Taurasi": "m.037bzt",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.037bzt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.037bzt ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.037bzt')\na.add_fact('m.037bzt', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1929",
        "question": "what do see in paris",
        "answer": [
            "m.04s_s9l",
            "m.02qtwx",
            "m.04cj6k",
            "m.0zv_",
            "m.0kx9d",
            "m.01vgd5",
            "m.03q9jq",
            "m.07kb30y",
            "m.0jd4j",
            "m.04kshc3",
            "m.01q_np",
            "m.02j81",
            "m.0f3b9",
            "m.0dt3ml",
            "m.02gms9",
            "m.0f32p",
            "m.042x0k",
            "m.0dmnx6",
            "m.01sp2r",
            "m.0gsp5",
            "m.0m6_0",
            "m.04gdr",
            "m.0281qh",
            "m.08dswn",
            "m.04695xf",
            "m.0gxqj",
            "m.0383f3",
            "m.03ydrj",
            "m.0k3xf",
            "m.0gtxh",
            "m.0k0kz"
        ],
        "different_answer": [
            [
                "m.04s_s9l",
                "m.02qtwx",
                "m.04cj6k",
                "m.0zv_",
                "m.0kx9d",
                "m.01vgd5",
                "m.03q9jq",
                "m.07kb30y",
                "m.0jd4j",
                "m.04kshc3",
                "m.01q_np",
                "m.02j81",
                "m.0f3b9",
                "m.0dt3ml",
                "m.02gms9",
                "m.0f32p",
                "m.042x0k",
                "m.0dmnx6",
                "m.01sp2r",
                "m.0gsp5",
                "m.0m6_0",
                "m.04gdr",
                "m.0281qh",
                "m.08dswn",
                "m.04695xf",
                "m.0gxqj",
                "m.0383f3",
                "m.03ydrj",
                "m.0k3xf",
                "m.0gtxh",
                "m.0k0kz"
            ]
        ],
        "entity_linking": {
            "Paris": "m.05qtj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05qtj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05qtj ns:travel.travel_destination.tourist_attractions ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05qtj')\na.add_fact('m.05qtj', 'travel.travel_destination.tourist_attractions', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1932",
        "question": "who made the laws in canada",
        "answer": [
            "m.0h6dy",
            "m.0l_j_"
        ],
        "different_answer": [
            [
                "m.0h6dy",
                "m.0l_j_"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.governmental_body ?x .\n?x ns:government.governmental_body.jurisdiction ns:m.0d060g .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('x0', 'government.governmental_body.jurisdiction', 'm.0d060g')\na.add_fact('m.0d060g', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_fact('x1', 'government.government_position_held.governmental_body', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1933",
        "question": "what year did adam morrison get drafted",
        "answer": [
            "m.09th87"
        ],
        "different_answer": [
            [
                "m.09th87"
            ]
        ],
        "entity_linking": {
            "Adam Morrison": "m.08_g4q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.08_g4q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.08_g4q ns:sports.drafted_athlete.drafted ?y .\n?y ns:sports.sports_league_draft_pick.draft ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.08_g4q')\na.add_fact('m.08_g4q', 'sports.drafted_athlete.drafted', 'x1')\na.add_fact('x1', 'sports.sports_league_draft_pick.draft', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1934",
        "question": "where michael jackson from",
        "answer": [
            "m.03b12"
        ],
        "different_answer": [
            [
                "m.03b12"
            ],
            [
                "m.03b12"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:music.artist.origin ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'music.artist.origin', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1935",
        "question": "what college did maya moore go to",
        "answer": [
            "m.01jsn5"
        ],
        "different_answer": [
            [
                "m.01jsn5"
            ]
        ],
        "entity_linking": {
            "Maya Moore": "m.027w0l1",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027w0l1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027w0l1 ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.027w0l1')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.027w0l1', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1936",
        "question": "when was the last time the dodgers won a championship",
        "answer": [
            "m.04j7ml"
        ],
        "different_answer": [
            [
                "m.04j7ml"
            ]
        ],
        "entity_linking": {
            "Los Angeles Dodgers": "m.04mjl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04mjl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04mjl ns:sports.sports_team.championships ?x .\n?x ns:time.event.end_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04mjl')\na.add_fact('m.04mjl', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.end_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1937",
        "question": "who is captain james cook facts",
        "answer": [
            "m.040vc4s",
            "m.016wtf"
        ],
        "different_answer": [
            [
                "m.040vc4s",
                "m.016wtf"
            ]
        ],
        "entity_linking": {
            "James Cook": "m.03_j8"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_j8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_j8 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_j8')\na.add_fact('m.03_j8', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1938",
        "question": "where did robin williams get married",
        "answer": [
            "m.0r26s"
        ],
        "different_answer": [
            [
                "m.0r26s"
            ]
        ],
        "entity_linking": {
            "Robin Williams": "m.0dzf_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0dzf_)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0dzf_ ns:people.person.spouse_s ?y .\n?y ns:people.marriage.location_of_ceremony ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0dzf_')\na.add_fact('m.0dzf_', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.location_of_ceremony', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1939",
        "question": "what form of government does canada",
        "answer": [
            "m.01q20",
            "m.018wl5",
            "m.0g3y9q"
        ],
        "different_answer": [
            [
                "m.01q20",
                "m.018wl5",
                "m.0g3y9q"
            ]
        ],
        "entity_linking": {
            "Canada": "m.0d060g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d060g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d060g ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d060g')\na.add_fact('m.0d060g', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1940",
        "question": "who do islamic people follow",
        "answer": [
            "m.055v4c",
            "m.0jfd",
            "m.0d05l6"
        ],
        "different_answer": [
            [
                "m.055v4c",
                "m.0jfd",
                "m.0d05l6"
            ]
        ],
        "entity_linking": {
            "Islam": "m.0flw86"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0flw86)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0flw86 ns:religion.religion.deities ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0flw86')\na.add_fact('m.0flw86', 'religion.religion.deities', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1941",
        "question": "what kind of government does peru",
        "answer": [
            "m.01fpfn",
            "m.01d9r3",
            "m.0c9rw5",
            "m.06cx9"
        ],
        "different_answer": [
            [
                "m.01fpfn",
                "m.01d9r3",
                "m.0c9rw5",
                "m.06cx9"
            ]
        ],
        "entity_linking": {
            "Peru": "m.016wzw"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016wzw)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016wzw ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016wzw')\na.add_fact('m.016wzw', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1942",
        "question": "who was in the israeli palestinian conflict",
        "answer": [
            "m.0hspy",
            "m.0b_zw",
            "m.01html",
            "m.036df9",
            "m.0kwtd",
            "m.0cj84",
            "m.0kvhz",
            "m.01tp58",
            "m.0lf35",
            "m.012bk",
            "m.039b_q",
            "m.0203v",
            "m.019x_p",
            "m.056xs",
            "m.08849",
            "m.0d58h",
            "m.0c_8s",
            "m.01czvz",
            "m.01cw71",
            "m.0jfzc",
            "m.0kww1"
        ],
        "different_answer": [
            [
                "m.0hspy",
                "m.0b_zw",
                "m.01html",
                "m.036df9",
                "m.0kwtd",
                "m.0cj84",
                "m.0kvhz",
                "m.01tp58",
                "m.0lf35",
                "m.012bk",
                "m.039b_q",
                "m.0203v",
                "m.019x_p",
                "m.056xs",
                "m.08849",
                "m.0d58h",
                "m.0c_8s",
                "m.01czvz",
                "m.01cw71",
                "m.0jfzc",
                "m.0kww1"
            ]
        ],
        "entity_linking": {
            "Israeli\u2013Palestinian conflict": "m.0cj5y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0cj5y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0cj5y ns:time.event.people_involved ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0cj5y')\na.add_fact('m.0cj5y', 'time.event.people_involved', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1943",
        "question": "who founded the afl",
        "answer": [
            "m.01wtr5",
            "m.035yc3"
        ],
        "different_answer": [
            [
                "m.01wtr5",
                "m.035yc3"
            ]
        ],
        "entity_linking": {
            "American Football League": "m.0ysy"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ysy)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ysy ns:organization.organization.founders ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ysy')\na.add_fact('m.0ysy', 'organization.organization.founders', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1944",
        "question": "where did diego velazquez die",
        "answer": [
            "m.056_y"
        ],
        "different_answer": [
            [
                "m.056_y"
            ]
        ],
        "entity_linking": {
            "Diego Vel\u00e1zquez": "m.0k92y"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0k92y)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0k92y ns:people.deceased_person.place_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0k92y')\na.add_fact('m.0k92y', 'people.deceased_person.place_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1946",
        "question": "what is the country code for mexico",
        "answer": [
            "mx"
        ],
        "different_answer": [
            [
                "mx"
            ],
            [
                "m.04krl2"
            ]
        ],
        "entity_linking": {
            "Mexico": "m.0b90_r"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0b90_r)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0b90_r ns:base.aareas.schema.administrative_area.short_name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0b90_r')\na.add_fact('m.0b90_r', 'location.country.internet_tld', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1947",
        "question": "what currency do they use in switzerland",
        "answer": [
            "m.01_h4b"
        ],
        "different_answer": [
            [
                "m.01_h4b"
            ]
        ],
        "entity_linking": {
            "Switzerland": "m.06mzp"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mzp)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mzp ns:location.country.currency_used ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mzp')\na.add_fact('m.06mzp', 'location.country.currency_used', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1950",
        "question": "where is president kennedy buried",
        "answer": [
            "m.0lbp_"
        ],
        "different_answer": [
            [
                "m.0lbp_"
            ]
        ],
        "entity_linking": {
            "John F. Kennedy": "m.0d3k14"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0d3k14)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0d3k14 ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0d3k14')\na.add_fact('m.0d3k14', 'people.deceased_person.place_of_burial', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1952",
        "question": "where was the prophet mohammed from",
        "answer": [
            "m.058wp"
        ],
        "different_answer": [
            [
                "m.058wp"
            ]
        ],
        "entity_linking": {
            "Muhammad in Islam": "m.04s9n"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04s9n)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04s9n ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04s9n')\na.add_fact('m.04s9n', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1954",
        "question": "what language do ukrainian people speak",
        "answer": [
            "m.0cjk9",
            "m.01h2j_",
            "m.02ztjwg",
            "m.06b_j",
            "m.019yz7",
            "m.012v8",
            "m.02hxc3j"
        ],
        "different_answer": [
            [
                "m.0cjk9",
                "m.01h2j_",
                "m.02ztjwg",
                "m.06b_j",
                "m.019yz7",
                "m.012v8",
                "m.02hxc3j"
            ],
            [
                "m.0cjk9"
            ]
        ],
        "entity_linking": {
            "Ukraine": "m.07t21"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07t21)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07t21 ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07t21')\na.add_fact('m.07t21', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1955",
        "question": "who are the judges appointed in the supreme court",
        "answer": [
            "m.019s7r",
            "m.016m0v",
            "m.066vhq",
            "m.06lnfm",
            "m.01_4j",
            "m.04gnxk",
            "m.0166zk",
            "m.06lvrr",
            "m.0199pk"
        ],
        "different_answer": [
            [
                "m.019s7r",
                "m.016m0v",
                "m.066vhq",
                "m.06lnfm",
                "m.01_4j",
                "m.04gnxk",
                "m.0166zk",
                "m.06lvrr",
                "m.0199pk"
            ]
        ],
        "entity_linking": {
            "Supreme Court of the United States": "m.07sz1",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07sz1)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07sz1 ns:law.court.judges ?y .\n?y ns:law.judicial_tenure.judge ?x .\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.from_date ?sk0} || \nEXISTS {?y ns:law.judicial_tenure.from_date ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:law.judicial_tenure.to_date ?sk2} || \nEXISTS {?y ns:law.judicial_tenure.to_date ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07sz1')\na.add_fact('m.07sz1', 'law.court.judges', 'x1')\na.add_time_constrain('x1', 'law.judicial_tenure.from_date', 'law.judicial_tenure.to_date', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'law.judicial_tenure.judge', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1956",
        "question": "which country in europe has the largest land area",
        "answer": [
            "m.06bnz"
        ],
        "different_answer": [
            [
                "m.06bnz"
            ]
        ],
        "entity_linking": {
            "Europe": "m.02j9z"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n                ns:m.02j9z ns:base.locations.continents.countries_within ?x .\n                ?x ns:location.location.area ?y .\n}\nORDER BY DESC(xsd:float(?y))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1957",
        "question": "when did kaley cuoco join charmed",
        "answer": [
            "2005-09-25-08:00"
        ],
        "different_answer": [
            [
                "2005-09-25-08:00"
            ]
        ],
        "entity_linking": {
            "Kaley Cuoco": "m.03kxp7",
            "Charmed": "m.01f3p_"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03kxp7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03kxp7 ns:tv.tv_actor.starring_roles ?y .\n?y ns:tv.regular_tv_appearance.from ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01f3p_ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01f3p_')\na.add_filter('x0', '!=', 'm.03kxp7')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.01f3p_')\na.add_fact('m.03kxp7', 'tv.tv_actor.starring_roles', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.from', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1958",
        "question": "where is chris rock from",
        "answer": [
            "m.013l1h"
        ],
        "different_answer": [
            [
                "m.013l1h"
            ]
        ],
        "entity_linking": {
            "Chris Rock": "m.016_mj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.016_mj)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.016_mj ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.016_mj')\na.add_fact('m.016_mj', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1960",
        "question": "when was the last time the toronto maple leafs win the stanley cup",
        "answer": [
            "m.03by199"
        ],
        "different_answer": [
            [
                "m.03by199"
            ]
        ],
        "entity_linking": {
            "Toronto Maple Leafs": "m.0j6tr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0j6tr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0j6tr ns:sports.sports_team.championships ?x .\n?x ns:time.event.start_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0j6tr')\na.add_fact('m.0j6tr', 'sports.sports_team.championships', 'x0')\na.add_fact('x0', 'time.event.start_date', 'x1')\na.add_max('x1')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1961",
        "question": "what kind of language do egyptian speak",
        "answer": [
            "m.025rvv7"
        ],
        "different_answer": [
            [
                "m.025rvv7"
            ]
        ],
        "entity_linking": {
            "Egypt": "m.02k54"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02k54)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02k54 ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02k54')\na.add_fact('m.02k54', 'location.country.official_language', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1962",
        "question": "what language do brazilians use",
        "answer": [
            "m.05zjd",
            "m.02bjrlw",
            "m.02zj58"
        ],
        "different_answer": [
            [
                "m.05zjd",
                "m.02bjrlw",
                "m.02zj58"
            ],
            [
                "m.05zjd"
            ]
        ],
        "entity_linking": {
            "Brazil": "m.015fr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.015fr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.015fr ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.015fr')\na.add_fact('m.015fr', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1963",
        "question": "what position did vince lombardi play",
        "answer": [
            "m.06v_1nj"
        ],
        "different_answer": [
            [
                "m.06v_1nj"
            ]
        ],
        "entity_linking": {
            "Vince Lombardi": "m.07_xf"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07_xf)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07_xf ns:american_football.football_player.position_s ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07_xf')\na.add_fact('m.07_xf', 'american_football.football_player.position_s', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1964",
        "question": "who played stanley kowalski in a streetcar named desire movie",
        "answer": [
            "m.04__f"
        ],
        "different_answer": [
            [
                "m.04__f"
            ],
            [
                "m.04__f"
            ]
        ],
        "entity_linking": {
            "A Streetcar Named Desire": "m.097zcz",
            "Stanley Kowalski": "m.03bhwh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.097zcz)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.097zcz ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.03bhwh .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03bhwh')\na.add_filter('x0', '!=', 'm.097zcz')\na.add_fact('x1', 'film.performance.character', 'm.03bhwh')\na.add_fact('m.097zcz', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1965",
        "question": "who did the voice for lola bunny",
        "answer": [
            "m.0fm5ld",
            "m.08vr94",
            "m.024my5"
        ],
        "different_answer": [
            [
                "m.0fm5ld",
                "m.08vr94",
                "m.024my5"
            ]
        ],
        "entity_linking": {
            "Lola Bunny": "m.0534r8"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\t{ \n\t  # Film\n\t  ns:m.0534r8 ns:film.film_character.portrayed_in_films ?y .\n\t  ?y ns:film.performance.actor ?x .\n\t  ?y ns:film.performance.special_performance_type ns:m.02nsjvf . #voice\n\t}\n\tUNION\n\t{\n\t  # TV\n\t  ns:m.0534r8 ns:tv.tv_character.appeared_in_tv_program ?y .\n\t  ?y ns:tv.regular_tv_appearance.actor ?x .\n\t}\n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1966",
        "question": "what book did charles darwin wrote in 1859",
        "answer": [
            "m.067q6ks",
            "m.0hhv3fy",
            "m.04t39qh",
            "m.06tz8bh",
            "m.07kbf6f",
            "m.0f0c7c3",
            "m.06mx6qb",
            "m.0f0gnbh",
            "m.0682dh_",
            "m.06fkngp",
            "m.06l7w7c",
            "m.0c1t1lr",
            "m.0bhjdmn",
            "m.0c1t1n1",
            "m.02pzzmw",
            "m.06n65g8",
            "m.0698p22",
            "m.05f3_5v",
            "m.06bk806",
            "m.06ggf11",
            "m.06rg6nf",
            "m.0c1t1mh",
            "m.069gx8t",
            "m.06fdzsg",
            "m.06m68vy",
            "m.06gx9nb",
            "m.06qs0k_",
            "m.06n8gzr",
            "m.06jw00r",
            "m.04t39rr",
            "m.069j1zn",
            "m.06syjt2",
            "m.06dp_0n",
            "m.0bhjdm2",
            "m.05bpx28",
            "m.06fz4ys",
            "m.0bhjdmk",
            "m.06n8zlx",
            "m.06n4jwv",
            "m.06cbh6d",
            "m.06f6v8g",
            "m.0f0hdk1",
            "m.06ndlh7",
            "m.05f3187",
            "m.06mmypb",
            "m.06r9mwf",
            "m.06cvnt5",
            "m.0f0c2xv",
            "m.068kgmb",
            "m.06qr9xq",
            "m.06c6q4x",
            "m.05nhwt",
            "m.06jc2s7",
            "m.0f0dvyt",
            "m.06nhv9s",
            "m.05kdgx0",
            "m.0c1t1m3",
            "m.06jj8zx",
            "m.0kfsvj7",
            "m.07kd9wf",
            "m.0f0g5py",
            "m.04t39r_",
            "m.06msmgd",
            "m.0f0cnxy",
            "m.0f0fhpx",
            "m.06g77fm",
            "m.0c1t1ms",
            "m.067jgzq",
            "m.06k4hmf",
            "m.02l2z6",
            "m.068zv2w",
            "m.06hggft",
            "m.0c1t1m6",
            "m.06tjzfj",
            "m.06hv624",
            "m.0c1t1nb",
            "m.0f0jl1d",
            "m.06qxf6m",
            "m.01qq45",
            "m.0f0ccfx",
            "m.03d86kx",
            "m.06r08pz",
            "m.0bqqyp6",
            "m.06hz4px",
            "m.06fp6__",
            "m.0f0c_dr",
            "m.010rjsvs",
            "m.06hks6x",
            "m.0c1t1ly",
            "m.0f0fsbb",
            "m.06jygl6",
            "m.0bhjdm8",
            "m.06j8lmr",
            "m.0bqqynz",
            "m.06sh5th",
            "m.06c9lwy",
            "m.0cc54s",
            "m.06dv5j2",
            "m.04t39s7",
            "m.06nxw56",
            "m.06q9dnn",
            "m.06cjxqf",
            "m.0d_3d1b",
            "m.05kdgws",
            "m.010sfr1g",
            "m.06jcl9b",
            "m.06j18wj",
            "m.06pw5vt",
            "m.069mjtn",
            "m.06mwj8z",
            "m.06h96f4",
            "m.06dhg29",
            "m.06hxnc2",
            "m.06dgzf9",
            "m.04t39p_",
            "m.0f0dh7c",
            "m.0d_472q",
            "m.0f0jl1z",
            "m.06dhg2k",
            "m.0c1t1ml",
            "m.06cnkd2",
            "m.05pskf",
            "m.06kmynd",
            "m.0685fg8",
            "m.06c2mtr",
            "m.0c1t1mz",
            "m.06gxb0v",
            "m.06lcpyv",
            "m.06km_gd",
            "m.06mc3j5",
            "m.06p4t1s",
            "m.06h4s28",
            "m.05bktj1",
            "m.04t39qr",
            "m.06czk9t",
            "m.06jbq8m",
            "m.0f0jl1p",
            "m.0f0bz0f",
            "m.06k7t44",
            "m.06dplrp",
            "m.06by4cp",
            "m.06px17_"
        ],
        "different_answer": [
            [
                "m.067q6ks",
                "m.0hhv3fy",
                "m.04t39qh",
                "m.06tz8bh",
                "m.07kbf6f",
                "m.0f0c7c3",
                "m.06mx6qb",
                "m.0f0gnbh",
                "m.0682dh_",
                "m.06fkngp",
                "m.06l7w7c",
                "m.0c1t1lr",
                "m.0bhjdmn",
                "m.0c1t1n1",
                "m.02pzzmw",
                "m.06n65g8",
                "m.0698p22",
                "m.05f3_5v",
                "m.06bk806",
                "m.06ggf11",
                "m.06rg6nf",
                "m.0c1t1mh",
                "m.069gx8t",
                "m.06fdzsg",
                "m.06m68vy",
                "m.06gx9nb",
                "m.06qs0k_",
                "m.06n8gzr",
                "m.06jw00r",
                "m.04t39rr",
                "m.069j1zn",
                "m.06syjt2",
                "m.06dp_0n",
                "m.0bhjdm2",
                "m.05bpx28",
                "m.06fz4ys",
                "m.0bhjdmk",
                "m.06n8zlx",
                "m.06n4jwv",
                "m.06cbh6d",
                "m.06f6v8g",
                "m.0f0hdk1",
                "m.06ndlh7",
                "m.05f3187",
                "m.06mmypb",
                "m.06r9mwf",
                "m.06cvnt5",
                "m.0f0c2xv",
                "m.068kgmb",
                "m.06qr9xq",
                "m.06c6q4x",
                "m.05nhwt",
                "m.06jc2s7",
                "m.0f0dvyt",
                "m.06nhv9s",
                "m.05kdgx0",
                "m.0c1t1m3",
                "m.06jj8zx",
                "m.0kfsvj7",
                "m.07kd9wf",
                "m.0f0g5py",
                "m.04t39r_",
                "m.06msmgd",
                "m.0f0cnxy",
                "m.0f0fhpx",
                "m.06g77fm",
                "m.0c1t1ms",
                "m.067jgzq",
                "m.06k4hmf",
                "m.02l2z6",
                "m.068zv2w",
                "m.06hggft",
                "m.0c1t1m6",
                "m.06tjzfj",
                "m.06hv624",
                "m.0c1t1nb",
                "m.0f0jl1d",
                "m.06qxf6m",
                "m.01qq45",
                "m.0f0ccfx",
                "m.03d86kx",
                "m.06r08pz",
                "m.0bqqyp6",
                "m.06hz4px",
                "m.06fp6__",
                "m.0f0c_dr",
                "m.010rjsvs",
                "m.06hks6x",
                "m.0c1t1ly",
                "m.0f0fsbb",
                "m.06jygl6",
                "m.0bhjdm8",
                "m.06j8lmr",
                "m.0bqqynz",
                "m.06sh5th",
                "m.06c9lwy",
                "m.0cc54s",
                "m.06dv5j2",
                "m.04t39s7",
                "m.06nxw56",
                "m.06q9dnn",
                "m.06cjxqf",
                "m.0d_3d1b",
                "m.05kdgws",
                "m.010sfr1g",
                "m.06jcl9b",
                "m.06j18wj",
                "m.06pw5vt",
                "m.069mjtn",
                "m.06mwj8z",
                "m.06h96f4",
                "m.06dhg29",
                "m.06hxnc2",
                "m.06dgzf9",
                "m.04t39p_",
                "m.0f0dh7c",
                "m.0d_472q",
                "m.0f0jl1z",
                "m.06dhg2k",
                "m.0c1t1ml",
                "m.06cnkd2",
                "m.05pskf",
                "m.06kmynd",
                "m.0685fg8",
                "m.06c2mtr",
                "m.0c1t1mz",
                "m.06gxb0v",
                "m.06lcpyv",
                "m.06km_gd",
                "m.06mc3j5",
                "m.06p4t1s",
                "m.06h4s28",
                "m.05bktj1",
                "m.04t39qr",
                "m.06czk9t",
                "m.06jbq8m",
                "m.0f0jl1p",
                "m.0f0bz0f",
                "m.06k7t44",
                "m.06dplrp",
                "m.06by4cp",
                "m.06px17_"
            ]
        ],
        "entity_linking": {
            "Charles Darwin": "m.01lwx",
            "Book": "m.01xryvm",
            "1859-01-01": "\"1859-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "1859-12-31": "\"1859-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01lwx)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01lwx ns:book.author.works_written ?x .\n?x ns:common.topic.notable_types ns:m.01xryvm .\nFILTER(NOT EXISTS {?x ns:book.written_work.date_written ?sk0} || \nEXISTS {?x ns:book.written_work.date_written ?sk1 . \nFILTER(xsd:datetime(?sk1) >= \"1859-01-01\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?x ns:book.written_work.date_written ?sk2} || \nEXISTS {?x ns:book.written_work.date_written ?sk3 . \nFILTER(xsd:datetime(?sk3) <= \"1859-12-31\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01xryvm')\na.add_filter('x0', '!=', 'm.01lwx')\na.add_fact('x0', 'common.topic.notable_types', 'm.01xryvm')\na.add_fact('m.01lwx', 'book.author.works_written', 'x0')\na.add_time_constrain('x0', 'book.written_work.date_written', 'book.written_work.date_written', '\"1859-12-31\"^^xsd:dateTime', '\"1859-01-01\"^^xsd:dateTime')\n"
    },
    {
        "qid": "WebQTest-1967",
        "question": "what language do serbs speak",
        "answer": [
            "m.0k0sb"
        ],
        "different_answer": [
            [
                "m.0k0sb"
            ],
            [
                "m.0k0sb"
            ]
        ],
        "entity_linking": {
            "Serbia": "m.077qn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.077qn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.077qn ns:location.country.official_language ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0g6g7')\na.add_fact('m.0g6g7', 'people.ethnicity.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1968",
        "question": "what was the cause of death for laci peterson",
        "answer": [
            "m.051_y"
        ],
        "different_answer": [
            [
                "m.051_y"
            ]
        ],
        "entity_linking": {
            "Laci Peterson": "m.01f6vb"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01f6vb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01f6vb ns:people.deceased_person.cause_of_death ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01f6vb')\na.add_fact('m.01f6vb', 'people.deceased_person.cause_of_death', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1969",
        "question": "what team is kris humphries play for",
        "answer": [
            "m.0jm5b"
        ],
        "different_answer": [
            [
                "m.0jm5b"
            ]
        ],
        "entity_linking": {
            "Kris Humphries": "m.0730b4",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0730b4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0730b4 ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0730b4')\na.add_fact('m.0730b4', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1971",
        "question": "what movies gerard butler has been in",
        "answer": [
            "m.0124x_l1",
            "m.05p2gz3",
            "m.04yb52q",
            "m.01sxdy",
            "m.0hz7mx7",
            "m.0w0l3pk",
            "m.02pjkz7",
            "m.02vvwqg",
            "m.04j04w7",
            "m.0m_cnk_",
            "m.01242_",
            "m.0bh8x1y",
            "m.0292qb",
            "m.0c1z3g",
            "m.04jdgq",
            "m.010vzxsl",
            "m.0dlk_qn",
            "m.09210y",
            "m.0hnd78z",
            "m.0v3yjg1",
            "m.047qxs",
            "m.0crvp0c",
            "m.03c6w7q",
            "m.05h4_qt",
            "m.0n43ym4",
            "m.05lm43",
            "m.04f10b5",
            "m.02r3rry",
            "m.0hhggp1",
            "m.0c1p6zg",
            "m.04f52jw",
            "m.047rkcm",
            "m.0gmglbv",
            "m.01v1ln",
            "m.02qk3fk",
            "m.07f_t4",
            "m.0gwp_k3",
            "m.0bwhkkw",
            "m.015yl2",
            "m.05dj6d",
            "m.03g_sj5",
            "m.0f0w6n",
            "m.06w9zfg",
            "m.0crz6lg",
            "m.02p1fl7",
            "m.0w17vsj"
        ],
        "different_answer": [
            [
                "m.0124x_l1",
                "m.05p2gz3",
                "m.04yb52q",
                "m.01sxdy",
                "m.0hz7mx7",
                "m.0w0l3pk",
                "m.02pjkz7",
                "m.02vvwqg",
                "m.04j04w7",
                "m.0m_cnk_",
                "m.01242_",
                "m.0bh8x1y",
                "m.0292qb",
                "m.0c1z3g",
                "m.04jdgq",
                "m.010vzxsl",
                "m.0dlk_qn",
                "m.09210y",
                "m.0hnd78z",
                "m.0v3yjg1",
                "m.047qxs",
                "m.0crvp0c",
                "m.03c6w7q",
                "m.05h4_qt",
                "m.0n43ym4",
                "m.05lm43",
                "m.04f10b5",
                "m.02r3rry",
                "m.0hhggp1",
                "m.0c1p6zg",
                "m.04f52jw",
                "m.047rkcm",
                "m.0gmglbv",
                "m.01v1ln",
                "m.02qk3fk",
                "m.07f_t4",
                "m.0gwp_k3",
                "m.0bwhkkw",
                "m.015yl2",
                "m.05dj6d",
                "m.03g_sj5",
                "m.0f0w6n",
                "m.06w9zfg",
                "m.0crz6lg",
                "m.02p1fl7",
                "m.0w17vsj"
            ]
        ],
        "entity_linking": {
            "Gerard Butler": "m.038rzr"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.038rzr)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.038rzr ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.038rzr')\na.add_fact('m.038rzr', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1972",
        "question": "where did john franklin live",
        "answer": [
            "m.0s4jk"
        ],
        "different_answer": [
            [
                "m.0s4jk"
            ]
        ],
        "entity_linking": {
            "John Franklin": "m.06hw0m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06hw0m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06hw0m ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06hw0m')\na.add_fact('m.06hw0m', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1975",
        "question": "what was the last movie sean connery was in",
        "answer": [
            "m.0crscdw"
        ],
        "different_answer": [
            [
                "m.0crscdw"
            ]
        ],
        "entity_linking": {
            "Sean Connery": "m.06mr6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06mr6)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06mr6 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n?x ns:film.film.initial_release_date ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.06mr6')\na.add_fact('m.06mr6', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_fact('x0', 'film.film.initial_release_date', 'x2')\na.add_max('x2')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1976",
        "question": "what team did drogba play for",
        "answer": [
            "m.040pyq",
            "m.05nwfr",
            "m.0690ct",
            "m.02gys2",
            "m.04kd5d",
            "m.023fb",
            "m.06zpgb2"
        ],
        "different_answer": [
            [
                "m.040pyq",
                "m.05nwfr",
                "m.0690ct",
                "m.02gys2",
                "m.04kd5d",
                "m.023fb",
                "m.06zpgb2"
            ]
        ],
        "entity_linking": {
            "Didier Drogba": "m.03_y2f"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_y2f)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_y2f ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_y2f')\na.add_fact('m.03_y2f', 'sports.pro_athlete.teams', 'x1')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1977",
        "question": "where did crabtree go to college",
        "answer": [
            "m.01n_g9"
        ],
        "different_answer": [
            [
                "m.01n_g9"
            ]
        ],
        "entity_linking": {
            "Michael Crabtree": "m.03ccsym",
            "College/University": "m.01y2hnl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03ccsym)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03ccsym ns:people.person.education ?y .\n?y ns:education.education.institution ?x .\n?x ns:common.topic.notable_types ns:m.01y2hnl .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01y2hnl')\na.add_filter('x0', '!=', 'm.03ccsym')\na.add_fact('x0', 'common.topic.notable_types', 'm.01y2hnl')\na.add_fact('m.03ccsym', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.institution', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1978",
        "question": "where does freddie ljungberg come from",
        "answer": [
            "m.05p2z9b"
        ],
        "different_answer": [
            [
                "m.05p2z9b"
            ]
        ],
        "entity_linking": {
            "Fredrik Ljungberg": "m.02g16c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02g16c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02g16c ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02g16c')\na.add_fact('m.02g16c', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1979",
        "question": "who is number 22 on miami dolphins",
        "answer": [
            "m.0q3yxb2"
        ],
        "different_answer": [
            [
                "m.0q3yxb2"
            ]
        ],
        "entity_linking": {
            "Miami Dolphins": "m.04vn5",
            "\"22\"": "\"22\"@en",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04vn5)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04vn5 ns:sports.sports_team.roster ?y .\n?y ns:sports.sports_team_roster.player ?x .\n?y ns:sports.sports_team_roster.number ?sk0 .\nFILTER (str(?sk0) = \"22\")\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk1} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk2 . \nFILTER(xsd:datetime(?sk2) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk3} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk4 . \nFILTER(xsd:datetime(?sk4) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04vn5')\na.add_fact('x1', 'sports.sports_team_roster.number', '\"22\"^^xsd:string')\na.add_fact('m.04vn5', 'sports.sports_team.roster', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.player', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1981",
        "question": "what state did john adams live in",
        "answer": [
            "m.05k7sb"
        ],
        "different_answer": [
            [
                "m.05k7sb"
            ]
        ],
        "entity_linking": {
            "John Adams": "m.03_js",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_js)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_js ns:people.person.places_lived ?y .\n?y ns:people.place_lived.location ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.03_js')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.03_js', 'people.person.places_lived', 'x1')\na.add_fact('x1', 'people.place_lived.location', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1982",
        "question": "what type of music did vivaldi compose",
        "answer": [
            "m.01fsz",
            "m.0ggq0m"
        ],
        "different_answer": [
            [
                "m.01fsz",
                "m.0ggq0m"
            ]
        ],
        "entity_linking": {
            "Antonio Vivaldi": "m.0pth"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0pth)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0pth ns:music.artist.genre ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0pth')\na.add_fact('m.0pth', 'music.artist.genre', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1985",
        "question": "what team does mike fisher play for",
        "answer": [
            "m.0jnr_"
        ],
        "different_answer": [
            [
                "m.0jnr_"
            ]
        ],
        "entity_linking": {
            "Mike Fisher": "m.07d7xv",
            "2015-08-10": "\"2015-08-10\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07d7xv)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07d7xv ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.from ?sk0} || \nEXISTS {?y ns:sports.sports_team_roster.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2015-08-10\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:sports.sports_team_roster.to ?sk2} || \nEXISTS {?y ns:sports.sports_team_roster.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2015-08-10\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07d7xv')\na.add_fact('m.07d7xv', 'sports.pro_athlete.teams', 'x1')\na.add_time_constrain('x1', 'sports.sports_team_roster.from', 'sports.sports_team_roster.to', '\"2015-08-10\"^^xsd:dateTime', '\"2015-08-10\"^^xsd:dateTime')\na.add_fact('x1', 'sports.sports_team_roster.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1986",
        "question": "what films has daniel craig been in",
        "answer": [
            "m.048qfd",
            "m.072x7s",
            "m.0cxw2d",
            "m.0nfp54s",
            "m.05ch98",
            "m.08gsvw",
            "m.011yr9",
            "m.0dgq_kn",
            "m.09v84yn",
            "m.039q43",
            "m.02j48l",
            "m.04jm4c9",
            "m.0gx91ff",
            "m.04j0v7m",
            "m.0w16xc1",
            "m.0g0wx7",
            "m.0413tm",
            "m.03r0g9",
            "m.0cn_srj",
            "m.0d6_s",
            "m.01q41m",
            "m.0c0pwb",
            "m.04w7rn",
            "m.0g4p4s1",
            "m.026v977",
            "m.04j07xw",
            "m.03y4nzy",
            "m.0cj0gy4",
            "m.026hh0m",
            "m.07b_j6",
            "m.0464d7",
            "m.02vxq9m",
            "m.01y9r2",
            "m.0p3rfy6",
            "m.02rqx5y",
            "m.0w1786g",
            "m.07chxjc",
            "m.02rb84n",
            "m.05nyv3",
            "m.0cc5mcj",
            "m.0847m1",
            "m.07s6472",
            "m.05p7w6k",
            "m.03m5vzd"
        ],
        "different_answer": [
            [
                "m.048qfd",
                "m.072x7s",
                "m.0cxw2d",
                "m.0nfp54s",
                "m.05ch98",
                "m.08gsvw",
                "m.011yr9",
                "m.0dgq_kn",
                "m.09v84yn",
                "m.039q43",
                "m.02j48l",
                "m.04jm4c9",
                "m.0gx91ff",
                "m.04j0v7m",
                "m.0w16xc1",
                "m.0g0wx7",
                "m.0413tm",
                "m.03r0g9",
                "m.0cn_srj",
                "m.0d6_s",
                "m.01q41m",
                "m.0c0pwb",
                "m.04w7rn",
                "m.0g4p4s1",
                "m.026v977",
                "m.04j07xw",
                "m.03y4nzy",
                "m.0cj0gy4",
                "m.026hh0m",
                "m.07b_j6",
                "m.0464d7",
                "m.02vxq9m",
                "m.01y9r2",
                "m.0p3rfy6",
                "m.02rqx5y",
                "m.0w1786g",
                "m.07chxjc",
                "m.02rb84n",
                "m.05nyv3",
                "m.0cc5mcj",
                "m.0847m1",
                "m.07s6472",
                "m.05p7w6k",
                "m.03m5vzd"
            ]
        ],
        "entity_linking": {
            "Daniel Craig": "m.04shbh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04shbh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04shbh ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04shbh')\na.add_fact('m.04shbh', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1987",
        "question": "what materials did eduardo paolozzi use in his work",
        "answer": [
            "m.01brf"
        ],
        "different_answer": [
            [
                "m.01brf"
            ]
        ],
        "entity_linking": {
            "Eduardo Paolozzi": "m.03fncl"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\n\tns:m.03fncl ns:visual_art.visual_artist.artworks ?y .\n\t?y ns:visual_art.artwork.media ?x . \n}",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-1988",
        "question": "what did joe biden study in college",
        "answer": [
            "m.062z7",
            "m.03g3w"
        ],
        "different_answer": [
            [
                "m.062z7",
                "m.03g3w"
            ]
        ],
        "entity_linking": {
            "Joe Biden": "m.012gx2"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.012gx2)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.012gx2 ns:people.person.education ?y .\n?y ns:education.education.major_field_of_study ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.012gx2')\na.add_fact('m.012gx2', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.major_field_of_study', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1990",
        "question": "who plays timon 's voice in the lion king",
        "answer": [
            "m.01nxzv"
        ],
        "different_answer": [
            [
                "m.01nxzv"
            ]
        ],
        "entity_linking": {
            "The Lion King": "m.0m63c",
            "Timon": "m.0c31r0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0m63c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0m63c ns:film.film.starring ?y .\n?y ns:film.performance.actor ?x .\n?y ns:film.performance.character ns:m.0c31r0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c31r0')\na.add_filter('x0', '!=', 'm.0m63c')\na.add_fact('x1', 'film.performance.character', 'm.0c31r0')\na.add_fact('m.0m63c', 'film.film.starring', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1991",
        "question": "what part of the country is ohio in",
        "answer": [
            "m.03pzys",
            "m.0q76g"
        ],
        "different_answer": [
            [
                "m.03pzys",
                "m.0q76g"
            ]
        ],
        "entity_linking": {
            "Ohio": "m.05kkh",
            "Region": "m.01nt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05kkh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05kkh ns:location.location.containedby ?x .\n?x ns:common.topic.notable_types ns:m.01nt .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01nt')\na.add_filter('x0', '!=', 'm.05kkh')\na.add_fact('x0', 'common.topic.notable_types', 'm.01nt')\na.add_fact('m.05kkh', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1992",
        "question": "which island is kailua on",
        "answer": [
            "m.0dfcn"
        ],
        "different_answer": [
            [
                "m.0dfcn"
            ]
        ],
        "entity_linking": {
            "Kailua": "m.0r_x0",
            "Hawaiian Islands": "m.014wxc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0r_x0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0r_x0 ns:location.location.containedby ?x .\n?x ns:geography.island.island_group ns:m.014wxc .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014wxc')\na.add_filter('x0', '!=', 'm.0r_x0')\na.add_fact('x0', 'geography.island.island_group', 'm.014wxc')\na.add_fact('m.0r_x0', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1993",
        "question": "what language do speak in argentina",
        "answer": [
            "m.02w_hsv",
            "m.02bjrlw",
            "m.03d9kg",
            "m.0880p",
            "m.06nm1"
        ],
        "different_answer": [
            [
                "m.02w_hsv",
                "m.02bjrlw",
                "m.03d9kg",
                "m.0880p",
                "m.06nm1"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1994",
        "question": "what did whoopi goldberg won a grammy for",
        "answer": [
            "m.019bnn"
        ],
        "different_answer": [
            [
                "m.019bnn"
            ]
        ],
        "entity_linking": {
            "Whoopi Goldberg": "m.0fb1q",
            "28th Annual Grammy Awards": "m.019qq6"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0fb1q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0fb1q ns:award.award_winner.awards_won ?y .\n?y ns:award.award_honor.award ?x .\n?y ns:award.award_honor.ceremony ns:m.019qq6 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.019qq6')\na.add_filter('x0', '!=', 'm.0fb1q')\na.add_fact('x1', 'award.award_honor.ceremony', 'm.019qq6')\na.add_fact('m.0fb1q', 'award.award_winner.awards_won', 'x1')\na.add_fact('x1', 'award.award_honor.award', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1996",
        "question": "who played maggie in himym",
        "answer": [
            "m.0sw62"
        ],
        "different_answer": [
            [
                "m.0sw62"
            ]
        ],
        "entity_linking": {
            "Maggie Simpson": "m.0h67q"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0h67q)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0h67q ns:film.film_character.portrayed_in_films ?y .\n?y ns:film.performance.actor ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0h67q')\na.add_fact('m.0h67q', 'film.film_character.portrayed_in_films', 'x1')\na.add_fact('x1', 'film.performance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1997",
        "question": "who does owen schmitt play for",
        "answer": [
            "m.070xg"
        ],
        "different_answer": [
            [
                "m.070xg"
            ],
            [
                "m.070xg"
            ],
            [
                "m.070xg"
            ]
        ],
        "entity_linking": {
            "Owen Schmitt": "m.027rvyc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.027rvyc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.027rvyc ns:american_football.football_player.games ?y .\n?y ns:american_football.player_game_statistics.team ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.027rvyc')\na.add_fact('m.027rvyc', 'american_football.football_player.games', 'x1')\na.add_fact('x1', 'american_football.player_game_statistics.team', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1998",
        "question": "what party was thomas jefferson affiliated with",
        "answer": [
            "m.07wf9"
        ],
        "different_answer": [
            [
                "m.07wf9"
            ]
        ],
        "entity_linking": {
            "Thomas Jefferson": "m.07cbs"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.07cbs)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.07cbs ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.07cbs')\na.add_fact('m.07cbs', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-1999",
        "question": "what religions are popular in france",
        "answer": [
            "m.0c8wxp"
        ],
        "different_answer": [
            [
                "m.0c8wxp"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:location.statistical_region.religions ?y .\n?y ns:location.religion_percentage.religion ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('m.0f8l9c', 'location.statistical_region.religions', 'x1')\na.add_fact('x1', 'location.religion_percentage.religion', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2000",
        "question": "who played berger in sex and the city",
        "answer": [
            "m.02bpxg"
        ],
        "different_answer": [
            [
                "m.02bpxg"
            ]
        ],
        "entity_linking": {
            "Sex and the City": "m.0l76z",
            "Jack Berger": "m.0c7lfjk"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0l76z)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0l76z ns:tv.tv_program.regular_cast ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.character ns:m.0c7lfjk .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0c7lfjk')\na.add_filter('x0', '!=', 'm.0l76z')\na.add_fact('x1', 'tv.regular_tv_appearance.character', 'm.0c7lfjk')\na.add_fact('m.0l76z', 'tv.tv_program.regular_cast', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2001",
        "question": "who won the 2000 fa cup final",
        "answer": [
            "m.023fb"
        ],
        "different_answer": [
            [
                "m.023fb"
            ]
        ],
        "entity_linking": {
            "FA Cup": "m.02_p0",
            "1999\u20132000 FA Cup": "m.03wcq72"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02_p0)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02_p0 ns:sports.sports_award_type.winners ?y .\n?y ns:sports.sports_award.award_winner ?x .\n?y ns:sports.sports_award.season ns:m.03wcq72 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03wcq72')\na.add_filter('x0', '!=', 'm.02_p0')\na.add_fact('x1', 'sports.sports_award.season', 'm.03wcq72')\na.add_fact('m.02_p0', 'sports.sports_award_type.winners', 'x1')\na.add_fact('x1', 'sports.sports_award.award_winner', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2002",
        "question": "what are the names of michael jackson 's kids",
        "answer": [
            "m.065qbyj",
            "m.0598rmb",
            "m.0598rm4"
        ],
        "different_answer": [
            [
                "m.065qbyj",
                "m.0598rmb",
                "m.0598rm4"
            ]
        ],
        "entity_linking": {
            "Michael Jackson": "m.09889g"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.09889g)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.09889g ns:people.person.children ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.09889g')\na.add_fact('m.09889g', 'people.person.children', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2003",
        "question": "what movies have robert pattinson in them",
        "answer": [
            "m.0crwqwj",
            "m.0ngxkxx",
            "m.075wx89",
            "m.0k24hpb",
            "m.04qk12",
            "m.012sdm5f",
            "m.06w67tn",
            "m.031hcx",
            "m.065_t2_",
            "m.04m_qkz",
            "m.075wx7_",
            "m.0ngns90",
            "m.0fsmw2",
            "m.0c1sgd3",
            "m.03nm_fh",
            "m.0gx3vhy",
            "m.031786",
            "m.047fhg8",
            "m.0gtvrv3",
            "m.0g57n3s",
            "m.09v9mks",
            "m.0djz0rc",
            "m.0w1yhhx",
            "m.0_s30t6",
            "m.05pdh86",
            "m.0bpkq4",
            "m.0j310_v"
        ],
        "different_answer": [
            [
                "m.0crwqwj",
                "m.0ngxkxx",
                "m.075wx89",
                "m.0k24hpb",
                "m.04qk12",
                "m.012sdm5f",
                "m.06w67tn",
                "m.031hcx",
                "m.065_t2_",
                "m.04m_qkz",
                "m.075wx7_",
                "m.0ngns90",
                "m.0fsmw2",
                "m.0c1sgd3",
                "m.03nm_fh",
                "m.0gx3vhy",
                "m.031786",
                "m.047fhg8",
                "m.0gtvrv3",
                "m.0g57n3s",
                "m.09v9mks",
                "m.0djz0rc",
                "m.0w1yhhx",
                "m.0_s30t6",
                "m.05pdh86",
                "m.0bpkq4",
                "m.0j310_v"
            ]
        ],
        "entity_linking": {
            "Robert Pattinson": "m.062dn7"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.062dn7)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.062dn7 ns:film.actor.film ?y .\n?y ns:film.performance.film ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.062dn7')\na.add_fact('m.062dn7', 'film.actor.film', 'x1')\na.add_fact('x1', 'film.performance.film', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2004",
        "question": "what the time zone in japan",
        "answer": [
            "m.019rdm"
        ],
        "different_answer": [
            [
                "m.019rdm"
            ]
        ],
        "entity_linking": {
            "Japan": "m.03_3d"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03_3d)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03_3d ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03_3d')\na.add_fact('m.03_3d', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2005",
        "question": "who plays bob kelso in scrubs",
        "answer": [
            "m.07w8hh"
        ],
        "different_answer": [
            [
                "m.07w8hh"
            ]
        ],
        "entity_linking": {
            "Bob Kelso": "m.0ck2ty",
            "Scrubs": "m.01fs__"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ck2ty)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ck2ty ns:tv.tv_character.appeared_in_tv_program ?y .\n?y ns:tv.regular_tv_appearance.actor ?x .\n?y ns:tv.regular_tv_appearance.series ns:m.01fs__ .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01fs__')\na.add_filter('x0', '!=', 'm.0ck2ty')\na.add_fact('x1', 'tv.regular_tv_appearance.series', 'm.01fs__')\na.add_fact('m.0ck2ty', 'tv.tv_character.appeared_in_tv_program', 'x1')\na.add_fact('x1', 'tv.regular_tv_appearance.actor', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2006",
        "question": "what race is vanessa carlton",
        "answer": [
            "m.05t0ydg",
            "m.0g6ff"
        ],
        "different_answer": [
            [
                "m.05t0ydg",
                "m.0g6ff"
            ]
        ],
        "entity_linking": {
            "Vanessa Carlton": "m.02sj66"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.02sj66)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.02sj66 ns:people.person.ethnicity ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.02sj66')\na.add_fact('m.02sj66', 'people.person.ethnicity', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2007",
        "question": "what do people in czech republic speak",
        "answer": [
            "m.0cjk9",
            "m.04306rv",
            "m.0349s",
            "m.02ztjwg",
            "m.05qqm",
            "m.06b_j",
            "m.01bkv",
            "m.013hyy",
            "m.012psb",
            "m.06zvx",
            "m.0k0sv",
            "m.0k0sb",
            "m.01wgr"
        ],
        "different_answer": [
            [
                "m.0cjk9",
                "m.04306rv",
                "m.0349s",
                "m.02ztjwg",
                "m.05qqm",
                "m.06b_j",
                "m.01bkv",
                "m.013hyy",
                "m.012psb",
                "m.06zvx",
                "m.0k0sv",
                "m.0k0sb",
                "m.01wgr"
            ]
        ],
        "entity_linking": {
            "Czech Republic": "m.01mjq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01mjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01mjq ns:location.country.languages_spoken ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01mjq')\na.add_fact('m.01mjq', 'location.country.languages_spoken', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2008",
        "question": "which countries speak arabic language",
        "answer": [
            "m.035hr8",
            "m.047yc",
            "m.0697s",
            "m.04gqr",
            "m.0h3y",
            "m.0h44w",
            "m.04hqz",
            "m.03__y",
            "m.0d060g",
            "m.027jk",
            "m.03shp",
            "m.01z88t",
            "m.0161c",
            "m.0j1z8",
            "m.06vbd",
            "m.02z62v1",
            "m.02k54",
            "m.06tw8",
            "m.0hzlz",
            "m.03spz",
            "m.01znc_",
            "m.01z215",
            "m.0d05q4",
            "m.05l8y",
            "m.04vjh",
            "m.07dzf",
            "m.07fj_",
            "m.04wgh"
        ],
        "different_answer": [
            [
                "m.035hr8",
                "m.047yc",
                "m.0697s",
                "m.04gqr",
                "m.0h3y",
                "m.0h44w",
                "m.04hqz",
                "m.03__y",
                "m.0d060g",
                "m.027jk",
                "m.03shp",
                "m.01z88t",
                "m.0161c",
                "m.0j1z8",
                "m.06vbd",
                "m.02z62v1",
                "m.02k54",
                "m.06tw8",
                "m.0hzlz",
                "m.03spz",
                "m.01znc_",
                "m.01z215",
                "m.0d05q4",
                "m.05l8y",
                "m.04vjh",
                "m.07dzf",
                "m.07fj_",
                "m.04wgh"
            ]
        ],
        "entity_linking": {
            "Arabic Language": "m.0jzc"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jzc)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jzc ns:language.human_language.countries_spoken_in ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jzc')\na.add_fact('m.0jzc', 'language.human_language.countries_spoken_in', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2009",
        "question": "where does tim cook work",
        "answer": [
            "m.0k8z"
        ],
        "different_answer": [
            [
                "m.0k8z"
            ]
        ],
        "entity_linking": {
            "Tim Cook": "m.05r65m"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.05r65m)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.05r65m ns:people.person.employment_history ?y .\n?y ns:business.employment_tenure.company ?x .\n?y ns:business.employment_tenure.from ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.05r65m')\na.add_fact('m.05r65m', 'people.person.employment_history', 'x1')\na.add_fact('x1', 'business.employment_tenure.from', 'x2')\na.add_max('x2')\na.add_fact('x1', 'business.employment_tenure.company', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2010",
        "question": "what degrees does romney have",
        "answer": [
            "m.07s6fsf",
            "m.013zdg",
            "m.014mlp"
        ],
        "different_answer": [
            [
                "m.07s6fsf",
                "m.013zdg",
                "m.014mlp"
            ]
        ],
        "entity_linking": {
            "Mitt Romney": "m.0271_s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0271_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0271_s ns:people.person.education ?y .\n?y ns:education.education.degree ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0271_s')\na.add_fact('m.0271_s', 'people.person.education', 'x1')\na.add_fact('x1', 'education.education.degree', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2011",
        "question": "where is bob marley buried",
        "answer": [
            "m.0ggh7j1"
        ],
        "different_answer": [
            [
                "m.0ggh7j1"
            ]
        ],
        "entity_linking": {
            "Bob Marley": "m.0bkf4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bkf4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bkf4 ns:people.deceased_person.place_of_burial ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bkf4')\na.add_fact('m.0bkf4', 'people.deceased_person.place_of_burial', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2012",
        "question": "what is london uk time zone",
        "answer": [
            "m.03bdv"
        ],
        "different_answer": [
            [
                "m.03bdv"
            ]
        ],
        "entity_linking": {
            "London": "m.04jpl"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04jpl)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04jpl ns:location.location.time_zones ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04jpl')\na.add_fact('m.04jpl', 'location.location.time_zones', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2013",
        "question": "where to stay in chicago tourist",
        "answer": [
            "m.0ldv2s1"
        ],
        "different_answer": [
            [
                "m.0ldv2s1"
            ]
        ],
        "entity_linking": {
            "Chicago": "m.01_d4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01_d4)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01_d4 ns:travel.travel_destination.accommodation ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01_d4')\na.add_fact('m.01_d4', 'travel.travel_destination.accommodation', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2014",
        "question": "what type of breast cancer did sheryl crow have",
        "answer": [
            "m.03z_9l"
        ],
        "different_answer": [
            [
                "m.03z_9l"
            ]
        ],
        "entity_linking": {
            "Sheryl Crow": "m.06rgq",
            "Cancer": "m.0qcr0"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.06rgq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.06rgq ns:medicine.notable_person_with_medical_condition.condition ?x .\n?x ns:medicine.disease.parent_disease ns:m.0qcr0 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0qcr0')\na.add_filter('x0', '!=', 'm.06rgq')\na.add_fact('x0', 'medicine.disease.parent_disease', 'm.0qcr0')\na.add_fact('m.06rgq', 'medicine.notable_person_with_medical_condition.condition', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2015",
        "question": "what type of government does argentina have today",
        "answer": [
            "m.0drnm",
            "m.01d9r3",
            "m.0c9rw5",
            "m.0j729"
        ],
        "different_answer": [
            [
                "m.0drnm",
                "m.01d9r3",
                "m.0c9rw5",
                "m.0j729"
            ]
        ],
        "entity_linking": {
            "Argentina": "m.0jgd"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0jgd)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0jgd ns:location.country.form_of_government ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0jgd')\na.add_fact('m.0jgd', 'location.country.form_of_government', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2016",
        "question": "where does fabio capello come from",
        "answer": [
            "m.0fgn_n"
        ],
        "different_answer": [
            [
                "m.0fgn_n"
            ]
        ],
        "entity_linking": {
            "Fabio Capello": "m.030_wt"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.030_wt)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.030_wt ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.030_wt')\na.add_fact('m.030_wt', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2017",
        "question": "what party was abe lincoln part of",
        "answer": [
            "m.07wdw",
            "m.0g7ly4",
            "m.07wbk",
            "m.0d9fdp"
        ],
        "different_answer": [
            [
                "m.07wdw",
                "m.0g7ly4",
                "m.07wbk",
                "m.0d9fdp"
            ]
        ],
        "entity_linking": {
            "Abraham Lincoln": "m.0gzh"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0gzh)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0gzh ns:government.politician.party ?y .\n?y ns:government.political_party_tenure.party ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0gzh')\na.add_fact('m.0gzh', 'government.politician.party', 'x1')\na.add_fact('x1', 'government.political_party_tenure.party', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2018",
        "question": "what did jack london do for a living",
        "answer": [
            "m.02xhgwq",
            "m.0dxtg",
            "m.0d8qb",
            "m.0f1hr",
            "m.0kyk",
            "m.016wtf"
        ],
        "different_answer": [
            [
                "m.02xhgwq",
                "m.0dxtg",
                "m.0d8qb",
                "m.0f1hr",
                "m.0kyk",
                "m.016wtf"
            ]
        ],
        "entity_linking": {
            "Jack London": "m.0bt23"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0bt23)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0bt23 ns:people.person.profession ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0bt23')\na.add_fact('m.0bt23', 'people.person.profession', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2019",
        "question": "who did morgan freeman marry",
        "answer": [
            "m.0hj6dmn"
        ],
        "different_answer": [
            [
                "m.0hj6dmn"
            ]
        ],
        "entity_linking": {
            "Morgan Freeman": "m.055c8",
            "Marriage": "m.04ztj"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.055c8)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.055c8 ns:people.person.spouse_s ?y .\n?y ns:people.marriage.spouse ?x .\n?y ns:people.marriage.type_of_union ns:m.04ztj .\n?y ns:people.marriage.to ?sk0 .\n}\nORDER BY DESC(xsd:datetime(?sk0))\nLIMIT 1\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04ztj')\na.add_filter('x0', '!=', 'm.055c8')\na.add_fact('x1', 'people.marriage.type_of_union', 'm.04ztj')\na.add_fact('m.055c8', 'people.person.spouse_s', 'x1')\na.add_fact('x1', 'people.marriage.to', 'x2')\na.add_max('x2')\na.add_fact('x1', 'people.marriage.spouse', 'x0')\na.add_filter('x0', '!=', 'x1')\na.add_filter('x0', '!=', 'x2')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2020",
        "question": "what are the mountains in northern italy called",
        "answer": [
            "Apennine Mountains"
        ],
        "different_answer": [
            [
                "Apennine Mountains"
            ]
        ],
        "entity_linking": {
            "Apennine Mountains": "m.01cg88"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.01cg88)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.01cg88 ns:type.object.name ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.01cg88')\na.add_fact('m.01cg88', 'type.object.name', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2021",
        "question": "what influenced john steinbeck to start writing",
        "answer": [
            "m.023jy9",
            "m.07jrh",
            "m.084w8",
            "m.09482"
        ],
        "different_answer": [
            [
                "m.023jy9",
                "m.07jrh",
                "m.084w8",
                "m.09482"
            ]
        ],
        "entity_linking": {
            "John Steinbeck": "m.04107"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.04107)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.04107 ns:influence.influence_node.influenced_by ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.04107')\na.add_fact('m.04107', 'influence.influence_node.influenced_by', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2022",
        "question": "where is dwayne johnson ethnicity",
        "answer": [
            "m.07j80c",
            "m.0x67"
        ],
        "different_answer": [
            [
                "m.07j80c",
                "m.0x67"
            ]
        ],
        "entity_linking": {
            "Dwayne Johnson": "m.014g_s"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.014g_s)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.014g_s ns:people.person.ethnicity ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.014g_s')\na.add_fact('m.014g_s', 'people.person.ethnicity', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2023",
        "question": "where are the nato headquarters located",
        "answer": [
            "m.0177z"
        ],
        "different_answer": [
            [
                "m.0177z"
            ]
        ],
        "entity_linking": {
            "North Atlantic Treaty Organization (NATO)": "m.059dn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.059dn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.059dn ns:organization.organization.headquarters ?y .\n?y ns:location.mailing_address.citytown ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.059dn')\na.add_fact('m.059dn', 'organization.organization.headquarters', 'x1')\na.add_fact('x1', 'location.mailing_address.citytown', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2024",
        "question": "in which state was the battle of antietam fought",
        "answer": [
            "m.04rrd"
        ],
        "different_answer": [
            [
                "m.04rrd"
            ]
        ],
        "entity_linking": {
            "Battle of Antietam": "m.0lkxb",
            "US State": "m.0kpys4"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0lkxb)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0lkxb ns:time.event.locations ?x .\n?x ns:common.topic.notable_types ns:m.0kpys4 .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0kpys4')\na.add_filter('x0', '!=', 'm.0lkxb')\na.add_fact('x0', 'common.topic.notable_types', 'm.0kpys4')\na.add_fact('m.0lkxb', 'time.event.locations', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2025",
        "question": "which ocean does the zambezi river flow into",
        "answer": [
            "m.03rz4"
        ],
        "different_answer": [
            [
                "m.03rz4"
            ]
        ],
        "entity_linking": {
            "Zambezi": "m.0p_70"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0p_70)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0p_70 ns:geography.river.mouth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0p_70')\na.add_fact('m.0p_70', 'geography.river.mouth', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2027",
        "question": "what team did david beckham play for before la galaxy",
        "answer": [
            "m.011v3"
        ],
        "different_answer": [
            [
                "m.011v3"
            ]
        ],
        "entity_linking": {
            "David Beckham": "m.02d9k"
        },
        "sparql_query": "#MANUAL SPARQL\nPREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nfilter(?x != ns:m.01634x)\nns:m.02d9k ns:sports.pro_athlete.teams ?z . #beckham\n?z ns:sports.sports_team_roster.team ns:m.01k2yr . #galaxy\n?z ns:sports.sports_team_roster.from ?from .\nns:m.02d9k ns:sports.pro_athlete.teams ?y .\n?y ns:sports.sports_team_roster.team ?x .\n?y  ns:sports.sports_team_roster.to ?to .\n}\nORDER BY ASC(xsd:datetime(?from))\nLIMIT 1",
        "PyQL": "null"
    },
    {
        "qid": "WebQTest-2028",
        "question": "who is the current leader of france 2010",
        "answer": [
            "m.02ps9k"
        ],
        "different_answer": [
            [
                "m.02ps9k"
            ]
        ],
        "entity_linking": {
            "France": "m.0f8l9c",
            "President": "m.060c4",
            "2010-12-31": "\"2010-12-31\"^^<http://www.w3.org/2001/XMLSchema#dateTime>",
            "2010-01-01": "\"2010-01-01\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0f8l9c)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0f8l9c ns:government.governmental_jurisdiction.governing_officials ?y .\n?y ns:government.government_position_held.office_holder ?x .\n?y ns:government.government_position_held.basic_title ns:m.060c4 .\nFILTER(NOT EXISTS {?y ns:government.government_position_held.from ?sk0} || \nEXISTS {?y ns:government.government_position_held.from ?sk1 . \nFILTER(xsd:datetime(?sk1) <= \"2010-12-31\"^^xsd:dateTime) })\nFILTER(NOT EXISTS {?y ns:government.government_position_held.to ?sk2} || \nEXISTS {?y ns:government.government_position_held.to ?sk3 . \nFILTER(xsd:datetime(?sk3) >= \"2010-01-01\"^^xsd:dateTime) })\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.060c4')\na.add_filter('x0', '!=', 'm.0f8l9c')\na.add_fact('x1', 'government.government_position_held.basic_title', 'm.060c4')\na.add_fact('m.0f8l9c', 'government.governmental_jurisdiction.governing_officials', 'x1')\na.add_time_constrain('x1', 'government.government_position_held.from', 'government.government_position_held.to', '\"2010-12-31\"^^xsd:dateTime', '\"2010-01-01\"^^xsd:dateTime')\na.add_fact('x1', 'government.government_position_held.office_holder', 'x0')\na.add_filter('x0', '!=', 'x1')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2029",
        "question": "where was the palace of knossos located",
        "answer": [
            "m.035qy",
            "m.01xyy"
        ],
        "different_answer": [
            [
                "m.035qy",
                "m.01xyy"
            ]
        ],
        "entity_linking": {
            "Knossos": "m.0ksnn"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0ksnn)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0ksnn ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0ksnn')\na.add_fact('m.0ksnn', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2030",
        "question": "where is roswell area 51",
        "answer": [
            "m.0n6ps",
            "m.059_c"
        ],
        "different_answer": [
            [
                "m.0n6ps",
                "m.059_c"
            ]
        ],
        "entity_linking": {
            "Area 51": "m.0yjq"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.0yjq)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.0yjq ns:location.location.containedby ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.0yjq')\na.add_fact('m.0yjq', 'location.location.containedby', 'x0')\na.set_answer('x0')\n"
    },
    {
        "qid": "WebQTest-2031",
        "question": "when was father chris riley born",
        "answer": [
            "m.0h3p0"
        ],
        "different_answer": [
            [
                "m.0h3p0"
            ]
        ],
        "entity_linking": {
            "Chris Riley": "m.03d8_d9"
        },
        "sparql_query": "PREFIX ns: <http://rdf.freebase.com/ns/>\nSELECT DISTINCT ?x\nWHERE {\nFILTER (?x != ns:m.03d8_d9)\nFILTER (!isLiteral(?x) OR lang(?x) = '' OR langMatches(lang(?x), 'en'))\nns:m.03d8_d9 ns:people.person.place_of_birth ?x .\n}\n",
        "PyQL": "a=PyQL()\na.add_filter('x0', '!=', 'm.03d8_d9')\na.add_fact('m.03d8_d9', 'people.person.place_of_birth', 'x0')\na.set_answer('x0')\n"
    }
]